
import unittest
from manticore.core.cpu.x86 import *
from manticore.core.smtlib import Operators
from manticore.core.memory import *


class CPUTest(unittest.TestCase):
    class ROOperand(object):
        ''' Mocking class for operand ronly '''
        def __init__(self, size, value):
            self.size = size
            self.value = value
        def read(self):
            return self.value & ((1<<self.size)-1)

    class RWOperand(ROOperand):
        ''' Mocking class for operand rw '''
        def write(self, value):
            self.value = value & ((1<<self.size)-1)
            return self.value



    def test_ADD_1(self):
        ''' Instruction ADD_1 
            Groups:  
            0x411be3:	add	edi, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411be3] = '\x83'
        mem[0x00411be4] = '\xc7'
        mem[0x00411be5] = '\x01'
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0x0
        cpu.CF = False
        cpu.RIP = 0x411be3
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x411be3], '\x83')
        self.assertEqual(mem[0x411be4], '\xc7')
        self.assertEqual(mem[0x411be5], '\x01')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDI, 1L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4266982L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_10(self):
        ''' Instruction ADD_10 
            Groups:  
            0x4002ed:	add	rsp, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004002f0] = '\x08'
        mem[0x004002ed] = 'H'
        mem[0x004002ee] = '\x83'
        mem[0x004002ef] = '\xc4'
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RSP = 0x7fffffffdac0
        cpu.CF = False
        cpu.RIP = 0x4002ed
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4002f0], '\x08')
        self.assertEqual(mem[0x4002ed], 'H')
        self.assertEqual(mem[0x4002ee], '\x83')
        self.assertEqual(mem[0x4002ef], '\xc4')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488345800L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195057L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_11(self):
        ''' Instruction ADD_11 
            Groups:  
            0x40ec80:	add	rax, 0x10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040e000, 0x1000, 'rwx')
        mem[0x0040ec80] = 'H'
        mem[0x0040ec81] = '\x83'
        mem[0x0040ec82] = '\xc0'
        mem[0x0040ec83] = '\x10'
        cpu.PF = True
        cpu.RAX = 0x6b9dd8
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x40ec80
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x40ec80], 'H')
        self.assertEqual(mem[0x40ec81], '\x83')
        self.assertEqual(mem[0x40ec82], '\xc0')
        self.assertEqual(mem[0x40ec83], '\x10')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 7052776L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4254852L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_12(self):
        ''' Instruction ADD_12 
            Groups:  
            0x406e80:	add	r12, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e80] = 'I'
        mem[0x00406e81] = '\x83'
        mem[0x00406e82] = '\xc4'
        mem[0x00406e83] = '\x08'
        cpu.PF = True
        cpu.R12 = 0x7fffffffdc48
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x406e80
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x406e80], 'I')
        self.assertEqual(mem[0x406e81], '\x83')
        self.assertEqual(mem[0x406e82], '\xc4')
        self.assertEqual(mem[0x406e83], '\x08')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.R12, 140737488346192L)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222596L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_13(self):
        ''' Instruction ADD_13 
            Groups:  
            0x414a50:	add	rsp, 0x1020
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x00414a50] = 'H'
        mem[0x00414a51] = '\x81'
        mem[0x00414a52] = '\xc4'
        mem[0x00414a53] = ' '
        mem[0x00414a54] = '\x10'
        mem[0x00414a55] = '\x00'
        mem[0x00414a56] = '\x00'
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RSP = 0x7fffffffba30
        cpu.CF = False
        cpu.RIP = 0x414a50
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x414a50], 'H')
        self.assertEqual(mem[0x414a51], '\x81')
        self.assertEqual(mem[0x414a52], '\xc4')
        self.assertEqual(mem[0x414a53], ' ')
        self.assertEqual(mem[0x414a54], '\x10')
        self.assertEqual(mem[0x414a55], '\x00')
        self.assertEqual(mem[0x414a56], '\x00')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488341584L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4278871L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_14(self):
        ''' Instruction ADD_14 
            Groups:  
            0x406e80:	add	r12, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e80] = 'I'
        mem[0x00406e81] = '\x83'
        mem[0x00406e82] = '\xc4'
        mem[0x00406e83] = '\x08'
        cpu.PF = True
        cpu.R12 = 0x7fffffffdd70
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x406e80
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x406e80], 'I')
        self.assertEqual(mem[0x406e81], '\x83')
        self.assertEqual(mem[0x406e82], '\xc4')
        self.assertEqual(mem[0x406e83], '\x08')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.R12, 140737488346488L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222596L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_15(self):
        ''' Instruction ADD_15 
            Groups:  
            0x406e80:	add	r12, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e80] = 'I'
        mem[0x00406e81] = '\x83'
        mem[0x00406e82] = '\xc4'
        mem[0x00406e83] = '\x08'
        cpu.PF = True
        cpu.R12 = 0x7fffffffdd78
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406e80
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406e80], 'I')
        self.assertEqual(mem[0x406e81], '\x83')
        self.assertEqual(mem[0x406e82], '\xc4')
        self.assertEqual(mem[0x406e83], '\x08')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.R12, 140737488346496L)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222596L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_16(self):
        ''' Instruction ADD_16 
            Groups:  
            0x406e80:	add	r12, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e80] = 'I'
        mem[0x00406e81] = '\x83'
        mem[0x00406e82] = '\xc4'
        mem[0x00406e83] = '\x08'
        cpu.PF = False
        cpu.R12 = 0x7fffffffdd90
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x406e80
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x406e80], 'I')
        self.assertEqual(mem[0x406e81], '\x83')
        self.assertEqual(mem[0x406e82], '\xc4')
        self.assertEqual(mem[0x406e83], '\x08')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.R12, 140737488346520L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222596L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_17(self):
        ''' Instruction ADD_17 
            Groups:  
            0x406e80:	add	r12, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e80] = 'I'
        mem[0x00406e81] = '\x83'
        mem[0x00406e82] = '\xc4'
        mem[0x00406e83] = '\x08'
        cpu.PF = True
        cpu.R12 = 0x7fffffffdc58
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x406e80
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x406e80], 'I')
        self.assertEqual(mem[0x406e81], '\x83')
        self.assertEqual(mem[0x406e82], '\xc4')
        self.assertEqual(mem[0x406e83], '\x08')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.R12, 140737488346208L)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222596L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_18(self):
        ''' Instruction ADD_18 
            Groups:  
            0x4322aa:	add	rax, r8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322aa] = 'L'
        mem[0x004322ab] = '\x01'
        mem[0x004322ac] = '\xc0'
        cpu.PF = False
        cpu.RAX = 0x2
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.R8 = 0x0
        cpu.CF = False
        cpu.RIP = 0x4322aa
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4322aa], 'L')
        self.assertEqual(mem[0x4322ab], '\x01')
        self.assertEqual(mem[0x4322ac], '\xc0')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RAX, 2L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.R8, 0L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4399789L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_19(self):
        ''' Instruction ADD_19 
            Groups:  
            0x414708:	add	r12, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x00414708] = 'I'
        mem[0x00414709] = '\x83'
        mem[0x0041470a] = '\xc4'
        mem[0x0041470b] = '\x08'
        cpu.PF = True
        cpu.R12 = 0x7fffffffdca0
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x414708
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x414708], 'I')
        self.assertEqual(mem[0x414709], '\x83')
        self.assertEqual(mem[0x41470a], '\xc4')
        self.assertEqual(mem[0x41470b], '\x08')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.R12, 140737488346280L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4278028L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_2(self):
        ''' Instruction ADD_2 
            Groups:  
            0x400bf0:	add	rdi, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400bf0] = 'H'
        mem[0x00400bf1] = '\x83'
        mem[0x00400bf2] = '\xc7'
        mem[0x00400bf3] = '\x08'
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RDI = 0x7fffffffdcd8
        cpu.CF = False
        cpu.RIP = 0x400bf0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400bf0], 'H')
        self.assertEqual(mem[0x400bf1], '\x83')
        self.assertEqual(mem[0x400bf2], '\xc7')
        self.assertEqual(mem[0x400bf3], '\x08')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RDI, 140737488346336L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4197364L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_20(self):
        ''' Instruction ADD_20 
            Groups:  
            0x414708:	add	r12, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x00414708] = 'I'
        mem[0x00414709] = '\x83'
        mem[0x0041470a] = '\xc4'
        mem[0x0041470b] = '\x08'
        cpu.PF = False
        cpu.R12 = 0x7fffffffdd80
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x414708
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x414708], 'I')
        self.assertEqual(mem[0x414709], '\x83')
        self.assertEqual(mem[0x41470a], '\xc4')
        self.assertEqual(mem[0x41470b], '\x08')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.R12, 140737488346504L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4278028L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_21(self):
        ''' Instruction ADD_21 
            Groups:  
            0x463f80:	add	r14, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00463000, 0x1000, 'rwx')
        mem[0x00463f80] = 'I'
        mem[0x00463f81] = '\x83'
        mem[0x00463f82] = '\xc6'
        mem[0x00463f83] = '\x01'
        cpu.R14 = 0x2
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x463f80
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x463f80], 'I')
        self.assertEqual(mem[0x463f81], '\x83')
        self.assertEqual(mem[0x463f82], '\xc6')
        self.assertEqual(mem[0x463f83], '\x01')
        self.assertEqual(cpu.R14, 3L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4603780L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_3(self):
        ''' Instruction ADD_3 
            Groups:  
            0x407051:	add	rsp, 0x1020
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00407000, 0x1000, 'rwx')
        mem[0x00407051] = 'H'
        mem[0x00407052] = '\x81'
        mem[0x00407053] = '\xc4'
        mem[0x00407054] = ' '
        mem[0x00407055] = '\x10'
        mem[0x00407056] = '\x00'
        mem[0x00407057] = '\x00'
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RSP = 0x7fffffffcab0
        cpu.CF = False
        cpu.RIP = 0x407051
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x407051], 'H')
        self.assertEqual(mem[0x407052], '\x81')
        self.assertEqual(mem[0x407053], '\xc4')
        self.assertEqual(mem[0x407054], ' ')
        self.assertEqual(mem[0x407055], '\x10')
        self.assertEqual(mem[0x407056], '\x00')
        self.assertEqual(mem[0x407057], '\x00')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488345808L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4223064L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_4(self):
        ''' Instruction ADD_4 
            Groups:  
            0x40ec80:	add	rax, 0x10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040e000, 0x1000, 'rwx')
        mem[0x0040ec80] = 'H'
        mem[0x0040ec81] = '\x83'
        mem[0x0040ec82] = '\xc0'
        mem[0x0040ec83] = '\x10'
        cpu.PF = False
        cpu.RAX = 0x6b9a68
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x40ec80
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x40ec80], 'H')
        self.assertEqual(mem[0x40ec81], '\x83')
        self.assertEqual(mem[0x40ec82], '\xc0')
        self.assertEqual(mem[0x40ec83], '\x10')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 7051896L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4254852L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_5(self):
        ''' Instruction ADD_5 
            Groups:  
            0x400fc8:	add	rcx, 0x38
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400fc8] = 'H'
        mem[0x00400fc9] = '\x83'
        mem[0x00400fca] = '\xc1'
        mem[0x00400fcb] = '8'
        cpu.PF = True
        cpu.RCX = 0x400040
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x400fc8
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400fc8], 'H')
        self.assertEqual(mem[0x400fc9], '\x83')
        self.assertEqual(mem[0x400fca], '\xc1')
        self.assertEqual(mem[0x400fcb], '8')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RCX, 4194424L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4198348L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_6(self):
        ''' Instruction ADD_6 
            Groups:  
            0x406e80:	add	r12, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e80] = 'I'
        mem[0x00406e81] = '\x83'
        mem[0x00406e82] = '\xc4'
        mem[0x00406e83] = '\x08'
        cpu.PF = False
        cpu.R12 = 0x7fffffffdc60
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x406e80
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x406e80], 'I')
        self.assertEqual(mem[0x406e81], '\x83')
        self.assertEqual(mem[0x406e82], '\xc4')
        self.assertEqual(mem[0x406e83], '\x08')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.R12, 140737488346216L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222596L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_7(self):
        ''' Instruction ADD_7 
            Groups:  
            0x442689:	add	rsp, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00442000, 0x1000, 'rwx')
        mem[0x00442689] = 'H'
        mem[0x0044268a] = '\x83'
        mem[0x0044268b] = '\xc4'
        mem[0x0044268c] = '\x08'
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RSP = 0x7fffffffdb00
        cpu.CF = False
        cpu.RIP = 0x442689
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x442689], 'H')
        self.assertEqual(mem[0x44268a], '\x83')
        self.assertEqual(mem[0x44268b], '\xc4')
        self.assertEqual(mem[0x44268c], '\x08')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488345864L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4466317L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_8(self):
        ''' Instruction ADD_8 
            Groups:  
            0x406e80:	add	r12, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e80] = 'I'
        mem[0x00406e81] = '\x83'
        mem[0x00406e82] = '\xc4'
        mem[0x00406e83] = '\x08'
        cpu.PF = True
        cpu.R12 = 0x7fffffffdc80
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x406e80
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x406e80], 'I')
        self.assertEqual(mem[0x406e81], '\x83')
        self.assertEqual(mem[0x406e82], '\xc4')
        self.assertEqual(mem[0x406e83], '\x08')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.R12, 140737488346248L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222596L)
        self.assertEqual(cpu.SF, False)

    def test_ADD_9(self):
        ''' Instruction ADD_9 
            Groups:  
            0x410f0d:	add	rsp, 0x38
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, 'rwx')
        mem[0x00410f10] = '8'
        mem[0x00410f0d] = 'H'
        mem[0x00410f0e] = '\x83'
        mem[0x00410f0f] = '\xc4'
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RSP = 0x7fffffffc940
        cpu.CF = False
        cpu.RIP = 0x410f0d
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x410f10], '8')
        self.assertEqual(mem[0x410f0d], 'H')
        self.assertEqual(mem[0x410f0e], '\x83')
        self.assertEqual(mem[0x410f0f], '\xc4')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488341368L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4263697L)
        self.assertEqual(cpu.SF, False)

    def test_AND_1(self):
        ''' Instruction AND_1 
            Groups:  
            0x411bf3:	and	rax, 0xfffffffffffffff8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411bf3] = 'H'
        mem[0x00411bf4] = '\x83'
        mem[0x00411bf5] = '\xe0'
        mem[0x00411bf6] = '\xf8'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x411bf3
        cpu.PF = False
        cpu.SF = False
        cpu.RAX = 0x21e01
        cpu.execute()
    
        self.assertEqual(mem[0x411bf3], 'H')
        self.assertEqual(mem[0x411bf4], '\x83')
        self.assertEqual(mem[0x411bf5], '\xe0')
        self.assertEqual(mem[0x411bf6], '\xf8')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4266999L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 138752L)

    def test_AND_10(self):
        ''' Instruction AND_10 
            Groups:  
            0x411bf3:	and	rax, 0xfffffffffffffff8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411bf3] = 'H'
        mem[0x00411bf4] = '\x83'
        mem[0x00411bf5] = '\xe0'
        mem[0x00411bf6] = '\xf8'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x411bf3
        cpu.PF = False
        cpu.SF = False
        cpu.RAX = 0x21961
        cpu.execute()
    
        self.assertEqual(mem[0x411bf3], 'H')
        self.assertEqual(mem[0x411bf4], '\x83')
        self.assertEqual(mem[0x411bf5], '\xe0')
        self.assertEqual(mem[0x411bf6], '\xf8')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4266999L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 137568L)

    def test_AND_11(self):
        ''' Instruction AND_11 
            Groups:  
            0x4134c7:	and	eax, 4
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem[0x004134c8] = '\xe0'
        mem[0x004134c9] = '\x04'
        mem[0x004134c7] = '\x83'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4134c7
        cpu.EAX = 0x1
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4134c8], '\xe0')
        self.assertEqual(mem[0x4134c9], '\x04')
        self.assertEqual(mem[0x4134c7], '\x83')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4273354L)
        self.assertEqual(cpu.EAX, 0L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_AND_12(self):
        ''' Instruction AND_12 
            Groups:  
            0x411bf3:	and	rax, 0xfffffffffffffff8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411bf3] = 'H'
        mem[0x00411bf4] = '\x83'
        mem[0x00411bf5] = '\xe0'
        mem[0x00411bf6] = '\xf8'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x411bf3
        cpu.PF = False
        cpu.SF = False
        cpu.RAX = 0x21941
        cpu.execute()
    
        self.assertEqual(mem[0x411bf3], 'H')
        self.assertEqual(mem[0x411bf4], '\x83')
        self.assertEqual(mem[0x411bf5], '\xe0')
        self.assertEqual(mem[0x411bf6], '\xf8')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4266999L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 137536L)

    def test_AND_13(self):
        ''' Instruction AND_13 
            Groups:  
            0x4006a5:	and	eax, 7
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006a5] = '\x83'
        mem[0x004006a6] = '\xe0'
        mem[0x004006a7] = '\x07'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4006a5
        cpu.EAX = 0xe00209
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006a5], '\x83')
        self.assertEqual(mem[0x4006a6], '\xe0')
        self.assertEqual(mem[0x4006a7], '\x07')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196008L)
        self.assertEqual(cpu.EAX, 1L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_AND_14(self):
        ''' Instruction AND_14 
            Groups:  
            0x410dd8:	and	rax, rdx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, 'rwx')
        mem[0x00410dd8] = 'H'
        mem[0x00410dd9] = '!'
        mem[0x00410dda] = '\xd0'
        cpu.PF = True
        cpu.RAX = 0x1047
        cpu.SF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x410dd8
        cpu.RDX = 0xfffffffffffff000
        cpu.execute()
    
        self.assertEqual(mem[0x410dd8], 'H')
        self.assertEqual(mem[0x410dd9], '!')
        self.assertEqual(mem[0x410dda], '\xd0')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 4096L)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4263387L)
        self.assertEqual(cpu.RDX, 18446744073709547520L)

    def test_AND_15(self):
        ''' Instruction AND_15 
            Groups:  
            0x463f01:	and	r15, rcx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00463000, 0x1000, 'rwx')
        mem[0x00463f01] = 'I'
        mem[0x00463f02] = '!'
        mem[0x00463f03] = '\xcf'
        cpu.R15 = 0x0
        cpu.RCX = 0xbfebfbff
        cpu.PF = True
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x463f01
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x463f01], 'I')
        self.assertEqual(mem[0x463f02], '!')
        self.assertEqual(mem[0x463f03], '\xcf')
        self.assertEqual(cpu.R15, 0L)
        self.assertEqual(cpu.RCX, 3219913727L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4603652L)
        self.assertEqual(cpu.SF, False)

    def test_AND_16(self):
        ''' Instruction AND_16 
            Groups:  
            0x4183ba:	and	rcx, 0xfff
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183c0] = '\x00'
        mem[0x004183ba] = 'H'
        mem[0x004183bb] = '\x81'
        mem[0x004183bc] = '\xe1'
        mem[0x004183bd] = '\xff'
        mem[0x004183be] = '\x0f'
        mem[0x004183bf] = '\x00'
        cpu.RCX = 0x494d82
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4183ba
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4183c0], '\x00')
        self.assertEqual(mem[0x4183ba], 'H')
        self.assertEqual(mem[0x4183bb], '\x81')
        self.assertEqual(mem[0x4183bc], '\xe1')
        self.assertEqual(mem[0x4183bd], '\xff')
        self.assertEqual(mem[0x4183be], '\x0f')
        self.assertEqual(mem[0x4183bf], '\x00')
        self.assertEqual(cpu.RCX, 3458L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4293569L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_AND_17(self):
        ''' Instruction AND_17 
            Groups:  
            0x436f6d:	and	eax, 9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436f6d] = '\x83'
        mem[0x00436f6e] = '\xe0'
        mem[0x00436f6f] = '\t'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x436f6d
        cpu.EAX = 0x0
        cpu.PF = True
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x436f6d], '\x83')
        self.assertEqual(mem[0x436f6e], '\xe0')
        self.assertEqual(mem[0x436f6f], '\t')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4419440L)
        self.assertEqual(cpu.EAX, 0L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_AND_18(self):
        ''' Instruction AND_18 
            Groups:  
            0x420f60:	and	edx, 0x1f
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00420000, 0x1000, 'rwx')
        mem[0x00420f60] = '\x83'
        mem[0x00420f61] = '\xe2'
        mem[0x00420f62] = '\x1f'
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x420f60
        cpu.PF = True
        cpu.EDX = 0x20
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x420f60], '\x83')
        self.assertEqual(mem[0x420f61], '\xe2')
        self.assertEqual(mem[0x420f62], '\x1f')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4329315L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 0L)
        self.assertEqual(cpu.SF, False)

    def test_AND_19(self):
        ''' Instruction AND_19 
            Groups:  
            0x41167b:	and	r10, 0xfffffffffffffff0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x0041167b] = 'I'
        mem[0x0041167c] = '\x83'
        mem[0x0041167d] = '\xe2'
        mem[0x0041167e] = '\xf0'
        cpu.R10 = 0x43
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x41167b
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x41167b], 'I')
        self.assertEqual(mem[0x41167c], '\x83')
        self.assertEqual(mem[0x41167d], '\xe2')
        self.assertEqual(mem[0x41167e], '\xf0')
        self.assertEqual(cpu.R10, 64L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4265599L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_AND_2(self):
        ''' Instruction AND_2 
            Groups:  
            0x4183ba:	and	rcx, 0xfff
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183c0] = '\x00'
        mem[0x004183ba] = 'H'
        mem[0x004183bb] = '\x81'
        mem[0x004183bc] = '\xe1'
        mem[0x004183bd] = '\xff'
        mem[0x004183be] = '\x0f'
        mem[0x004183bf] = '\x00'
        cpu.RCX = 0x494d66
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4183ba
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4183c0], '\x00')
        self.assertEqual(mem[0x4183ba], 'H')
        self.assertEqual(mem[0x4183bb], '\x81')
        self.assertEqual(mem[0x4183bc], '\xe1')
        self.assertEqual(mem[0x4183bd], '\xff')
        self.assertEqual(mem[0x4183be], '\x0f')
        self.assertEqual(mem[0x4183bf], '\x00')
        self.assertEqual(cpu.RCX, 3430L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4293569L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_AND_20(self):
        ''' Instruction AND_20 
            Groups:  
            0x411bf3:	and	rax, 0xfffffffffffffff8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411bf3] = 'H'
        mem[0x00411bf4] = '\x83'
        mem[0x00411bf5] = '\xe0'
        mem[0x00411bf6] = '\xf8'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x411bf3
        cpu.PF = False
        cpu.SF = False
        cpu.RAX = 0x218f1
        cpu.execute()
    
        self.assertEqual(mem[0x411bf3], 'H')
        self.assertEqual(mem[0x411bf4], '\x83')
        self.assertEqual(mem[0x411bf5], '\xe0')
        self.assertEqual(mem[0x411bf6], '\xf8')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4266999L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 137456L)

    def test_AND_21(self):
        ''' Instruction AND_21 
            Groups:  
            0x4183ba:	and	rcx, 0xfff
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183c0] = '\x00'
        mem[0x004183ba] = 'H'
        mem[0x004183bb] = '\x81'
        mem[0x004183bc] = '\xe1'
        mem[0x004183bd] = '\xff'
        mem[0x004183be] = '\x0f'
        mem[0x004183bf] = '\x00'
        cpu.RCX = 0x494dce
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4183ba
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4183c0], '\x00')
        self.assertEqual(mem[0x4183ba], 'H')
        self.assertEqual(mem[0x4183bb], '\x81')
        self.assertEqual(mem[0x4183bc], '\xe1')
        self.assertEqual(mem[0x4183bd], '\xff')
        self.assertEqual(mem[0x4183be], '\x0f')
        self.assertEqual(mem[0x4183bf], '\x00')
        self.assertEqual(cpu.RCX, 3534L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4293569L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_AND_3(self):
        ''' Instruction AND_3 
            Groups:  
            0x411bf3:	and	rax, 0xfffffffffffffff8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411bf3] = 'H'
        mem[0x00411bf4] = '\x83'
        mem[0x00411bf5] = '\xe0'
        mem[0x00411bf6] = '\xf8'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x411bf3
        cpu.PF = False
        cpu.SF = False
        cpu.RAX = 0x21911
        cpu.execute()
    
        self.assertEqual(mem[0x411bf3], 'H')
        self.assertEqual(mem[0x411bf4], '\x83')
        self.assertEqual(mem[0x411bf5], '\xe0')
        self.assertEqual(mem[0x411bf6], '\xf8')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4266999L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 137488L)

    def test_AND_4(self):
        ''' Instruction AND_4 
            Groups:  
            0x4113a5:	and	rdx, qword ptr [rbp - 0x40]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x7fffffffc966] = '\xff'
        mem[0x7fffffffc965] = '\xff'
        mem[0x7fffffffc960] = '\x00'
        mem[0x7fffffffc961] = '\xf0'
        mem[0x7fffffffc962] = '\xff'
        mem[0x7fffffffc963] = '\xff'
        mem[0x7fffffffc964] = '\xff'
        mem[0x004113a5] = 'H'
        mem[0x004113a6] = '#'
        mem[0x004113a7] = 'U'
        mem[0x004113a8] = '\xc0'
        mem[0x7fffffffc967] = '\xff'
        cpu.PF = False
        cpu.SF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RBP = 0x7fffffffc9a0
        cpu.CF = False
        cpu.RIP = 0x4113a5
        cpu.RDX = 0x6e11bf
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffc966], '\xff')
        self.assertEqual(mem[0x7fffffffc965], '\xff')
        self.assertEqual(mem[0x7fffffffc960], '\x00')
        self.assertEqual(mem[0x7fffffffc961], '\xf0')
        self.assertEqual(mem[0x7fffffffc962], '\xff')
        self.assertEqual(mem[0x7fffffffc963], '\xff')
        self.assertEqual(mem[0x7fffffffc964], '\xff')
        self.assertEqual(mem[0x4113a5], 'H')
        self.assertEqual(mem[0x4113a6], '#')
        self.assertEqual(mem[0x4113a7], 'U')
        self.assertEqual(mem[0x4113a8], '\xc0')
        self.assertEqual(mem[0x7fffffffc967], '\xff')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RBP, 140737488341408L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4264873L)
        self.assertEqual(cpu.RDX, 7213056L)

    def test_AND_5(self):
        ''' Instruction AND_5 
            Groups:  
            0x41137b:	and	eax, 0xf
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x0041137b] = '\x83'
        mem[0x0041137c] = '\xe0'
        mem[0x0041137d] = '\x0f'
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x41137b
        cpu.EAX = 0x6bf1c0
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x41137b], '\x83')
        self.assertEqual(mem[0x41137c], '\xe0')
        self.assertEqual(mem[0x41137d], '\x0f')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4264830L)
        self.assertEqual(cpu.EAX, 0L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_AND_6(self):
        ''' Instruction AND_6 
            Groups:  
            0x4578d7:	and	eax, 0xfff
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x004578d8] = '\xff'
        mem[0x004578d9] = '\x0f'
        mem[0x004578da] = '\x00'
        mem[0x004578db] = '\x00'
        mem[0x004578d7] = '%'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4578d7
        cpu.EAX = 0xffffdf91
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4578d8], '\xff')
        self.assertEqual(mem[0x4578d9], '\x0f')
        self.assertEqual(mem[0x4578da], '\x00')
        self.assertEqual(mem[0x4578db], '\x00')
        self.assertEqual(mem[0x4578d7], '%')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4552924L)
        self.assertEqual(cpu.EAX, 3985L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_AND_7(self):
        ''' Instruction AND_7 
            Groups:  
            0x4379ab:	and	r8d, 0xf
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x004379ab] = 'A'
        mem[0x004379ac] = '\x83'
        mem[0x004379ad] = '\xe0'
        mem[0x004379ae] = '\x0f'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4379ab
        cpu.R8D = 0x306
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4379ab], 'A')
        self.assertEqual(mem[0x4379ac], '\x83')
        self.assertEqual(mem[0x4379ad], '\xe0')
        self.assertEqual(mem[0x4379ae], '\x0f')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4422063L)
        self.assertEqual(cpu.R8D, 6L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_AND_8(self):
        ''' Instruction AND_8 
            Groups:  
            0x4183e1:	and	rax, 0xfffffffffffffff0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183e1] = 'H'
        mem[0x004183e2] = '\x83'
        mem[0x004183e3] = '\xe0'
        mem[0x004183e4] = '\xf0'
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4183e1
        cpu.PF = True
        cpu.SF = False
        cpu.RAX = 0x494dce
        cpu.execute()
    
        self.assertEqual(mem[0x4183e1], 'H')
        self.assertEqual(mem[0x4183e2], '\x83')
        self.assertEqual(mem[0x4183e3], '\xe0')
        self.assertEqual(mem[0x4183e4], '\xf0')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4293605L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 4804032L)

    def test_AND_9(self):
        ''' Instruction AND_9 
            Groups:  
            0x41b4b0:	and	edx, 0x1f
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041b000, 0x1000, 'rwx')
        mem[0x0041b4b0] = '\x83'
        mem[0x0041b4b1] = '\xe2'
        mem[0x0041b4b2] = '\x1f'
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x41b4b0
        cpu.PF = True
        cpu.EDX = 0x2a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x41b4b0], '\x83')
        self.assertEqual(mem[0x41b4b1], '\xe2')
        self.assertEqual(mem[0x41b4b2], '\x1f')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4306099L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 10L)
        self.assertEqual(cpu.SF, False)

    def test_BSF_1(self):
        ''' Instruction BSF_1 
            Groups:  
            0x4183dd:	bsf	eax, edx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183dd] = '\x0f'
        mem[0x004183de] = '\xbc'
        mem[0x004183df] = '\xc2'
        cpu.EAX = 0x4a5301
        cpu.ZF = False
        cpu.EDX = 0x5
        cpu.RIP = 0x4183dd
        cpu.execute()
    
        self.assertEqual(mem[0x4183dd], '\x0f')
        self.assertEqual(mem[0x4183de], '\xbc')
        self.assertEqual(mem[0x4183df], '\xc2')
        self.assertEqual(cpu.EAX, 0L)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDX, 5L)
        self.assertEqual(cpu.RIP, 4293600L)

    def test_BSF_2(self):
        ''' Instruction BSF_2 
            Groups:  
            0x4183dd:	bsf	eax, edx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183dd] = '\x0f'
        mem[0x004183de] = '\xbc'
        mem[0x004183df] = '\xc2'
        cpu.EAX = 0xf7ffd2f4
        cpu.ZF = False
        cpu.EDX = 0x8000
        cpu.RIP = 0x4183dd
        cpu.execute()
    
        self.assertEqual(mem[0x4183dd], '\x0f')
        self.assertEqual(mem[0x4183de], '\xbc')
        self.assertEqual(mem[0x4183df], '\xc2')
        self.assertEqual(cpu.EAX, 15L)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDX, 32768L)
        self.assertEqual(cpu.RIP, 4293600L)

    def test_BSF_3(self):
        ''' Instruction BSF_3 
            Groups:  
            0x41842a:	bsf	rax, rdx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x0041842a] = 'H'
        mem[0x0041842b] = '\x0f'
        mem[0x0041842c] = '\xbc'
        mem[0x0041842d] = '\xc2'
        cpu.ZF = False
        cpu.RIP = 0x41842a
        cpu.RAX = 0x494dc0
        cpu.RDX = 0x3f8010000
        cpu.execute()
    
        self.assertEqual(mem[0x41842a], 'H')
        self.assertEqual(mem[0x41842b], '\x0f')
        self.assertEqual(mem[0x41842c], '\xbc')
        self.assertEqual(mem[0x41842d], '\xc2')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RAX, 16L)
        self.assertEqual(cpu.RIP, 4293678L)
        self.assertEqual(cpu.RDX, 17045716992L)

    def test_BSF_4(self):
        ''' Instruction BSF_4 
            Groups:  
            0x4183dd:	bsf	eax, edx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183dd] = '\x0f'
        mem[0x004183de] = '\xbc'
        mem[0x004183df] = '\xc2'
        cpu.EAX = 0x494d8e
        cpu.ZF = False
        cpu.EDX = 0x8000
        cpu.RIP = 0x4183dd
        cpu.execute()
    
        self.assertEqual(mem[0x4183dd], '\x0f')
        self.assertEqual(mem[0x4183de], '\xbc')
        self.assertEqual(mem[0x4183df], '\xc2')
        self.assertEqual(cpu.EAX, 15L)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDX, 32768L)
        self.assertEqual(cpu.RIP, 4293600L)

    def test_BSF_5(self):
        ''' Instruction BSF_5 
            Groups:  
            0x41842a:	bsf	rax, rdx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x0041842a] = 'H'
        mem[0x0041842b] = '\x0f'
        mem[0x0041842c] = '\xbc'
        mem[0x0041842d] = '\xc2'
        cpu.ZF = False
        cpu.RIP = 0x41842a
        cpu.RAX = 0x494d80
        cpu.RDX = 0x800200020000
        cpu.execute()
    
        self.assertEqual(mem[0x41842a], 'H')
        self.assertEqual(mem[0x41842b], '\x0f')
        self.assertEqual(mem[0x41842c], '\xbc')
        self.assertEqual(mem[0x41842d], '\xc2')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RAX, 17L)
        self.assertEqual(cpu.RIP, 4293678L)
        self.assertEqual(cpu.RDX, 140746078420992L)

    def test_BSF_6(self):
        ''' Instruction BSF_6 
            Groups:  
            0x4183dd:	bsf	eax, edx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183dd] = '\x0f'
        mem[0x004183de] = '\xbc'
        mem[0x004183df] = '\xc2'
        cpu.EAX = 0x494d05
        cpu.ZF = False
        cpu.EDX = 0x80
        cpu.RIP = 0x4183dd
        cpu.execute()
    
        self.assertEqual(mem[0x4183dd], '\x0f')
        self.assertEqual(mem[0x4183de], '\xbc')
        self.assertEqual(mem[0x4183df], '\xc2')
        self.assertEqual(cpu.EAX, 7L)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDX, 128L)
        self.assertEqual(cpu.RIP, 4293600L)

    def test_BSF_7(self):
        ''' Instruction BSF_7 
            Groups:  
            0x4183dd:	bsf	eax, edx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183dd] = '\x0f'
        mem[0x004183de] = '\xbc'
        mem[0x004183df] = '\xc2'
        cpu.EAX = 0x494d82
        cpu.ZF = False
        cpu.EDX = 0x800
        cpu.RIP = 0x4183dd
        cpu.execute()
    
        self.assertEqual(mem[0x4183dd], '\x0f')
        self.assertEqual(mem[0x4183de], '\xbc')
        self.assertEqual(mem[0x4183df], '\xc2')
        self.assertEqual(cpu.EAX, 11L)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDX, 2048L)
        self.assertEqual(cpu.RIP, 4293600L)

    def test_BSF_8(self):
        ''' Instruction BSF_8 
            Groups:  
            0x4183dd:	bsf	eax, edx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183dd] = '\x0f'
        mem[0x004183de] = '\xbc'
        mem[0x004183df] = '\xc2'
        cpu.EAX = 0x494d76
        cpu.ZF = False
        cpu.EDX = 0x800
        cpu.RIP = 0x4183dd
        cpu.execute()
    
        self.assertEqual(mem[0x4183dd], '\x0f')
        self.assertEqual(mem[0x4183de], '\xbc')
        self.assertEqual(mem[0x4183df], '\xc2')
        self.assertEqual(cpu.EAX, 11L)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDX, 2048L)
        self.assertEqual(cpu.RIP, 4293600L)

    def test_BSF_9(self):
        ''' Instruction BSF_9 
            Groups:  
            0x4183dd:	bsf	eax, edx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183dd] = '\x0f'
        mem[0x004183de] = '\xbc'
        mem[0x004183df] = '\xc2'
        cpu.EAX = 0x494d66
        cpu.ZF = False
        cpu.EDX = 0x8000
        cpu.RIP = 0x4183dd
        cpu.execute()
    
        self.assertEqual(mem[0x4183dd], '\x0f')
        self.assertEqual(mem[0x4183de], '\xbc')
        self.assertEqual(mem[0x4183df], '\xc2')
        self.assertEqual(cpu.EAX, 15L)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDX, 32768L)
        self.assertEqual(cpu.RIP, 4293600L)

    def test_BSR_1(self):
        ''' Instruction BSR_1 
            Groups:  
            0x4579b4:	bsr	rsi, rsi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x004579b4] = 'H'
        mem[0x004579b5] = '\x0f'
        mem[0x004579b6] = '\xbd'
        mem[0x004579b7] = '\xf6'
        cpu.ZF = False
        cpu.RSI = 0x42080201021
        cpu.RIP = 0x4579b4
        cpu.execute()
    
        self.assertEqual(mem[0x4579b4], 'H')
        self.assertEqual(mem[0x4579b5], '\x0f')
        self.assertEqual(mem[0x4579b6], '\xbd')
        self.assertEqual(mem[0x4579b7], '\xf6')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSI, 42L)
        self.assertEqual(cpu.RIP, 4553144L)

    def test_BSR_2(self):
        ''' Instruction BSR_2 
            Groups:  
            0x400847:	bsr	esi, esi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400848] = '\xbd'
        mem[0x00400849] = '\xf6'
        mem[0x00400847] = '\x0f'
        cpu.ZF = True
        cpu.RIP = 0x400847
        cpu.ESI = 0xf
        cpu.execute()
    
        self.assertEqual(mem[0x400848], '\xbd')
        self.assertEqual(mem[0x400849], '\xf6')
        self.assertEqual(mem[0x400847], '\x0f')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESI, 3L)
        self.assertEqual(cpu.RIP, 4196426L)

    def test_CALL_1(self):
        ''' Instruction CALL_1 
            Groups: call, mode64 
            0x4117c6:	call	0x40f890
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x7fffffffc9a8] = '\x00'
        mem[0x7fffffffc9a9] = '\x00'
        mem[0x7fffffffc9aa] = '\x00'
        mem[0x7fffffffc9ab] = '\x00'
        mem[0x7fffffffc9ac] = '\x00'
        mem[0x7fffffffc9ad] = '\x00'
        mem[0x7fffffffc9ae] = '\x00'
        mem[0x7fffffffc9af] = '\x00'
        mem[0x7fffffffc9b0] = '\x00'
        mem[0x7fffffffc9b1] = '\x00'
        mem[0x7fffffffc9b2] = '\x00'
        mem[0x7fffffffc9b3] = '\x00'
        mem[0x7fffffffc9b4] = '\x00'
        mem[0x7fffffffc9b5] = '\x00'
        mem[0x7fffffffc9b6] = '\x00'
        mem[0x7fffffffc9b7] = '\x00'
        mem[0x7fffffffc9b8] = '\x00'
        mem[0x004117c6] = '\xe8'
        mem[0x004117c7] = '\xc5'
        mem[0x004117c8] = '\xe0'
        mem[0x004117c9] = '\xff'
        mem[0x004117ca] = '\xff'
        cpu.RSP = 0x7fffffffc9b0
        cpu.RIP = 0x4117c6
        cpu.RBP = 0x7fffffffca40
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffc9a8], '\xcb')
        self.assertEqual(mem[0x7fffffffc9a9], '\x17')
        self.assertEqual(mem[0x7fffffffc9aa], 'A')
        self.assertEqual(mem[0x7fffffffc9ab], '\x00')
        self.assertEqual(mem[0x7fffffffc9ac], '\x00')
        self.assertEqual(mem[0x7fffffffc9ad], '\x00')
        self.assertEqual(mem[0x7fffffffc9ae], '\x00')
        self.assertEqual(mem[0x7fffffffc9af], '\x00')
        self.assertEqual(mem[0x7fffffffc9b0], '\x00')
        self.assertEqual(mem[0x7fffffffc9b1], '\x00')
        self.assertEqual(mem[0x7fffffffc9b2], '\x00')
        self.assertEqual(mem[0x7fffffffc9b3], '\x00')
        self.assertEqual(mem[0x7fffffffc9b4], '\x00')
        self.assertEqual(mem[0x7fffffffc9b5], '\x00')
        self.assertEqual(mem[0x7fffffffc9b6], '\x00')
        self.assertEqual(mem[0x7fffffffc9b7], '\x00')
        self.assertEqual(mem[0x7fffffffc9b8], '\x00')
        self.assertEqual(mem[0x4117c6], '\xe8')
        self.assertEqual(mem[0x4117c7], '\xc5')
        self.assertEqual(mem[0x4117c8], '\xe0')
        self.assertEqual(mem[0x4117c9], '\xff')
        self.assertEqual(mem[0x4117ca], '\xff')
        self.assertEqual(cpu.RSP, 140737488341416L)
        self.assertEqual(cpu.RIP, 4257936L)
        self.assertEqual(cpu.RBP, 140737488341568L)

    def test_CALL_10(self):
        ''' Instruction CALL_10 
            Groups: call, mode64 
            0x436e6b:	call	0x420e30
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda98] = 'U'
        mem[0x7fffffffda99] = 'n'
        mem[0x7fffffffda9a] = 'C'
        mem[0x7fffffffda9b] = '\x00'
        mem[0x7fffffffda9c] = '\x00'
        mem[0x7fffffffda9d] = '\x00'
        mem[0x7fffffffda9e] = '\x00'
        mem[0x7fffffffda9f] = '\x00'
        mem[0x7fffffffdaa0] = '@'
        mem[0x7fffffffdaa1] = '\x00'
        mem[0x7fffffffdaa2] = '\x00'
        mem[0x7fffffffdaa3] = '\x00'
        mem[0x7fffffffdaa4] = '\x00'
        mem[0x7fffffffdaa5] = '\x00'
        mem[0x7fffffffdaa6] = '\x00'
        mem[0x7fffffffdaa7] = '\x00'
        mem[0x7fffffffdaa8] = 'P'
        mem[0x00436e6b] = '\xe8'
        mem[0x00436e6c] = '\xc0'
        mem[0x00436e6d] = '\x9f'
        mem[0x00436e6e] = '\xfe'
        mem[0x00436e6f] = '\xff'
        cpu.RSP = 0x7fffffffdaa0
        cpu.RIP = 0x436e6b
        cpu.RBP = 0x7fffffffdae0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda98], 'p')
        self.assertEqual(mem[0x7fffffffda99], 'n')
        self.assertEqual(mem[0x7fffffffda9a], 'C')
        self.assertEqual(mem[0x7fffffffda9b], '\x00')
        self.assertEqual(mem[0x7fffffffda9c], '\x00')
        self.assertEqual(mem[0x7fffffffda9d], '\x00')
        self.assertEqual(mem[0x7fffffffda9e], '\x00')
        self.assertEqual(mem[0x7fffffffda9f], '\x00')
        self.assertEqual(mem[0x7fffffffdaa0], '@')
        self.assertEqual(mem[0x7fffffffdaa1], '\x00')
        self.assertEqual(mem[0x7fffffffdaa2], '\x00')
        self.assertEqual(mem[0x7fffffffdaa3], '\x00')
        self.assertEqual(mem[0x7fffffffdaa4], '\x00')
        self.assertEqual(mem[0x7fffffffdaa5], '\x00')
        self.assertEqual(mem[0x7fffffffdaa6], '\x00')
        self.assertEqual(mem[0x7fffffffdaa7], '\x00')
        self.assertEqual(mem[0x7fffffffdaa8], 'P')
        self.assertEqual(mem[0x436e6b], '\xe8')
        self.assertEqual(mem[0x436e6c], '\xc0')
        self.assertEqual(mem[0x436e6d], '\x9f')
        self.assertEqual(mem[0x436e6e], '\xfe')
        self.assertEqual(mem[0x436e6f], '\xff')
        self.assertEqual(cpu.RSP, 140737488345752L)
        self.assertEqual(cpu.RIP, 4329008L)
        self.assertEqual(cpu.RBP, 140737488345824L)

    def test_CALL_11(self):
        ''' Instruction CALL_11 
            Groups: call, mode64 
            0x45f813:	call	0x463ea0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045f000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x0045f813] = '\xe8'
        mem[0x0045f814] = '\x88'
        mem[0x0045f815] = 'F'
        mem[0x0045f816] = '\x00'
        mem[0x0045f817] = '\x00'
        mem[0x7fffffffda68] = '\x01'
        mem[0x7fffffffda69] = 'S'
        mem[0x7fffffffda6a] = 'J'
        mem[0x7fffffffda6b] = '\x00'
        mem[0x7fffffffda6c] = '\x00'
        mem[0x7fffffffda6d] = '\x00'
        mem[0x7fffffffda6e] = '\x00'
        mem[0x7fffffffda6f] = '\x00'
        mem[0x7fffffffda70] = '\x01'
        mem[0x7fffffffda71] = 'S'
        mem[0x7fffffffda72] = 'J'
        mem[0x7fffffffda73] = '\x00'
        mem[0x7fffffffda74] = '\x00'
        mem[0x7fffffffda75] = '\x00'
        mem[0x7fffffffda76] = '\x00'
        mem[0x7fffffffda77] = '\x00'
        mem[0x7fffffffda78] = '\xf4'
        cpu.RSP = 0x7fffffffda70
        cpu.RIP = 0x45f813
        cpu.RBP = 0x7fffffffda90
        cpu.execute()
    
        self.assertEqual(mem[0x45f813], '\xe8')
        self.assertEqual(mem[0x45f814], '\x88')
        self.assertEqual(mem[0x45f815], 'F')
        self.assertEqual(mem[0x45f816], '\x00')
        self.assertEqual(mem[0x45f817], '\x00')
        self.assertEqual(mem[0x7fffffffda68], '\x18')
        self.assertEqual(mem[0x7fffffffda69], '\xf8')
        self.assertEqual(mem[0x7fffffffda6a], 'E')
        self.assertEqual(mem[0x7fffffffda6b], '\x00')
        self.assertEqual(mem[0x7fffffffda6c], '\x00')
        self.assertEqual(mem[0x7fffffffda6d], '\x00')
        self.assertEqual(mem[0x7fffffffda6e], '\x00')
        self.assertEqual(mem[0x7fffffffda6f], '\x00')
        self.assertEqual(mem[0x7fffffffda70], '\x01')
        self.assertEqual(mem[0x7fffffffda71], 'S')
        self.assertEqual(mem[0x7fffffffda72], 'J')
        self.assertEqual(mem[0x7fffffffda73], '\x00')
        self.assertEqual(mem[0x7fffffffda74], '\x00')
        self.assertEqual(mem[0x7fffffffda75], '\x00')
        self.assertEqual(mem[0x7fffffffda76], '\x00')
        self.assertEqual(mem[0x7fffffffda77], '\x00')
        self.assertEqual(mem[0x7fffffffda78], '\xf4')
        self.assertEqual(cpu.RSP, 140737488345704L)
        self.assertEqual(cpu.RIP, 4603552L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_CALL_12(self):
        ''' Instruction CALL_12 
            Groups: call, mode64 
            0x400d84:	call	0x436750
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x00400d84] = '\xe8'
        mem[0x00400d85] = '\xc7'
        mem[0x00400d86] = 'Y'
        mem[0x00400d87] = '\x03'
        mem[0x00400d88] = '\x00'
        mem[0x7fffffffdb18] = '\x80'
        mem[0x7fffffffdb19] = '\r'
        mem[0x7fffffffdb1a] = '@'
        mem[0x7fffffffdb1b] = '\x00'
        mem[0x7fffffffdb1c] = '\x00'
        mem[0x7fffffffdb1d] = '\x00'
        mem[0x7fffffffdb1e] = '\x00'
        mem[0x7fffffffdb1f] = '\x00'
        mem[0x7fffffffdb20] = '\x00'
        mem[0x7fffffffdb21] = '\x00'
        mem[0x7fffffffdb22] = '\x00'
        mem[0x7fffffffdb23] = '\x00'
        mem[0x7fffffffdb24] = '\x00'
        mem[0x7fffffffdb25] = '\x00'
        mem[0x7fffffffdb26] = '\x00'
        mem[0x7fffffffdb27] = '\x00'
        mem[0x7fffffffdb28] = 'H'
        cpu.RSP = 0x7fffffffdb20
        cpu.RIP = 0x400d84
        cpu.RBP = 0x7fffffffdbe0
        cpu.execute()
    
        self.assertEqual(mem[0x400d84], '\xe8')
        self.assertEqual(mem[0x400d85], '\xc7')
        self.assertEqual(mem[0x400d86], 'Y')
        self.assertEqual(mem[0x400d87], '\x03')
        self.assertEqual(mem[0x400d88], '\x00')
        self.assertEqual(mem[0x7fffffffdb18], '\x89')
        self.assertEqual(mem[0x7fffffffdb19], '\r')
        self.assertEqual(mem[0x7fffffffdb1a], '@')
        self.assertEqual(mem[0x7fffffffdb1b], '\x00')
        self.assertEqual(mem[0x7fffffffdb1c], '\x00')
        self.assertEqual(mem[0x7fffffffdb1d], '\x00')
        self.assertEqual(mem[0x7fffffffdb1e], '\x00')
        self.assertEqual(mem[0x7fffffffdb1f], '\x00')
        self.assertEqual(mem[0x7fffffffdb20], '\x00')
        self.assertEqual(mem[0x7fffffffdb21], '\x00')
        self.assertEqual(mem[0x7fffffffdb22], '\x00')
        self.assertEqual(mem[0x7fffffffdb23], '\x00')
        self.assertEqual(mem[0x7fffffffdb24], '\x00')
        self.assertEqual(mem[0x7fffffffdb25], '\x00')
        self.assertEqual(mem[0x7fffffffdb26], '\x00')
        self.assertEqual(mem[0x7fffffffdb27], '\x00')
        self.assertEqual(mem[0x7fffffffdb28], 'H')
        self.assertEqual(cpu.RSP, 140737488345880L)
        self.assertEqual(cpu.RIP, 4417360L)
        self.assertEqual(cpu.RBP, 140737488346080L)

    def test_CALL_13(self):
        ''' Instruction CALL_13 
            Groups: call, mode64 
            0x4012d6:	call	0x4002d8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x004012d6] = '\xe8'
        mem[0x004012d7] = '\xfd'
        mem[0x7fffffffdad8] = '\x00'
        mem[0x7fffffffdac8] = 'W'
        mem[0x7fffffffdac9] = 'U'
        mem[0x7fffffffdaca] = 'C'
        mem[0x7fffffffdacb] = '\x00'
        mem[0x7fffffffdacc] = '\x00'
        mem[0x7fffffffdacd] = '\x00'
        mem[0x7fffffffdace] = '\x00'
        mem[0x7fffffffdacf] = '\x00'
        mem[0x7fffffffdad0] = '\x03'
        mem[0x7fffffffdad1] = '\x00'
        mem[0x7fffffffdad2] = '\x00'
        mem[0x7fffffffdad3] = '\x00'
        mem[0x7fffffffdad4] = '\x00'
        mem[0x7fffffffdad5] = '\x00'
        mem[0x7fffffffdad6] = '\x00'
        mem[0x7fffffffdad7] = '\x00'
        mem[0x004012d8] = '\xef'
        mem[0x004012d9] = '\xff'
        mem[0x004012da] = '\xff'
        cpu.RSP = 0x7fffffffdad0
        cpu.RIP = 0x4012d6
        cpu.RBP = 0x7fffffffdb10
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdad6], '\x00')
        self.assertEqual(mem[0x4012d7], '\xfd')
        self.assertEqual(mem[0x7fffffffdad8], '\x00')
        self.assertEqual(mem[0x7fffffffdac8], '\xdb')
        self.assertEqual(mem[0x7fffffffdac9], '\x12')
        self.assertEqual(mem[0x7fffffffdaca], '@')
        self.assertEqual(mem[0x7fffffffdacb], '\x00')
        self.assertEqual(mem[0x7fffffffdacc], '\x00')
        self.assertEqual(mem[0x7fffffffdacd], '\x00')
        self.assertEqual(mem[0x7fffffffdace], '\x00')
        self.assertEqual(mem[0x7fffffffdacf], '\x00')
        self.assertEqual(mem[0x7fffffffdad0], '\x03')
        self.assertEqual(mem[0x7fffffffdad1], '\x00')
        self.assertEqual(mem[0x7fffffffdad2], '\x00')
        self.assertEqual(mem[0x7fffffffdad3], '\x00')
        self.assertEqual(mem[0x7fffffffdad4], '\x00')
        self.assertEqual(mem[0x7fffffffdad5], '\x00')
        self.assertEqual(mem[0x4012d6], '\xe8')
        self.assertEqual(mem[0x7fffffffdad7], '\x00')
        self.assertEqual(mem[0x4012d8], '\xef')
        self.assertEqual(mem[0x4012d9], '\xff')
        self.assertEqual(mem[0x4012da], '\xff')
        self.assertEqual(cpu.RSP, 140737488345800L)
        self.assertEqual(cpu.RIP, 4195032L)
        self.assertEqual(cpu.RBP, 140737488345872L)

    def test_CALL_14(self):
        ''' Instruction CALL_14 
            Groups: call, mode64 
            0x400a1c:	call	0x48fbb0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x00400a1c] = '\xe8'
        mem[0x00400a1d] = '\x8f'
        mem[0x00400a1e] = '\xf1'
        mem[0x00400a1f] = '\x08'
        mem[0x00400a20] = '\x00'
        mem[0x7fffffffdab8] = '\x03'
        mem[0x7fffffffdab9] = '\x00'
        mem[0x7fffffffdaba] = '\x00'
        mem[0x7fffffffdabb] = '\x00'
        mem[0x7fffffffdabc] = '\x00'
        mem[0x7fffffffdabd] = '\x00'
        mem[0x7fffffffdabe] = '\x00'
        mem[0x7fffffffdabf] = '\x00'
        mem[0x7fffffffdac0] = '\x10'
        mem[0x7fffffffdac1] = '\xdb'
        mem[0x7fffffffdac2] = '\xff'
        mem[0x7fffffffdac3] = '\xff'
        mem[0x7fffffffdac4] = '\xff'
        mem[0x7fffffffdac5] = '\x7f'
        mem[0x7fffffffdac6] = '\x00'
        mem[0x7fffffffdac7] = '\x00'
        mem[0x7fffffffdac8] = '\x0c'
        cpu.RSP = 0x7fffffffdac0
        cpu.RIP = 0x400a1c
        cpu.RBP = 0x7fffffffdac0
        cpu.execute()
    
        self.assertEqual(mem[0x400a1c], '\xe8')
        self.assertEqual(mem[0x400a1d], '\x8f')
        self.assertEqual(mem[0x400a1e], '\xf1')
        self.assertEqual(mem[0x400a1f], '\x08')
        self.assertEqual(mem[0x400a20], '\x00')
        self.assertEqual(mem[0x7fffffffdab8], '!')
        self.assertEqual(mem[0x7fffffffdab9], '\n')
        self.assertEqual(mem[0x7fffffffdaba], '@')
        self.assertEqual(mem[0x7fffffffdabb], '\x00')
        self.assertEqual(mem[0x7fffffffdabc], '\x00')
        self.assertEqual(mem[0x7fffffffdabd], '\x00')
        self.assertEqual(mem[0x7fffffffdabe], '\x00')
        self.assertEqual(mem[0x7fffffffdabf], '\x00')
        self.assertEqual(mem[0x7fffffffdac0], '\x10')
        self.assertEqual(mem[0x7fffffffdac1], '\xdb')
        self.assertEqual(mem[0x7fffffffdac2], '\xff')
        self.assertEqual(mem[0x7fffffffdac3], '\xff')
        self.assertEqual(mem[0x7fffffffdac4], '\xff')
        self.assertEqual(mem[0x7fffffffdac5], '\x7f')
        self.assertEqual(mem[0x7fffffffdac6], '\x00')
        self.assertEqual(mem[0x7fffffffdac7], '\x00')
        self.assertEqual(mem[0x7fffffffdac8], '\x0c')
        self.assertEqual(cpu.RSP, 140737488345784L)
        self.assertEqual(cpu.RIP, 4783024L)
        self.assertEqual(cpu.RBP, 140737488345792L)

    def test_CALL_15(self):
        ''' Instruction CALL_15 
            Groups: call, mode64 
            0x43252b:	call	0x4321e0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x0043252b] = '\xe8'
        mem[0x0043252c] = '\xb0'
        mem[0x0043252d] = '\xfc'
        mem[0x0043252e] = '\xff'
        mem[0x0043252f] = '\xff'
        mem[0x7fffffffda38] = 'I'
        mem[0x7fffffffda39] = '%'
        mem[0x7fffffffda3a] = 'C'
        mem[0x7fffffffda3b] = '\x00'
        mem[0x7fffffffda3c] = '\x00'
        mem[0x7fffffffda3d] = '\x00'
        mem[0x7fffffffda3e] = '\x00'
        mem[0x7fffffffda3f] = '\x00'
        mem[0x7fffffffda40] = '`'
        mem[0x7fffffffda41] = '\xda'
        mem[0x7fffffffda42] = '\xff'
        mem[0x7fffffffda43] = '\xff'
        mem[0x7fffffffda44] = '\x01'
        mem[0x7fffffffda45] = '\x00'
        mem[0x7fffffffda46] = '\x00'
        mem[0x7fffffffda47] = '\x00'
        mem[0x7fffffffda48] = '\x00'
        cpu.RSP = 0x7fffffffda40
        cpu.RIP = 0x43252b
        cpu.RBP = 0x7fffffffda90
        cpu.execute()
    
        self.assertEqual(mem[0x43252b], '\xe8')
        self.assertEqual(mem[0x43252c], '\xb0')
        self.assertEqual(mem[0x43252d], '\xfc')
        self.assertEqual(mem[0x43252e], '\xff')
        self.assertEqual(mem[0x43252f], '\xff')
        self.assertEqual(mem[0x7fffffffda38], '0')
        self.assertEqual(mem[0x7fffffffda39], '%')
        self.assertEqual(mem[0x7fffffffda3a], 'C')
        self.assertEqual(mem[0x7fffffffda3b], '\x00')
        self.assertEqual(mem[0x7fffffffda3c], '\x00')
        self.assertEqual(mem[0x7fffffffda3d], '\x00')
        self.assertEqual(mem[0x7fffffffda3e], '\x00')
        self.assertEqual(mem[0x7fffffffda3f], '\x00')
        self.assertEqual(mem[0x7fffffffda40], '`')
        self.assertEqual(mem[0x7fffffffda41], '\xda')
        self.assertEqual(mem[0x7fffffffda42], '\xff')
        self.assertEqual(mem[0x7fffffffda43], '\xff')
        self.assertEqual(mem[0x7fffffffda44], '\x01')
        self.assertEqual(mem[0x7fffffffda45], '\x00')
        self.assertEqual(mem[0x7fffffffda46], '\x00')
        self.assertEqual(mem[0x7fffffffda47], '\x00')
        self.assertEqual(mem[0x7fffffffda48], '\x00')
        self.assertEqual(cpu.RSP, 140737488345656L)
        self.assertEqual(cpu.RIP, 4399584L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_CALL_16(self):
        ''' Instruction CALL_16 
            Groups: call, mode64 
            0x407033:	call	0x406ec0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00407000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdb08] = '\x00'
        mem[0x7fffffffdb09] = '\xf7'
        mem[0x7fffffffdb0a] = '\xb9'
        mem[0x7fffffffdb0b] = 'F'
        mem[0x7fffffffdb0c] = '\x9d'
        mem[0x7fffffffdb0d] = '\xa4'
        mem[0x7fffffffdb0e] = '\xe4'
        mem[0x7fffffffdb0f] = '\x1c'
        mem[0x7fffffffdb10] = '\xe0'
        mem[0x7fffffffdb11] = '\xdb'
        mem[0x7fffffffdb12] = '\xff'
        mem[0x7fffffffdb13] = '\xff'
        mem[0x7fffffffdb14] = '\xff'
        mem[0x7fffffffdb15] = '\x7f'
        mem[0x7fffffffdb16] = '\x00'
        mem[0x7fffffffdb17] = '\x00'
        mem[0x7fffffffdb18] = '\xea'
        mem[0x00407033] = '\xe8'
        mem[0x00407034] = '\x88'
        mem[0x00407035] = '\xfe'
        mem[0x00407036] = '\xff'
        mem[0x00407037] = '\xff'
        cpu.RSP = 0x7fffffffdb10
        cpu.RIP = 0x407033
        cpu.RBP = 0x7fffffffdb10
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdb08], '8')
        self.assertEqual(mem[0x7fffffffdb09], 'p')
        self.assertEqual(mem[0x7fffffffdb0a], '@')
        self.assertEqual(mem[0x7fffffffdb0b], '\x00')
        self.assertEqual(mem[0x7fffffffdb0c], '\x00')
        self.assertEqual(mem[0x7fffffffdb0d], '\x00')
        self.assertEqual(mem[0x7fffffffdb0e], '\x00')
        self.assertEqual(mem[0x7fffffffdb0f], '\x00')
        self.assertEqual(mem[0x7fffffffdb10], '\xe0')
        self.assertEqual(mem[0x7fffffffdb11], '\xdb')
        self.assertEqual(mem[0x7fffffffdb12], '\xff')
        self.assertEqual(mem[0x7fffffffdb13], '\xff')
        self.assertEqual(mem[0x7fffffffdb14], '\xff')
        self.assertEqual(mem[0x7fffffffdb15], '\x7f')
        self.assertEqual(mem[0x7fffffffdb16], '\x00')
        self.assertEqual(mem[0x7fffffffdb17], '\x00')
        self.assertEqual(mem[0x7fffffffdb18], '\xea')
        self.assertEqual(mem[0x407033], '\xe8')
        self.assertEqual(mem[0x407034], '\x88')
        self.assertEqual(mem[0x407035], '\xfe')
        self.assertEqual(mem[0x407036], '\xff')
        self.assertEqual(mem[0x407037], '\xff')
        self.assertEqual(cpu.RSP, 140737488345864L)
        self.assertEqual(cpu.RIP, 4222656L)
        self.assertEqual(cpu.RBP, 140737488345872L)

    def test_CALL_17(self):
        ''' Instruction CALL_17 
            Groups: call, mode64 
            0x43780d:	call	0x437610
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x0043780d] = '\xe8'
        mem[0x0043780e] = '\xfe'
        mem[0x0043780f] = '\xfd'
        mem[0x00437810] = '\xff'
        mem[0x00437811] = '\xff'
        mem[0x7fffffffdae8] = '\xd8'
        mem[0x7fffffffdae9] = '\x02'
        mem[0x7fffffffdaea] = '@'
        mem[0x7fffffffdaeb] = '\x00'
        mem[0x7fffffffdaec] = '\x00'
        mem[0x7fffffffdaed] = '\x00'
        mem[0x7fffffffdaee] = '\x00'
        mem[0x7fffffffdaef] = '\x00'
        mem[0x7fffffffdaf0] = 'p'
        mem[0x7fffffffdaf1] = '\x12'
        mem[0x7fffffffdaf2] = '@'
        mem[0x7fffffffdaf3] = '\x00'
        mem[0x7fffffffdaf4] = '\x00'
        mem[0x7fffffffdaf5] = '\x00'
        mem[0x7fffffffdaf6] = '\x00'
        mem[0x7fffffffdaf7] = '\x00'
        mem[0x7fffffffdaf8] = '\xd8'
        cpu.RSP = 0x7fffffffdaf0
        cpu.RIP = 0x43780d
        cpu.RBP = 0x7fffffffdb10
        cpu.execute()
    
        self.assertEqual(mem[0x43780d], '\xe8')
        self.assertEqual(mem[0x43780e], '\xfe')
        self.assertEqual(mem[0x43780f], '\xfd')
        self.assertEqual(mem[0x437810], '\xff')
        self.assertEqual(mem[0x437811], '\xff')
        self.assertEqual(mem[0x7fffffffdae8], '\x12')
        self.assertEqual(mem[0x7fffffffdae9], 'x')
        self.assertEqual(mem[0x7fffffffdaea], 'C')
        self.assertEqual(mem[0x7fffffffdaeb], '\x00')
        self.assertEqual(mem[0x7fffffffdaec], '\x00')
        self.assertEqual(mem[0x7fffffffdaed], '\x00')
        self.assertEqual(mem[0x7fffffffdaee], '\x00')
        self.assertEqual(mem[0x7fffffffdaef], '\x00')
        self.assertEqual(mem[0x7fffffffdaf0], 'p')
        self.assertEqual(mem[0x7fffffffdaf1], '\x12')
        self.assertEqual(mem[0x7fffffffdaf2], '@')
        self.assertEqual(mem[0x7fffffffdaf3], '\x00')
        self.assertEqual(mem[0x7fffffffdaf4], '\x00')
        self.assertEqual(mem[0x7fffffffdaf5], '\x00')
        self.assertEqual(mem[0x7fffffffdaf6], '\x00')
        self.assertEqual(mem[0x7fffffffdaf7], '\x00')
        self.assertEqual(mem[0x7fffffffdaf8], '\xd8')
        self.assertEqual(cpu.RSP, 140737488345832L)
        self.assertEqual(cpu.RIP, 4421136L)
        self.assertEqual(cpu.RBP, 140737488345872L)

    def test_CALL_18(self):
        ''' Instruction CALL_18 
            Groups: call, mode64 
            0x4376a6:	call	0x45c2f0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffd918] = '\x00'
        mem[0x7fffffffd919] = '\x00'
        mem[0x7fffffffd91a] = '\x00'
        mem[0x7fffffffd91b] = '\x00'
        mem[0x7fffffffd91c] = '\x00'
        mem[0x7fffffffd91d] = '\x00'
        mem[0x7fffffffd91e] = '\x00'
        mem[0x7fffffffd91f] = '\x00'
        mem[0x7fffffffd920] = '\x00'
        mem[0x7fffffffd921] = '\x00'
        mem[0x7fffffffd922] = '\x00'
        mem[0x7fffffffd923] = '\x00'
        mem[0x7fffffffd924] = '\x00'
        mem[0x7fffffffd925] = '\x00'
        mem[0x004376a6] = '\xe8'
        mem[0x004376a7] = 'E'
        mem[0x004376a8] = 'L'
        mem[0x004376a9] = '\x02'
        mem[0x004376aa] = '\x00'
        mem[0x7fffffffd926] = '\x00'
        mem[0x7fffffffd927] = '\x00'
        mem[0x7fffffffd928] = '\x00'
        cpu.RSP = 0x7fffffffd920
        cpu.RIP = 0x4376a6
        cpu.RBP = 0x7fffffffdb10
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffd918], '\xab')
        self.assertEqual(mem[0x7fffffffd919], 'v')
        self.assertEqual(mem[0x7fffffffd91a], 'C')
        self.assertEqual(mem[0x7fffffffd91b], '\x00')
        self.assertEqual(mem[0x7fffffffd91c], '\x00')
        self.assertEqual(mem[0x7fffffffd91d], '\x00')
        self.assertEqual(mem[0x7fffffffd91e], '\x00')
        self.assertEqual(mem[0x7fffffffd91f], '\x00')
        self.assertEqual(mem[0x7fffffffd920], '\x00')
        self.assertEqual(mem[0x7fffffffd921], '\x00')
        self.assertEqual(mem[0x7fffffffd922], '\x00')
        self.assertEqual(mem[0x7fffffffd923], '\x00')
        self.assertEqual(mem[0x7fffffffd924], '\x00')
        self.assertEqual(mem[0x7fffffffd925], '\x00')
        self.assertEqual(mem[0x7fffffffd926], '\x00')
        self.assertEqual(mem[0x4376a7], 'E')
        self.assertEqual(mem[0x4376a8], 'L')
        self.assertEqual(mem[0x4376a9], '\x02')
        self.assertEqual(mem[0x4376aa], '\x00')
        self.assertEqual(mem[0x4376a6], '\xe8')
        self.assertEqual(mem[0x7fffffffd927], '\x00')
        self.assertEqual(mem[0x7fffffffd928], '\x00')
        self.assertEqual(cpu.RSP, 140737488345368L)
        self.assertEqual(cpu.RIP, 4571888L)
        self.assertEqual(cpu.RBP, 140737488345872L)

    def test_CALL_19(self):
        ''' Instruction CALL_19 
            Groups: call, mode64 
            0x400c80:	call	qword ptr [rbx + 0x10]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x00400c80] = '\xff'
        mem[0x00400c81] = 'S'
        mem[0x00400c82] = '\x10'
        mem[0x7fffffffdb18] = '\x83'
        mem[0x7fffffffdb19] = '\x0c'
        mem[0x7fffffffdb1a] = '@'
        mem[0x7fffffffdb1b] = '\x00'
        mem[0x7fffffffdb1c] = '\x00'
        mem[0x7fffffffdb1d] = '\x00'
        mem[0x7fffffffdb1e] = '\x00'
        mem[0x7fffffffdb1f] = '\x00'
        mem[0x7fffffffdb20] = '\x00'
        mem[0x7fffffffdb21] = '\x00'
        mem[0x7fffffffdb22] = '\x00'
        mem[0x7fffffffdb23] = '\x00'
        mem[0x7fffffffdb24] = '\x00'
        mem[0x7fffffffdb25] = '\x00'
        mem[0x7fffffffdb26] = '\x00'
        mem[0x7fffffffdb27] = '\x00'
        mem[0x7fffffffdb28] = 'H'
        mem[0x00400258] = '\x10'
        mem[0x00400259] = '\xb9'
        mem[0x0040025a] = 'A'
        mem[0x0040025b] = '\x00'
        mem[0x0040025c] = '\x00'
        mem[0x0040025d] = '\x00'
        mem[0x0040025e] = '\x00'
        mem[0x0040025f] = '\x00'
        cpu.RBP = 0x7fffffffdbe0
        cpu.RSP = 0x7fffffffdb20
        cpu.RIP = 0x400c80
        cpu.RBX = 0x400248
        cpu.execute()
    
        self.assertEqual(mem[0x400c80], '\xff')
        self.assertEqual(mem[0x400c81], 'S')
        self.assertEqual(mem[0x400c82], '\x10')
        self.assertEqual(mem[0x7fffffffdb18], '\x83')
        self.assertEqual(mem[0x7fffffffdb19], '\x0c')
        self.assertEqual(mem[0x7fffffffdb1a], '@')
        self.assertEqual(mem[0x7fffffffdb1b], '\x00')
        self.assertEqual(mem[0x7fffffffdb1c], '\x00')
        self.assertEqual(mem[0x7fffffffdb1d], '\x00')
        self.assertEqual(mem[0x7fffffffdb1e], '\x00')
        self.assertEqual(mem[0x7fffffffdb1f], '\x00')
        self.assertEqual(mem[0x7fffffffdb20], '\x00')
        self.assertEqual(mem[0x7fffffffdb21], '\x00')
        self.assertEqual(mem[0x7fffffffdb22], '\x00')
        self.assertEqual(mem[0x7fffffffdb23], '\x00')
        self.assertEqual(mem[0x7fffffffdb24], '\x00')
        self.assertEqual(mem[0x7fffffffdb25], '\x00')
        self.assertEqual(mem[0x7fffffffdb26], '\x00')
        self.assertEqual(mem[0x7fffffffdb27], '\x00')
        self.assertEqual(mem[0x7fffffffdb28], 'H')
        self.assertEqual(mem[0x400258], '\x10')
        self.assertEqual(mem[0x400259], '\xb9')
        self.assertEqual(mem[0x40025a], 'A')
        self.assertEqual(mem[0x40025b], '\x00')
        self.assertEqual(mem[0x40025c], '\x00')
        self.assertEqual(mem[0x40025d], '\x00')
        self.assertEqual(mem[0x40025e], '\x00')
        self.assertEqual(mem[0x40025f], '\x00')
        self.assertEqual(cpu.RBX, 4194888L)
        self.assertEqual(cpu.RSP, 140737488345880L)
        self.assertEqual(cpu.RIP, 4307216L)
        self.assertEqual(cpu.RBP, 140737488346080L)

    def test_CALL_2(self):
        ''' Instruction CALL_2 
            Groups: call, mode64 
            0x400c80:	call	qword ptr [rbx + 0x10]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x00400c80] = '\xff'
        mem[0x00400c81] = 'S'
        mem[0x00400c82] = '\x10'
        mem[0x00400288] = ' '
        mem[0x00400289] = '\xa8'
        mem[0x0040028a] = 'A'
        mem[0x0040028b] = '\x00'
        mem[0x0040028c] = '\x00'
        mem[0x0040028d] = '\x00'
        mem[0x0040028e] = '\x00'
        mem[0x0040028f] = '\x00'
        mem[0x7fffffffdb18] = '\x83'
        mem[0x7fffffffdb19] = '\x0c'
        mem[0x7fffffffdb1a] = '@'
        mem[0x7fffffffdb1b] = '\x00'
        mem[0x7fffffffdb1c] = '\x00'
        mem[0x7fffffffdb1d] = '\x00'
        mem[0x7fffffffdb1e] = '\x00'
        mem[0x7fffffffdb1f] = '\x00'
        mem[0x7fffffffdb20] = '\x00'
        mem[0x7fffffffdb21] = '\x00'
        mem[0x7fffffffdb22] = '\x00'
        mem[0x7fffffffdb23] = '\x00'
        mem[0x7fffffffdb24] = '\x00'
        mem[0x7fffffffdb25] = '\x00'
        mem[0x7fffffffdb26] = '\x00'
        mem[0x7fffffffdb27] = '\x00'
        mem[0x7fffffffdb28] = 'H'
        cpu.RBP = 0x7fffffffdbe0
        cpu.RSP = 0x7fffffffdb20
        cpu.RIP = 0x400c80
        cpu.RBX = 0x400278
        cpu.execute()
    
        self.assertEqual(mem[0x400c80], '\xff')
        self.assertEqual(mem[0x400c81], 'S')
        self.assertEqual(mem[0x400c82], '\x10')
        self.assertEqual(mem[0x400288], ' ')
        self.assertEqual(mem[0x400289], '\xa8')
        self.assertEqual(mem[0x40028a], 'A')
        self.assertEqual(mem[0x40028b], '\x00')
        self.assertEqual(mem[0x40028c], '\x00')
        self.assertEqual(mem[0x40028d], '\x00')
        self.assertEqual(mem[0x40028e], '\x00')
        self.assertEqual(mem[0x40028f], '\x00')
        self.assertEqual(mem[0x7fffffffdb18], '\x83')
        self.assertEqual(mem[0x7fffffffdb19], '\x0c')
        self.assertEqual(mem[0x7fffffffdb1a], '@')
        self.assertEqual(mem[0x7fffffffdb1b], '\x00')
        self.assertEqual(mem[0x7fffffffdb1c], '\x00')
        self.assertEqual(mem[0x7fffffffdb1d], '\x00')
        self.assertEqual(mem[0x7fffffffdb1e], '\x00')
        self.assertEqual(mem[0x7fffffffdb1f], '\x00')
        self.assertEqual(mem[0x7fffffffdb20], '\x00')
        self.assertEqual(mem[0x7fffffffdb21], '\x00')
        self.assertEqual(mem[0x7fffffffdb22], '\x00')
        self.assertEqual(mem[0x7fffffffdb23], '\x00')
        self.assertEqual(mem[0x7fffffffdb24], '\x00')
        self.assertEqual(mem[0x7fffffffdb25], '\x00')
        self.assertEqual(mem[0x7fffffffdb26], '\x00')
        self.assertEqual(mem[0x7fffffffdb27], '\x00')
        self.assertEqual(mem[0x7fffffffdb28], 'H')
        self.assertEqual(cpu.RBX, 4194936L)
        self.assertEqual(cpu.RSP, 140737488345880L)
        self.assertEqual(cpu.RIP, 4302880L)
        self.assertEqual(cpu.RBP, 140737488346080L)

    def test_CALL_20(self):
        ''' Instruction CALL_20 
            Groups: call, mode64 
            0x43422a:	call	0x45c590
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda88] = '\x00'
        mem[0x7fffffffda89] = '\x00'
        mem[0x7fffffffda8a] = '\x00'
        mem[0x7fffffffda8b] = '\x00'
        mem[0x7fffffffda8c] = '\x00'
        mem[0x7fffffffda8d] = '\x00'
        mem[0x7fffffffda8e] = '\x00'
        mem[0x7fffffffda8f] = '\x00'
        mem[0x7fffffffda90] = '\x00'
        mem[0x7fffffffda91] = '\x00'
        mem[0x7fffffffda92] = '\x00'
        mem[0x7fffffffda93] = '\x00'
        mem[0x7fffffffda94] = '\x00'
        mem[0x7fffffffda95] = '\x00'
        mem[0x7fffffffda96] = '\x00'
        mem[0x7fffffffda97] = '\x00'
        mem[0x7fffffffda98] = '\x08'
        mem[0x0043422a] = '\xe8'
        mem[0x0043422b] = 'a'
        mem[0x0043422c] = '\x83'
        mem[0x0043422d] = '\x02'
        mem[0x0043422e] = '\x00'
        cpu.RSP = 0x7fffffffda90
        cpu.RIP = 0x43422a
        cpu.RBP = 0x7fffffffdab0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda88], '/')
        self.assertEqual(mem[0x7fffffffda89], 'B')
        self.assertEqual(mem[0x7fffffffda8a], 'C')
        self.assertEqual(mem[0x7fffffffda8b], '\x00')
        self.assertEqual(mem[0x7fffffffda8c], '\x00')
        self.assertEqual(mem[0x7fffffffda8d], '\x00')
        self.assertEqual(mem[0x7fffffffda8e], '\x00')
        self.assertEqual(mem[0x7fffffffda8f], '\x00')
        self.assertEqual(mem[0x7fffffffda90], '\x00')
        self.assertEqual(mem[0x7fffffffda91], '\x00')
        self.assertEqual(mem[0x7fffffffda92], '\x00')
        self.assertEqual(mem[0x7fffffffda93], '\x00')
        self.assertEqual(mem[0x7fffffffda94], '\x00')
        self.assertEqual(mem[0x7fffffffda95], '\x00')
        self.assertEqual(mem[0x7fffffffda96], '\x00')
        self.assertEqual(mem[0x7fffffffda97], '\x00')
        self.assertEqual(mem[0x7fffffffda98], '\x08')
        self.assertEqual(mem[0x43422a], '\xe8')
        self.assertEqual(mem[0x43422b], 'a')
        self.assertEqual(mem[0x43422c], '\x83')
        self.assertEqual(mem[0x43422d], '\x02')
        self.assertEqual(mem[0x43422e], '\x00')
        self.assertEqual(cpu.RSP, 140737488345736L)
        self.assertEqual(cpu.RIP, 4572560L)
        self.assertEqual(cpu.RBP, 140737488345776L)

    def test_CALL_21(self):
        ''' Instruction CALL_21 
            Groups: call, mode64 
            0x436fe0:	call	0x406dd0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda98] = '>'
        mem[0x7fffffffda99] = 'o'
        mem[0x7fffffffda9a] = 'C'
        mem[0x7fffffffda9b] = '\x00'
        mem[0x7fffffffda9c] = '\x00'
        mem[0x7fffffffda9d] = '\x00'
        mem[0x7fffffffda9e] = '\x00'
        mem[0x7fffffffda9f] = '\x00'
        mem[0x7fffffffdaa0] = '@'
        mem[0x7fffffffdaa1] = '\x00'
        mem[0x7fffffffdaa2] = '\x00'
        mem[0x7fffffffdaa3] = '\x00'
        mem[0x7fffffffdaa4] = '\x00'
        mem[0x7fffffffdaa5] = '\x00'
        mem[0x7fffffffdaa6] = '\x00'
        mem[0x7fffffffdaa7] = '\x00'
        mem[0x7fffffffdaa8] = 'P'
        mem[0x00436fe0] = '\xe8'
        mem[0x00436fe1] = '\xeb'
        mem[0x00436fe2] = '\xfd'
        mem[0x00436fe3] = '\xfc'
        mem[0x00436fe4] = '\xff'
        cpu.RSP = 0x7fffffffdaa0
        cpu.RIP = 0x436fe0
        cpu.RBP = 0x7fffffffdae0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda98], '\xe5')
        self.assertEqual(mem[0x7fffffffda99], 'o')
        self.assertEqual(mem[0x7fffffffda9a], 'C')
        self.assertEqual(mem[0x7fffffffda9b], '\x00')
        self.assertEqual(mem[0x7fffffffda9c], '\x00')
        self.assertEqual(mem[0x7fffffffda9d], '\x00')
        self.assertEqual(mem[0x7fffffffda9e], '\x00')
        self.assertEqual(mem[0x7fffffffda9f], '\x00')
        self.assertEqual(mem[0x7fffffffdaa0], '@')
        self.assertEqual(mem[0x7fffffffdaa1], '\x00')
        self.assertEqual(mem[0x7fffffffdaa2], '\x00')
        self.assertEqual(mem[0x7fffffffdaa3], '\x00')
        self.assertEqual(mem[0x7fffffffdaa4], '\x00')
        self.assertEqual(mem[0x7fffffffdaa5], '\x00')
        self.assertEqual(mem[0x7fffffffdaa6], '\x00')
        self.assertEqual(mem[0x7fffffffdaa7], '\x00')
        self.assertEqual(mem[0x7fffffffdaa8], 'P')
        self.assertEqual(mem[0x436fe0], '\xe8')
        self.assertEqual(mem[0x436fe1], '\xeb')
        self.assertEqual(mem[0x436fe2], '\xfd')
        self.assertEqual(mem[0x436fe3], '\xfc')
        self.assertEqual(mem[0x436fe4], '\xff')
        self.assertEqual(cpu.RSP, 140737488345752L)
        self.assertEqual(cpu.RIP, 4222416L)
        self.assertEqual(cpu.RBP, 140737488345824L)

    def test_CALL_3(self):
        ''' Instruction CALL_3 
            Groups: call, mode64 
            0x400de1:	call	rax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdb20] = '\x00'
        mem[0x00400de1] = '\xff'
        mem[0x00400de2] = '\xd0'
        mem[0x7fffffffdb23] = '\x00'
        mem[0x7fffffffdb24] = '\x00'
        mem[0x7fffffffdb25] = '\x00'
        mem[0x7fffffffdb26] = '\x00'
        mem[0x7fffffffdb21] = '\x00'
        mem[0x7fffffffdb28] = 'H'
        mem[0x7fffffffdb27] = '\x00'
        mem[0x7fffffffdb22] = '\x00'
        mem[0x7fffffffdb18] = '\x95'
        mem[0x7fffffffdb19] = '\r'
        mem[0x7fffffffdb1a] = '@'
        mem[0x7fffffffdb1b] = '\x00'
        mem[0x7fffffffdb1c] = '\x00'
        mem[0x7fffffffdb1d] = '\x00'
        mem[0x7fffffffdb1e] = '\x00'
        mem[0x7fffffffdb1f] = '\x00'
        cpu.RSP = 0x7fffffffdb20
        cpu.RIP = 0x400de1
        cpu.RAX = 0x400a48
        cpu.RBP = 0x7fffffffdbe0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdb20], '\x00')
        self.assertEqual(mem[0x7fffffffdb21], '\x00')
        self.assertEqual(mem[0x7fffffffdb22], '\x00')
        self.assertEqual(mem[0x7fffffffdb23], '\x00')
        self.assertEqual(mem[0x7fffffffdb24], '\x00')
        self.assertEqual(mem[0x7fffffffdb25], '\x00')
        self.assertEqual(mem[0x7fffffffdb26], '\x00')
        self.assertEqual(mem[0x400de1], '\xff')
        self.assertEqual(mem[0x7fffffffdb28], 'H')
        self.assertEqual(mem[0x7fffffffdb27], '\x00')
        self.assertEqual(mem[0x400de2], '\xd0')
        self.assertEqual(mem[0x7fffffffdb18], '\xe3')
        self.assertEqual(mem[0x7fffffffdb19], '\r')
        self.assertEqual(mem[0x7fffffffdb1a], '@')
        self.assertEqual(mem[0x7fffffffdb1b], '\x00')
        self.assertEqual(mem[0x7fffffffdb1c], '\x00')
        self.assertEqual(mem[0x7fffffffdb1d], '\x00')
        self.assertEqual(mem[0x7fffffffdb1e], '\x00')
        self.assertEqual(mem[0x7fffffffdb1f], '\x00')
        self.assertEqual(cpu.RSP, 140737488345880L)
        self.assertEqual(cpu.RAX, 4196936L)
        self.assertEqual(cpu.RIP, 4196936L)
        self.assertEqual(cpu.RBP, 140737488346080L)

    def test_CALL_4(self):
        ''' Instruction CALL_4 
            Groups: call, mode64 
            0x401368:	call	qword ptr [r12 + rbx*8 - 8]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem.mmap(0x006b5000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdab8] = '\x01'
        mem[0x7fffffffdab9] = '\x00'
        mem[0x7fffffffdaba] = '\x00'
        mem[0x7fffffffdabb] = '\x00'
        mem[0x7fffffffdabc] = '\x00'
        mem[0x7fffffffdabd] = '\x00'
        mem[0x7fffffffdabe] = '\x00'
        mem[0x7fffffffdabf] = '\x00'
        mem[0x7fffffffdac0] = '\x00'
        mem[0x7fffffffdac1] = '\x00'
        mem[0x7fffffffdac2] = '\x00'
        mem[0x7fffffffdac3] = '\x00'
        mem[0x7fffffffdac4] = '\x00'
        mem[0x7fffffffdac5] = '\x00'
        mem[0x7fffffffdac6] = '\x00'
        mem[0x7fffffffdac7] = '\x00'
        mem[0x7fffffffdac8] = ' '
        mem[0x00401368] = 'A'
        mem[0x00401369] = '\xff'
        mem[0x0040136a] = 'T'
        mem[0x0040136b] = '\xdc'
        mem[0x0040136c] = '\xf8'
        mem[0x006b5df0] = '\xe0'
        mem[0x006b5df1] = '\x05'
        mem[0x006b5df2] = '@'
        mem[0x006b5df3] = '\x00'
        mem[0x006b5df4] = '\x00'
        mem[0x006b5df5] = '\x00'
        mem[0x006b5df6] = '\x00'
        mem[0x006b5df7] = '\x00'
        cpu.RSP = 0x7fffffffdac0
        cpu.RBP = 0x7fffffffdad0
        cpu.R12 = 0x6b5de8
        cpu.RIP = 0x401368
        cpu.RBX = 0x2
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdab8], 'm')
        self.assertEqual(mem[0x7fffffffdab9], '\x13')
        self.assertEqual(mem[0x7fffffffdaba], '@')
        self.assertEqual(mem[0x7fffffffdabb], '\x00')
        self.assertEqual(mem[0x7fffffffdabc], '\x00')
        self.assertEqual(mem[0x7fffffffdabd], '\x00')
        self.assertEqual(mem[0x7fffffffdabe], '\x00')
        self.assertEqual(mem[0x7fffffffdabf], '\x00')
        self.assertEqual(mem[0x7fffffffdac0], '\x00')
        self.assertEqual(mem[0x7fffffffdac1], '\x00')
        self.assertEqual(mem[0x7fffffffdac2], '\x00')
        self.assertEqual(mem[0x7fffffffdac3], '\x00')
        self.assertEqual(mem[0x7fffffffdac4], '\x00')
        self.assertEqual(mem[0x7fffffffdac5], '\x00')
        self.assertEqual(mem[0x7fffffffdac6], '\x00')
        self.assertEqual(mem[0x7fffffffdac7], '\x00')
        self.assertEqual(mem[0x7fffffffdac8], ' ')
        self.assertEqual(mem[0x401368], 'A')
        self.assertEqual(mem[0x401369], '\xff')
        self.assertEqual(mem[0x40136a], 'T')
        self.assertEqual(mem[0x40136b], '\xdc')
        self.assertEqual(mem[0x40136c], '\xf8')
        self.assertEqual(mem[0x6b5df0], '\xe0')
        self.assertEqual(mem[0x6b5df1], '\x05')
        self.assertEqual(mem[0x6b5df2], '@')
        self.assertEqual(mem[0x6b5df3], '\x00')
        self.assertEqual(mem[0x6b5df4], '\x00')
        self.assertEqual(mem[0x6b5df5], '\x00')
        self.assertEqual(mem[0x6b5df6], '\x00')
        self.assertEqual(mem[0x6b5df7], '\x00')
        self.assertEqual(cpu.R12, 7036392L)
        self.assertEqual(cpu.RBX, 2L)
        self.assertEqual(cpu.RSP, 140737488345784L)
        self.assertEqual(cpu.RIP, 4195808L)
        self.assertEqual(cpu.RBP, 140737488345808L)

    def test_CALL_5(self):
        ''' Instruction CALL_5 
            Groups: call, mode64 
            0x4009e9:	call	0x48fed0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdaa8] = '\xd8'
        mem[0x7fffffffdaa9] = '\t'
        mem[0x7fffffffdaaa] = '@'
        mem[0x7fffffffdaab] = '\x00'
        mem[0x7fffffffdaac] = '\x00'
        mem[0x7fffffffdaad] = '\x00'
        mem[0x7fffffffdaae] = '\x00'
        mem[0x7fffffffdaaf] = '\x00'
        mem[0x7fffffffdab0] = '\xd0'
        mem[0x7fffffffdab1] = '\xda'
        mem[0x7fffffffdab2] = '\xff'
        mem[0x7fffffffdab3] = '\xff'
        mem[0x7fffffffdab4] = '\xff'
        mem[0x7fffffffdab5] = '\x7f'
        mem[0x7fffffffdab6] = '\x00'
        mem[0x7fffffffdab7] = '\x00'
        mem[0x7fffffffdab8] = 'm'
        mem[0x004009e9] = '\xe8'
        mem[0x004009ea] = '\xe2'
        mem[0x004009eb] = '\xf4'
        mem[0x004009ec] = '\x08'
        mem[0x004009ed] = '\x00'
        cpu.RSP = 0x7fffffffdab0
        cpu.RIP = 0x4009e9
        cpu.RBP = 0x7fffffffdab0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdaa8], '\xee')
        self.assertEqual(mem[0x7fffffffdaa9], '\t')
        self.assertEqual(mem[0x7fffffffdaaa], '@')
        self.assertEqual(mem[0x7fffffffdaab], '\x00')
        self.assertEqual(mem[0x7fffffffdaac], '\x00')
        self.assertEqual(mem[0x7fffffffdaad], '\x00')
        self.assertEqual(mem[0x7fffffffdaae], '\x00')
        self.assertEqual(mem[0x7fffffffdaaf], '\x00')
        self.assertEqual(mem[0x7fffffffdab0], '\xd0')
        self.assertEqual(mem[0x7fffffffdab1], '\xda')
        self.assertEqual(mem[0x7fffffffdab2], '\xff')
        self.assertEqual(mem[0x7fffffffdab3], '\xff')
        self.assertEqual(mem[0x7fffffffdab4], '\xff')
        self.assertEqual(mem[0x7fffffffdab5], '\x7f')
        self.assertEqual(mem[0x7fffffffdab6], '\x00')
        self.assertEqual(mem[0x7fffffffdab7], '\x00')
        self.assertEqual(mem[0x7fffffffdab8], 'm')
        self.assertEqual(mem[0x4009e9], '\xe8')
        self.assertEqual(mem[0x4009ea], '\xe2')
        self.assertEqual(mem[0x4009eb], '\xf4')
        self.assertEqual(mem[0x4009ec], '\x08')
        self.assertEqual(mem[0x4009ed], '\x00')
        self.assertEqual(cpu.RSP, 140737488345768L)
        self.assertEqual(cpu.RIP, 4783824L)
        self.assertEqual(cpu.RBP, 140737488345776L)

    def test_CALL_6(self):
        ''' Instruction CALL_6 
            Groups: call, mode64 
            0x465d96:	call	0x413480
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x00465d96] = '\xe8'
        mem[0x00465d97] = '\xe5'
        mem[0x00465d98] = '\xd6'
        mem[0x00465d99] = '\xfa'
        mem[0x00465d9a] = '\xff'
        mem[0x7fffffffca68] = '\x00'
        mem[0x7fffffffca69] = '\x00'
        mem[0x7fffffffca6a] = '\x00'
        mem[0x7fffffffca6b] = '\x00'
        mem[0x7fffffffca6c] = '\x00'
        mem[0x7fffffffca6d] = '\x00'
        mem[0x7fffffffca6e] = '\x00'
        mem[0x7fffffffca6f] = '\x00'
        mem[0x7fffffffca70] = '/'
        mem[0x7fffffffca71] = 'h'
        mem[0x7fffffffca72] = 'o'
        mem[0x7fffffffca73] = 'm'
        mem[0x7fffffffca74] = 'e'
        mem[0x7fffffffca75] = '/'
        mem[0x7fffffffca76] = 'f'
        mem[0x7fffffffca77] = 'e'
        mem[0x7fffffffca78] = 'l'
        cpu.RSP = 0x7fffffffca70
        cpu.RIP = 0x465d96
        cpu.RBP = 0x7fffffffda90
        cpu.execute()
    
        self.assertEqual(mem[0x465d96], '\xe8')
        self.assertEqual(mem[0x465d97], '\xe5')
        self.assertEqual(mem[0x465d98], '\xd6')
        self.assertEqual(mem[0x465d99], '\xfa')
        self.assertEqual(mem[0x465d9a], '\xff')
        self.assertEqual(mem[0x7fffffffca68], '\x9b')
        self.assertEqual(mem[0x7fffffffca69], ']')
        self.assertEqual(mem[0x7fffffffca6a], 'F')
        self.assertEqual(mem[0x7fffffffca6b], '\x00')
        self.assertEqual(mem[0x7fffffffca6c], '\x00')
        self.assertEqual(mem[0x7fffffffca6d], '\x00')
        self.assertEqual(mem[0x7fffffffca6e], '\x00')
        self.assertEqual(mem[0x7fffffffca6f], '\x00')
        self.assertEqual(mem[0x7fffffffca70], '/')
        self.assertEqual(mem[0x7fffffffca71], 'h')
        self.assertEqual(mem[0x7fffffffca72], 'o')
        self.assertEqual(mem[0x7fffffffca73], 'm')
        self.assertEqual(mem[0x7fffffffca74], 'e')
        self.assertEqual(mem[0x7fffffffca75], '/')
        self.assertEqual(mem[0x7fffffffca76], 'f')
        self.assertEqual(mem[0x7fffffffca77], 'e')
        self.assertEqual(mem[0x7fffffffca78], 'l')
        self.assertEqual(cpu.RSP, 140737488341608L)
        self.assertEqual(cpu.RIP, 4273280L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_CALL_7(self):
        ''' Instruction CALL_7 
            Groups: call, mode64 
            0x400c80:	call	qword ptr [rbx + 0x10]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x00400c80] = '\xff'
        mem[0x00400c81] = 'S'
        mem[0x00400c82] = '\x10'
        mem[0x7fffffffdb18] = '\x83'
        mem[0x7fffffffdb19] = '\x0c'
        mem[0x7fffffffdb1a] = '@'
        mem[0x7fffffffdb1b] = '\x00'
        mem[0x7fffffffdb1c] = '\x00'
        mem[0x7fffffffdb1d] = '\x00'
        mem[0x7fffffffdb1e] = '\x00'
        mem[0x7fffffffdb1f] = '\x00'
        mem[0x7fffffffdb20] = '\x00'
        mem[0x7fffffffdb21] = '\x00'
        mem[0x7fffffffdb22] = '\x00'
        mem[0x7fffffffdb23] = '\x00'
        mem[0x7fffffffdb24] = '\x00'
        mem[0x7fffffffdb25] = '\x00'
        mem[0x7fffffffdb26] = '\x00'
        mem[0x7fffffffdb27] = '\x00'
        mem[0x7fffffffdb28] = 'H'
        mem[0x004002b8] = '\x90'
        mem[0x004002b9] = '\xb1'
        mem[0x004002ba] = 'A'
        mem[0x004002bb] = '\x00'
        mem[0x004002bc] = '\x00'
        mem[0x004002bd] = '\x00'
        mem[0x004002be] = '\x00'
        mem[0x004002bf] = '\x00'
        cpu.RBP = 0x7fffffffdbe0
        cpu.RSP = 0x7fffffffdb20
        cpu.RIP = 0x400c80
        cpu.RBX = 0x4002a8
        cpu.execute()
    
        self.assertEqual(mem[0x400c80], '\xff')
        self.assertEqual(mem[0x400c81], 'S')
        self.assertEqual(mem[0x400c82], '\x10')
        self.assertEqual(mem[0x7fffffffdb18], '\x83')
        self.assertEqual(mem[0x7fffffffdb19], '\x0c')
        self.assertEqual(mem[0x7fffffffdb1a], '@')
        self.assertEqual(mem[0x7fffffffdb1b], '\x00')
        self.assertEqual(mem[0x7fffffffdb1c], '\x00')
        self.assertEqual(mem[0x7fffffffdb1d], '\x00')
        self.assertEqual(mem[0x7fffffffdb1e], '\x00')
        self.assertEqual(mem[0x7fffffffdb1f], '\x00')
        self.assertEqual(mem[0x7fffffffdb20], '\x00')
        self.assertEqual(mem[0x7fffffffdb21], '\x00')
        self.assertEqual(mem[0x7fffffffdb22], '\x00')
        self.assertEqual(mem[0x7fffffffdb23], '\x00')
        self.assertEqual(mem[0x7fffffffdb24], '\x00')
        self.assertEqual(mem[0x7fffffffdb25], '\x00')
        self.assertEqual(mem[0x7fffffffdb26], '\x00')
        self.assertEqual(mem[0x7fffffffdb27], '\x00')
        self.assertEqual(mem[0x7fffffffdb28], 'H')
        self.assertEqual(mem[0x4002b8], '\x90')
        self.assertEqual(mem[0x4002b9], '\xb1')
        self.assertEqual(mem[0x4002ba], 'A')
        self.assertEqual(mem[0x4002bb], '\x00')
        self.assertEqual(mem[0x4002bc], '\x00')
        self.assertEqual(mem[0x4002bd], '\x00')
        self.assertEqual(mem[0x4002be], '\x00')
        self.assertEqual(mem[0x4002bf], '\x00')
        self.assertEqual(cpu.RBX, 4194984L)
        self.assertEqual(cpu.RSP, 140737488345880L)
        self.assertEqual(cpu.RIP, 4305296L)
        self.assertEqual(cpu.RBP, 140737488346080L)

    def test_CALL_8(self):
        ''' Instruction CALL_8 
            Groups: call, mode64 
            0x436ead:	call	0x45f7d0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda98] = '\xaa'
        mem[0x7fffffffda99] = 'n'
        mem[0x7fffffffda9a] = 'C'
        mem[0x7fffffffda9b] = '\x00'
        mem[0x7fffffffda9c] = '\x00'
        mem[0x7fffffffda9d] = '\x00'
        mem[0x7fffffffda9e] = '\x00'
        mem[0x7fffffffda9f] = '\x00'
        mem[0x7fffffffdaa0] = '@'
        mem[0x7fffffffdaa1] = '\x00'
        mem[0x7fffffffdaa2] = '\x00'
        mem[0x7fffffffdaa3] = '\x00'
        mem[0x7fffffffdaa4] = '\x00'
        mem[0x7fffffffdaa5] = '\x00'
        mem[0x7fffffffdaa6] = '\x00'
        mem[0x7fffffffdaa7] = '\x00'
        mem[0x7fffffffdaa8] = 'P'
        mem[0x00436ead] = '\xe8'
        mem[0x00436eae] = '\x1e'
        mem[0x00436eaf] = '\x89'
        mem[0x00436eb0] = '\x02'
        mem[0x00436eb1] = '\x00'
        cpu.RSP = 0x7fffffffdaa0
        cpu.RIP = 0x436ead
        cpu.RBP = 0x7fffffffdae0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda98], '\xb2')
        self.assertEqual(mem[0x7fffffffda99], 'n')
        self.assertEqual(mem[0x7fffffffda9a], 'C')
        self.assertEqual(mem[0x7fffffffda9b], '\x00')
        self.assertEqual(mem[0x7fffffffda9c], '\x00')
        self.assertEqual(mem[0x7fffffffda9d], '\x00')
        self.assertEqual(mem[0x7fffffffda9e], '\x00')
        self.assertEqual(mem[0x7fffffffda9f], '\x00')
        self.assertEqual(mem[0x7fffffffdaa0], '@')
        self.assertEqual(mem[0x7fffffffdaa1], '\x00')
        self.assertEqual(mem[0x7fffffffdaa2], '\x00')
        self.assertEqual(mem[0x7fffffffdaa3], '\x00')
        self.assertEqual(mem[0x7fffffffdaa4], '\x00')
        self.assertEqual(mem[0x7fffffffdaa5], '\x00')
        self.assertEqual(mem[0x7fffffffdaa6], '\x00')
        self.assertEqual(mem[0x7fffffffdaa7], '\x00')
        self.assertEqual(mem[0x7fffffffdaa8], 'P')
        self.assertEqual(mem[0x436ead], '\xe8')
        self.assertEqual(mem[0x436eae], '\x1e')
        self.assertEqual(mem[0x436eaf], '\x89')
        self.assertEqual(mem[0x436eb0], '\x02')
        self.assertEqual(mem[0x436eb1], '\x00')
        self.assertEqual(cpu.RSP, 140737488345752L)
        self.assertEqual(cpu.RIP, 4585424L)
        self.assertEqual(cpu.RBP, 140737488345824L)

    def test_CALL_9(self):
        ''' Instruction CALL_9 
            Groups: call, mode64 
            0x4369b0:	call	0x465c50
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda98] = '\x08'
        mem[0x7fffffffda99] = '\x00'
        mem[0x7fffffffda9a] = '\x00'
        mem[0x7fffffffda9b] = '\x00'
        mem[0x7fffffffda9c] = '\x00'
        mem[0x7fffffffda9d] = '\x00'
        mem[0x7fffffffda9e] = '\x00'
        mem[0x7fffffffda9f] = '\x00'
        mem[0x7fffffffdaa0] = '@'
        mem[0x7fffffffdaa1] = '\x00'
        mem[0x7fffffffdaa2] = '\x00'
        mem[0x7fffffffdaa3] = '\x00'
        mem[0x7fffffffdaa4] = '\x00'
        mem[0x7fffffffdaa5] = '\x00'
        mem[0x7fffffffdaa6] = '\x00'
        mem[0x7fffffffdaa7] = '\x00'
        mem[0x7fffffffdaa8] = 'P'
        mem[0x004369b0] = '\xe8'
        mem[0x004369b1] = '\x9b'
        mem[0x004369b2] = '\xf2'
        mem[0x004369b3] = '\x02'
        mem[0x004369b4] = '\x00'
        cpu.RSP = 0x7fffffffdaa0
        cpu.RIP = 0x4369b0
        cpu.RBP = 0x7fffffffdae0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda98], '\xb5')
        self.assertEqual(mem[0x7fffffffda99], 'i')
        self.assertEqual(mem[0x7fffffffda9a], 'C')
        self.assertEqual(mem[0x7fffffffda9b], '\x00')
        self.assertEqual(mem[0x7fffffffda9c], '\x00')
        self.assertEqual(mem[0x7fffffffda9d], '\x00')
        self.assertEqual(mem[0x7fffffffda9e], '\x00')
        self.assertEqual(mem[0x7fffffffda9f], '\x00')
        self.assertEqual(mem[0x7fffffffdaa0], '@')
        self.assertEqual(mem[0x7fffffffdaa1], '\x00')
        self.assertEqual(mem[0x7fffffffdaa2], '\x00')
        self.assertEqual(mem[0x7fffffffdaa3], '\x00')
        self.assertEqual(mem[0x7fffffffdaa4], '\x00')
        self.assertEqual(mem[0x7fffffffdaa5], '\x00')
        self.assertEqual(mem[0x7fffffffdaa6], '\x00')
        self.assertEqual(mem[0x7fffffffdaa7], '\x00')
        self.assertEqual(mem[0x7fffffffdaa8], 'P')
        self.assertEqual(mem[0x4369b0], '\xe8')
        self.assertEqual(mem[0x4369b1], '\x9b')
        self.assertEqual(mem[0x4369b2], '\xf2')
        self.assertEqual(mem[0x4369b3], '\x02')
        self.assertEqual(mem[0x4369b4], '\x00')
        self.assertEqual(cpu.RSP, 140737488345752L)
        self.assertEqual(cpu.RIP, 4611152L)
        self.assertEqual(cpu.RBP, 140737488345824L)

    def test_CMOVAE_1(self):
        ''' Instruction CMOVAE_1 
            Groups: cmov 
            0x411688:	cmovae	rax, r10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411688] = 'I'
        mem[0x00411689] = '\x0f'
        mem[0x0041168a] = 'C'
        mem[0x0041168b] = '\xc2'
        cpu.RIP = 0x411688
        cpu.CF = False
        cpu.RAX = 0x20
        cpu.R10 = 0x4a0
        cpu.execute()
    
        self.assertEqual(mem[0x411688], 'I')
        self.assertEqual(mem[0x411689], '\x0f')
        self.assertEqual(mem[0x41168a], 'C')
        self.assertEqual(mem[0x41168b], '\xc2')
        self.assertEqual(cpu.RAX, 1184L)
        self.assertEqual(cpu.RIP, 4265612L)
        self.assertEqual(cpu.R10, 1184L)

    def test_CMOVAE_2(self):
        ''' Instruction CMOVAE_2 
            Groups: cmov 
            0x411688:	cmovae	rax, r10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411688] = 'I'
        mem[0x00411689] = '\x0f'
        mem[0x0041168a] = 'C'
        mem[0x0041168b] = '\xc2'
        cpu.RIP = 0x411688
        cpu.CF = False
        cpu.RAX = 0x20
        cpu.R10 = 0x20
        cpu.execute()
    
        self.assertEqual(mem[0x411688], 'I')
        self.assertEqual(mem[0x411689], '\x0f')
        self.assertEqual(mem[0x41168a], 'C')
        self.assertEqual(mem[0x41168b], '\xc2')
        self.assertEqual(cpu.RAX, 32L)
        self.assertEqual(cpu.RIP, 4265612L)
        self.assertEqual(cpu.R10, 32L)

    def test_CMOVAE_3(self):
        ''' Instruction CMOVAE_3 
            Groups: cmov 
            0x411688:	cmovae	rax, r10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411688] = 'I'
        mem[0x00411689] = '\x0f'
        mem[0x0041168a] = 'C'
        mem[0x0041168b] = '\xc2'
        cpu.RIP = 0x411688
        cpu.CF = False
        cpu.RAX = 0x20
        cpu.R10 = 0x30
        cpu.execute()
    
        self.assertEqual(mem[0x411688], 'I')
        self.assertEqual(mem[0x411689], '\x0f')
        self.assertEqual(mem[0x41168a], 'C')
        self.assertEqual(mem[0x41168b], '\xc2')
        self.assertEqual(cpu.RAX, 48L)
        self.assertEqual(cpu.RIP, 4265612L)
        self.assertEqual(cpu.R10, 48L)

    def test_CMOVAE_4(self):
        ''' Instruction CMOVAE_4 
            Groups: cmov 
            0x411688:	cmovae	rax, r10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411688] = 'I'
        mem[0x00411689] = '\x0f'
        mem[0x0041168a] = 'C'
        mem[0x0041168b] = '\xc2'
        cpu.RIP = 0x411688
        cpu.CF = False
        cpu.RAX = 0x20
        cpu.R10 = 0x650
        cpu.execute()
    
        self.assertEqual(mem[0x411688], 'I')
        self.assertEqual(mem[0x411689], '\x0f')
        self.assertEqual(mem[0x41168a], 'C')
        self.assertEqual(mem[0x41168b], '\xc2')
        self.assertEqual(cpu.RAX, 1616L)
        self.assertEqual(cpu.RIP, 4265612L)
        self.assertEqual(cpu.R10, 1616L)

    def test_CMOVAE_5(self):
        ''' Instruction CMOVAE_5 
            Groups: cmov 
            0x411688:	cmovae	rax, r10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411688] = 'I'
        mem[0x00411689] = '\x0f'
        mem[0x0041168a] = 'C'
        mem[0x0041168b] = '\xc2'
        cpu.RIP = 0x411688
        cpu.CF = False
        cpu.RAX = 0x20
        cpu.R10 = 0x20
        cpu.execute()
    
        self.assertEqual(mem[0x411688], 'I')
        self.assertEqual(mem[0x411689], '\x0f')
        self.assertEqual(mem[0x41168a], 'C')
        self.assertEqual(mem[0x41168b], '\xc2')
        self.assertEqual(cpu.RAX, 32L)
        self.assertEqual(cpu.RIP, 4265612L)
        self.assertEqual(cpu.R10, 32L)

    def test_CMOVAE_6(self):
        ''' Instruction CMOVAE_6 
            Groups: cmov 
            0x411688:	cmovae	rax, r10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411688] = 'I'
        mem[0x00411689] = '\x0f'
        mem[0x0041168a] = 'C'
        mem[0x0041168b] = '\xc2'
        cpu.RIP = 0x411688
        cpu.CF = False
        cpu.RAX = 0x20
        cpu.R10 = 0x40
        cpu.execute()
    
        self.assertEqual(mem[0x411688], 'I')
        self.assertEqual(mem[0x411689], '\x0f')
        self.assertEqual(mem[0x41168a], 'C')
        self.assertEqual(mem[0x41168b], '\xc2')
        self.assertEqual(cpu.RAX, 64L)
        self.assertEqual(cpu.RIP, 4265612L)
        self.assertEqual(cpu.R10, 64L)

    def test_CMOVA_1(self):
        ''' Instruction CMOVA_1 
            Groups: cmov 
            0x41415a:	cmova	rdx, r13
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x0041415a] = 'I'
        mem[0x0041415b] = '\x0f'
        mem[0x0041415c] = 'G'
        mem[0x0041415d] = '\xd5'
        cpu.RDX = 0x4a0
        cpu.ZF = False
        cpu.R13 = 0x21e00
        cpu.RIP = 0x41415a
        cpu.CF = True
        cpu.execute()
    
        self.assertEqual(mem[0x41415a], 'I')
        self.assertEqual(mem[0x41415b], '\x0f')
        self.assertEqual(mem[0x41415c], 'G')
        self.assertEqual(mem[0x41415d], '\xd5')
        self.assertEqual(cpu.RDX, 1184L)
        self.assertEqual(cpu.RIP, 4276574L)
        self.assertEqual(cpu.R13, 138752L)

    def test_CMOVB_1(self):
        ''' Instruction CMOVB_1 
            Groups: cmov 
            0x400fed:	cmovb	r12, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400ff0] = '\xe3'
        mem[0x00400fed] = 'L'
        mem[0x00400fee] = '\x0f'
        mem[0x00400fef] = 'B'
        cpu.R12 = 0x40
        cpu.CF = False
        cpu.RIP = 0x400fed
        cpu.RBX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400ff0], '\xe3')
        self.assertEqual(mem[0x400fed], 'L')
        self.assertEqual(mem[0x400fee], '\x0f')
        self.assertEqual(mem[0x400fef], 'B')
        self.assertEqual(cpu.R12, 64L)
        self.assertEqual(cpu.RIP, 4198385L)
        self.assertEqual(cpu.RBX, 8L)

    def test_CMOVB_2(self):
        ''' Instruction CMOVB_2 
            Groups: cmov 
            0x401190:	cmovb	r12, rax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x00401190] = 'L'
        mem[0x00401191] = '\x0f'
        mem[0x00401192] = 'B'
        mem[0x00401193] = '\xe0'
        cpu.RIP = 0x401190
        cpu.R12 = 0x40
        cpu.CF = False
        cpu.RAX = 0x40
        cpu.execute()
    
        self.assertEqual(mem[0x401190], 'L')
        self.assertEqual(mem[0x401191], '\x0f')
        self.assertEqual(mem[0x401192], 'B')
        self.assertEqual(mem[0x401193], '\xe0')
        self.assertEqual(cpu.R12, 64L)
        self.assertEqual(cpu.RAX, 64L)
        self.assertEqual(cpu.RIP, 4198804L)

    def test_CMOVE_1(self):
        ''' Instruction CMOVE_1 
            Groups: cmov 
            0x436edc:	cmove	rax, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436edc] = 'H'
        mem[0x00436edd] = '\x0f'
        mem[0x00436ede] = 'D'
        mem[0x00436edf] = '\xc3'
        cpu.ZF = True
        cpu.RIP = 0x436edc
        cpu.RAX = 0x0
        cpu.RBX = 0x4a5301
        cpu.execute()
    
        self.assertEqual(mem[0x436edc], 'H')
        self.assertEqual(mem[0x436edd], '\x0f')
        self.assertEqual(mem[0x436ede], 'D')
        self.assertEqual(mem[0x436edf], '\xc3')
        self.assertEqual(cpu.RAX, 4870913L)
        self.assertEqual(cpu.RIP, 4419296L)
        self.assertEqual(cpu.RBX, 4870913L)

    def test_CMOVE_2(self):
        ''' Instruction CMOVE_2 
            Groups: cmov 
            0x415da5:	cmove	rax, rdx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00415000, 0x1000, 'rwx')
        mem[0x00415da8] = '\xc2'
        mem[0x00415da5] = 'H'
        mem[0x00415da6] = '\x0f'
        mem[0x00415da7] = 'D'
        cpu.ZF = False
        cpu.RIP = 0x415da5
        cpu.RAX = 0x6e01c0
        cpu.RDX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x415da8], '\xc2')
        self.assertEqual(mem[0x415da5], 'H')
        self.assertEqual(mem[0x415da6], '\x0f')
        self.assertEqual(mem[0x415da7], 'D')
        self.assertEqual(cpu.RAX, 7209408L)
        self.assertEqual(cpu.RIP, 4283817L)
        self.assertEqual(cpu.RDX, 0L)

    def test_CMOVE_3(self):
        ''' Instruction CMOVE_3 
            Groups: cmov 
            0x436f00:	cmove	rax, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436f00] = 'H'
        mem[0x00436f01] = '\x0f'
        mem[0x00436f02] = 'D'
        mem[0x00436f03] = '\xc3'
        cpu.ZF = True
        cpu.RIP = 0x436f00
        cpu.RAX = 0x0
        cpu.RBX = 0x4a5301
        cpu.execute()
    
        self.assertEqual(mem[0x436f00], 'H')
        self.assertEqual(mem[0x436f01], '\x0f')
        self.assertEqual(mem[0x436f02], 'D')
        self.assertEqual(mem[0x436f03], '\xc3')
        self.assertEqual(cpu.RAX, 4870913L)
        self.assertEqual(cpu.RIP, 4419332L)
        self.assertEqual(cpu.RBX, 4870913L)

    def test_CMOVE_4(self):
        ''' Instruction CMOVE_4 
            Groups: cmov 
            0x436f24:	cmove	rax, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436f24] = 'H'
        mem[0x00436f25] = '\x0f'
        mem[0x00436f26] = 'D'
        mem[0x00436f27] = '\xc3'
        cpu.ZF = True
        cpu.RIP = 0x436f24
        cpu.RAX = 0x0
        cpu.RBX = 0x4a5301
        cpu.execute()
    
        self.assertEqual(mem[0x436f24], 'H')
        self.assertEqual(mem[0x436f25], '\x0f')
        self.assertEqual(mem[0x436f26], 'D')
        self.assertEqual(mem[0x436f27], '\xc3')
        self.assertEqual(cpu.RAX, 4870913L)
        self.assertEqual(cpu.RIP, 4419368L)
        self.assertEqual(cpu.RBX, 4870913L)

    def test_CMOVE_5(self):
        ''' Instruction CMOVE_5 
            Groups: cmov 
            0x436a10:	cmove	rax, rdi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436a10] = 'H'
        mem[0x00436a11] = '\x0f'
        mem[0x00436a12] = 'D'
        mem[0x00436a13] = '\xc7'
        cpu.ZF = True
        cpu.RDI = 0x4a5301
        cpu.RIP = 0x436a10
        cpu.RAX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x436a10], 'H')
        self.assertEqual(mem[0x436a11], '\x0f')
        self.assertEqual(mem[0x436a12], 'D')
        self.assertEqual(mem[0x436a13], '\xc7')
        self.assertEqual(cpu.RDI, 4870913L)
        self.assertEqual(cpu.RAX, 4870913L)
        self.assertEqual(cpu.RIP, 4418068L)

    def test_CMOVE_6(self):
        ''' Instruction CMOVE_6 
            Groups: cmov 
            0x415da5:	cmove	rax, rdx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00415000, 0x1000, 'rwx')
        mem[0x00415da8] = '\xc2'
        mem[0x00415da5] = 'H'
        mem[0x00415da6] = '\x0f'
        mem[0x00415da7] = 'D'
        cpu.ZF = False
        cpu.RIP = 0x415da5
        cpu.RAX = 0x6bf1c0
        cpu.RDX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x415da8], '\xc2')
        self.assertEqual(mem[0x415da5], 'H')
        self.assertEqual(mem[0x415da6], '\x0f')
        self.assertEqual(mem[0x415da7], 'D')
        self.assertEqual(cpu.RAX, 7074240L)
        self.assertEqual(cpu.RIP, 4283817L)
        self.assertEqual(cpu.RDX, 0L)

    def test_CMOVNE_1(self):
        ''' Instruction CMOVNE_1 
            Groups: cmov 
            0x462345:	cmovne	rbx, rax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, 'rwx')
        mem[0x00462348] = '\xd8'
        mem[0x00462345] = 'H'
        mem[0x00462346] = '\x0f'
        mem[0x00462347] = 'E'
        cpu.ZF = True
        cpu.RIP = 0x462345
        cpu.RAX = 0x4a5301
        cpu.RBX = 0x6bf6a0
        cpu.execute()
    
        self.assertEqual(mem[0x462348], '\xd8')
        self.assertEqual(mem[0x462345], 'H')
        self.assertEqual(mem[0x462346], '\x0f')
        self.assertEqual(mem[0x462347], 'E')
        self.assertEqual(cpu.RAX, 4870913L)
        self.assertEqual(cpu.RIP, 4596553L)
        self.assertEqual(cpu.RBX, 7075488L)

    def test_CMPXCHG_1(self):
        ''' Instruction CMPXCHG_1 
            Groups:  
            0x4134e6:	cmpxchg	dword ptr [rbx], esi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        mem[0x006b9840] = '\x00'
        mem[0x006b9841] = '\x00'
        mem[0x006b9842] = '\x00'
        mem[0x006b9843] = '\x00'
        mem[0x004134e6] = '\x0f'
        mem[0x004134e7] = '\xb1'
        mem[0x004134e8] = '3'
        cpu.PF = True
        cpu.ESI = 0x1
        cpu.RAX = 0x0
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RBX = 0x6b9840
        cpu.CF = False
        cpu.RIP = 0x4134e6
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x6b9840], '\x01')
        self.assertEqual(mem[0x6b9841], '\x00')
        self.assertEqual(mem[0x6b9842], '\x00')
        self.assertEqual(mem[0x6b9843], '\x00')
        self.assertEqual(mem[0x4134e6], '\x0f')
        self.assertEqual(mem[0x4134e7], '\xb1')
        self.assertEqual(mem[0x4134e8], '3')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ESI, 1L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RBX, 7051328L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4273385L)
        self.assertEqual(cpu.SF, False)

    def test_CMPXCHG_2(self):
        ''' Instruction CMPXCHG_2 
            Groups:  
            0x435935:	cmpxchg	qword ptr [rdx], rdi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00435000, 0x1000, 'rwx')
        mem.mmap(0x006bd000, 0x1000, 'rwx')
        mem[0x006bd380] = '\x00'
        mem[0x006bd381] = '\x00'
        mem[0x006bd382] = '\x00'
        mem[0x006bd383] = '\x00'
        mem[0x006bd384] = '\x00'
        mem[0x006bd385] = '\x00'
        mem[0x006bd386] = '\x00'
        mem[0x006bd387] = '\x00'
        mem[0x00435935] = 'H'
        mem[0x00435936] = '\x0f'
        mem[0x00435937] = '\xb1'
        mem[0x00435938] = ':'
        cpu.SF = False
        cpu.PF = True
        cpu.RAX = 0x0
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RDI = 0x6bb7c0
        cpu.CF = False
        cpu.RIP = 0x435935
        cpu.RDX = 0x6bd380
        cpu.execute()
    
        self.assertEqual(mem[0x6bd380], '\xc0')
        self.assertEqual(mem[0x6bd381], '\xb7')
        self.assertEqual(mem[0x6bd382], 'k')
        self.assertEqual(mem[0x6bd383], '\x00')
        self.assertEqual(mem[0x6bd384], '\x00')
        self.assertEqual(mem[0x6bd385], '\x00')
        self.assertEqual(mem[0x6bd386], '\x00')
        self.assertEqual(mem[0x6bd387], '\x00')
        self.assertEqual(mem[0x435935], 'H')
        self.assertEqual(mem[0x435936], '\x0f')
        self.assertEqual(mem[0x435937], '\xb1')
        self.assertEqual(mem[0x435938], ':')
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RDI, 7059392L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4413753L)
        self.assertEqual(cpu.RDX, 7066496L)

    def test_CMPXCHG_3(self):
        ''' Instruction CMPXCHG_3 
            Groups:  
            0x4134e6:	cmpxchg	dword ptr [rbx], esi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        mem[0x006b9840] = '\x00'
        mem[0x006b9841] = '\x00'
        mem[0x006b9842] = '\x00'
        mem[0x006b9843] = '\x00'
        mem[0x004134e6] = '\x0f'
        mem[0x004134e7] = '\xb1'
        mem[0x004134e8] = '3'
        cpu.PF = True
        cpu.ESI = 0x1
        cpu.RAX = 0x0
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RBX = 0x6b9840
        cpu.CF = False
        cpu.RIP = 0x4134e6
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x6b9840], '\x01')
        self.assertEqual(mem[0x6b9841], '\x00')
        self.assertEqual(mem[0x6b9842], '\x00')
        self.assertEqual(mem[0x6b9843], '\x00')
        self.assertEqual(mem[0x4134e6], '\x0f')
        self.assertEqual(mem[0x4134e7], '\xb1')
        self.assertEqual(mem[0x4134e8], '3')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ESI, 1L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RBX, 7051328L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4273385L)
        self.assertEqual(cpu.SF, False)

    def test_CMPXCHG_4(self):
        ''' Instruction CMPXCHG_4 
            Groups:  
            0x4134e6:	cmpxchg	dword ptr [rbx], esi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        mem[0x006b9840] = '\x00'
        mem[0x006b9841] = '\x00'
        mem[0x006b9842] = '\x00'
        mem[0x006b9843] = '\x00'
        mem[0x004134e6] = '\x0f'
        mem[0x004134e7] = '\xb1'
        mem[0x004134e8] = '3'
        cpu.PF = True
        cpu.ESI = 0x1
        cpu.RAX = 0x0
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RBX = 0x6b9840
        cpu.CF = False
        cpu.RIP = 0x4134e6
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x6b9840], '\x01')
        self.assertEqual(mem[0x6b9841], '\x00')
        self.assertEqual(mem[0x6b9842], '\x00')
        self.assertEqual(mem[0x6b9843], '\x00')
        self.assertEqual(mem[0x4134e6], '\x0f')
        self.assertEqual(mem[0x4134e7], '\xb1')
        self.assertEqual(mem[0x4134e8], '3')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ESI, 1L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RBX, 7051328L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4273385L)
        self.assertEqual(cpu.SF, False)

    def test_CMPXCHG_5(self):
        ''' Instruction CMPXCHG_5 
            Groups:  
            0x4134e6:	cmpxchg	dword ptr [rbx], esi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        mem[0x006b9840] = '\x00'
        mem[0x006b9841] = '\x00'
        mem[0x006b9842] = '\x00'
        mem[0x006b9843] = '\x00'
        mem[0x004134e6] = '\x0f'
        mem[0x004134e7] = '\xb1'
        mem[0x004134e8] = '3'
        cpu.PF = True
        cpu.ESI = 0x1
        cpu.RAX = 0x0
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RBX = 0x6b9840
        cpu.CF = False
        cpu.RIP = 0x4134e6
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x6b9840], '\x01')
        self.assertEqual(mem[0x6b9841], '\x00')
        self.assertEqual(mem[0x6b9842], '\x00')
        self.assertEqual(mem[0x6b9843], '\x00')
        self.assertEqual(mem[0x4134e6], '\x0f')
        self.assertEqual(mem[0x4134e7], '\xb1')
        self.assertEqual(mem[0x4134e8], '3')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ESI, 1L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RBX, 7051328L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4273385L)
        self.assertEqual(cpu.SF, False)

    def test_CMPXCHG_6(self):
        ''' Instruction CMPXCHG_6 
            Groups:  
            0x407077:	cmpxchg	dword ptr [rip + 0x2b4692], esi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00407000, 0x1000, 'rwx')
        mem.mmap(0x006bb000, 0x1000, 'rwx')
        mem[0x006bb710] = '\x00'
        mem[0x006bb711] = '\x00'
        mem[0x006bb712] = '\x00'
        mem[0x006bb713] = '\x00'
        mem[0x00407077] = '\x0f'
        mem[0x00407078] = '\xb1'
        mem[0x00407079] = '5'
        mem[0x0040707a] = '\x92'
        mem[0x0040707b] = 'F'
        mem[0x0040707c] = '+'
        mem[0x0040707d] = '\x00'
        cpu.PF = True
        cpu.ESI = 0x1
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RAX = 0x0
        cpu.CF = False
        cpu.RIP = 0x407077
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x6bb710], '\x01')
        self.assertEqual(mem[0x6bb711], '\x00')
        self.assertEqual(mem[0x6bb712], '\x00')
        self.assertEqual(mem[0x6bb713], '\x00')
        self.assertEqual(mem[0x407077], '\x0f')
        self.assertEqual(mem[0x407078], '\xb1')
        self.assertEqual(mem[0x407079], '5')
        self.assertEqual(mem[0x40707a], '\x92')
        self.assertEqual(mem[0x40707b], 'F')
        self.assertEqual(mem[0x40707c], '+')
        self.assertEqual(mem[0x40707d], '\x00')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ESI, 1L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4223102L)
        self.assertEqual(cpu.SF, False)

    def test_CMPXCHG_7(self):
        ''' Instruction CMPXCHG_7 
            Groups:  
            0x414116:	cmpxchg	dword ptr [rbx], esi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        mem[0x006b9840] = '\x00'
        mem[0x006b9841] = '\x00'
        mem[0x006b9842] = '\x00'
        mem[0x006b9843] = '\x00'
        mem[0x00414116] = '\x0f'
        mem[0x00414117] = '\xb1'
        mem[0x00414118] = '3'
        cpu.PF = True
        cpu.ESI = 0x1
        cpu.RAX = 0x0
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RBX = 0x6b9840
        cpu.CF = False
        cpu.RIP = 0x414116
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x6b9840], '\x01')
        self.assertEqual(mem[0x6b9841], '\x00')
        self.assertEqual(mem[0x6b9842], '\x00')
        self.assertEqual(mem[0x6b9843], '\x00')
        self.assertEqual(mem[0x414116], '\x0f')
        self.assertEqual(mem[0x414117], '\xb1')
        self.assertEqual(mem[0x414118], '3')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ESI, 1L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RBX, 7051328L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4276505L)
        self.assertEqual(cpu.SF, False)

    def test_CMPXCHG_8(self):
        ''' Instruction CMPXCHG_8 
            Groups:  
            0x4134e6:	cmpxchg	dword ptr [rbx], esi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        mem[0x006b9840] = '\x00'
        mem[0x006b9841] = '\x00'
        mem[0x006b9842] = '\x00'
        mem[0x006b9843] = '\x00'
        mem[0x004134e6] = '\x0f'
        mem[0x004134e7] = '\xb1'
        mem[0x004134e8] = '3'
        cpu.PF = True
        cpu.ESI = 0x1
        cpu.RAX = 0x0
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RBX = 0x6b9840
        cpu.CF = False
        cpu.RIP = 0x4134e6
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x6b9840], '\x01')
        self.assertEqual(mem[0x6b9841], '\x00')
        self.assertEqual(mem[0x6b9842], '\x00')
        self.assertEqual(mem[0x6b9843], '\x00')
        self.assertEqual(mem[0x4134e6], '\x0f')
        self.assertEqual(mem[0x4134e7], '\xb1')
        self.assertEqual(mem[0x4134e8], '3')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ESI, 1L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RBX, 7051328L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4273385L)
        self.assertEqual(cpu.SF, False)

    def test_CMP_1(self):
        ''' Instruction CMP_1 
            Groups:  
            0x4322a2:	cmp	rax, r8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a2] = 'L'
        mem[0x004322a3] = '9'
        mem[0x004322a4] = '\xc0'
        cpu.PF = False
        cpu.RAX = 0x22
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.R8 = 0x0
        cpu.CF = True
        cpu.RIP = 0x4322a2
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4322a2], 'L')
        self.assertEqual(mem[0x4322a3], '9')
        self.assertEqual(mem[0x4322a4], '\xc0')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 34L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.R8, 0L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4399781L)
        self.assertEqual(cpu.SF, False)

    def test_CMP_10(self):
        ''' Instruction CMP_10 
            Groups:  
            0x41172f:	cmp	r14, rax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411730] = '9'
        mem[0x00411731] = '\xc6'
        mem[0x0041172f] = 'I'
        cpu.R14 = 0x6b98b8
        cpu.PF = True
        cpu.RAX = 0x6b98b8
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x41172f
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x411730], '9')
        self.assertEqual(mem[0x411731], '\xc6')
        self.assertEqual(mem[0x41172f], 'I')
        self.assertEqual(cpu.R14, 7051448L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 7051448L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4265778L)
        self.assertEqual(cpu.SF, False)

    def test_CMP_11(self):
        ''' Instruction CMP_11 
            Groups:  
            0x411640:	cmp	rsi, -0x41
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411640] = 'H'
        mem[0x00411641] = '\x83'
        mem[0x00411642] = '\xfe'
        mem[0x00411643] = '\xbf'
        cpu.PF = True
        cpu.RSI = 0x10
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x411640
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x411640], 'H')
        self.assertEqual(mem[0x411641], '\x83')
        self.assertEqual(mem[0x411642], '\xfe')
        self.assertEqual(mem[0x411643], '\xbf')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RSI, 16L)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4265540L)
        self.assertEqual(cpu.SF, False)

    def test_CMP_12(self):
        ''' Instruction CMP_12 
            Groups:  
            0x406e8d:	cmp	r14w, word ptr [rbx]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffe000, 0x1000, 'rwx')
        mem[0x7fffffffe904] = 'C'
        mem[0x7fffffffe905] = 'O'
        mem[0x00406e8d] = 'f'
        mem[0x00406e8e] = 'D'
        mem[0x00406e8f] = ';'
        mem[0x00406e90] = '3'
        cpu.R14W = 0x444c
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RBX = 0x7fffffffe904
        cpu.CF = False
        cpu.RIP = 0x406e8d
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffe904], 'C')
        self.assertEqual(mem[0x7fffffffe905], 'O')
        self.assertEqual(mem[0x406e8d], 'f')
        self.assertEqual(mem[0x406e8e], 'D')
        self.assertEqual(mem[0x406e8f], ';')
        self.assertEqual(mem[0x406e90], '3')
        self.assertEqual(cpu.R14W, 17484L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RBX, 140737488349444L)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4222609L)
        self.assertEqual(cpu.SF, True)

    def test_CMP_13(self):
        ''' Instruction CMP_13 
            Groups:  
            0x420ef0:	cmp	rdx, 0x400
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00420000, 0x1000, 'rwx')
        mem[0x00420ef0] = 'H'
        mem[0x00420ef1] = '\x81'
        mem[0x00420ef2] = '\xfa'
        mem[0x00420ef3] = '\x00'
        mem[0x00420ef4] = '\x04'
        mem[0x00420ef5] = '\x00'
        mem[0x00420ef6] = '\x00'
        cpu.SF = False
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x420ef0
        cpu.RDX = 0x20
        cpu.execute()
    
        self.assertEqual(mem[0x420ef0], 'H')
        self.assertEqual(mem[0x420ef1], '\x81')
        self.assertEqual(mem[0x420ef2], '\xfa')
        self.assertEqual(mem[0x420ef3], '\x00')
        self.assertEqual(mem[0x420ef4], '\x04')
        self.assertEqual(mem[0x420ef5], '\x00')
        self.assertEqual(mem[0x420ef6], '\x00')
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4329207L)
        self.assertEqual(cpu.RDX, 32L)

    def test_CMP_14(self):
        ''' Instruction CMP_14 
            Groups:  
            0x400b17:	cmp	dword ptr [rbp - 0x18], 5
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x00400b18] = '}'
        mem[0x00400b17] = '\x83'
        mem[0x7fffffffdaf8] = '\x00'
        mem[0x7fffffffdaf9] = '\x00'
        mem[0x00400b1a] = '\x05'
        mem[0x7fffffffdafb] = '\x00'
        mem[0x00400b19] = '\xe8'
        mem[0x7fffffffdafa] = '\x00'
        cpu.SF = False
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x400b17
        cpu.RBP = 0x7fffffffdb10
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdaf8], '\x00')
        self.assertEqual(mem[0x7fffffffdafb], '\x00')
        self.assertEqual(mem[0x400b17], '\x83')
        self.assertEqual(mem[0x400b18], '}')
        self.assertEqual(mem[0x400b19], '\xe8')
        self.assertEqual(mem[0x400b1a], '\x05')
        self.assertEqual(mem[0x7fffffffdaf9], '\x00')
        self.assertEqual(mem[0x7fffffffdafa], '\x00')
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4197147L)
        self.assertEqual(cpu.RBP, 140737488345872L)

    def test_CMP_15(self):
        ''' Instruction CMP_15 
            Groups:  
            0x406e8d:	cmp	r14w, word ptr [rbx]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffe000, 0x1000, 'rwx')
        mem[0x7fffffffeb6a] = 'P'
        mem[0x7fffffffeb6b] = 'W'
        mem[0x00406e8d] = 'f'
        mem[0x00406e8e] = 'D'
        mem[0x00406e8f] = ';'
        mem[0x00406e90] = '3'
        cpu.R14W = 0x444c
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RBX = 0x7fffffffeb6a
        cpu.CF = False
        cpu.RIP = 0x406e8d
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffeb6a], 'P')
        self.assertEqual(mem[0x7fffffffeb6b], 'W')
        self.assertEqual(mem[0x406e8d], 'f')
        self.assertEqual(mem[0x406e8e], 'D')
        self.assertEqual(mem[0x406e8f], ';')
        self.assertEqual(mem[0x406e90], '3')
        self.assertEqual(cpu.R14W, 17484L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RBX, 140737488350058L)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4222609L)
        self.assertEqual(cpu.SF, True)

    def test_CMP_16(self):
        ''' Instruction CMP_16 
            Groups:  
            0x400bf4:	cmp	qword ptr [rdi - 8], 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffddb8] = '9'
        mem[0x00400bf4] = 'H'
        mem[0x00400bf5] = '\x83'
        mem[0x00400bf6] = '\x7f'
        mem[0x00400bf7] = '\xf8'
        mem[0x00400bf8] = '\x00'
        mem[0x7fffffffddb9] = '\xed'
        mem[0x7fffffffddba] = '\xff'
        mem[0x7fffffffddbb] = '\xff'
        mem[0x7fffffffddbc] = '\xff'
        mem[0x7fffffffddbd] = '\x7f'
        mem[0x7fffffffddbe] = '\x00'
        mem[0x7fffffffddbf] = '\x00'
        cpu.PF = True
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.RDI = 0x7fffffffddc0
        cpu.CF = False
        cpu.RIP = 0x400bf4
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400bf8], '\x00')
        self.assertEqual(mem[0x400bf4], 'H')
        self.assertEqual(mem[0x400bf5], '\x83')
        self.assertEqual(mem[0x400bf6], '\x7f')
        self.assertEqual(mem[0x400bf7], '\xf8')
        self.assertEqual(mem[0x7fffffffddb8], '9')
        self.assertEqual(mem[0x7fffffffddb9], '\xed')
        self.assertEqual(mem[0x7fffffffddba], '\xff')
        self.assertEqual(mem[0x7fffffffddbb], '\xff')
        self.assertEqual(mem[0x7fffffffddbc], '\xff')
        self.assertEqual(mem[0x7fffffffddbd], '\x7f')
        self.assertEqual(mem[0x7fffffffddbe], '\x00')
        self.assertEqual(mem[0x7fffffffddbf], '\x00')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RDI, 140737488346560L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4197369L)
        self.assertEqual(cpu.SF, False)

    def test_CMP_17(self):
        ''' Instruction CMP_17 
            Groups:  
            0x400bf4:	cmp	qword ptr [rdi - 8], 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffddf8] = 'Q'
        mem[0x00400bf4] = 'H'
        mem[0x00400bf5] = '\x83'
        mem[0x00400bf6] = '\x7f'
        mem[0x00400bf7] = '\xf8'
        mem[0x00400bf8] = '\x00'
        mem[0x7fffffffddf9] = '\xee'
        mem[0x7fffffffddfa] = '\xff'
        mem[0x7fffffffddfb] = '\xff'
        mem[0x7fffffffddfc] = '\xff'
        mem[0x7fffffffddfd] = '\x7f'
        mem[0x7fffffffddfe] = '\x00'
        mem[0x7fffffffddff] = '\x00'
        cpu.PF = True
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.RDI = 0x7fffffffde00
        cpu.CF = False
        cpu.RIP = 0x400bf4
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400bf8], '\x00')
        self.assertEqual(mem[0x400bf4], 'H')
        self.assertEqual(mem[0x400bf5], '\x83')
        self.assertEqual(mem[0x400bf6], '\x7f')
        self.assertEqual(mem[0x400bf7], '\xf8')
        self.assertEqual(mem[0x7fffffffddf8], 'Q')
        self.assertEqual(mem[0x7fffffffddf9], '\xee')
        self.assertEqual(mem[0x7fffffffddfa], '\xff')
        self.assertEqual(mem[0x7fffffffddfb], '\xff')
        self.assertEqual(mem[0x7fffffffddfc], '\xff')
        self.assertEqual(mem[0x7fffffffddfd], '\x7f')
        self.assertEqual(mem[0x7fffffffddfe], '\x00')
        self.assertEqual(mem[0x7fffffffddff], '\x00')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RDI, 140737488346624L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4197369L)
        self.assertEqual(cpu.SF, False)

    def test_CMP_18(self):
        ''' Instruction CMP_18 
            Groups:  
            0x41167f:	cmp	rax, 0x20
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411680] = '\x83'
        mem[0x00411681] = '\xf8'
        mem[0x00411682] = ' '
        mem[0x0041167f] = 'H'
        cpu.PF = False
        cpu.RAX = 0x43
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x41167f
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x411680], '\x83')
        self.assertEqual(mem[0x411681], '\xf8')
        self.assertEqual(mem[0x411682], ' ')
        self.assertEqual(mem[0x41167f], 'H')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RAX, 67L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4265603L)
        self.assertEqual(cpu.SF, False)

    def test_CMP_19(self):
        ''' Instruction CMP_19 
            Groups:  
            0x4323e2:	cmp	edx, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004323e2] = '\x83'
        mem[0x004323e3] = '\xfa'
        mem[0x004323e4] = '\x01'
        cpu.EDX = 0x3
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4323e2
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4323e2], '\x83')
        self.assertEqual(mem[0x4323e3], '\xfa')
        self.assertEqual(mem[0x4323e4], '\x01')
        self.assertEqual(cpu.EDX, 3L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4400101L)
        self.assertEqual(cpu.SF, False)

    def test_CMP_2(self):
        ''' Instruction CMP_2 
            Groups:  
            0x40ec84:	cmp	rax, rdx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040e000, 0x1000, 'rwx')
        mem[0x0040ec84] = 'H'
        mem[0x0040ec85] = '9'
        mem[0x0040ec86] = '\xd0'
        cpu.SF = False
        cpu.PF = False
        cpu.RAX = 0x6b9ef8
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x40ec84
        cpu.RDX = 0x6ba088
        cpu.execute()
    
        self.assertEqual(mem[0x40ec84], 'H')
        self.assertEqual(mem[0x40ec85], '9')
        self.assertEqual(mem[0x40ec86], '\xd0')
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RAX, 7053048L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4254855L)
        self.assertEqual(cpu.RDX, 7053448L)

    def test_CMP_20(self):
        ''' Instruction CMP_20 
            Groups:  
            0x406e8d:	cmp	r14w, word ptr [rbx]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffe000, 0x1000, 'rwx')
        mem[0x7fffffffeccb] = 'H'
        mem[0x7fffffffeccc] = 'O'
        mem[0x00406e8d] = 'f'
        mem[0x00406e8e] = 'D'
        mem[0x00406e8f] = ';'
        mem[0x00406e90] = '3'
        cpu.R14W = 0x444c
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RBX = 0x7fffffffeccb
        cpu.CF = False
        cpu.RIP = 0x406e8d
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffeccb], 'H')
        self.assertEqual(mem[0x7fffffffeccc], 'O')
        self.assertEqual(mem[0x406e8d], 'f')
        self.assertEqual(mem[0x406e8e], 'D')
        self.assertEqual(mem[0x406e8f], ';')
        self.assertEqual(mem[0x406e90], '3')
        self.assertEqual(cpu.R14W, 17484L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RBX, 140737488350411L)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4222609L)
        self.assertEqual(cpu.SF, True)

    def test_CMP_21(self):
        ''' Instruction CMP_21 
            Groups:  
            0x411be6:	cmp	edi, 3
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411be8] = '\x03'
        mem[0x00411be6] = '\x83'
        mem[0x00411be7] = '\xff'
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0x4
        cpu.CF = False
        cpu.RIP = 0x411be6
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x411be8], '\x03')
        self.assertEqual(mem[0x411be6], '\x83')
        self.assertEqual(mem[0x411be7], '\xff')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDI, 4L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4266985L)
        self.assertEqual(cpu.SF, False)

    def test_CMP_3(self):
        ''' Instruction CMP_3 
            Groups:  
            0x43229b:	cmp	r10b, byte ptr [r9]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x004942b0] = 'h'
        mem[0x0043229b] = 'E'
        mem[0x0043229c] = ':'
        mem[0x0043229d] = '\x11'
        cpu.SF = False
        cpu.PF = False
        cpu.AF = False
        cpu.R10B = 0x76
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x43229b
        cpu.R9 = 0x4942b0
        cpu.execute()
    
        self.assertEqual(mem[0x4942b0], 'h')
        self.assertEqual(mem[0x43229b], 'E')
        self.assertEqual(mem[0x43229c], ':')
        self.assertEqual(mem[0x43229d], '\x11')
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.R10B, 118L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4399774L)
        self.assertEqual(cpu.R9, 4801200L)

    def test_CMP_4(self):
        ''' Instruction CMP_4 
            Groups:  
            0x400bf4:	cmp	qword ptr [rdi - 8], 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdca8] = '\x06'
        mem[0x7fffffffdca9] = '\xe2'
        mem[0x7fffffffdcaa] = '\xff'
        mem[0x7fffffffdcab] = '\xff'
        mem[0x7fffffffdcac] = '\xff'
        mem[0x7fffffffdcad] = '\x7f'
        mem[0x7fffffffdcae] = '\x00'
        mem[0x7fffffffdcaf] = '\x00'
        mem[0x00400bf4] = 'H'
        mem[0x00400bf5] = '\x83'
        mem[0x00400bf6] = '\x7f'
        mem[0x00400bf7] = '\xf8'
        mem[0x00400bf8] = '\x00'
        cpu.PF = False
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.RDI = 0x7fffffffdcb0
        cpu.CF = False
        cpu.RIP = 0x400bf4
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdca8], '\x06')
        self.assertEqual(mem[0x7fffffffdca9], '\xe2')
        self.assertEqual(mem[0x7fffffffdcaa], '\xff')
        self.assertEqual(mem[0x7fffffffdcab], '\xff')
        self.assertEqual(mem[0x7fffffffdcac], '\xff')
        self.assertEqual(mem[0x7fffffffdcad], '\x7f')
        self.assertEqual(mem[0x7fffffffdcae], '\x00')
        self.assertEqual(mem[0x7fffffffdcaf], '\x00')
        self.assertEqual(mem[0x400bf4], 'H')
        self.assertEqual(mem[0x400bf5], '\x83')
        self.assertEqual(mem[0x400bf6], '\x7f')
        self.assertEqual(mem[0x400bf7], '\xf8')
        self.assertEqual(mem[0x400bf8], '\x00')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RDI, 140737488346288L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4197369L)
        self.assertEqual(cpu.SF, False)

    def test_CMP_5(self):
        ''' Instruction CMP_5 
            Groups:  
            0x4322e4:	cmp	r8, r12
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322e4] = 'M'
        mem[0x004322e5] = '9'
        mem[0x004322e6] = '\xe0'
        cpu.PF = True
        cpu.R12 = 0x44
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.R8 = 0x23
        cpu.CF = False
        cpu.RIP = 0x4322e4
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4322e4], 'M')
        self.assertEqual(mem[0x4322e5], '9')
        self.assertEqual(mem[0x4322e6], '\xe0')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.R12, 68L)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.R8, 35L)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4399847L)
        self.assertEqual(cpu.SF, True)

    def test_CMP_6(self):
        ''' Instruction CMP_6 
            Groups:  
            0x411b57:	cmp	r13, 0x3ff
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411b57] = 'I'
        mem[0x00411b58] = '\x81'
        mem[0x00411b59] = '\xfd'
        mem[0x00411b5a] = '\xff'
        mem[0x00411b5b] = '\x03'
        mem[0x00411b5c] = '\x00'
        mem[0x00411b5d] = '\x00'
        cpu.PF = True
        cpu.R13 = 0x30
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x411b57
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x411b57], 'I')
        self.assertEqual(mem[0x411b58], '\x81')
        self.assertEqual(mem[0x411b59], '\xfd')
        self.assertEqual(mem[0x411b5a], '\xff')
        self.assertEqual(mem[0x411b5b], '\x03')
        self.assertEqual(mem[0x411b5c], '\x00')
        self.assertEqual(mem[0x411b5d], '\x00')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.R13, 48L)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4266846L)
        self.assertEqual(cpu.SF, True)

    def test_CMP_7(self):
        ''' Instruction CMP_7 
            Groups:  
            0x4322a2:	cmp	rax, r8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a2] = 'L'
        mem[0x004322a3] = '9'
        mem[0x004322a4] = '\xc0'
        cpu.PF = True
        cpu.RAX = 0x8
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.R8 = 0x0
        cpu.CF = True
        cpu.RIP = 0x4322a2
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4322a2], 'L')
        self.assertEqual(mem[0x4322a3], '9')
        self.assertEqual(mem[0x4322a4], '\xc0')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RAX, 8L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.R8, 0L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4399781L)
        self.assertEqual(cpu.SF, False)

    def test_CMP_8(self):
        ''' Instruction CMP_8 
            Groups:  
            0x406e8d:	cmp	r14w, word ptr [rbx]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffe000, 0x1000, 'rwx')
        mem[0x00406e8d] = 'f'
        mem[0x00406e8e] = 'D'
        mem[0x00406e8f] = ';'
        mem[0x00406e90] = '3'
        mem[0x7fffffffe0f8] = 'X'
        mem[0x7fffffffe0f9] = 'D'
        cpu.R14W = 0x444c
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RBX = 0x7fffffffe0f8
        cpu.CF = False
        cpu.RIP = 0x406e8d
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406e8d], 'f')
        self.assertEqual(mem[0x406e8e], 'D')
        self.assertEqual(mem[0x406e8f], ';')
        self.assertEqual(mem[0x406e90], '3')
        self.assertEqual(mem[0x7fffffffe0f8], 'X')
        self.assertEqual(mem[0x7fffffffe0f9], 'D')
        self.assertEqual(cpu.R14W, 17484L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RBX, 140737488347384L)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4222609L)
        self.assertEqual(cpu.SF, True)

    def test_CMP_9(self):
        ''' Instruction CMP_9 
            Groups:  
            0x413518:	cmp	dword ptr [rip + 0x2a9e5d], 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006bd000, 0x1000, 'rwx')
        mem[0x00413518] = '\x83'
        mem[0x00413519] = '='
        mem[0x0041351a] = ']'
        mem[0x0041351b] = '\x9e'
        mem[0x0041351c] = '*'
        mem[0x0041351d] = '\x00'
        mem[0x0041351e] = '\x00'
        mem[0x006bd37c] = '\x00'
        mem[0x006bd37d] = '\x00'
        mem[0x006bd37e] = '\x00'
        mem[0x006bd37f] = '\x00'
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x413518
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x413518], '\x83')
        self.assertEqual(mem[0x413519], '=')
        self.assertEqual(mem[0x41351a], ']')
        self.assertEqual(mem[0x41351b], '\x9e')
        self.assertEqual(mem[0x41351c], '*')
        self.assertEqual(mem[0x41351d], '\x00')
        self.assertEqual(mem[0x41351e], '\x00')
        self.assertEqual(mem[0x6bd37c], '\x00')
        self.assertEqual(mem[0x6bd37d], '\x00')
        self.assertEqual(mem[0x6bd37e], '\x00')
        self.assertEqual(mem[0x6bd37f], '\x00')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4273439L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_DEC_1(self):
        ''' Instruction DEC_1 
            Groups:  
            0x40715b:	dec	dword ptr [rip + 0x2b45af]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00407000, 0x1000, 'rwx')
        mem.mmap(0x006bb000, 0x1000, 'rwx')
        mem[0x00407160] = '\x00'
        mem[0x006bb710] = '\x01'
        mem[0x006bb712] = '\x00'
        mem[0x006bb713] = '\x00'
        mem[0x006bb711] = '\x00'
        mem[0x0040715b] = '\xff'
        mem[0x0040715c] = '\r'
        mem[0x0040715d] = '\xaf'
        mem[0x0040715e] = 'E'
        mem[0x0040715f] = '+'
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RIP = 0x40715b
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x407160], '\x00')
        self.assertEqual(mem[0x6bb710], '\x00')
        self.assertEqual(mem[0x6bb712], '\x00')
        self.assertEqual(mem[0x6bb713], '\x00')
        self.assertEqual(mem[0x6bb711], '\x00')
        self.assertEqual(mem[0x40715b], '\xff')
        self.assertEqual(mem[0x40715c], '\r')
        self.assertEqual(mem[0x40715d], '\xaf')
        self.assertEqual(mem[0x40715e], 'E')
        self.assertEqual(mem[0x40715f], '+')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RIP, 4223329L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_DEC_2(self):
        ''' Instruction DEC_2 
            Groups:  
            0x420f00:	dec	ecx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00420000, 0x1000, 'rwx')
        mem[0x00420f00] = '\xff'
        mem[0x00420f01] = '\xc9'
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 0x420f00
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 0x1
        cpu.execute()
    
        self.assertEqual(mem[0x420f00], '\xff')
        self.assertEqual(mem[0x420f01], '\xc9')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RIP, 4329218L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 0L)

    def test_DEC_3(self):
        ''' Instruction DEC_3 
            Groups:  
            0x413528:	dec	dword ptr [rbx]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        mem[0x006b9840] = '\x01'
        mem[0x006b9841] = '\x00'
        mem[0x006b9842] = '\x00'
        mem[0x006b9843] = '\x00'
        mem[0x00413528] = '\xff'
        mem[0x00413529] = '\x0b'
        cpu.RBX = 0x6b9840
        cpu.OF = False
        cpu.ZF = True
        cpu.AF = False
        cpu.RIP = 0x413528
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x6b9840], '\x00')
        self.assertEqual(mem[0x6b9841], '\x00')
        self.assertEqual(mem[0x6b9842], '\x00')
        self.assertEqual(mem[0x6b9843], '\x00')
        self.assertEqual(mem[0x413528], '\xff')
        self.assertEqual(mem[0x413529], '\x0b')
        self.assertEqual(cpu.RBX, 7051328L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.RIP, 4273450L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_DEC_4(self):
        ''' Instruction DEC_4 
            Groups:  
            0x413528:	dec	dword ptr [rbx]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        mem[0x006b9840] = '\x01'
        mem[0x006b9841] = '\x00'
        mem[0x006b9842] = '\x00'
        mem[0x006b9843] = '\x00'
        mem[0x00413528] = '\xff'
        mem[0x00413529] = '\x0b'
        cpu.RBX = 0x6b9840
        cpu.OF = False
        cpu.ZF = True
        cpu.AF = False
        cpu.RIP = 0x413528
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x6b9840], '\x00')
        self.assertEqual(mem[0x6b9841], '\x00')
        self.assertEqual(mem[0x6b9842], '\x00')
        self.assertEqual(mem[0x6b9843], '\x00')
        self.assertEqual(mem[0x413528], '\xff')
        self.assertEqual(mem[0x413529], '\x0b')
        self.assertEqual(cpu.RBX, 7051328L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.RIP, 4273450L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_DEC_5(self):
        ''' Instruction DEC_5 
            Groups:  
            0x413528:	dec	dword ptr [rbx]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        mem[0x006b9840] = '\x01'
        mem[0x006b9841] = '\x00'
        mem[0x006b9842] = '\x00'
        mem[0x006b9843] = '\x00'
        mem[0x00413528] = '\xff'
        mem[0x00413529] = '\x0b'
        cpu.RBX = 0x6b9840
        cpu.OF = False
        cpu.ZF = True
        cpu.AF = False
        cpu.RIP = 0x413528
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x6b9840], '\x00')
        self.assertEqual(mem[0x6b9841], '\x00')
        self.assertEqual(mem[0x6b9842], '\x00')
        self.assertEqual(mem[0x6b9843], '\x00')
        self.assertEqual(mem[0x413528], '\xff')
        self.assertEqual(mem[0x413529], '\x0b')
        self.assertEqual(cpu.RBX, 7051328L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.RIP, 4273450L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_DEC_6(self):
        ''' Instruction DEC_6 
            Groups:  
            0x413528:	dec	dword ptr [rbx]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        mem[0x006b9840] = '\x01'
        mem[0x006b9841] = '\x00'
        mem[0x006b9842] = '\x00'
        mem[0x006b9843] = '\x00'
        mem[0x00413528] = '\xff'
        mem[0x00413529] = '\x0b'
        cpu.RBX = 0x6b9840
        cpu.OF = False
        cpu.ZF = True
        cpu.AF = False
        cpu.RIP = 0x413528
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x6b9840], '\x00')
        self.assertEqual(mem[0x6b9841], '\x00')
        self.assertEqual(mem[0x6b9842], '\x00')
        self.assertEqual(mem[0x6b9843], '\x00')
        self.assertEqual(mem[0x413528], '\xff')
        self.assertEqual(mem[0x413529], '\x0b')
        self.assertEqual(cpu.RBX, 7051328L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.RIP, 4273450L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_DEC_7(self):
        ''' Instruction DEC_7 
            Groups:  
            0x41b450:	dec	ecx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041b000, 0x1000, 'rwx')
        mem[0x0041b450] = '\xff'
        mem[0x0041b451] = '\xc9'
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 0x41b450
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 0x1
        cpu.execute()
    
        self.assertEqual(mem[0x41b450], '\xff')
        self.assertEqual(mem[0x41b451], '\xc9')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RIP, 4306002L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 0L)

    def test_DEC_8(self):
        ''' Instruction DEC_8 
            Groups:  
            0x4140b0:	dec	dword ptr [rbx]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        mem[0x006b9840] = '\x01'
        mem[0x006b9841] = '\x00'
        mem[0x006b9842] = '\x00'
        mem[0x006b9843] = '\x00'
        mem[0x004140b0] = '\xff'
        mem[0x004140b1] = '\x0b'
        cpu.RBX = 0x6b9840
        cpu.OF = False
        cpu.ZF = True
        cpu.AF = False
        cpu.RIP = 0x4140b0
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x6b9840], '\x00')
        self.assertEqual(mem[0x6b9841], '\x00')
        self.assertEqual(mem[0x6b9842], '\x00')
        self.assertEqual(mem[0x6b9843], '\x00')
        self.assertEqual(mem[0x4140b0], '\xff')
        self.assertEqual(mem[0x4140b1], '\x0b')
        self.assertEqual(cpu.RBX, 7051328L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.RIP, 4276402L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_DEC_9(self):
        ''' Instruction DEC_9 
            Groups:  
            0x413528:	dec	dword ptr [rbx]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        mem[0x006b9840] = '\x01'
        mem[0x006b9841] = '\x00'
        mem[0x006b9842] = '\x00'
        mem[0x006b9843] = '\x00'
        mem[0x00413528] = '\xff'
        mem[0x00413529] = '\x0b'
        cpu.RBX = 0x6b9840
        cpu.OF = False
        cpu.ZF = True
        cpu.AF = False
        cpu.RIP = 0x413528
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x6b9840], '\x00')
        self.assertEqual(mem[0x6b9841], '\x00')
        self.assertEqual(mem[0x6b9842], '\x00')
        self.assertEqual(mem[0x6b9843], '\x00')
        self.assertEqual(mem[0x413528], '\xff')
        self.assertEqual(mem[0x413529], '\x0b')
        self.assertEqual(cpu.RBX, 7051328L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.RIP, 4273450L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_IMUL_1(self):
        ''' Instruction IMUL_1 
            Groups:  
            0x40101f:	imul	rax, r12
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x00401020] = '\x0f'
        mem[0x00401021] = '\xaf'
        mem[0x00401022] = '\xc4'
        mem[0x0040101f] = 'I'
        cpu.R12 = 0x40
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 0x40101f
        cpu.RDX = 0xf
        cpu.RAX = 0x22
        cpu.execute()
    
        self.assertEqual(mem[0x401020], '\x0f')
        self.assertEqual(mem[0x401021], '\xaf')
        self.assertEqual(mem[0x401022], '\xc4')
        self.assertEqual(mem[0x40101f], 'I')
        self.assertEqual(cpu.R12, 64L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4198435L)
        self.assertEqual(cpu.RDX, 15L)
        self.assertEqual(cpu.RAX, 2176L)

    def test_IMUL_10(self):
        ''' Instruction IMUL_10 
            Groups:  
            0x4010dd:	imul	rax, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x004010e0] = '\xc3'
        mem[0x004010dd] = 'H'
        mem[0x004010de] = '\x0f'
        mem[0x004010df] = '\xaf'
        cpu.RBX = 0x8
        cpu.OF = False
        cpu.RDX = 0x7
        cpu.RIP = 0x4010dd
        cpu.CF = False
        cpu.RAX = 0xa
        cpu.execute()
    
        self.assertEqual(mem[0x4010e0], '\xc3')
        self.assertEqual(mem[0x4010dd], 'H')
        self.assertEqual(mem[0x4010de], '\x0f')
        self.assertEqual(mem[0x4010df], '\xaf')
        self.assertEqual(cpu.RBX, 8L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RDX, 7L)
        self.assertEqual(cpu.RIP, 4198625L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RAX, 80L)

    def test_IMUL_11(self):
        ''' Instruction IMUL_11 
            Groups:  
            0x432453:	imul	eax, edx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432453] = '\x0f'
        mem[0x00432454] = '\xaf'
        mem[0x00432455] = '\xc2'
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 0x432453
        cpu.RDX = 0xc
        cpu.EAX = 0x40
        cpu.EDX = 0xc
        cpu.RAX = 0x40
        cpu.execute()
    
        self.assertEqual(mem[0x432453], '\x0f')
        self.assertEqual(mem[0x432454], '\xaf')
        self.assertEqual(mem[0x432455], '\xc2')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4400214L)
        self.assertEqual(cpu.RDX, 12L)
        self.assertEqual(cpu.EAX, 768L)
        self.assertEqual(cpu.EDX, 12L)
        self.assertEqual(cpu.RAX, 768L)

    def test_IMUL_12(self):
        ''' Instruction IMUL_12 
            Groups:  
            0x432453:	imul	eax, edx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432453] = '\x0f'
        mem[0x00432454] = '\xaf'
        mem[0x00432455] = '\xc2'
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 0x432453
        cpu.RDX = 0x8
        cpu.EAX = 0x40
        cpu.EDX = 0x8
        cpu.RAX = 0x40
        cpu.execute()
    
        self.assertEqual(mem[0x432453], '\x0f')
        self.assertEqual(mem[0x432454], '\xaf')
        self.assertEqual(mem[0x432455], '\xc2')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4400214L)
        self.assertEqual(cpu.RDX, 8L)
        self.assertEqual(cpu.EAX, 512L)
        self.assertEqual(cpu.EDX, 8L)
        self.assertEqual(cpu.RAX, 512L)

    def test_IMUL_13(self):
        ''' Instruction IMUL_13 
            Groups:  
            0x432464:	imul	eax, edx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432464] = '\x0f'
        mem[0x00432465] = '\xaf'
        mem[0x00432466] = '\xc2'
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 0x432464
        cpu.RDX = 0x1
        cpu.EAX = 0x600000
        cpu.EDX = 0x1
        cpu.RAX = 0x600000
        cpu.execute()
    
        self.assertEqual(mem[0x432464], '\x0f')
        self.assertEqual(mem[0x432465], '\xaf')
        self.assertEqual(mem[0x432466], '\xc2')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4400231L)
        self.assertEqual(cpu.RDX, 1L)
        self.assertEqual(cpu.EAX, 6291456L)
        self.assertEqual(cpu.EDX, 1L)
        self.assertEqual(cpu.RAX, 6291456L)

    def test_IMUL_14(self):
        ''' Instruction IMUL_14 
            Groups:  
            0x432461:	imul	eax, ecx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432461] = '\x0f'
        mem[0x00432462] = '\xaf'
        mem[0x00432463] = '\xc1'
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 0x432461
        cpu.RDX = 0x1
        cpu.EAX = 0x300
        cpu.RAX = 0x300
        cpu.ECX = 0x2000
        cpu.execute()
    
        self.assertEqual(mem[0x432461], '\x0f')
        self.assertEqual(mem[0x432462], '\xaf')
        self.assertEqual(mem[0x432463], '\xc1')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4400228L)
        self.assertEqual(cpu.RDX, 1L)
        self.assertEqual(cpu.EAX, 6291456L)
        self.assertEqual(cpu.RAX, 6291456L)
        self.assertEqual(cpu.ECX, 8192L)

    def test_IMUL_2(self):
        ''' Instruction IMUL_2 
            Groups:  
            0x401162:	imul	rax, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x00401162] = 'H'
        mem[0x00401163] = '\x0f'
        mem[0x00401164] = '\xaf'
        mem[0x00401165] = '\xc3'
        cpu.RBX = 0x8
        cpu.OF = False
        cpu.RDX = 0x800
        cpu.RIP = 0x401162
        cpu.CF = False
        cpu.RAX = 0xa
        cpu.execute()
    
        self.assertEqual(mem[0x401162], 'H')
        self.assertEqual(mem[0x401163], '\x0f')
        self.assertEqual(mem[0x401164], '\xaf')
        self.assertEqual(mem[0x401165], '\xc3')
        self.assertEqual(cpu.RBX, 8L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RDX, 2048L)
        self.assertEqual(cpu.RIP, 4198758L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RAX, 80L)

    def test_IMUL_3(self):
        ''' Instruction IMUL_3 
            Groups:  
            0x413fcc:	imul	r12, rsi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem[0x00413fcc] = 'L'
        mem[0x00413fcd] = '\x0f'
        mem[0x00413fce] = '\xaf'
        mem[0x00413fcf] = '\xe6'
        cpu.R12 = 0x491
        cpu.RSI = 0x1
        cpu.OF = False
        cpu.RDX = 0x491
        cpu.RIP = 0x413fcc
        cpu.CF = False
        cpu.RAX = 0xffffffff
        cpu.execute()
    
        self.assertEqual(mem[0x413fcc], 'L')
        self.assertEqual(mem[0x413fcd], '\x0f')
        self.assertEqual(mem[0x413fce], '\xaf')
        self.assertEqual(mem[0x413fcf], '\xe6')
        self.assertEqual(cpu.R12, 1169L)
        self.assertEqual(cpu.RSI, 1L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4276176L)
        self.assertEqual(cpu.RDX, 1169L)
        self.assertEqual(cpu.RAX, 4294967295L)

    def test_IMUL_4(self):
        ''' Instruction IMUL_4 
            Groups:  
            0x43221c:	imul	edx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x0043221c] = '\xf7'
        mem[0x0043221d] = '\xea'
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 0x43221c
        cpu.RDX = 0x55555556
        cpu.EDX = 0x55555556
        cpu.RAX = 0x9
        cpu.execute()
    
        self.assertEqual(mem[0x43221c], '\xf7')
        self.assertEqual(mem[0x43221d], '\xea')
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4399646L)
        self.assertEqual(cpu.RDX, 3L)
        self.assertEqual(cpu.EDX, 3L)
        self.assertEqual(cpu.RAX, 6L)

    def test_IMUL_5(self):
        ''' Instruction IMUL_5 
            Groups:  
            0x432461:	imul	eax, ecx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432461] = '\x0f'
        mem[0x00432462] = '\xaf'
        mem[0x00432463] = '\xc1'
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 0x432461
        cpu.RDX = 0x1
        cpu.EAX = 0x200
        cpu.RAX = 0x200
        cpu.ECX = 0x40
        cpu.execute()
    
        self.assertEqual(mem[0x432461], '\x0f')
        self.assertEqual(mem[0x432462], '\xaf')
        self.assertEqual(mem[0x432463], '\xc1')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4400228L)
        self.assertEqual(cpu.RDX, 1L)
        self.assertEqual(cpu.EAX, 32768L)
        self.assertEqual(cpu.RAX, 32768L)
        self.assertEqual(cpu.ECX, 64L)

    def test_IMUL_6(self):
        ''' Instruction IMUL_6 
            Groups:  
            0x43221c:	imul	edx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x0043221c] = '\xf7'
        mem[0x0043221d] = '\xea'
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 0x43221c
        cpu.RDX = 0x55555556
        cpu.EDX = 0x55555556
        cpu.RAX = 0x3
        cpu.execute()
    
        self.assertEqual(mem[0x43221c], '\xf7')
        self.assertEqual(mem[0x43221d], '\xea')
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4399646L)
        self.assertEqual(cpu.RDX, 1L)
        self.assertEqual(cpu.EDX, 1L)
        self.assertEqual(cpu.RAX, 2L)

    def test_IMUL_7(self):
        ''' Instruction IMUL_7 
            Groups:  
            0x43221c:	imul	edx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x0043221c] = '\xf7'
        mem[0x0043221d] = '\xea'
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 0x43221c
        cpu.RDX = 0x55555556
        cpu.EDX = 0x55555556
        cpu.RAX = 0x3
        cpu.execute()
    
        self.assertEqual(mem[0x43221c], '\xf7')
        self.assertEqual(mem[0x43221d], '\xea')
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4399646L)
        self.assertEqual(cpu.RDX, 1L)
        self.assertEqual(cpu.EDX, 1L)
        self.assertEqual(cpu.RAX, 2L)

    def test_IMUL_8(self):
        ''' Instruction IMUL_8 
            Groups:  
            0x43221c:	imul	edx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x0043221c] = '\xf7'
        mem[0x0043221d] = '\xea'
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 0x43221c
        cpu.RDX = 0x55555556
        cpu.EDX = 0x55555556
        cpu.RAX = 0x9
        cpu.execute()
    
        self.assertEqual(mem[0x43221c], '\xf7')
        self.assertEqual(mem[0x43221d], '\xea')
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4399646L)
        self.assertEqual(cpu.RDX, 3L)
        self.assertEqual(cpu.EDX, 3L)
        self.assertEqual(cpu.RAX, 6L)

    def test_IMUL_9(self):
        ''' Instruction IMUL_9 
            Groups:  
            0x432464:	imul	eax, edx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432464] = '\x0f'
        mem[0x00432465] = '\xaf'
        mem[0x00432466] = '\xc2'
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 0x432464
        cpu.RDX = 0x1
        cpu.EAX = 0x8000
        cpu.EDX = 0x1
        cpu.RAX = 0x8000
        cpu.execute()
    
        self.assertEqual(mem[0x432464], '\x0f')
        self.assertEqual(mem[0x432465], '\xaf')
        self.assertEqual(mem[0x432466], '\xc2')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4400231L)
        self.assertEqual(cpu.RDX, 1L)
        self.assertEqual(cpu.EAX, 32768L)
        self.assertEqual(cpu.EDX, 1L)
        self.assertEqual(cpu.RAX, 32768L)

    def test_INC_1(self):
        ''' Instruction INC_1 
            Groups:  
            0x420e46:	inc	rdi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00420000, 0x1000, 'rwx')
        mem[0x00420e48] = '\xc7'
        mem[0x00420e46] = 'H'
        mem[0x00420e47] = '\xff'
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 0x420e46
        cpu.PF = False
        cpu.RDI = 0x6bf6a0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x420e48], '\xc7')
        self.assertEqual(mem[0x420e46], 'H')
        self.assertEqual(mem[0x420e47], '\xff')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 4329033L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RDI, 7075489L)
        self.assertEqual(cpu.SF, False)

    def test_INC_2(self):
        ''' Instruction INC_2 
            Groups:  
            0x41b3a0:	inc	rsi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041b000, 0x1000, 'rwx')
        mem[0x0041b3a0] = 'H'
        mem[0x0041b3a1] = '\xff'
        mem[0x0041b3a2] = '\xc6'
        cpu.RSI = 0x4a487e
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 0x41b3a0
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x41b3a0], 'H')
        self.assertEqual(mem[0x41b3a1], '\xff')
        self.assertEqual(mem[0x41b3a2], '\xc6')
        self.assertEqual(cpu.RSI, 4868223L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 4305827L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_INC_3(self):
        ''' Instruction INC_3 
            Groups:  
            0x41b3a3:	inc	rdi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041b000, 0x1000, 'rwx')
        mem[0x0041b3a3] = 'H'
        mem[0x0041b3a4] = '\xff'
        mem[0x0041b3a5] = '\xc7'
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 0x41b3a3
        cpu.PF = False
        cpu.RDI = 0x6bf6f0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x41b3a3], 'H')
        self.assertEqual(mem[0x41b3a4], '\xff')
        self.assertEqual(mem[0x41b3a5], '\xc7')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 4305830L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RDI, 7075569L)
        self.assertEqual(cpu.SF, False)

    def test_INC_4(self):
        ''' Instruction INC_4 
            Groups:  
            0x420e43:	inc	rsi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00420000, 0x1000, 'rwx')
        mem[0x00420e43] = 'H'
        mem[0x00420e44] = '\xff'
        mem[0x00420e45] = '\xc6'
        cpu.RSI = 0x4a5301
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 0x420e43
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x420e43], 'H')
        self.assertEqual(mem[0x420e44], '\xff')
        self.assertEqual(mem[0x420e45], '\xc6')
        self.assertEqual(cpu.RSI, 4870914L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 4329030L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_JAE_1(self):
        ''' Instruction JAE_1 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a0] = 's'
        mem[0x004322a1] = '>'
        cpu.CF = False
        cpu.RIP = 0x4322a0
        cpu.execute()
    
        self.assertEqual(mem[0x4322a0], 's')
        self.assertEqual(mem[0x4322a1], '>')
        self.assertEqual(cpu.RIP, 4399840L)

    def test_JAE_10(self):
        ''' Instruction JAE_10 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a0] = 's'
        mem[0x004322a1] = '>'
        cpu.CF = False
        cpu.RIP = 0x4322a0
        cpu.execute()
    
        self.assertEqual(mem[0x4322a0], 's')
        self.assertEqual(mem[0x4322a1], '>')
        self.assertEqual(cpu.RIP, 4399840L)

    def test_JAE_11(self):
        ''' Instruction JAE_11 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a0] = 's'
        mem[0x004322a1] = '>'
        cpu.CF = False
        cpu.RIP = 0x4322a0
        cpu.execute()
    
        self.assertEqual(mem[0x4322a0], 's')
        self.assertEqual(mem[0x4322a1], '>')
        self.assertEqual(cpu.RIP, 4399840L)

    def test_JAE_12(self):
        ''' Instruction JAE_12 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a0] = 's'
        mem[0x004322a1] = '>'
        cpu.CF = True
        cpu.RIP = 0x4322a0
        cpu.execute()
    
        self.assertEqual(mem[0x4322a0], 's')
        self.assertEqual(mem[0x4322a1], '>')
        self.assertEqual(cpu.RIP, 4399778L)

    def test_JAE_13(self):
        ''' Instruction JAE_13 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a0] = 's'
        mem[0x004322a1] = '>'
        cpu.CF = True
        cpu.RIP = 0x4322a0
        cpu.execute()
    
        self.assertEqual(mem[0x4322a0], 's')
        self.assertEqual(mem[0x4322a1], '>')
        self.assertEqual(cpu.RIP, 4399778L)

    def test_JAE_14(self):
        ''' Instruction JAE_14 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a0] = 's'
        mem[0x004322a1] = '>'
        cpu.CF = True
        cpu.RIP = 0x4322a0
        cpu.execute()
    
        self.assertEqual(mem[0x4322a0], 's')
        self.assertEqual(mem[0x4322a1], '>')
        self.assertEqual(cpu.RIP, 4399778L)

    def test_JAE_15(self):
        ''' Instruction JAE_15 
            Groups: jump 
            0x400c91:	jae	0x400ce9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400c91] = 's'
        mem[0x00400c92] = 'V'
        cpu.CF = True
        cpu.RIP = 0x400c91
        cpu.execute()
    
        self.assertEqual(mem[0x400c91], 's')
        self.assertEqual(mem[0x400c92], 'V')
        self.assertEqual(cpu.RIP, 4197523L)

    def test_JAE_16(self):
        ''' Instruction JAE_16 
            Groups: jump 
            0x411368:	jae	0x411518
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411368] = '\x0f'
        mem[0x00411369] = '\x83'
        mem[0x0041136a] = '\xaa'
        mem[0x0041136b] = '\x01'
        mem[0x0041136c] = '\x00'
        mem[0x0041136d] = '\x00'
        cpu.CF = False
        cpu.RIP = 0x411368
        cpu.execute()
    
        self.assertEqual(mem[0x411368], '\x0f')
        self.assertEqual(mem[0x411369], '\x83')
        self.assertEqual(mem[0x41136a], '\xaa')
        self.assertEqual(mem[0x41136b], '\x01')
        self.assertEqual(mem[0x41136c], '\x00')
        self.assertEqual(mem[0x41136d], '\x00')
        self.assertEqual(cpu.RIP, 4265240L)

    def test_JAE_17(self):
        ''' Instruction JAE_17 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a0] = 's'
        mem[0x004322a1] = '>'
        cpu.CF = True
        cpu.RIP = 0x4322a0
        cpu.execute()
    
        self.assertEqual(mem[0x4322a0], 's')
        self.assertEqual(mem[0x4322a1], '>')
        self.assertEqual(cpu.RIP, 4399778L)

    def test_JAE_18(self):
        ''' Instruction JAE_18 
            Groups: jump 
            0x41b394:	jae	0x41b410
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041b000, 0x1000, 'rwx')
        mem[0x0041b394] = 's'
        mem[0x0041b395] = 'z'
        cpu.CF = True
        cpu.RIP = 0x41b394
        cpu.execute()
    
        self.assertEqual(mem[0x41b394], 's')
        self.assertEqual(mem[0x41b395], 'z')
        self.assertEqual(cpu.RIP, 4305814L)

    def test_JAE_19(self):
        ''' Instruction JAE_19 
            Groups: jump 
            0x400c91:	jae	0x400ce9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400c91] = 's'
        mem[0x00400c92] = 'V'
        cpu.CF = True
        cpu.RIP = 0x400c91
        cpu.execute()
    
        self.assertEqual(mem[0x400c91], 's')
        self.assertEqual(mem[0x400c92], 'V')
        self.assertEqual(cpu.RIP, 4197523L)

    def test_JAE_2(self):
        ''' Instruction JAE_2 
            Groups: jump 
            0x400fcf:	jae	0x400ff8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400fd0] = "'"
        mem[0x00400fcf] = 's'
        cpu.CF = True
        cpu.RIP = 0x400fcf
        cpu.execute()
    
        self.assertEqual(mem[0x400fd0], "'")
        self.assertEqual(mem[0x400fcf], 's')
        self.assertEqual(cpu.RIP, 4198353L)

    def test_JAE_20(self):
        ''' Instruction JAE_20 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a0] = 's'
        mem[0x004322a1] = '>'
        cpu.CF = True
        cpu.RIP = 0x4322a0
        cpu.execute()
    
        self.assertEqual(mem[0x4322a0], 's')
        self.assertEqual(mem[0x4322a1], '>')
        self.assertEqual(cpu.RIP, 4399778L)

    def test_JAE_21(self):
        ''' Instruction JAE_21 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a0] = 's'
        mem[0x004322a1] = '>'
        cpu.CF = True
        cpu.RIP = 0x4322a0
        cpu.execute()
    
        self.assertEqual(mem[0x4322a0], 's')
        self.assertEqual(mem[0x4322a1], '>')
        self.assertEqual(cpu.RIP, 4399778L)

    def test_JAE_3(self):
        ''' Instruction JAE_3 
            Groups: jump 
            0x400c91:	jae	0x400ce9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400c91] = 's'
        mem[0x00400c92] = 'V'
        cpu.CF = False
        cpu.RIP = 0x400c91
        cpu.execute()
    
        self.assertEqual(mem[0x400c91], 's')
        self.assertEqual(mem[0x400c92], 'V')
        self.assertEqual(cpu.RIP, 4197609L)

    def test_JAE_4(self):
        ''' Instruction JAE_4 
            Groups: jump 
            0x400fcf:	jae	0x400ff8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400fd0] = "'"
        mem[0x00400fcf] = 's'
        cpu.CF = True
        cpu.RIP = 0x400fcf
        cpu.execute()
    
        self.assertEqual(mem[0x400fd0], "'")
        self.assertEqual(mem[0x400fcf], 's')
        self.assertEqual(cpu.RIP, 4198353L)

    def test_JAE_5(self):
        ''' Instruction JAE_5 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a0] = 's'
        mem[0x004322a1] = '>'
        cpu.CF = True
        cpu.RIP = 0x4322a0
        cpu.execute()
    
        self.assertEqual(mem[0x4322a0], 's')
        self.assertEqual(mem[0x4322a1], '>')
        self.assertEqual(cpu.RIP, 4399778L)

    def test_JAE_6(self):
        ''' Instruction JAE_6 
            Groups: jump 
            0x400fcf:	jae	0x400ff8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400fd0] = "'"
        mem[0x00400fcf] = 's'
        cpu.CF = True
        cpu.RIP = 0x400fcf
        cpu.execute()
    
        self.assertEqual(mem[0x400fd0], "'")
        self.assertEqual(mem[0x400fcf], 's')
        self.assertEqual(cpu.RIP, 4198353L)

    def test_JAE_7(self):
        ''' Instruction JAE_7 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a0] = 's'
        mem[0x004322a1] = '>'
        cpu.CF = True
        cpu.RIP = 0x4322a0
        cpu.execute()
    
        self.assertEqual(mem[0x4322a0], 's')
        self.assertEqual(mem[0x4322a1], '>')
        self.assertEqual(cpu.RIP, 4399778L)

    def test_JAE_8(self):
        ''' Instruction JAE_8 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a0] = 's'
        mem[0x004322a1] = '>'
        cpu.CF = False
        cpu.RIP = 0x4322a0
        cpu.execute()
    
        self.assertEqual(mem[0x4322a0], 's')
        self.assertEqual(mem[0x4322a1], '>')
        self.assertEqual(cpu.RIP, 4399840L)

    def test_JAE_9(self):
        ''' Instruction JAE_9 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a0] = 's'
        mem[0x004322a1] = '>'
        cpu.CF = True
        cpu.RIP = 0x4322a0
        cpu.execute()
    
        self.assertEqual(mem[0x4322a0], 's')
        self.assertEqual(mem[0x4322a1], '>')
        self.assertEqual(cpu.RIP, 4399778L)

    def test_JA_1(self):
        ''' Instruction JA_1 
            Groups: jump 
            0x463fb5:	ja	0x463fea
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00463000, 0x1000, 'rwx')
        mem[0x00463fb5] = 'w'
        mem[0x00463fb6] = '3'
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x463fb5
        cpu.execute()
    
        self.assertEqual(mem[0x463fb5], 'w')
        self.assertEqual(mem[0x463fb6], '3')
        self.assertEqual(cpu.RIP, 4603882L)

    def test_JA_10(self):
        ''' Instruction JA_10 
            Groups: jump 
            0x4376c8:	ja	0x437723
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x004376c8] = 'w'
        mem[0x004376c9] = 'Y'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x4376c8
        cpu.execute()
    
        self.assertEqual(mem[0x4376c8], 'w')
        self.assertEqual(mem[0x4376c9], 'Y')
        self.assertEqual(cpu.RIP, 4421322L)

    def test_JA_11(self):
        ''' Instruction JA_11 
            Groups: jump 
            0x45c5a9:	ja	0x45c5c0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045c000, 0x1000, 'rwx')
        mem[0x0045c5a9] = 'w'
        mem[0x0045c5aa] = '\x15'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x45c5a9
        cpu.execute()
    
        self.assertEqual(mem[0x45c5a9], 'w')
        self.assertEqual(mem[0x45c5aa], '\x15')
        self.assertEqual(cpu.RIP, 4572587L)

    def test_JA_12(self):
        ''' Instruction JA_12 
            Groups: jump 
            0x437176:	ja	0x436b5a
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x00437176] = '\x0f'
        mem[0x00437177] = '\x87'
        mem[0x00437178] = '\xde'
        mem[0x00437179] = '\xf9'
        mem[0x0043717a] = '\xff'
        mem[0x0043717b] = '\xff'
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x437176
        cpu.execute()
    
        self.assertEqual(mem[0x437176], '\x0f')
        self.assertEqual(mem[0x437177], '\x87')
        self.assertEqual(mem[0x437178], '\xde')
        self.assertEqual(mem[0x437179], '\xf9')
        self.assertEqual(mem[0x43717a], '\xff')
        self.assertEqual(mem[0x43717b], '\xff')
        self.assertEqual(cpu.RIP, 4419964L)

    def test_JA_13(self):
        ''' Instruction JA_13 
            Groups: jump 
            0x436810:	ja	0x436830
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436810] = 'w'
        mem[0x00436811] = '\x1e'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x436810
        cpu.execute()
    
        self.assertEqual(mem[0x436810], 'w')
        self.assertEqual(mem[0x436811], '\x1e')
        self.assertEqual(cpu.RIP, 4417554L)

    def test_JA_14(self):
        ''' Instruction JA_14 
            Groups: jump 
            0x436b6a:	ja	0x436b40
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436b6a] = 'w'
        mem[0x00436b6b] = '\xd4'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x436b6a
        cpu.execute()
    
        self.assertEqual(mem[0x436b6a], 'w')
        self.assertEqual(mem[0x436b6b], '\xd4')
        self.assertEqual(cpu.RIP, 4418412L)

    def test_JA_15(self):
        ''' Instruction JA_15 
            Groups: jump 
            0x411717:	ja	0x411792
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411718] = 'y'
        mem[0x00411717] = 'w'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x411717
        cpu.execute()
    
        self.assertEqual(mem[0x411718], 'y')
        self.assertEqual(mem[0x411717], 'w')
        self.assertEqual(cpu.RIP, 4265753L)

    def test_JA_16(self):
        ''' Instruction JA_16 
            Groups: jump 
            0x40dab8:	ja	0x40d9ab
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem[0x0040dab8] = '\x0f'
        mem[0x0040dab9] = '\x87'
        mem[0x0040daba] = '\xed'
        mem[0x0040dabb] = '\xfe'
        mem[0x0040dabc] = '\xff'
        mem[0x0040dabd] = '\xff'
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40dab8
        cpu.execute()
    
        self.assertEqual(mem[0x40dab8], '\x0f')
        self.assertEqual(mem[0x40dab9], '\x87')
        self.assertEqual(mem[0x40daba], '\xed')
        self.assertEqual(mem[0x40dabb], '\xfe')
        self.assertEqual(mem[0x40dabc], '\xff')
        self.assertEqual(mem[0x40dabd], '\xff')
        self.assertEqual(cpu.RIP, 4250302L)

    def test_JA_17(self):
        ''' Instruction JA_17 
            Groups: jump 
            0x411644:	ja	0x411ddd
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411644] = '\x0f'
        mem[0x00411645] = '\x87'
        mem[0x00411646] = '\x93'
        mem[0x00411647] = '\x07'
        mem[0x00411648] = '\x00'
        mem[0x00411649] = '\x00'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x411644
        cpu.execute()
    
        self.assertEqual(mem[0x411644], '\x0f')
        self.assertEqual(mem[0x411645], '\x87')
        self.assertEqual(mem[0x411646], '\x93')
        self.assertEqual(mem[0x411647], '\x07')
        self.assertEqual(mem[0x411648], '\x00')
        self.assertEqual(mem[0x411649], '\x00')
        self.assertEqual(cpu.RIP, 4265546L)

    def test_JA_18(self):
        ''' Instruction JA_18 
            Groups: jump 
            0x436810:	ja	0x436830
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436810] = 'w'
        mem[0x00436811] = '\x1e'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x436810
        cpu.execute()
    
        self.assertEqual(mem[0x436810], 'w')
        self.assertEqual(mem[0x436811], '\x1e')
        self.assertEqual(cpu.RIP, 4417554L)

    def test_JA_19(self):
        ''' Instruction JA_19 
            Groups: jump 
            0x432181:	ja	0x4321c0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432181] = 'w'
        mem[0x00432182] = '='
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x432181
        cpu.execute()
    
        self.assertEqual(mem[0x432181], 'w')
        self.assertEqual(mem[0x432182], '=')
        self.assertEqual(cpu.RIP, 4399491L)

    def test_JA_2(self):
        ''' Instruction JA_2 
            Groups: jump 
            0x411717:	ja	0x411792
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411718] = 'y'
        mem[0x00411717] = 'w'
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x411717
        cpu.execute()
    
        self.assertEqual(mem[0x411718], 'y')
        self.assertEqual(mem[0x411717], 'w')
        self.assertEqual(cpu.RIP, 4265874L)

    def test_JA_20(self):
        ''' Instruction JA_20 
            Groups: jump 
            0x4183c8:	ja	0x418430
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183c8] = 'w'
        mem[0x004183c9] = 'f'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x4183c8
        cpu.execute()
    
        self.assertEqual(mem[0x4183c8], 'w')
        self.assertEqual(mem[0x4183c9], 'f')
        self.assertEqual(cpu.RIP, 4293578L)

    def test_JA_21(self):
        ''' Instruction JA_21 
            Groups: jump 
            0x411717:	ja	0x411792
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411718] = 'y'
        mem[0x00411717] = 'w'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x411717
        cpu.execute()
    
        self.assertEqual(mem[0x411718], 'y')
        self.assertEqual(mem[0x411717], 'w')
        self.assertEqual(cpu.RIP, 4265753L)

    def test_JA_3(self):
        ''' Instruction JA_3 
            Groups: jump 
            0x436810:	ja	0x436830
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436810] = 'w'
        mem[0x00436811] = '\x1e'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x436810
        cpu.execute()
    
        self.assertEqual(mem[0x436810], 'w')
        self.assertEqual(mem[0x436811], '\x1e')
        self.assertEqual(cpu.RIP, 4417554L)

    def test_JA_4(self):
        ''' Instruction JA_4 
            Groups: jump 
            0x436b4a:	ja	0x437148
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436b4a] = '\x0f'
        mem[0x00436b4b] = '\x87'
        mem[0x00436b4c] = '\xf8'
        mem[0x00436b4d] = '\x05'
        mem[0x00436b4e] = '\x00'
        mem[0x00436b4f] = '\x00'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x436b4a
        cpu.execute()
    
        self.assertEqual(mem[0x436b4a], '\x0f')
        self.assertEqual(mem[0x436b4b], '\x87')
        self.assertEqual(mem[0x436b4c], '\xf8')
        self.assertEqual(mem[0x436b4d], '\x05')
        self.assertEqual(mem[0x436b4e], '\x00')
        self.assertEqual(mem[0x436b4f], '\x00')
        self.assertEqual(cpu.RIP, 4418384L)

    def test_JA_5(self):
        ''' Instruction JA_5 
            Groups: jump 
            0x40dab8:	ja	0x40d9ab
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem[0x0040dab8] = '\x0f'
        mem[0x0040dab9] = '\x87'
        mem[0x0040daba] = '\xed'
        mem[0x0040dabb] = '\xfe'
        mem[0x0040dabc] = '\xff'
        mem[0x0040dabd] = '\xff'
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40dab8
        cpu.execute()
    
        self.assertEqual(mem[0x40dab8], '\x0f')
        self.assertEqual(mem[0x40dab9], '\x87')
        self.assertEqual(mem[0x40daba], '\xed')
        self.assertEqual(mem[0x40dabb], '\xfe')
        self.assertEqual(mem[0x40dabc], '\xff')
        self.assertEqual(mem[0x40dabd], '\xff')
        self.assertEqual(cpu.RIP, 4250302L)

    def test_JA_6(self):
        ''' Instruction JA_6 
            Groups: jump 
            0x465c99:	ja	0x465d10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x00465c99] = 'w'
        mem[0x00465c9a] = 'u'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x465c99
        cpu.execute()
    
        self.assertEqual(mem[0x465c99], 'w')
        self.assertEqual(mem[0x465c9a], 'u')
        self.assertEqual(cpu.RIP, 4611227L)

    def test_JA_7(self):
        ''' Instruction JA_7 
            Groups: jump 
            0x436b6a:	ja	0x436b40
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436b6a] = 'w'
        mem[0x00436b6b] = '\xd4'
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x436b6a
        cpu.execute()
    
        self.assertEqual(mem[0x436b6a], 'w')
        self.assertEqual(mem[0x436b6b], '\xd4')
        self.assertEqual(cpu.RIP, 4418368L)

    def test_JA_8(self):
        ''' Instruction JA_8 
            Groups: jump 
            0x4183c8:	ja	0x418430
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183c8] = 'w'
        mem[0x004183c9] = 'f'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x4183c8
        cpu.execute()
    
        self.assertEqual(mem[0x4183c8], 'w')
        self.assertEqual(mem[0x4183c9], 'f')
        self.assertEqual(cpu.RIP, 4293578L)

    def test_JA_9(self):
        ''' Instruction JA_9 
            Groups: jump 
            0x45c5b7:	ja	0x45c5e0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045c000, 0x1000, 'rwx')
        mem[0x0045c5b8] = "'"
        mem[0x0045c5b7] = 'w'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x45c5b7
        cpu.execute()
    
        self.assertEqual(mem[0x45c5b8], "'")
        self.assertEqual(mem[0x45c5b7], 'w')
        self.assertEqual(cpu.RIP, 4572601L)

    def test_JBE_1(self):
        ''' Instruction JBE_1 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a8] = 'v'
        mem[0x004322a9] = ' '
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4322a8
        cpu.execute()
    
        self.assertEqual(mem[0x4322a8], 'v')
        self.assertEqual(mem[0x4322a9], ' ')
        self.assertEqual(cpu.RIP, 4399786L)

    def test_JBE_10(self):
        ''' Instruction JBE_10 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a8] = 'v'
        mem[0x004322a9] = ' '
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4322a8
        cpu.execute()
    
        self.assertEqual(mem[0x4322a8], 'v')
        self.assertEqual(mem[0x4322a9], ' ')
        self.assertEqual(cpu.RIP, 4399786L)

    def test_JBE_11(self):
        ''' Instruction JBE_11 
            Groups: jump 
            0x411b8e:	jbe	0x411ba4
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411b8e] = 'v'
        mem[0x00411b8f] = '\x14'
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x411b8e
        cpu.execute()
    
        self.assertEqual(mem[0x411b8e], 'v')
        self.assertEqual(mem[0x411b8f], '\x14')
        self.assertEqual(cpu.RIP, 4266896L)

    def test_JBE_12(self):
        ''' Instruction JBE_12 
            Groups: jump 
            0x413fd3:	jbe	0x413ff0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem[0x00413fd3] = 'v'
        mem[0x00413fd4] = '\x1b'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x413fd3
        cpu.execute()
    
        self.assertEqual(mem[0x413fd3], 'v')
        self.assertEqual(mem[0x413fd4], '\x1b')
        self.assertEqual(cpu.RIP, 4276208L)

    def test_JBE_13(self):
        ''' Instruction JBE_13 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a8] = 'v'
        mem[0x004322a9] = ' '
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4322a8
        cpu.execute()
    
        self.assertEqual(mem[0x4322a8], 'v')
        self.assertEqual(mem[0x4322a9], ' ')
        self.assertEqual(cpu.RIP, 4399786L)

    def test_JBE_14(self):
        ''' Instruction JBE_14 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a8] = 'v'
        mem[0x004322a9] = ' '
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4322a8
        cpu.execute()
    
        self.assertEqual(mem[0x4322a8], 'v')
        self.assertEqual(mem[0x4322a9], ' ')
        self.assertEqual(cpu.RIP, 4399786L)

    def test_JBE_15(self):
        ''' Instruction JBE_15 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a8] = 'v'
        mem[0x004322a9] = ' '
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4322a8
        cpu.execute()
    
        self.assertEqual(mem[0x4322a8], 'v')
        self.assertEqual(mem[0x4322a9], ' ')
        self.assertEqual(cpu.RIP, 4399786L)

    def test_JBE_16(self):
        ''' Instruction JBE_16 
            Groups: jump 
            0x411be9:	jbe	0x411bd0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411be9] = 'v'
        mem[0x00411bea] = '\xe5'
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x411be9
        cpu.execute()
    
        self.assertEqual(mem[0x411be9], 'v')
        self.assertEqual(mem[0x411bea], '\xe5')
        self.assertEqual(cpu.RIP, 4266960L)

    def test_JBE_17(self):
        ''' Instruction JBE_17 
            Groups: jump 
            0x4324f3:	jbe	0x4325df
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004324f3] = '\x0f'
        mem[0x004324f4] = '\x86'
        mem[0x004324f5] = '\xe6'
        mem[0x004324f6] = '\x00'
        mem[0x004324f7] = '\x00'
        mem[0x004324f8] = '\x00'
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4324f3
        cpu.execute()
    
        self.assertEqual(mem[0x4324f3], '\x0f')
        self.assertEqual(mem[0x4324f4], '\x86')
        self.assertEqual(mem[0x4324f5], '\xe6')
        self.assertEqual(mem[0x4324f6], '\x00')
        self.assertEqual(mem[0x4324f7], '\x00')
        self.assertEqual(mem[0x4324f8], '\x00')
        self.assertEqual(cpu.RIP, 4400377L)

    def test_JBE_18(self):
        ''' Instruction JBE_18 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a8] = 'v'
        mem[0x004322a9] = ' '
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4322a8
        cpu.execute()
    
        self.assertEqual(mem[0x4322a8], 'v')
        self.assertEqual(mem[0x4322a9], ' ')
        self.assertEqual(cpu.RIP, 4399786L)

    def test_JBE_19(self):
        ''' Instruction JBE_19 
            Groups: jump 
            0x411be9:	jbe	0x411bd0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411be9] = 'v'
        mem[0x00411bea] = '\xe5'
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x411be9
        cpu.execute()
    
        self.assertEqual(mem[0x411be9], 'v')
        self.assertEqual(mem[0x411bea], '\xe5')
        self.assertEqual(cpu.RIP, 4266960L)

    def test_JBE_2(self):
        ''' Instruction JBE_2 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a8] = 'v'
        mem[0x004322a9] = ' '
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4322a8
        cpu.execute()
    
        self.assertEqual(mem[0x4322a8], 'v')
        self.assertEqual(mem[0x4322a9], ' ')
        self.assertEqual(cpu.RIP, 4399786L)

    def test_JBE_20(self):
        ''' Instruction JBE_20 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a8] = 'v'
        mem[0x004322a9] = ' '
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4322a8
        cpu.execute()
    
        self.assertEqual(mem[0x4322a8], 'v')
        self.assertEqual(mem[0x4322a9], ' ')
        self.assertEqual(cpu.RIP, 4399818L)

    def test_JBE_21(self):
        ''' Instruction JBE_21 
            Groups: jump 
            0x4324f3:	jbe	0x4325df
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004324f3] = '\x0f'
        mem[0x004324f4] = '\x86'
        mem[0x004324f5] = '\xe6'
        mem[0x004324f6] = '\x00'
        mem[0x004324f7] = '\x00'
        mem[0x004324f8] = '\x00'
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4324f3
        cpu.execute()
    
        self.assertEqual(mem[0x4324f3], '\x0f')
        self.assertEqual(mem[0x4324f4], '\x86')
        self.assertEqual(mem[0x4324f5], '\xe6')
        self.assertEqual(mem[0x4324f6], '\x00')
        self.assertEqual(mem[0x4324f7], '\x00')
        self.assertEqual(mem[0x4324f8], '\x00')
        self.assertEqual(cpu.RIP, 4400377L)

    def test_JBE_3(self):
        ''' Instruction JBE_3 
            Groups: jump 
            0x41179d:	jbe	0x411dd0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x004117a0] = '\x06'
        mem[0x004117a1] = '\x00'
        mem[0x004117a2] = '\x00'
        mem[0x0041179d] = '\x0f'
        mem[0x0041179e] = '\x86'
        mem[0x0041179f] = '-'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x41179d
        cpu.execute()
    
        self.assertEqual(mem[0x4117a0], '\x06')
        self.assertEqual(mem[0x4117a1], '\x00')
        self.assertEqual(mem[0x4117a2], '\x00')
        self.assertEqual(mem[0x41179d], '\x0f')
        self.assertEqual(mem[0x41179e], '\x86')
        self.assertEqual(mem[0x41179f], '-')
        self.assertEqual(cpu.RIP, 4267472L)

    def test_JBE_4(self):
        ''' Instruction JBE_4 
            Groups: jump 
            0x411b8e:	jbe	0x411ba4
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411b8e] = 'v'
        mem[0x00411b8f] = '\x14'
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x411b8e
        cpu.execute()
    
        self.assertEqual(mem[0x411b8e], 'v')
        self.assertEqual(mem[0x411b8f], '\x14')
        self.assertEqual(cpu.RIP, 4266896L)

    def test_JBE_5(self):
        ''' Instruction JBE_5 
            Groups: jump 
            0x411be9:	jbe	0x411bd0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411be9] = 'v'
        mem[0x00411bea] = '\xe5'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x411be9
        cpu.execute()
    
        self.assertEqual(mem[0x411be9], 'v')
        self.assertEqual(mem[0x411bea], '\xe5')
        self.assertEqual(cpu.RIP, 4266960L)

    def test_JBE_6(self):
        ''' Instruction JBE_6 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a8] = 'v'
        mem[0x004322a9] = ' '
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4322a8
        cpu.execute()
    
        self.assertEqual(mem[0x4322a8], 'v')
        self.assertEqual(mem[0x4322a9], ' ')
        self.assertEqual(cpu.RIP, 4399786L)

    def test_JBE_7(self):
        ''' Instruction JBE_7 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a8] = 'v'
        mem[0x004322a9] = ' '
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4322a8
        cpu.execute()
    
        self.assertEqual(mem[0x4322a8], 'v')
        self.assertEqual(mem[0x4322a9], ' ')
        self.assertEqual(cpu.RIP, 4399786L)

    def test_JBE_8(self):
        ''' Instruction JBE_8 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a8] = 'v'
        mem[0x004322a9] = ' '
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4322a8
        cpu.execute()
    
        self.assertEqual(mem[0x4322a8], 'v')
        self.assertEqual(mem[0x4322a9], ' ')
        self.assertEqual(cpu.RIP, 4399786L)

    def test_JBE_9(self):
        ''' Instruction JBE_9 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322a8] = 'v'
        mem[0x004322a9] = ' '
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4322a8
        cpu.execute()
    
        self.assertEqual(mem[0x4322a8], 'v')
        self.assertEqual(mem[0x4322a9], ' ')
        self.assertEqual(cpu.RIP, 4399786L)

    def test_JB_1(self):
        ''' Instruction JB_1 
            Groups: jump 
            0x43219d:	jb	0x432183
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x0043219d] = 'r'
        mem[0x0043219e] = '\xe4'
        cpu.CF = False
        cpu.RIP = 0x43219d
        cpu.execute()
    
        self.assertEqual(mem[0x43219d], 'r')
        self.assertEqual(mem[0x43219e], '\xe4')
        self.assertEqual(cpu.RIP, 4399519L)

    def test_JB_10(self):
        ''' Instruction JB_10 
            Groups: jump 
            0x4322e7:	jb	0x432290
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322e8] = '\xa7'
        mem[0x004322e7] = 'r'
        cpu.CF = False
        cpu.RIP = 0x4322e7
        cpu.execute()
    
        self.assertEqual(mem[0x4322e8], '\xa7')
        self.assertEqual(mem[0x4322e7], 'r')
        self.assertEqual(cpu.RIP, 4399849L)

    def test_JB_11(self):
        ''' Instruction JB_11 
            Groups: jump 
            0x4322e7:	jb	0x432290
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322e8] = '\xa7'
        mem[0x004322e7] = 'r'
        cpu.CF = True
        cpu.RIP = 0x4322e7
        cpu.execute()
    
        self.assertEqual(mem[0x4322e8], '\xa7')
        self.assertEqual(mem[0x4322e7], 'r')
        self.assertEqual(cpu.RIP, 4399760L)

    def test_JB_12(self):
        ''' Instruction JB_12 
            Groups: jump 
            0x43219d:	jb	0x432183
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x0043219d] = 'r'
        mem[0x0043219e] = '\xe4'
        cpu.CF = True
        cpu.RIP = 0x43219d
        cpu.execute()
    
        self.assertEqual(mem[0x43219d], 'r')
        self.assertEqual(mem[0x43219e], '\xe4')
        self.assertEqual(cpu.RIP, 4399491L)

    def test_JB_13(self):
        ''' Instruction JB_13 
            Groups: jump 
            0x400fc1:	jb	0x400fd1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400fc1] = 'r'
        mem[0x00400fc2] = '\x0e'
        cpu.CF = True
        cpu.RIP = 0x400fc1
        cpu.execute()
    
        self.assertEqual(mem[0x400fc1], 'r')
        self.assertEqual(mem[0x400fc2], '\x0e')
        self.assertEqual(cpu.RIP, 4198353L)

    def test_JB_14(self):
        ''' Instruction JB_14 
            Groups: jump 
            0x432058:	jb	0x432120
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432058] = '\x0f'
        mem[0x00432059] = '\x82'
        mem[0x0043205a] = '\xc2'
        mem[0x0043205b] = '\x00'
        mem[0x0043205c] = '\x00'
        mem[0x0043205d] = '\x00'
        cpu.CF = False
        cpu.RIP = 0x432058
        cpu.execute()
    
        self.assertEqual(mem[0x432058], '\x0f')
        self.assertEqual(mem[0x432059], '\x82')
        self.assertEqual(mem[0x43205a], '\xc2')
        self.assertEqual(mem[0x43205b], '\x00')
        self.assertEqual(mem[0x43205c], '\x00')
        self.assertEqual(mem[0x43205d], '\x00')
        self.assertEqual(cpu.RIP, 4399198L)

    def test_JB_15(self):
        ''' Instruction JB_15 
            Groups: jump 
            0x406f76:	jb	0x406f6b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406f76] = 'r'
        mem[0x00406f77] = '\xf3'
        cpu.CF = False
        cpu.RIP = 0x406f76
        cpu.execute()
    
        self.assertEqual(mem[0x406f76], 'r')
        self.assertEqual(mem[0x406f77], '\xf3')
        self.assertEqual(cpu.RIP, 4222840L)

    def test_JB_16(self):
        ''' Instruction JB_16 
            Groups: jump 
            0x4322e7:	jb	0x432290
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322e8] = '\xa7'
        mem[0x004322e7] = 'r'
        cpu.CF = False
        cpu.RIP = 0x4322e7
        cpu.execute()
    
        self.assertEqual(mem[0x4322e8], '\xa7')
        self.assertEqual(mem[0x4322e7], 'r')
        self.assertEqual(cpu.RIP, 4399849L)

    def test_JB_17(self):
        ''' Instruction JB_17 
            Groups: jump 
            0x43219d:	jb	0x432183
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x0043219d] = 'r'
        mem[0x0043219e] = '\xe4'
        cpu.CF = True
        cpu.RIP = 0x43219d
        cpu.execute()
    
        self.assertEqual(mem[0x43219d], 'r')
        self.assertEqual(mem[0x43219e], '\xe4')
        self.assertEqual(cpu.RIP, 4399491L)

    def test_JB_18(self):
        ''' Instruction JB_18 
            Groups: jump 
            0x4322e7:	jb	0x432290
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322e8] = '\xa7'
        mem[0x004322e7] = 'r'
        cpu.CF = False
        cpu.RIP = 0x4322e7
        cpu.execute()
    
        self.assertEqual(mem[0x4322e8], '\xa7')
        self.assertEqual(mem[0x4322e7], 'r')
        self.assertEqual(cpu.RIP, 4399849L)

    def test_JB_19(self):
        ''' Instruction JB_19 
            Groups: jump 
            0x4370da:	jb	0x4370e3
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x004370da] = 'r'
        mem[0x004370db] = '\x07'
        cpu.CF = False
        cpu.RIP = 0x4370da
        cpu.execute()
    
        self.assertEqual(mem[0x4370da], 'r')
        self.assertEqual(mem[0x4370db], '\x07')
        self.assertEqual(cpu.RIP, 4419804L)

    def test_JB_2(self):
        ''' Instruction JB_2 
            Groups: jump 
            0x43219d:	jb	0x432183
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x0043219d] = 'r'
        mem[0x0043219e] = '\xe4'
        cpu.CF = True
        cpu.RIP = 0x43219d
        cpu.execute()
    
        self.assertEqual(mem[0x43219d], 'r')
        self.assertEqual(mem[0x43219e], '\xe4')
        self.assertEqual(cpu.RIP, 4399491L)

    def test_JB_20(self):
        ''' Instruction JB_20 
            Groups: jump 
            0x4322e7:	jb	0x432290
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322e8] = '\xa7'
        mem[0x004322e7] = 'r'
        cpu.CF = True
        cpu.RIP = 0x4322e7
        cpu.execute()
    
        self.assertEqual(mem[0x4322e8], '\xa7')
        self.assertEqual(mem[0x4322e7], 'r')
        self.assertEqual(cpu.RIP, 4399760L)

    def test_JB_21(self):
        ''' Instruction JB_21 
            Groups: jump 
            0x4322e7:	jb	0x432290
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322e8] = '\xa7'
        mem[0x004322e7] = 'r'
        cpu.CF = True
        cpu.RIP = 0x4322e7
        cpu.execute()
    
        self.assertEqual(mem[0x4322e8], '\xa7')
        self.assertEqual(mem[0x4322e7], 'r')
        self.assertEqual(cpu.RIP, 4399760L)

    def test_JB_3(self):
        ''' Instruction JB_3 
            Groups: jump 
            0x4322e7:	jb	0x432290
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322e8] = '\xa7'
        mem[0x004322e7] = 'r'
        cpu.CF = True
        cpu.RIP = 0x4322e7
        cpu.execute()
    
        self.assertEqual(mem[0x4322e8], '\xa7')
        self.assertEqual(mem[0x4322e7], 'r')
        self.assertEqual(cpu.RIP, 4399760L)

    def test_JB_4(self):
        ''' Instruction JB_4 
            Groups: jump 
            0x43219d:	jb	0x432183
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x0043219d] = 'r'
        mem[0x0043219e] = '\xe4'
        cpu.CF = True
        cpu.RIP = 0x43219d
        cpu.execute()
    
        self.assertEqual(mem[0x43219d], 'r')
        self.assertEqual(mem[0x43219e], '\xe4')
        self.assertEqual(cpu.RIP, 4399491L)

    def test_JB_5(self):
        ''' Instruction JB_5 
            Groups: jump 
            0x4322e7:	jb	0x432290
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322e8] = '\xa7'
        mem[0x004322e7] = 'r'
        cpu.CF = True
        cpu.RIP = 0x4322e7
        cpu.execute()
    
        self.assertEqual(mem[0x4322e8], '\xa7')
        self.assertEqual(mem[0x4322e7], 'r')
        self.assertEqual(cpu.RIP, 4399760L)

    def test_JB_6(self):
        ''' Instruction JB_6 
            Groups: jump 
            0x43219d:	jb	0x432183
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x0043219d] = 'r'
        mem[0x0043219e] = '\xe4'
        cpu.CF = True
        cpu.RIP = 0x43219d
        cpu.execute()
    
        self.assertEqual(mem[0x43219d], 'r')
        self.assertEqual(mem[0x43219e], '\xe4')
        self.assertEqual(cpu.RIP, 4399491L)

    def test_JB_7(self):
        ''' Instruction JB_7 
            Groups: jump 
            0x4322e7:	jb	0x432290
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322e8] = '\xa7'
        mem[0x004322e7] = 'r'
        cpu.CF = True
        cpu.RIP = 0x4322e7
        cpu.execute()
    
        self.assertEqual(mem[0x4322e8], '\xa7')
        self.assertEqual(mem[0x4322e7], 'r')
        self.assertEqual(cpu.RIP, 4399760L)

    def test_JB_8(self):
        ''' Instruction JB_8 
            Groups: jump 
            0x43219d:	jb	0x432183
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x0043219d] = 'r'
        mem[0x0043219e] = '\xe4'
        cpu.CF = True
        cpu.RIP = 0x43219d
        cpu.execute()
    
        self.assertEqual(mem[0x43219d], 'r')
        self.assertEqual(mem[0x43219e], '\xe4')
        self.assertEqual(cpu.RIP, 4399491L)

    def test_JB_9(self):
        ''' Instruction JB_9 
            Groups: jump 
            0x400c78:	jb	0x400c93
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400c78] = 'r'
        mem[0x00400c79] = '\x19'
        cpu.CF = True
        cpu.RIP = 0x400c78
        cpu.execute()
    
        self.assertEqual(mem[0x400c78], 'r')
        self.assertEqual(mem[0x400c79], '\x19')
        self.assertEqual(cpu.RIP, 4197523L)

    def test_JE_1(self):
        ''' Instruction JE_1 
            Groups: jump 
            0x414713:	je	0x414788
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x00414713] = 't'
        mem[0x00414714] = 's'
        cpu.ZF = False
        cpu.RIP = 0x414713
        cpu.execute()
    
        self.assertEqual(mem[0x414713], 't')
        self.assertEqual(mem[0x414714], 's')
        self.assertEqual(cpu.RIP, 4278037L)

    def test_JE_10(self):
        ''' Instruction JE_10 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e8b] = 't'
        mem[0x00406e8c] = '\xb9'
        cpu.ZF = False
        cpu.RIP = 0x406e8b
        cpu.execute()
    
        self.assertEqual(mem[0x406e8b], 't')
        self.assertEqual(mem[0x406e8c], '\xb9')
        self.assertEqual(cpu.RIP, 4222605L)

    def test_JE_11(self):
        ''' Instruction JE_11 
            Groups: jump 
            0x411b8a:	je	0x411be3
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411b8a] = 't'
        mem[0x00411b8b] = 'W'
        cpu.ZF = False
        cpu.RIP = 0x411b8a
        cpu.execute()
    
        self.assertEqual(mem[0x411b8a], 't')
        self.assertEqual(mem[0x411b8b], 'W')
        self.assertEqual(cpu.RIP, 4266892L)

    def test_JE_12(self):
        ''' Instruction JE_12 
            Groups: jump 
            0x41b3bc:	je	0x41b3ca
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041b000, 0x1000, 'rwx')
        mem[0x0041b3bc] = 't'
        mem[0x0041b3bd] = '\x0c'
        cpu.ZF = True
        cpu.RIP = 0x41b3bc
        cpu.execute()
    
        self.assertEqual(mem[0x41b3bc], 't')
        self.assertEqual(mem[0x41b3bd], '\x0c')
        self.assertEqual(cpu.RIP, 4305866L)

    def test_JE_13(self):
        ''' Instruction JE_13 
            Groups: jump 
            0x43224d:	je	0x43233d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x0043224d] = '\x0f'
        mem[0x0043224e] = '\x84'
        mem[0x0043224f] = '\xea'
        mem[0x00432250] = '\x00'
        mem[0x00432251] = '\x00'
        mem[0x00432252] = '\x00'
        cpu.ZF = True
        cpu.RIP = 0x43224d
        cpu.execute()
    
        self.assertEqual(mem[0x43224d], '\x0f')
        self.assertEqual(mem[0x43224e], '\x84')
        self.assertEqual(mem[0x43224f], '\xea')
        self.assertEqual(mem[0x432250], '\x00')
        self.assertEqual(mem[0x432251], '\x00')
        self.assertEqual(mem[0x432252], '\x00')
        self.assertEqual(cpu.RIP, 4399933L)

    def test_JE_14(self):
        ''' Instruction JE_14 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e8b] = 't'
        mem[0x00406e8c] = '\xb9'
        cpu.ZF = False
        cpu.RIP = 0x406e8b
        cpu.execute()
    
        self.assertEqual(mem[0x406e8b], 't')
        self.assertEqual(mem[0x406e8c], '\xb9')
        self.assertEqual(cpu.RIP, 4222605L)

    def test_JE_15(self):
        ''' Instruction JE_15 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e8b] = 't'
        mem[0x00406e8c] = '\xb9'
        cpu.ZF = False
        cpu.RIP = 0x406e8b
        cpu.execute()
    
        self.assertEqual(mem[0x406e8b], 't')
        self.assertEqual(mem[0x406e8c], '\xb9')
        self.assertEqual(cpu.RIP, 4222605L)

    def test_JE_16(self):
        ''' Instruction JE_16 
            Groups: jump 
            0x435932:	je	0x435935
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00435000, 0x1000, 'rwx')
        mem[0x00435932] = 't'
        mem[0x00435933] = '\x01'
        cpu.ZF = True
        cpu.RIP = 0x435932
        cpu.execute()
    
        self.assertEqual(mem[0x435932], 't')
        self.assertEqual(mem[0x435933], '\x01')
        self.assertEqual(cpu.RIP, 4413749L)

    def test_JE_17(self):
        ''' Instruction JE_17 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e8b] = 't'
        mem[0x00406e8c] = '\xb9'
        cpu.ZF = False
        cpu.RIP = 0x406e8b
        cpu.execute()
    
        self.assertEqual(mem[0x406e8b], 't')
        self.assertEqual(mem[0x406e8c], '\xb9')
        self.assertEqual(cpu.RIP, 4222605L)

    def test_JE_18(self):
        ''' Instruction JE_18 
            Groups: jump 
            0x48fe5e:	je	0x48fe71
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0048f000, 0x1000, 'rwx')
        mem[0x0048fe5e] = 't'
        mem[0x0048fe5f] = '\x11'
        cpu.ZF = True
        cpu.RIP = 0x48fe5e
        cpu.execute()
    
        self.assertEqual(mem[0x48fe5e], 't')
        self.assertEqual(mem[0x48fe5f], '\x11')
        self.assertEqual(cpu.RIP, 4783729L)

    def test_JE_19(self):
        ''' Instruction JE_19 
            Groups: jump 
            0x414713:	je	0x414788
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x00414713] = 't'
        mem[0x00414714] = 's'
        cpu.ZF = False
        cpu.RIP = 0x414713
        cpu.execute()
    
        self.assertEqual(mem[0x414713], 't')
        self.assertEqual(mem[0x414714], 's')
        self.assertEqual(cpu.RIP, 4278037L)

    def test_JE_2(self):
        ''' Instruction JE_2 
            Groups: jump 
            0x406e08:	je	0x406eb8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e08] = '\x0f'
        mem[0x00406e09] = '\x84'
        mem[0x00406e0a] = '\xaa'
        mem[0x00406e0b] = '\x00'
        mem[0x00406e0c] = '\x00'
        mem[0x00406e0d] = '\x00'
        cpu.ZF = False
        cpu.RIP = 0x406e08
        cpu.execute()
    
        self.assertEqual(mem[0x406e08], '\x0f')
        self.assertEqual(mem[0x406e09], '\x84')
        self.assertEqual(mem[0x406e0a], '\xaa')
        self.assertEqual(mem[0x406e0b], '\x00')
        self.assertEqual(mem[0x406e0c], '\x00')
        self.assertEqual(mem[0x406e0d], '\x00')
        self.assertEqual(cpu.RIP, 4222478L)

    def test_JE_20(self):
        ''' Instruction JE_20 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e8b] = 't'
        mem[0x00406e8c] = '\xb9'
        cpu.ZF = False
        cpu.RIP = 0x406e8b
        cpu.execute()
    
        self.assertEqual(mem[0x406e8b], 't')
        self.assertEqual(mem[0x406e8c], '\xb9')
        self.assertEqual(cpu.RIP, 4222605L)

    def test_JE_21(self):
        ''' Instruction JE_21 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e8b] = 't'
        mem[0x00406e8c] = '\xb9'
        cpu.ZF = True
        cpu.RIP = 0x406e8b
        cpu.execute()
    
        self.assertEqual(mem[0x406e8b], 't')
        self.assertEqual(mem[0x406e8c], '\xb9')
        self.assertEqual(cpu.RIP, 4222534L)

    def test_JE_3(self):
        ''' Instruction JE_3 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e8b] = 't'
        mem[0x00406e8c] = '\xb9'
        cpu.ZF = False
        cpu.RIP = 0x406e8b
        cpu.execute()
    
        self.assertEqual(mem[0x406e8b], 't')
        self.assertEqual(mem[0x406e8c], '\xb9')
        self.assertEqual(cpu.RIP, 4222605L)

    def test_JE_4(self):
        ''' Instruction JE_4 
            Groups: jump 
            0x4323fc:	je	0x4323a0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004323fc] = 't'
        mem[0x004323fd] = '\xa2'
        cpu.ZF = True
        cpu.RIP = 0x4323fc
        cpu.execute()
    
        self.assertEqual(mem[0x4323fc], 't')
        self.assertEqual(mem[0x4323fd], '\xa2')
        self.assertEqual(cpu.RIP, 4400032L)

    def test_JE_5(self):
        ''' Instruction JE_5 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e8b] = 't'
        mem[0x00406e8c] = '\xb9'
        cpu.ZF = False
        cpu.RIP = 0x406e8b
        cpu.execute()
    
        self.assertEqual(mem[0x406e8b], 't')
        self.assertEqual(mem[0x406e8c], '\xb9')
        self.assertEqual(cpu.RIP, 4222605L)

    def test_JE_6(self):
        ''' Instruction JE_6 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e8b] = 't'
        mem[0x00406e8c] = '\xb9'
        cpu.ZF = False
        cpu.RIP = 0x406e8b
        cpu.execute()
    
        self.assertEqual(mem[0x406e8b], 't')
        self.assertEqual(mem[0x406e8c], '\xb9')
        self.assertEqual(cpu.RIP, 4222605L)

    def test_JE_7(self):
        ''' Instruction JE_7 
            Groups: jump 
            0x414713:	je	0x414788
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x00414713] = 't'
        mem[0x00414714] = 's'
        cpu.ZF = False
        cpu.RIP = 0x414713
        cpu.execute()
    
        self.assertEqual(mem[0x414713], 't')
        self.assertEqual(mem[0x414714], 's')
        self.assertEqual(cpu.RIP, 4278037L)

    def test_JE_8(self):
        ''' Instruction JE_8 
            Groups: jump 
            0x43229e:	je	0x4322b9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x0043229e] = 't'
        mem[0x0043229f] = '\x19'
        cpu.ZF = False
        cpu.RIP = 0x43229e
        cpu.execute()
    
        self.assertEqual(mem[0x43229e], 't')
        self.assertEqual(mem[0x43229f], '\x19')
        self.assertEqual(cpu.RIP, 4399776L)

    def test_JE_9(self):
        ''' Instruction JE_9 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e8b] = 't'
        mem[0x00406e8c] = '\xb9'
        cpu.ZF = False
        cpu.RIP = 0x406e8b
        cpu.execute()
    
        self.assertEqual(mem[0x406e8b], 't')
        self.assertEqual(mem[0x406e8c], '\xb9')
        self.assertEqual(cpu.RIP, 4222605L)

    def test_JG_1(self):
        ''' Instruction JG_1 
            Groups: jump 
            0x400cd4:	jg	0x400c6a
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400cd4] = '\x7f'
        mem[0x00400cd5] = '\x94'
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x400cd4
        cpu.execute()
    
        self.assertEqual(mem[0x400cd4], '\x7f')
        self.assertEqual(mem[0x400cd5], '\x94')
        self.assertEqual(cpu.RIP, 4197482L)

    def test_JLE_1(self):
        ''' Instruction JLE_1 
            Groups: jump 
            0x40d994:	jle	0x40dab0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem[0x0040d994] = '\x0f'
        mem[0x0040d995] = '\x8e'
        mem[0x0040d996] = '\x16'
        mem[0x0040d997] = '\x01'
        mem[0x0040d998] = '\x00'
        mem[0x0040d999] = '\x00'
        cpu.OF = False
        cpu.ZF = True
        cpu.SF = False
        cpu.RIP = 0x40d994
        cpu.execute()
    
        self.assertEqual(mem[0x40d994], '\x0f')
        self.assertEqual(mem[0x40d995], '\x8e')
        self.assertEqual(mem[0x40d996], '\x16')
        self.assertEqual(mem[0x40d997], '\x01')
        self.assertEqual(mem[0x40d998], '\x00')
        self.assertEqual(mem[0x40d999], '\x00')
        self.assertEqual(cpu.RIP, 4250288L)

    def test_JLE_10(self):
        ''' Instruction JLE_10 
            Groups: jump 
            0x400af1:	jle	0x400a94
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400af1] = '~'
        mem[0x00400af2] = '\xa1'
        cpu.OF = False
        cpu.ZF = True
        cpu.SF = False
        cpu.RIP = 0x400af1
        cpu.execute()
    
        self.assertEqual(mem[0x400af1], '~')
        self.assertEqual(mem[0x400af2], '\xa1')
        self.assertEqual(cpu.RIP, 4197012L)

    def test_JLE_11(self):
        ''' Instruction JLE_11 
            Groups: jump 
            0x40d994:	jle	0x40dab0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem[0x0040d994] = '\x0f'
        mem[0x0040d995] = '\x8e'
        mem[0x0040d996] = '\x16'
        mem[0x0040d997] = '\x01'
        mem[0x0040d998] = '\x00'
        mem[0x0040d999] = '\x00'
        cpu.OF = False
        cpu.ZF = True
        cpu.SF = False
        cpu.RIP = 0x40d994
        cpu.execute()
    
        self.assertEqual(mem[0x40d994], '\x0f')
        self.assertEqual(mem[0x40d995], '\x8e')
        self.assertEqual(mem[0x40d996], '\x16')
        self.assertEqual(mem[0x40d997], '\x01')
        self.assertEqual(mem[0x40d998], '\x00')
        self.assertEqual(mem[0x40d999], '\x00')
        self.assertEqual(cpu.RIP, 4250288L)

    def test_JLE_12(self):
        ''' Instruction JLE_12 
            Groups: jump 
            0x400b1b:	jle	0x400b03
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b1b] = '~'
        mem[0x00400b1c] = '\xe6'
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = True
        cpu.RIP = 0x400b1b
        cpu.execute()
    
        self.assertEqual(mem[0x400b1b], '~')
        self.assertEqual(mem[0x400b1c], '\xe6')
        self.assertEqual(cpu.RIP, 4197123L)

    def test_JLE_13(self):
        ''' Instruction JLE_13 
            Groups: jump 
            0x400b1b:	jle	0x400b03
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b1b] = '~'
        mem[0x00400b1c] = '\xe6'
        cpu.OF = False
        cpu.ZF = True
        cpu.SF = False
        cpu.RIP = 0x400b1b
        cpu.execute()
    
        self.assertEqual(mem[0x400b1b], '~')
        self.assertEqual(mem[0x400b1c], '\xe6')
        self.assertEqual(cpu.RIP, 4197123L)

    def test_JLE_14(self):
        ''' Instruction JLE_14 
            Groups: jump 
            0x4341f2:	jle	0x434260
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x004341f2] = '~'
        mem[0x004341f3] = 'l'
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x4341f2
        cpu.execute()
    
        self.assertEqual(mem[0x4341f2], '~')
        self.assertEqual(mem[0x4341f3], 'l')
        self.assertEqual(cpu.RIP, 4407796L)

    def test_JLE_15(self):
        ''' Instruction JLE_15 
            Groups: jump 
            0x465c8e:	jle	0x465d10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x00465c8e] = '\x0f'
        mem[0x00465c8f] = '\x8e'
        mem[0x00465c90] = '|'
        mem[0x00465c91] = '\x00'
        mem[0x00465c92] = '\x00'
        mem[0x00465c93] = '\x00'
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x465c8e
        cpu.execute()
    
        self.assertEqual(mem[0x465c8e], '\x0f')
        self.assertEqual(mem[0x465c8f], '\x8e')
        self.assertEqual(mem[0x465c90], '|')
        self.assertEqual(mem[0x465c91], '\x00')
        self.assertEqual(mem[0x465c92], '\x00')
        self.assertEqual(mem[0x465c93], '\x00')
        self.assertEqual(cpu.RIP, 4611220L)

    def test_JLE_16(self):
        ''' Instruction JLE_16 
            Groups: jump 
            0x4006df:	jle	0x40070d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006e0] = ','
        mem[0x004006df] = '~'
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x4006df
        cpu.execute()
    
        self.assertEqual(mem[0x4006e0], ',')
        self.assertEqual(mem[0x4006df], '~')
        self.assertEqual(cpu.RIP, 4196065L)

    def test_JLE_17(self):
        ''' Instruction JLE_17 
            Groups: jump 
            0x4341f2:	jle	0x434260
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x004341f2] = '~'
        mem[0x004341f3] = 'l'
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x4341f2
        cpu.execute()
    
        self.assertEqual(mem[0x4341f2], '~')
        self.assertEqual(mem[0x4341f3], 'l')
        self.assertEqual(cpu.RIP, 4407796L)

    def test_JLE_18(self):
        ''' Instruction JLE_18 
            Groups: jump 
            0x400b1b:	jle	0x400b03
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b1b] = '~'
        mem[0x00400b1c] = '\xe6'
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = True
        cpu.RIP = 0x400b1b
        cpu.execute()
    
        self.assertEqual(mem[0x400b1b], '~')
        self.assertEqual(mem[0x400b1c], '\xe6')
        self.assertEqual(cpu.RIP, 4197123L)

    def test_JLE_19(self):
        ''' Instruction JLE_19 
            Groups: jump 
            0x4378e8:	jle	0x4378ff
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x004378e8] = '~'
        mem[0x004378e9] = '\x15'
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x4378e8
        cpu.execute()
    
        self.assertEqual(mem[0x4378e8], '~')
        self.assertEqual(mem[0x4378e9], '\x15')
        self.assertEqual(cpu.RIP, 4421866L)

    def test_JLE_2(self):
        ''' Instruction JLE_2 
            Groups: jump 
            0x400b1b:	jle	0x400b03
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b1b] = '~'
        mem[0x00400b1c] = '\xe6'
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x400b1b
        cpu.execute()
    
        self.assertEqual(mem[0x400b1b], '~')
        self.assertEqual(mem[0x400b1c], '\xe6')
        self.assertEqual(cpu.RIP, 4197149L)

    def test_JLE_20(self):
        ''' Instruction JLE_20 
            Groups: jump 
            0x400674:	jle	0x4008cc
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400674] = '\x0f'
        mem[0x00400675] = '\x8e'
        mem[0x00400676] = 'R'
        mem[0x00400677] = '\x02'
        mem[0x00400678] = '\x00'
        mem[0x00400679] = '\x00'
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x400674
        cpu.execute()
    
        self.assertEqual(mem[0x400674], '\x0f')
        self.assertEqual(mem[0x400675], '\x8e')
        self.assertEqual(mem[0x400676], 'R')
        self.assertEqual(mem[0x400677], '\x02')
        self.assertEqual(mem[0x400678], '\x00')
        self.assertEqual(mem[0x400679], '\x00')
        self.assertEqual(cpu.RIP, 4195962L)

    def test_JLE_21(self):
        ''' Instruction JLE_21 
            Groups: jump 
            0x400af1:	jle	0x400a94
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400af1] = '~'
        mem[0x00400af2] = '\xa1'
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = True
        cpu.RIP = 0x400af1
        cpu.execute()
    
        self.assertEqual(mem[0x400af1], '~')
        self.assertEqual(mem[0x400af2], '\xa1')
        self.assertEqual(cpu.RIP, 4197012L)

    def test_JLE_3(self):
        ''' Instruction JLE_3 
            Groups: jump 
            0x400af1:	jle	0x400a94
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400af1] = '~'
        mem[0x00400af2] = '\xa1'
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = True
        cpu.RIP = 0x400af1
        cpu.execute()
    
        self.assertEqual(mem[0x400af1], '~')
        self.assertEqual(mem[0x400af2], '\xa1')
        self.assertEqual(cpu.RIP, 4197012L)

    def test_JLE_4(self):
        ''' Instruction JLE_4 
            Groups: jump 
            0x400710:	jle	0x400639
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400710] = '\x0f'
        mem[0x00400711] = '\x8e'
        mem[0x00400712] = '#'
        mem[0x00400713] = '\xff'
        mem[0x00400714] = '\xff'
        mem[0x00400715] = '\xff'
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x400710
        cpu.execute()
    
        self.assertEqual(mem[0x400710], '\x0f')
        self.assertEqual(mem[0x400711], '\x8e')
        self.assertEqual(mem[0x400712], '#')
        self.assertEqual(mem[0x400713], '\xff')
        self.assertEqual(mem[0x400714], '\xff')
        self.assertEqual(mem[0x400715], '\xff')
        self.assertEqual(cpu.RIP, 4196118L)

    def test_JLE_5(self):
        ''' Instruction JLE_5 
            Groups: jump 
            0x400af1:	jle	0x400a94
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400af1] = '~'
        mem[0x00400af2] = '\xa1'
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = True
        cpu.RIP = 0x400af1
        cpu.execute()
    
        self.assertEqual(mem[0x400af1], '~')
        self.assertEqual(mem[0x400af2], '\xa1')
        self.assertEqual(cpu.RIP, 4197012L)

    def test_JLE_6(self):
        ''' Instruction JLE_6 
            Groups: jump 
            0x40d994:	jle	0x40dab0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem[0x0040d994] = '\x0f'
        mem[0x0040d995] = '\x8e'
        mem[0x0040d996] = '\x16'
        mem[0x0040d997] = '\x01'
        mem[0x0040d998] = '\x00'
        mem[0x0040d999] = '\x00'
        cpu.OF = False
        cpu.ZF = True
        cpu.SF = False
        cpu.RIP = 0x40d994
        cpu.execute()
    
        self.assertEqual(mem[0x40d994], '\x0f')
        self.assertEqual(mem[0x40d995], '\x8e')
        self.assertEqual(mem[0x40d996], '\x16')
        self.assertEqual(mem[0x40d997], '\x01')
        self.assertEqual(mem[0x40d998], '\x00')
        self.assertEqual(mem[0x40d999], '\x00')
        self.assertEqual(cpu.RIP, 4250288L)

    def test_JLE_7(self):
        ''' Instruction JLE_7 
            Groups: jump 
            0x40081d:	jle	0x40085b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040081d] = '~'
        mem[0x0040081e] = '<'
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x40081d
        cpu.execute()
    
        self.assertEqual(mem[0x40081d], '~')
        self.assertEqual(mem[0x40081e], '<')
        self.assertEqual(cpu.RIP, 4196383L)

    def test_JLE_8(self):
        ''' Instruction JLE_8 
            Groups: jump 
            0x4006cf:	jle	0x4006dc
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006d0] = '\x0b'
        mem[0x004006cf] = '~'
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x4006cf
        cpu.execute()
    
        self.assertEqual(mem[0x4006d0], '\x0b')
        self.assertEqual(mem[0x4006cf], '~')
        self.assertEqual(cpu.RIP, 4196049L)

    def test_JLE_9(self):
        ''' Instruction JLE_9 
            Groups: jump 
            0x4341f2:	jle	0x434260
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x004341f2] = '~'
        mem[0x004341f3] = 'l'
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x4341f2
        cpu.execute()
    
        self.assertEqual(mem[0x4341f2], '~')
        self.assertEqual(mem[0x4341f3], 'l')
        self.assertEqual(cpu.RIP, 4407796L)

    def test_JMP_1(self):
        ''' Instruction JMP_1 
            Groups: mode64, jump 
            0x4379f7:	jmp	rdx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x004379f8] = '\xe2'
        mem[0x004379f7] = '\xff'
        cpu.RDX = 0x437a82
        cpu.RIP = 0x4379f7
        cpu.execute()
    
        self.assertEqual(mem[0x4379f8], '\xe2')
        self.assertEqual(mem[0x4379f7], '\xff')
        self.assertEqual(cpu.RDX, 4422274L)
        self.assertEqual(cpu.RIP, 4422274L)

    def test_JMP_10(self):
        ''' Instruction JMP_10 
            Groups: jump 
            0x464608:	jmp	0x4640f6
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00464000, 0x1000, 'rwx')
        mem[0x00464608] = '\xe9'
        mem[0x00464609] = '\xe9'
        mem[0x0046460a] = '\xfa'
        mem[0x0046460b] = '\xff'
        mem[0x0046460c] = '\xff'
        cpu.RIP = 0x464608
        cpu.execute()
    
        self.assertEqual(mem[0x464608], '\xe9')
        self.assertEqual(mem[0x464609], '\xe9')
        self.assertEqual(mem[0x46460a], '\xfa')
        self.assertEqual(mem[0x46460b], '\xff')
        self.assertEqual(mem[0x46460c], '\xff')
        self.assertEqual(cpu.RIP, 4604150L)

    def test_JMP_11(self):
        ''' Instruction JMP_11 
            Groups: jump 
            0x46250b:	jmp	0x462378
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, 'rwx')
        mem[0x0046250b] = '\xe9'
        mem[0x0046250c] = 'h'
        mem[0x0046250d] = '\xfe'
        mem[0x0046250e] = '\xff'
        mem[0x0046250f] = '\xff'
        cpu.RIP = 0x46250b
        cpu.execute()
    
        self.assertEqual(mem[0x46250b], '\xe9')
        self.assertEqual(mem[0x46250c], 'h')
        self.assertEqual(mem[0x46250d], '\xfe')
        self.assertEqual(mem[0x46250e], '\xff')
        self.assertEqual(mem[0x46250f], '\xff')
        self.assertEqual(cpu.RIP, 4596600L)

    def test_JMP_12(self):
        ''' Instruction JMP_12 
            Groups: jump 
            0x436b36:	jmp	0x436b66
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436b36] = '\xeb'
        mem[0x00436b37] = '.'
        cpu.RIP = 0x436b36
        cpu.execute()
    
        self.assertEqual(mem[0x436b36], '\xeb')
        self.assertEqual(mem[0x436b37], '.')
        self.assertEqual(cpu.RIP, 4418406L)

    def test_JMP_13(self):
        ''' Instruction JMP_13 
            Groups: mode64, jump 
            0x436819:	jmp	rax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436819] = '\xff'
        mem[0x0043681a] = '\xe0'
        cpu.RIP = 0x436819
        cpu.RAX = 0x436830
        cpu.execute()
    
        self.assertEqual(mem[0x436819], '\xff')
        self.assertEqual(mem[0x43681a], '\xe0')
        self.assertEqual(cpu.RAX, 4417584L)
        self.assertEqual(cpu.RIP, 4417584L)

    def test_JMP_14(self):
        ''' Instruction JMP_14 
            Groups: jump 
            0x4371d6:	jmp	0x436ddf
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x004371d8] = '\xfc'
        mem[0x004371d9] = '\xff'
        mem[0x004371da] = '\xff'
        mem[0x004371d6] = '\xe9'
        mem[0x004371d7] = '\x04'
        cpu.RIP = 0x4371d6
        cpu.execute()
    
        self.assertEqual(mem[0x4371d8], '\xfc')
        self.assertEqual(mem[0x4371d9], '\xff')
        self.assertEqual(mem[0x4371da], '\xff')
        self.assertEqual(mem[0x4371d6], '\xe9')
        self.assertEqual(mem[0x4371d7], '\x04')
        self.assertEqual(cpu.RIP, 4419039L)

    def test_JMP_15(self):
        ''' Instruction JMP_15 
            Groups: jump 
            0x465dbb:	jmp	0x465d6a
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x00465dbb] = '\xeb'
        mem[0x00465dbc] = '\xad'
        cpu.RIP = 0x465dbb
        cpu.execute()
    
        self.assertEqual(mem[0x465dbb], '\xeb')
        self.assertEqual(mem[0x465dbc], '\xad')
        self.assertEqual(cpu.RIP, 4611434L)

    def test_JMP_16(self):
        ''' Instruction JMP_16 
            Groups: mode64, jump 
            0x4135e8:	jmp	rax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem[0x004135e8] = '\xff'
        mem[0x004135e9] = '\xe0'
        cpu.RIP = 0x4135e8
        cpu.RAX = 0x414a20
        cpu.execute()
    
        self.assertEqual(mem[0x4135e8], '\xff')
        self.assertEqual(mem[0x4135e9], '\xe0')
        self.assertEqual(cpu.RAX, 4278816L)
        self.assertEqual(cpu.RIP, 4278816L)

    def test_JMP_17(self):
        ''' Instruction JMP_17 
            Groups: jump 
            0x401377:	jmp	0x4914cc
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x00401378] = 'P'
        mem[0x00401379] = '\x01'
        mem[0x0040137a] = '\t'
        mem[0x0040137b] = '\x00'
        mem[0x00401377] = '\xe9'
        cpu.RIP = 0x401377
        cpu.execute()
    
        self.assertEqual(mem[0x401378], 'P')
        self.assertEqual(mem[0x401379], '\x01')
        self.assertEqual(mem[0x40137a], '\t')
        self.assertEqual(mem[0x40137b], '\x00')
        self.assertEqual(mem[0x401377], '\xe9')
        self.assertEqual(cpu.RIP, 4789452L)

    def test_JMP_18(self):
        ''' Instruction JMP_18 
            Groups: jump 
            0x406fd2:	jmp	0x406f00
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406fd2] = '\xe9'
        mem[0x00406fd3] = ')'
        mem[0x00406fd4] = '\xff'
        mem[0x00406fd5] = '\xff'
        mem[0x00406fd6] = '\xff'
        cpu.RIP = 0x406fd2
        cpu.execute()
    
        self.assertEqual(mem[0x406fd2], '\xe9')
        self.assertEqual(mem[0x406fd3], ')')
        self.assertEqual(mem[0x406fd4], '\xff')
        self.assertEqual(mem[0x406fd5], '\xff')
        self.assertEqual(mem[0x406fd6], '\xff')
        self.assertEqual(cpu.RIP, 4222720L)

    def test_JMP_19(self):
        ''' Instruction JMP_19 
            Groups: jump 
            0x4368b0:	jmp	0x436830
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x004368b0] = '\xe9'
        mem[0x004368b1] = '{'
        mem[0x004368b2] = '\xff'
        mem[0x004368b3] = '\xff'
        mem[0x004368b4] = '\xff'
        cpu.RIP = 0x4368b0
        cpu.execute()
    
        self.assertEqual(mem[0x4368b0], '\xe9')
        self.assertEqual(mem[0x4368b1], '{')
        self.assertEqual(mem[0x4368b2], '\xff')
        self.assertEqual(mem[0x4368b3], '\xff')
        self.assertEqual(mem[0x4368b4], '\xff')
        self.assertEqual(cpu.RIP, 4417584L)

    def test_JMP_2(self):
        ''' Instruction JMP_2 
            Groups: jump 
            0x4367d4:	jmp	0x43677f
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x004367d4] = '\xeb'
        mem[0x004367d5] = '\xa9'
        cpu.RIP = 0x4367d4
        cpu.execute()
    
        self.assertEqual(mem[0x4367d4], '\xeb')
        self.assertEqual(mem[0x4367d5], '\xa9')
        self.assertEqual(cpu.RIP, 4417407L)

    def test_JMP_20(self):
        ''' Instruction JMP_20 
            Groups: jump 
            0x411b90:	jmp	0x411be3
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411b90] = '\xeb'
        mem[0x00411b91] = 'Q'
        cpu.RIP = 0x411b90
        cpu.execute()
    
        self.assertEqual(mem[0x411b90], '\xeb')
        self.assertEqual(mem[0x411b91], 'Q')
        self.assertEqual(cpu.RIP, 4266979L)

    def test_JMP_21(self):
        ''' Instruction JMP_21 
            Groups: jump 
            0x400ce4:	jmp	0x400bb6
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400ce8] = '\xff'
        mem[0x00400ce4] = '\xe9'
        mem[0x00400ce5] = '\xcd'
        mem[0x00400ce6] = '\xfe'
        mem[0x00400ce7] = '\xff'
        cpu.RIP = 0x400ce4
        cpu.execute()
    
        self.assertEqual(mem[0x400ce8], '\xff')
        self.assertEqual(mem[0x400ce4], '\xe9')
        self.assertEqual(mem[0x400ce5], '\xcd')
        self.assertEqual(mem[0x400ce6], '\xfe')
        self.assertEqual(mem[0x400ce7], '\xff')
        self.assertEqual(cpu.RIP, 4197302L)

    def test_JMP_3(self):
        ''' Instruction JMP_3 
            Groups: jump 
            0x4005ec:	jmp	0x475240
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004005f0] = '\x00'
        mem[0x004005ec] = '\xe9'
        mem[0x004005ed] = 'O'
        mem[0x004005ee] = 'L'
        mem[0x004005ef] = '\x07'
        cpu.RIP = 0x4005ec
        cpu.execute()
    
        self.assertEqual(mem[0x4005f0], '\x00')
        self.assertEqual(mem[0x4005ec], '\xe9')
        self.assertEqual(mem[0x4005ed], 'O')
        self.assertEqual(mem[0x4005ee], 'L')
        self.assertEqual(mem[0x4005ef], '\x07')
        self.assertEqual(cpu.RIP, 4674112L)

    def test_JMP_4(self):
        ''' Instruction JMP_4 
            Groups: jump 
            0x4322e9:	jmp	0x4322ca
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322e9] = '\xeb'
        mem[0x004322ea] = '\xdf'
        cpu.RIP = 0x4322e9
        cpu.execute()
    
        self.assertEqual(mem[0x4322e9], '\xeb')
        self.assertEqual(mem[0x4322ea], '\xdf')
        self.assertEqual(cpu.RIP, 4399818L)

    def test_JMP_5(self):
        ''' Instruction JMP_5 
            Groups: jump 
            0x437189:	jmp	0x436b70
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x00437189] = '\xe9'
        mem[0x0043718a] = '\xe2'
        mem[0x0043718b] = '\xf9'
        mem[0x0043718c] = '\xff'
        mem[0x0043718d] = '\xff'
        cpu.RIP = 0x437189
        cpu.execute()
    
        self.assertEqual(mem[0x437189], '\xe9')
        self.assertEqual(mem[0x43718a], '\xe2')
        self.assertEqual(mem[0x43718b], '\xf9')
        self.assertEqual(mem[0x43718c], '\xff')
        self.assertEqual(mem[0x43718d], '\xff')
        self.assertEqual(cpu.RIP, 4418416L)

    def test_JMP_6(self):
        ''' Instruction JMP_6 
            Groups: mode64, jump 
            0x436819:	jmp	rax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436819] = '\xff'
        mem[0x0043681a] = '\xe0'
        cpu.RIP = 0x436819
        cpu.RAX = 0x4368d0
        cpu.execute()
    
        self.assertEqual(mem[0x436819], '\xff')
        self.assertEqual(mem[0x43681a], '\xe0')
        self.assertEqual(cpu.RAX, 4417744L)
        self.assertEqual(cpu.RIP, 4417744L)

    def test_JMP_7(self):
        ''' Instruction JMP_7 
            Groups: jump 
            0x400a2f:	jmp	0x400960
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a30] = ','
        mem[0x00400a31] = '\xff'
        mem[0x00400a32] = '\xff'
        mem[0x00400a33] = '\xff'
        mem[0x00400a2f] = '\xe9'
        cpu.RIP = 0x400a2f
        cpu.execute()
    
        self.assertEqual(mem[0x400a30], ',')
        self.assertEqual(mem[0x400a31], '\xff')
        self.assertEqual(mem[0x400a32], '\xff')
        self.assertEqual(mem[0x400a33], '\xff')
        self.assertEqual(mem[0x400a2f], '\xe9')
        self.assertEqual(cpu.RIP, 4196704L)

    def test_JMP_8(self):
        ''' Instruction JMP_8 
            Groups: jump 
            0x41150f:	jmp	0x4111db
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411510] = '\xc7'
        mem[0x00411511] = '\xfc'
        mem[0x00411512] = '\xff'
        mem[0x00411513] = '\xff'
        mem[0x0041150f] = '\xe9'
        cpu.RIP = 0x41150f
        cpu.execute()
    
        self.assertEqual(mem[0x411510], '\xc7')
        self.assertEqual(mem[0x411511], '\xfc')
        self.assertEqual(mem[0x411512], '\xff')
        self.assertEqual(mem[0x411513], '\xff')
        self.assertEqual(mem[0x41150f], '\xe9')
        self.assertEqual(cpu.RIP, 4264411L)

    def test_JMP_9(self):
        ''' Instruction JMP_9 
            Groups: jump 
            0x463f76:	jmp	0x463f92
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00463000, 0x1000, 'rwx')
        mem[0x00463f76] = '\xeb'
        mem[0x00463f77] = '\x1a'
        cpu.RIP = 0x463f76
        cpu.execute()
    
        self.assertEqual(mem[0x463f76], '\xeb')
        self.assertEqual(mem[0x463f77], '\x1a')
        self.assertEqual(cpu.RIP, 4603794L)

    def test_JNE_1(self):
        ''' Instruction JNE_1 
            Groups: jump 
            0x411bdd:	jne	0x411c90
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411be0] = '\x00'
        mem[0x00411be1] = '\x00'
        mem[0x00411be2] = '\x00'
        mem[0x00411bdd] = '\x0f'
        mem[0x00411bde] = '\x85'
        mem[0x00411bdf] = '\xad'
        cpu.ZF = True
        cpu.RIP = 0x411bdd
        cpu.execute()
    
        self.assertEqual(mem[0x411be0], '\x00')
        self.assertEqual(mem[0x411be1], '\x00')
        self.assertEqual(mem[0x411be2], '\x00')
        self.assertEqual(mem[0x411bdd], '\x0f')
        self.assertEqual(mem[0x411bde], '\x85')
        self.assertEqual(mem[0x411bdf], '\xad')
        self.assertEqual(cpu.RIP, 4266979L)

    def test_JNE_10(self):
        ''' Instruction JNE_10 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e91] = 'u'
        mem[0x00406e92] = '\xed'
        cpu.ZF = False
        cpu.RIP = 0x406e91
        cpu.execute()
    
        self.assertEqual(mem[0x406e91], 'u')
        self.assertEqual(mem[0x406e92], '\xed')
        self.assertEqual(cpu.RIP, 4222592L)

    def test_JNE_11(self):
        ''' Instruction JNE_11 
            Groups: jump 
            0x40dc89:	jne	0x40db98
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem[0x0040dc89] = '\x0f'
        mem[0x0040dc8a] = '\x85'
        mem[0x0040dc8b] = '\t'
        mem[0x0040dc8c] = '\xff'
        mem[0x0040dc8d] = '\xff'
        mem[0x0040dc8e] = '\xff'
        cpu.ZF = False
        cpu.RIP = 0x40dc89
        cpu.execute()
    
        self.assertEqual(mem[0x40dc89], '\x0f')
        self.assertEqual(mem[0x40dc8a], '\x85')
        self.assertEqual(mem[0x40dc8b], '\t')
        self.assertEqual(mem[0x40dc8c], '\xff')
        self.assertEqual(mem[0x40dc8d], '\xff')
        self.assertEqual(mem[0x40dc8e], '\xff')
        self.assertEqual(cpu.RIP, 4250520L)

    def test_JNE_12(self):
        ''' Instruction JNE_12 
            Groups: jump 
            0x400bf9:	jne	0x400bf0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400bf9] = 'u'
        mem[0x00400bfa] = '\xf5'
        cpu.ZF = False
        cpu.RIP = 0x400bf9
        cpu.execute()
    
        self.assertEqual(mem[0x400bf9], 'u')
        self.assertEqual(mem[0x400bfa], '\xf5')
        self.assertEqual(cpu.RIP, 4197360L)

    def test_JNE_13(self):
        ''' Instruction JNE_13 
            Groups: jump 
            0x45f8df:	jne	0x45f8d0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045f000, 0x1000, 'rwx')
        mem[0x0045f8e0] = '\xef'
        mem[0x0045f8df] = 'u'
        cpu.ZF = False
        cpu.RIP = 0x45f8df
        cpu.execute()
    
        self.assertEqual(mem[0x45f8e0], '\xef')
        self.assertEqual(mem[0x45f8df], 'u')
        self.assertEqual(cpu.RIP, 4585680L)

    def test_JNE_14(self):
        ''' Instruction JNE_14 
            Groups: jump 
            0x4323ad:	jne	0x4323b5
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004323ad] = 'u'
        mem[0x004323ae] = '\x06'
        cpu.ZF = False
        cpu.RIP = 0x4323ad
        cpu.execute()
    
        self.assertEqual(mem[0x4323ad], 'u')
        self.assertEqual(mem[0x4323ae], '\x06')
        self.assertEqual(cpu.RIP, 4400053L)

    def test_JNE_15(self):
        ''' Instruction JNE_15 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e91] = 'u'
        mem[0x00406e92] = '\xed'
        cpu.ZF = False
        cpu.RIP = 0x406e91
        cpu.execute()
    
        self.assertEqual(mem[0x406e91], 'u')
        self.assertEqual(mem[0x406e92], '\xed')
        self.assertEqual(cpu.RIP, 4222592L)

    def test_JNE_16(self):
        ''' Instruction JNE_16 
            Groups: jump 
            0x40ec87:	jne	0x40ec78
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040e000, 0x1000, 'rwx')
        mem[0x0040ec88] = '\xef'
        mem[0x0040ec87] = 'u'
        cpu.ZF = False
        cpu.RIP = 0x40ec87
        cpu.execute()
    
        self.assertEqual(mem[0x40ec88], '\xef')
        self.assertEqual(mem[0x40ec87], 'u')
        self.assertEqual(cpu.RIP, 4254840L)

    def test_JNE_17(self):
        ''' Instruction JNE_17 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e91] = 'u'
        mem[0x00406e92] = '\xed'
        cpu.ZF = False
        cpu.RIP = 0x406e91
        cpu.execute()
    
        self.assertEqual(mem[0x406e91], 'u')
        self.assertEqual(mem[0x406e92], '\xed')
        self.assertEqual(cpu.RIP, 4222592L)

    def test_JNE_18(self):
        ''' Instruction JNE_18 
            Groups: jump 
            0x4322cf:	jne	0x432238
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322cf] = '\x0f'
        mem[0x004322d0] = '\x85'
        mem[0x004322d1] = 'c'
        mem[0x004322d2] = '\xff'
        mem[0x004322d3] = '\xff'
        mem[0x004322d4] = '\xff'
        cpu.ZF = False
        cpu.RIP = 0x4322cf
        cpu.execute()
    
        self.assertEqual(mem[0x4322cf], '\x0f')
        self.assertEqual(mem[0x4322d0], '\x85')
        self.assertEqual(mem[0x4322d1], 'c')
        self.assertEqual(mem[0x4322d2], '\xff')
        self.assertEqual(mem[0x4322d3], '\xff')
        self.assertEqual(mem[0x4322d4], '\xff')
        self.assertEqual(cpu.RIP, 4399672L)

    def test_JNE_19(self):
        ''' Instruction JNE_19 
            Groups: jump 
            0x41601f:	jne	0x41603b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00416000, 0x1000, 'rwx')
        mem[0x00416020] = '\x1a'
        mem[0x0041601f] = 'u'
        cpu.ZF = False
        cpu.RIP = 0x41601f
        cpu.execute()
    
        self.assertEqual(mem[0x416020], '\x1a')
        self.assertEqual(mem[0x41601f], 'u')
        self.assertEqual(cpu.RIP, 4284475L)

    def test_JNE_2(self):
        ''' Instruction JNE_2 
            Groups: jump 
            0x400bf9:	jne	0x400bf0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400bf9] = 'u'
        mem[0x00400bfa] = '\xf5'
        cpu.ZF = False
        cpu.RIP = 0x400bf9
        cpu.execute()
    
        self.assertEqual(mem[0x400bf9], 'u')
        self.assertEqual(mem[0x400bfa], '\xf5')
        self.assertEqual(cpu.RIP, 4197360L)

    def test_JNE_20(self):
        ''' Instruction JNE_20 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e91] = 'u'
        mem[0x00406e92] = '\xed'
        cpu.ZF = False
        cpu.RIP = 0x406e91
        cpu.execute()
    
        self.assertEqual(mem[0x406e91], 'u')
        self.assertEqual(mem[0x406e92], '\xed')
        self.assertEqual(cpu.RIP, 4222592L)

    def test_JNE_21(self):
        ''' Instruction JNE_21 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e91] = 'u'
        mem[0x00406e92] = '\xed'
        cpu.ZF = False
        cpu.RIP = 0x406e91
        cpu.execute()
    
        self.assertEqual(mem[0x406e91], 'u')
        self.assertEqual(mem[0x406e92], '\xed')
        self.assertEqual(cpu.RIP, 4222592L)

    def test_JNE_3(self):
        ''' Instruction JNE_3 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e91] = 'u'
        mem[0x00406e92] = '\xed'
        cpu.ZF = False
        cpu.RIP = 0x406e91
        cpu.execute()
    
        self.assertEqual(mem[0x406e91], 'u')
        self.assertEqual(mem[0x406e92], '\xed')
        self.assertEqual(cpu.RIP, 4222592L)

    def test_JNE_4(self):
        ''' Instruction JNE_4 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e91] = 'u'
        mem[0x00406e92] = '\xed'
        cpu.ZF = False
        cpu.RIP = 0x406e91
        cpu.execute()
    
        self.assertEqual(mem[0x406e91], 'u')
        self.assertEqual(mem[0x406e92], '\xed')
        self.assertEqual(cpu.RIP, 4222592L)

    def test_JNE_5(self):
        ''' Instruction JNE_5 
            Groups: jump 
            0x482c18:	jne	0x482c2d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00482000, 0x1000, 'rwx')
        mem[0x00482c18] = 'u'
        mem[0x00482c19] = '\x13'
        cpu.ZF = True
        cpu.RIP = 0x482c18
        cpu.execute()
    
        self.assertEqual(mem[0x482c18], 'u')
        self.assertEqual(mem[0x482c19], '\x13')
        self.assertEqual(cpu.RIP, 4729882L)

    def test_JNE_6(self):
        ''' Instruction JNE_6 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e91] = 'u'
        mem[0x00406e92] = '\xed'
        cpu.ZF = False
        cpu.RIP = 0x406e91
        cpu.execute()
    
        self.assertEqual(mem[0x406e91], 'u')
        self.assertEqual(mem[0x406e92], '\xed')
        self.assertEqual(cpu.RIP, 4222592L)

    def test_JNE_7(self):
        ''' Instruction JNE_7 
            Groups: jump 
            0x414718:	jne	0x414708
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x00414718] = 'u'
        mem[0x00414719] = '\xee'
        cpu.ZF = False
        cpu.RIP = 0x414718
        cpu.execute()
    
        self.assertEqual(mem[0x414718], 'u')
        self.assertEqual(mem[0x414719], '\xee')
        self.assertEqual(cpu.RIP, 4278024L)

    def test_JNE_8(self):
        ''' Instruction JNE_8 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e91] = 'u'
        mem[0x00406e92] = '\xed'
        cpu.ZF = False
        cpu.RIP = 0x406e91
        cpu.execute()
    
        self.assertEqual(mem[0x406e91], 'u')
        self.assertEqual(mem[0x406e92], '\xed')
        self.assertEqual(cpu.RIP, 4222592L)

    def test_JNE_9(self):
        ''' Instruction JNE_9 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e91] = 'u'
        mem[0x00406e92] = '\xed'
        cpu.ZF = False
        cpu.RIP = 0x406e91
        cpu.execute()
    
        self.assertEqual(mem[0x406e91], 'u')
        self.assertEqual(mem[0x406e92], '\xed')
        self.assertEqual(cpu.RIP, 4222592L)

    def test_JS_1(self):
        ''' Instruction JS_1 
            Groups: jump 
            0x4113b0:	js	0x41161d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x004113b0] = '\x0f'
        mem[0x004113b1] = '\x88'
        mem[0x004113b2] = 'g'
        mem[0x004113b3] = '\x02'
        mem[0x004113b4] = '\x00'
        mem[0x004113b5] = '\x00'
        cpu.SF = False
        cpu.RIP = 0x4113b0
        cpu.execute()
    
        self.assertEqual(mem[0x4113b0], '\x0f')
        self.assertEqual(mem[0x4113b1], '\x88')
        self.assertEqual(mem[0x4113b2], 'g')
        self.assertEqual(mem[0x4113b3], '\x02')
        self.assertEqual(mem[0x4113b4], '\x00')
        self.assertEqual(mem[0x4113b5], '\x00')
        self.assertEqual(cpu.RIP, 4264886L)

    def test_JS_10(self):
        ''' Instruction JS_10 
            Groups: jump 
            0x4321e2:	js	0x43242b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004321e2] = '\x0f'
        mem[0x004321e3] = '\x88'
        mem[0x004321e4] = 'C'
        mem[0x004321e5] = '\x02'
        mem[0x004321e6] = '\x00'
        mem[0x004321e7] = '\x00'
        cpu.SF = False
        cpu.RIP = 0x4321e2
        cpu.execute()
    
        self.assertEqual(mem[0x4321e2], '\x0f')
        self.assertEqual(mem[0x4321e3], '\x88')
        self.assertEqual(mem[0x4321e4], 'C')
        self.assertEqual(mem[0x4321e5], '\x02')
        self.assertEqual(mem[0x4321e6], '\x00')
        self.assertEqual(mem[0x4321e7], '\x00')
        self.assertEqual(cpu.RIP, 4399592L)

    def test_JS_11(self):
        ''' Instruction JS_11 
            Groups: jump 
            0x4321e2:	js	0x43242b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004321e2] = '\x0f'
        mem[0x004321e3] = '\x88'
        mem[0x004321e4] = 'C'
        mem[0x004321e5] = '\x02'
        mem[0x004321e6] = '\x00'
        mem[0x004321e7] = '\x00'
        cpu.SF = False
        cpu.RIP = 0x4321e2
        cpu.execute()
    
        self.assertEqual(mem[0x4321e2], '\x0f')
        self.assertEqual(mem[0x4321e3], '\x88')
        self.assertEqual(mem[0x4321e4], 'C')
        self.assertEqual(mem[0x4321e5], '\x02')
        self.assertEqual(mem[0x4321e6], '\x00')
        self.assertEqual(mem[0x4321e7], '\x00')
        self.assertEqual(cpu.RIP, 4399592L)

    def test_JS_2(self):
        ''' Instruction JS_2 
            Groups: jump 
            0x43424b:	js	0x43420f
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x0043424b] = 'x'
        mem[0x0043424c] = '\xc2'
        cpu.SF = False
        cpu.RIP = 0x43424b
        cpu.execute()
    
        self.assertEqual(mem[0x43424b], 'x')
        self.assertEqual(mem[0x43424c], '\xc2')
        self.assertEqual(cpu.RIP, 4407885L)

    def test_JS_3(self):
        ''' Instruction JS_3 
            Groups: jump 
            0x434231:	js	0x43420f
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x00434231] = 'x'
        mem[0x00434232] = '\xdc'
        cpu.SF = False
        cpu.RIP = 0x434231
        cpu.execute()
    
        self.assertEqual(mem[0x434231], 'x')
        self.assertEqual(mem[0x434232], '\xdc')
        self.assertEqual(cpu.RIP, 4407859L)

    def test_JS_4(self):
        ''' Instruction JS_4 
            Groups: jump 
            0x43424b:	js	0x43420f
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x0043424b] = 'x'
        mem[0x0043424c] = '\xc2'
        cpu.SF = False
        cpu.RIP = 0x43424b
        cpu.execute()
    
        self.assertEqual(mem[0x43424b], 'x')
        self.assertEqual(mem[0x43424c], '\xc2')
        self.assertEqual(cpu.RIP, 4407885L)

    def test_JS_5(self):
        ''' Instruction JS_5 
            Groups: jump 
            0x4321e2:	js	0x43242b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004321e2] = '\x0f'
        mem[0x004321e3] = '\x88'
        mem[0x004321e4] = 'C'
        mem[0x004321e5] = '\x02'
        mem[0x004321e6] = '\x00'
        mem[0x004321e7] = '\x00'
        cpu.SF = False
        cpu.RIP = 0x4321e2
        cpu.execute()
    
        self.assertEqual(mem[0x4321e2], '\x0f')
        self.assertEqual(mem[0x4321e3], '\x88')
        self.assertEqual(mem[0x4321e4], 'C')
        self.assertEqual(mem[0x4321e5], '\x02')
        self.assertEqual(mem[0x4321e6], '\x00')
        self.assertEqual(mem[0x4321e7], '\x00')
        self.assertEqual(cpu.RIP, 4399592L)

    def test_JS_6(self):
        ''' Instruction JS_6 
            Groups: jump 
            0x414a36:	js	0x414a40
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x00414a36] = 'x'
        mem[0x00414a37] = '\x08'
        cpu.SF = True
        cpu.RIP = 0x414a36
        cpu.execute()
    
        self.assertEqual(mem[0x414a36], 'x')
        self.assertEqual(mem[0x414a37], '\x08')
        self.assertEqual(cpu.RIP, 4278848L)

    def test_JS_7(self):
        ''' Instruction JS_7 
            Groups: jump 
            0x43424b:	js	0x43420f
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x0043424b] = 'x'
        mem[0x0043424c] = '\xc2'
        cpu.SF = False
        cpu.RIP = 0x43424b
        cpu.execute()
    
        self.assertEqual(mem[0x43424b], 'x')
        self.assertEqual(mem[0x43424c], '\xc2')
        self.assertEqual(cpu.RIP, 4407885L)

    def test_JS_8(self):
        ''' Instruction JS_8 
            Groups: jump 
            0x4321e2:	js	0x43242b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004321e2] = '\x0f'
        mem[0x004321e3] = '\x88'
        mem[0x004321e4] = 'C'
        mem[0x004321e5] = '\x02'
        mem[0x004321e6] = '\x00'
        mem[0x004321e7] = '\x00'
        cpu.SF = False
        cpu.RIP = 0x4321e2
        cpu.execute()
    
        self.assertEqual(mem[0x4321e2], '\x0f')
        self.assertEqual(mem[0x4321e3], '\x88')
        self.assertEqual(mem[0x4321e4], 'C')
        self.assertEqual(mem[0x4321e5], '\x02')
        self.assertEqual(mem[0x4321e6], '\x00')
        self.assertEqual(mem[0x4321e7], '\x00')
        self.assertEqual(cpu.RIP, 4399592L)

    def test_JS_9(self):
        ''' Instruction JS_9 
            Groups: jump 
            0x400caf:	js	0x400e20
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400caf] = '\x0f'
        mem[0x00400cb0] = '\x88'
        mem[0x00400cb1] = 'k'
        mem[0x00400cb2] = '\x01'
        mem[0x00400cb3] = '\x00'
        mem[0x00400cb4] = '\x00'
        cpu.SF = False
        cpu.RIP = 0x400caf
        cpu.execute()
    
        self.assertEqual(mem[0x400caf], '\x0f')
        self.assertEqual(mem[0x400cb0], '\x88')
        self.assertEqual(mem[0x400cb1], 'k')
        self.assertEqual(mem[0x400cb2], '\x01')
        self.assertEqual(mem[0x400cb3], '\x00')
        self.assertEqual(mem[0x400cb4], '\x00')
        self.assertEqual(cpu.RIP, 4197557L)

    def test_LEAVE_1(self):
        ''' Instruction LEAVE_1 
            Groups: mode64 
            0x414a64:	leave	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x7fffffffca48] = '`'
        mem[0x7fffffffca49] = 'J'
        mem[0x7fffffffca4a] = 'A'
        mem[0x7fffffffca4b] = '\x00'
        mem[0x7fffffffca4c] = '\x00'
        mem[0x7fffffffca4d] = '\x00'
        mem[0x7fffffffca4e] = '\x00'
        mem[0x7fffffffca4f] = '\x00'
        mem[0x7fffffffca50] = '+'
        mem[0x7fffffffca51] = '\x00'
        mem[0x7fffffffca52] = '\x00'
        mem[0x7fffffffca53] = '\x00'
        mem[0x7fffffffca54] = '\x00'
        mem[0x7fffffffca55] = '\x00'
        mem[0x7fffffffca56] = '\x00'
        mem[0x7fffffffca57] = '\x00'
        mem[0x7fffffffca58] = ','
        mem[0x7fffffffca59] = '\x00'
        mem[0x7fffffffca5a] = '\x00'
        mem[0x7fffffffca5b] = '\x00'
        mem[0x7fffffffca5c] = '\x00'
        mem[0x7fffffffca5d] = '\x00'
        mem[0x7fffffffca5e] = '\x00'
        mem[0x7fffffffca5f] = '\x00'
        mem[0x7fffffffca60] = '\x90'
        mem[0x7fffffffca61] = '\xda'
        mem[0x7fffffffca62] = '\xff'
        mem[0x7fffffffca63] = '\xff'
        mem[0x7fffffffca64] = '\xff'
        mem[0x7fffffffca65] = '\x7f'
        mem[0x7fffffffca66] = '\x00'
        mem[0x7fffffffca67] = '\x00'
        mem[0x00414a64] = '\xc9'
        mem[0x7fffffffca68] = '\x9b'
        cpu.RSP = 0x7fffffffca50
        cpu.RIP = 0x414a64
        cpu.RBP = 0x7fffffffca60
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffca48], '`')
        self.assertEqual(mem[0x7fffffffca49], 'J')
        self.assertEqual(mem[0x7fffffffca4a], 'A')
        self.assertEqual(mem[0x7fffffffca4b], '\x00')
        self.assertEqual(mem[0x7fffffffca4c], '\x00')
        self.assertEqual(mem[0x7fffffffca4d], '\x00')
        self.assertEqual(mem[0x7fffffffca4e], '\x00')
        self.assertEqual(mem[0x7fffffffca4f], '\x00')
        self.assertEqual(mem[0x7fffffffca50], '+')
        self.assertEqual(mem[0x7fffffffca51], '\x00')
        self.assertEqual(mem[0x7fffffffca52], '\x00')
        self.assertEqual(mem[0x7fffffffca53], '\x00')
        self.assertEqual(mem[0x7fffffffca54], '\x00')
        self.assertEqual(mem[0x7fffffffca55], '\x00')
        self.assertEqual(mem[0x7fffffffca56], '\x00')
        self.assertEqual(mem[0x7fffffffca57], '\x00')
        self.assertEqual(mem[0x7fffffffca58], ',')
        self.assertEqual(mem[0x7fffffffca59], '\x00')
        self.assertEqual(mem[0x7fffffffca5a], '\x00')
        self.assertEqual(mem[0x7fffffffca5b], '\x00')
        self.assertEqual(mem[0x7fffffffca5c], '\x00')
        self.assertEqual(mem[0x7fffffffca5d], '\x00')
        self.assertEqual(mem[0x7fffffffca5e], '\x00')
        self.assertEqual(mem[0x7fffffffca5f], '\x00')
        self.assertEqual(mem[0x7fffffffca60], '\x90')
        self.assertEqual(mem[0x7fffffffca61], '\xda')
        self.assertEqual(mem[0x7fffffffca62], '\xff')
        self.assertEqual(mem[0x7fffffffca63], '\xff')
        self.assertEqual(mem[0x414a64], '\xc9')
        self.assertEqual(mem[0x7fffffffca65], '\x7f')
        self.assertEqual(mem[0x7fffffffca66], '\x00')
        self.assertEqual(mem[0x7fffffffca67], '\x00')
        self.assertEqual(mem[0x7fffffffca64], '\xff')
        self.assertEqual(mem[0x7fffffffca68], '\x9b')
        self.assertEqual(cpu.RSP, 140737488341608L)
        self.assertEqual(cpu.RIP, 4278885L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_LEAVE_2(self):
        ''' Instruction LEAVE_2 
            Groups: mode64 
            0x400b50:	leave	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdb08] = '\x00'
        mem[0x7fffffffdb09] = '\xf7'
        mem[0x7fffffffdb0a] = '\xb9'
        mem[0x7fffffffdb0b] = 'F'
        mem[0x7fffffffdb0c] = '\x9d'
        mem[0x7fffffffdb0d] = '\xa4'
        mem[0x7fffffffdb0e] = '\xe4'
        mem[0x7fffffffdb0f] = '\x1c'
        mem[0x7fffffffdb10] = '\xe0'
        mem[0x7fffffffdb11] = '\xdb'
        mem[0x7fffffffdb12] = '\xff'
        mem[0x7fffffffdb13] = '\xff'
        mem[0x7fffffffdb14] = '\xff'
        mem[0x7fffffffdb15] = '\x7f'
        mem[0x7fffffffdb16] = '\x00'
        mem[0x7fffffffdb17] = '\x00'
        mem[0x7fffffffdb18] = '\xe3'
        mem[0x00400b50] = '\xc9'
        mem[0x7fffffffdae8] = '\x8b'
        mem[0x7fffffffdae9] = '\n'
        mem[0x7fffffffdaea] = '@'
        mem[0x7fffffffdaeb] = '\x00'
        mem[0x7fffffffdaec] = '\x00'
        mem[0x7fffffffdaed] = '\x00'
        mem[0x7fffffffdaee] = '\x00'
        mem[0x7fffffffdaef] = '\x00'
        mem[0x7fffffffdaf0] = 'p'
        mem[0x7fffffffdaf1] = '\x12'
        mem[0x7fffffffdaf2] = '@'
        mem[0x7fffffffdaf3] = '\x00'
        mem[0x7fffffffdaf4] = '\x00'
        mem[0x7fffffffdaf5] = '\x00'
        mem[0x7fffffffdaf6] = '\x00'
        mem[0x7fffffffdaf7] = '\x00'
        mem[0x7fffffffdaf8] = '\x06'
        cpu.RSP = 0x7fffffffdaf0
        cpu.RIP = 0x400b50
        cpu.RBP = 0x7fffffffdb10
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdb08], '\x00')
        self.assertEqual(mem[0x7fffffffdb09], '\xf7')
        self.assertEqual(mem[0x7fffffffdb0a], '\xb9')
        self.assertEqual(mem[0x7fffffffdb0b], 'F')
        self.assertEqual(mem[0x7fffffffdb0c], '\x9d')
        self.assertEqual(mem[0x7fffffffdb0d], '\xa4')
        self.assertEqual(mem[0x7fffffffdb0e], '\xe4')
        self.assertEqual(mem[0x7fffffffdb0f], '\x1c')
        self.assertEqual(mem[0x7fffffffdb10], '\xe0')
        self.assertEqual(mem[0x7fffffffdb11], '\xdb')
        self.assertEqual(mem[0x7fffffffdb12], '\xff')
        self.assertEqual(mem[0x7fffffffdb13], '\xff')
        self.assertEqual(mem[0x7fffffffdb14], '\xff')
        self.assertEqual(mem[0x7fffffffdb15], '\x7f')
        self.assertEqual(mem[0x7fffffffdb16], '\x00')
        self.assertEqual(mem[0x7fffffffdb17], '\x00')
        self.assertEqual(mem[0x7fffffffdb18], '\xe3')
        self.assertEqual(mem[0x400b50], '\xc9')
        self.assertEqual(mem[0x7fffffffdae8], '\x8b')
        self.assertEqual(mem[0x7fffffffdae9], '\n')
        self.assertEqual(mem[0x7fffffffdaea], '@')
        self.assertEqual(mem[0x7fffffffdaeb], '\x00')
        self.assertEqual(mem[0x7fffffffdaec], '\x00')
        self.assertEqual(mem[0x7fffffffdaed], '\x00')
        self.assertEqual(mem[0x7fffffffdaee], '\x00')
        self.assertEqual(mem[0x7fffffffdaef], '\x00')
        self.assertEqual(mem[0x7fffffffdaf0], 'p')
        self.assertEqual(mem[0x7fffffffdaf1], '\x12')
        self.assertEqual(mem[0x7fffffffdaf2], '@')
        self.assertEqual(mem[0x7fffffffdaf3], '\x00')
        self.assertEqual(mem[0x7fffffffdaf4], '\x00')
        self.assertEqual(mem[0x7fffffffdaf5], '\x00')
        self.assertEqual(mem[0x7fffffffdaf6], '\x00')
        self.assertEqual(mem[0x7fffffffdaf7], '\x00')
        self.assertEqual(mem[0x7fffffffdaf8], '\x06')
        self.assertEqual(cpu.RSP, 140737488345880L)
        self.assertEqual(cpu.RIP, 4197201L)
        self.assertEqual(cpu.RBP, 140737488346080L)

    def test_LEA_1(self):
        ''' Instruction LEA_1 
            Groups:  
            0x465c83:	lea	rsi, [rbp - 0x1020]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x00465c83] = 'H'
        mem[0x00465c84] = '\x8d'
        mem[0x00465c85] = '\xb5'
        mem[0x00465c86] = '\xe0'
        mem[0x00465c87] = '\xef'
        mem[0x00465c88] = '\xff'
        mem[0x00465c89] = '\xff'
        mem[0x7fffffffca70] = '\x00'
        mem[0x7fffffffca71] = '\x00'
        mem[0x7fffffffca72] = '\x00'
        mem[0x7fffffffca73] = '\x00'
        mem[0x7fffffffca74] = '\x00'
        mem[0x7fffffffca75] = '\x00'
        mem[0x7fffffffca76] = '\x00'
        mem[0x7fffffffca77] = '\x00'
        cpu.RSI = 0x7fffffffdc08
        cpu.RIP = 0x465c83
        cpu.RBP = 0x7fffffffda90
        cpu.execute()
    
        self.assertEqual(mem[0x465c83], 'H')
        self.assertEqual(mem[0x465c84], '\x8d')
        self.assertEqual(mem[0x465c85], '\xb5')
        self.assertEqual(mem[0x465c86], '\xe0')
        self.assertEqual(mem[0x465c87], '\xef')
        self.assertEqual(mem[0x465c88], '\xff')
        self.assertEqual(mem[0x465c89], '\xff')
        self.assertEqual(mem[0x7fffffffca70], '\x00')
        self.assertEqual(mem[0x7fffffffca71], '\x00')
        self.assertEqual(mem[0x7fffffffca72], '\x00')
        self.assertEqual(mem[0x7fffffffca73], '\x00')
        self.assertEqual(mem[0x7fffffffca74], '\x00')
        self.assertEqual(mem[0x7fffffffca75], '\x00')
        self.assertEqual(mem[0x7fffffffca76], '\x00')
        self.assertEqual(mem[0x7fffffffca77], '\x00')
        self.assertEqual(cpu.RSI, 140737488341616L)
        self.assertEqual(cpu.RIP, 4611210L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_LEA_10(self):
        ''' Instruction LEA_10 
            Groups:  
            0x436e0a:	lea	rdx, [rbx + 0x28]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x006bf000, 0x1000, 'rwx')
        mem[0x00436e0a] = 'H'
        mem[0x00436e0b] = '\x8d'
        mem[0x00436e0c] = 'S'
        mem[0x00436e0d] = '('
        mem[0x006bf238] = '\x10'
        mem[0x006bf239] = '\xf2'
        mem[0x006bf23a] = 'k'
        mem[0x006bf23b] = '\x00'
        mem[0x006bf23c] = '\x00'
        mem[0x006bf23d] = '\x00'
        mem[0x006bf23e] = '\x00'
        mem[0x006bf23f] = '\x00'
        cpu.RDX = 0x1
        cpu.RIP = 0x436e0a
        cpu.RBX = 0x6bf210
        cpu.execute()
    
        self.assertEqual(mem[0x436e0a], 'H')
        self.assertEqual(mem[0x436e0b], '\x8d')
        self.assertEqual(mem[0x436e0c], 'S')
        self.assertEqual(mem[0x436e0d], '(')
        self.assertEqual(mem[0x6bf238], '\x10')
        self.assertEqual(mem[0x6bf239], '\xf2')
        self.assertEqual(mem[0x6bf23a], 'k')
        self.assertEqual(mem[0x6bf23b], '\x00')
        self.assertEqual(mem[0x6bf23c], '\x00')
        self.assertEqual(mem[0x6bf23d], '\x00')
        self.assertEqual(mem[0x6bf23e], '\x00')
        self.assertEqual(mem[0x6bf23f], '\x00')
        self.assertEqual(cpu.RDX, 7074360L)
        self.assertEqual(cpu.RIP, 4419086L)
        self.assertEqual(cpu.RBX, 7074320L)

    def test_LEA_11(self):
        ''' Instruction LEA_11 
            Groups:  
            0x4367ef:	lea	rdx, [rip + 0x5e34a]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00494b40] = '@'
        mem[0x00494b41] = '\x1d'
        mem[0x00494b42] = '\xfa'
        mem[0x00494b43] = '\xff'
        mem[0x00494b44] = '\xf0'
        mem[0x00494b45] = '\x1c'
        mem[0x00494b46] = '\xfa'
        mem[0x00494b47] = '\xff'
        mem[0x004367ef] = 'H'
        mem[0x004367f0] = '\x8d'
        mem[0x004367f1] = '\x15'
        mem[0x004367f2] = 'J'
        mem[0x004367f3] = '\xe3'
        mem[0x004367f4] = '\x05'
        mem[0x004367f5] = '\x00'
        cpu.RDX = 0x6b7888
        cpu.RIP = 0x4367ef
        cpu.execute()
    
        self.assertEqual(mem[0x494b40], '@')
        self.assertEqual(mem[0x494b41], '\x1d')
        self.assertEqual(mem[0x494b42], '\xfa')
        self.assertEqual(mem[0x494b43], '\xff')
        self.assertEqual(mem[0x494b44], '\xf0')
        self.assertEqual(mem[0x494b45], '\x1c')
        self.assertEqual(mem[0x494b46], '\xfa')
        self.assertEqual(mem[0x494b47], '\xff')
        self.assertEqual(mem[0x4367ef], 'H')
        self.assertEqual(mem[0x4367f0], '\x8d')
        self.assertEqual(mem[0x4367f1], '\x15')
        self.assertEqual(mem[0x4367f2], 'J')
        self.assertEqual(mem[0x4367f3], '\xe3')
        self.assertEqual(mem[0x4367f4], '\x05')
        self.assertEqual(mem[0x4367f5], '\x00')
        self.assertEqual(cpu.RDX, 4803392L)
        self.assertEqual(cpu.RIP, 4417526L)

    def test_LEA_12(self):
        ''' Instruction LEA_12 
            Groups:  
            0x411d0a:	lea	rax, [r15 + rax*8 + 0x58]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        mem[0x00411d0a] = 'I'
        mem[0x00411d0b] = '\x8d'
        mem[0x00411d0c] = 'D'
        mem[0x00411d0d] = '\xc7'
        mem[0x00411d0e] = 'X'
        mem[0x006b9d18] = '\x08'
        mem[0x006b9d19] = '\x9d'
        mem[0x006b9d1a] = 'k'
        mem[0x006b9d1b] = '\x00'
        mem[0x006b9d1c] = '\x00'
        mem[0x006b9d1d] = '\x00'
        mem[0x006b9d1e] = '\x00'
        mem[0x006b9d1f] = '\x00'
        cpu.R15 = 0x6b9840
        cpu.RIP = 0x411d0a
        cpu.RAX = 0x90
        cpu.execute()
    
        self.assertEqual(mem[0x411d0a], 'I')
        self.assertEqual(mem[0x411d0b], '\x8d')
        self.assertEqual(mem[0x411d0c], 'D')
        self.assertEqual(mem[0x411d0d], '\xc7')
        self.assertEqual(mem[0x411d0e], 'X')
        self.assertEqual(mem[0x6b9d18], '\x08')
        self.assertEqual(mem[0x6b9d19], '\x9d')
        self.assertEqual(mem[0x6b9d1a], 'k')
        self.assertEqual(mem[0x6b9d1b], '\x00')
        self.assertEqual(mem[0x6b9d1c], '\x00')
        self.assertEqual(mem[0x6b9d1d], '\x00')
        self.assertEqual(mem[0x6b9d1e], '\x00')
        self.assertEqual(mem[0x6b9d1f], '\x00')
        self.assertEqual(cpu.R15, 7051328L)
        self.assertEqual(cpu.RAX, 7052568L)
        self.assertEqual(cpu.RIP, 4267279L)

    def test_LEA_13(self):
        ''' Instruction LEA_13 
            Groups:  
            0x46223d:	lea	rdx, [rip + 0x257f7c]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, 'rwx')
        mem.mmap(0x006ba000, 0x1000, 'rwx')
        mem[0x00462240] = '|'
        mem[0x00462241] = '\x7f'
        mem[0x00462242] = '%'
        mem[0x00462243] = '\x00'
        mem[0x006ba1c4] = '\x00'
        mem[0x006ba1c5] = '\x00'
        mem[0x006ba1c6] = '\x00'
        mem[0x006ba1c1] = '\x00'
        mem[0x006ba1c2] = '\x00'
        mem[0x006ba1c3] = '\x00'
        mem[0x006ba1c0] = '\x01'
        mem[0x006ba1c7] = '\x00'
        mem[0x0046223d] = 'H'
        mem[0x0046223e] = '\x8d'
        mem[0x0046223f] = '\x15'
        cpu.RDX = 0x6ba300
        cpu.RIP = 0x46223d
        cpu.execute()
    
        self.assertEqual(mem[0x462240], '|')
        self.assertEqual(mem[0x462241], '\x7f')
        self.assertEqual(mem[0x462242], '%')
        self.assertEqual(mem[0x462243], '\x00')
        self.assertEqual(mem[0x6ba1c4], '\x00')
        self.assertEqual(mem[0x6ba1c5], '\x00')
        self.assertEqual(mem[0x6ba1c6], '\x00')
        self.assertEqual(mem[0x6ba1c1], '\x00')
        self.assertEqual(mem[0x6ba1c2], '\x00')
        self.assertEqual(mem[0x6ba1c3], '\x00')
        self.assertEqual(mem[0x6ba1c0], '\x01')
        self.assertEqual(mem[0x6ba1c7], '\x00')
        self.assertEqual(mem[0x46223d], 'H')
        self.assertEqual(mem[0x46223e], '\x8d')
        self.assertEqual(mem[0x46223f], '\x15')
        self.assertEqual(cpu.RDX, 7053760L)
        self.assertEqual(cpu.RIP, 4596292L)

    def test_LEA_14(self):
        ''' Instruction LEA_14 
            Groups:  
            0x43222d:	lea	rdx, [rip + 0x61f4c]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00494180] = '\x06'
        mem[0x00494181] = '\x04'
        mem[0x00494182] = ' '
        mem[0x00494183] = '\x00'
        mem[0x00494184] = '\x00'
        mem[0x00494185] = ' '
        mem[0x00494186] = '\x00'
        mem[0x00494187] = '\x00'
        mem[0x0043222d] = 'H'
        mem[0x0043222e] = '\x8d'
        mem[0x0043222f] = '\x15'
        mem[0x00432230] = 'L'
        mem[0x00432231] = '\x1f'
        mem[0x00432232] = '\x06'
        mem[0x00432233] = '\x00'
        cpu.RDX = 0x3
        cpu.RIP = 0x43222d
        cpu.execute()
    
        self.assertEqual(mem[0x494180], '\x06')
        self.assertEqual(mem[0x494181], '\x04')
        self.assertEqual(mem[0x494182], ' ')
        self.assertEqual(mem[0x494183], '\x00')
        self.assertEqual(mem[0x494184], '\x00')
        self.assertEqual(mem[0x494185], ' ')
        self.assertEqual(mem[0x494186], '\x00')
        self.assertEqual(mem[0x494187], '\x00')
        self.assertEqual(mem[0x43222d], 'H')
        self.assertEqual(mem[0x43222e], '\x8d')
        self.assertEqual(mem[0x43222f], '\x15')
        self.assertEqual(mem[0x432230], 'L')
        self.assertEqual(mem[0x432231], '\x1f')
        self.assertEqual(mem[0x432232], '\x06')
        self.assertEqual(mem[0x432233], '\x00')
        self.assertEqual(cpu.RDX, 4800896L)
        self.assertEqual(cpu.RIP, 4399668L)

    def test_LEA_15(self):
        ''' Instruction LEA_15 
            Groups:  
            0x4322b0:	lea	r9, [rdx + rax*8]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x004941a0] = '\x0c'
        mem[0x004941a1] = '\x04'
        mem[0x004941a2] = ' '
        mem[0x004941a3] = '\x03'
        mem[0x004941a4] = '\x00'
        mem[0x004941a5] = '@'
        mem[0x004941a6] = '\x00'
        mem[0x004941a7] = '\x00'
        mem[0x004322b0] = 'L'
        mem[0x004322b1] = '\x8d'
        mem[0x004322b2] = '\x0c'
        mem[0x004322b3] = '\xc2'
        cpu.RIP = 0x4322b0
        cpu.R9 = 0x4941c0
        cpu.RAX = 0x4
        cpu.RDX = 0x494180
        cpu.execute()
    
        self.assertEqual(mem[0x4941a0], '\x0c')
        self.assertEqual(mem[0x4941a1], '\x04')
        self.assertEqual(mem[0x4941a2], ' ')
        self.assertEqual(mem[0x4941a3], '\x03')
        self.assertEqual(mem[0x4941a4], '\x00')
        self.assertEqual(mem[0x4941a5], '@')
        self.assertEqual(mem[0x4941a6], '\x00')
        self.assertEqual(mem[0x4941a7], '\x00')
        self.assertEqual(mem[0x4322b0], 'L')
        self.assertEqual(mem[0x4322b1], '\x8d')
        self.assertEqual(mem[0x4322b2], '\x0c')
        self.assertEqual(mem[0x4322b3], '\xc2')
        self.assertEqual(cpu.RAX, 4L)
        self.assertEqual(cpu.R9, 4800928L)
        self.assertEqual(cpu.RIP, 4399796L)
        self.assertEqual(cpu.RDX, 4800896L)

    def test_LEA_16(self):
        ''' Instruction LEA_16 
            Groups:  
            0x4341df:	lea	rax, [rip + 0x2865b2]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem.mmap(0x006ba000, 0x1000, 'rwx')
        mem[0x006ba798] = '\x00'
        mem[0x006ba799] = '\x00'
        mem[0x006ba79a] = '\x00'
        mem[0x006ba79b] = '\x00'
        mem[0x006ba79c] = '\x00'
        mem[0x006ba79d] = '\x00'
        mem[0x006ba79e] = '\x00'
        mem[0x006ba79f] = '\x00'
        mem[0x004341e0] = '\x8d'
        mem[0x004341e1] = '\x05'
        mem[0x004341e2] = '\xb2'
        mem[0x004341e3] = 'e'
        mem[0x004341e4] = '('
        mem[0x004341e5] = '\x00'
        mem[0x004341df] = 'H'
        cpu.RIP = 0x4341df
        cpu.RAX = 0xfff
        cpu.execute()
    
        self.assertEqual(mem[0x6ba798], '\x00')
        self.assertEqual(mem[0x6ba799], '\x00')
        self.assertEqual(mem[0x6ba79a], '\x00')
        self.assertEqual(mem[0x6ba79b], '\x00')
        self.assertEqual(mem[0x6ba79c], '\x00')
        self.assertEqual(mem[0x6ba79d], '\x00')
        self.assertEqual(mem[0x6ba79e], '\x00')
        self.assertEqual(mem[0x4341df], 'H')
        self.assertEqual(mem[0x4341e0], '\x8d')
        self.assertEqual(mem[0x4341e1], '\x05')
        self.assertEqual(mem[0x4341e2], '\xb2')
        self.assertEqual(mem[0x4341e3], 'e')
        self.assertEqual(mem[0x4341e4], '(')
        self.assertEqual(mem[0x4341e5], '\x00')
        self.assertEqual(mem[0x6ba79f], '\x00')
        self.assertEqual(cpu.RAX, 7055256L)
        self.assertEqual(cpu.RIP, 4407782L)

    def test_LEA_17(self):
        ''' Instruction LEA_17 
            Groups:  
            0x436fd9:	lea	rdi, [rip + 0x5ddee]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00494dce] = 'L'
        mem[0x00494dcf] = 'D'
        mem[0x00494dd0] = '_'
        mem[0x00494dd1] = 'A'
        mem[0x00494dd2] = 'S'
        mem[0x00494dd3] = 'S'
        mem[0x00494dd4] = 'U'
        mem[0x00494dd5] = 'M'
        mem[0x00436fd9] = 'H'
        mem[0x00436fda] = '\x8d'
        mem[0x00436fdb] = '='
        mem[0x00436fdc] = '\xee'
        mem[0x00436fdd] = '\xdd'
        mem[0x00436fde] = '\x05'
        mem[0x00436fdf] = '\x00'
        cpu.RDI = 0x494d9e
        cpu.RIP = 0x436fd9
        cpu.execute()
    
        self.assertEqual(mem[0x494dce], 'L')
        self.assertEqual(mem[0x494dcf], 'D')
        self.assertEqual(mem[0x494dd0], '_')
        self.assertEqual(mem[0x494dd1], 'A')
        self.assertEqual(mem[0x494dd2], 'S')
        self.assertEqual(mem[0x494dd3], 'S')
        self.assertEqual(mem[0x494dd4], 'U')
        self.assertEqual(mem[0x494dd5], 'M')
        self.assertEqual(mem[0x436fd9], 'H')
        self.assertEqual(mem[0x436fda], '\x8d')
        self.assertEqual(mem[0x436fdb], '=')
        self.assertEqual(mem[0x436fdc], '\xee')
        self.assertEqual(mem[0x436fdd], '\xdd')
        self.assertEqual(mem[0x436fde], '\x05')
        self.assertEqual(mem[0x436fdf], '\x00')
        self.assertEqual(cpu.RDI, 4804046L)
        self.assertEqual(cpu.RIP, 4419552L)

    def test_LEA_18(self):
        ''' Instruction LEA_18 
            Groups:  
            0x436ce3:	lea	rsi, [rip + 0x280b16]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x006b7000, 0x1000, 'rwx')
        mem[0x006b7800] = '\x04'
        mem[0x006b7801] = '\x00'
        mem[0x006b7802] = '\x00'
        mem[0x006b7803] = '\x00'
        mem[0x006b7804] = '\x00'
        mem[0x006b7805] = '\x00'
        mem[0x006b7806] = '\x00'
        mem[0x006b7807] = '\x00'
        mem[0x00436ce3] = 'H'
        mem[0x00436ce4] = '\x8d'
        mem[0x00436ce5] = '5'
        mem[0x00436ce6] = '\x16'
        mem[0x00436ce7] = '\x0b'
        mem[0x00436ce8] = '('
        mem[0x00436ce9] = '\x00'
        cpu.RSI = 0x7ffff7ffd3b0
        cpu.RIP = 0x436ce3
        cpu.execute()
    
        self.assertEqual(mem[0x6b7800], '\x04')
        self.assertEqual(mem[0x6b7801], '\x00')
        self.assertEqual(mem[0x6b7802], '\x00')
        self.assertEqual(mem[0x6b7803], '\x00')
        self.assertEqual(mem[0x6b7804], '\x00')
        self.assertEqual(mem[0x6b7805], '\x00')
        self.assertEqual(mem[0x6b7806], '\x00')
        self.assertEqual(mem[0x6b7807], '\x00')
        self.assertEqual(mem[0x436ce3], 'H')
        self.assertEqual(mem[0x436ce4], '\x8d')
        self.assertEqual(mem[0x436ce5], '5')
        self.assertEqual(mem[0x436ce6], '\x16')
        self.assertEqual(mem[0x436ce7], '\x0b')
        self.assertEqual(mem[0x436ce8], '(')
        self.assertEqual(mem[0x436ce9], '\x00')
        self.assertEqual(cpu.RSI, 7043072L)
        self.assertEqual(cpu.RIP, 4418794L)

    def test_LEA_19(self):
        ''' Instruction LEA_19 
            Groups:  
            0x411ff5:	lea	rcx, [rip + 0x2a7844]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        mem[0x006b9840] = '\x01'
        mem[0x006b9841] = '\x00'
        mem[0x006b9842] = '\x00'
        mem[0x006b9843] = '\x00'
        mem[0x006b9844] = '\x01'
        mem[0x006b9845] = '\x00'
        mem[0x006b9846] = '\x00'
        mem[0x006b9847] = '\x00'
        mem[0x00411ff5] = 'H'
        mem[0x00411ff6] = '\x8d'
        mem[0x00411ff7] = '\r'
        mem[0x00411ff8] = 'D'
        mem[0x00411ff9] = 'x'
        mem[0x00411ffa] = '*'
        mem[0x00411ffb] = '\x00'
        cpu.RCX = 0x4
        cpu.RIP = 0x411ff5
        cpu.execute()
    
        self.assertEqual(mem[0x6b9840], '\x01')
        self.assertEqual(mem[0x6b9841], '\x00')
        self.assertEqual(mem[0x6b9842], '\x00')
        self.assertEqual(mem[0x6b9843], '\x00')
        self.assertEqual(mem[0x6b9844], '\x01')
        self.assertEqual(mem[0x6b9845], '\x00')
        self.assertEqual(mem[0x6b9846], '\x00')
        self.assertEqual(mem[0x6b9847], '\x00')
        self.assertEqual(mem[0x411ff5], 'H')
        self.assertEqual(mem[0x411ff6], '\x8d')
        self.assertEqual(mem[0x411ff7], '\r')
        self.assertEqual(mem[0x411ff8], 'D')
        self.assertEqual(mem[0x411ff9], 'x')
        self.assertEqual(mem[0x411ffa], '*')
        self.assertEqual(mem[0x411ffb], '\x00')
        self.assertEqual(cpu.RCX, 7051328L)
        self.assertEqual(cpu.RIP, 4268028L)

    def test_LEA_2(self):
        ''' Instruction LEA_2 
            Groups:  
            0x411824:	lea	rbx, [r15 + 0x58]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        mem[0x006b9898] = '\xa0'
        mem[0x006b9899] = '\xf6'
        mem[0x006b989a] = 'k'
        mem[0x006b989b] = '\x00'
        mem[0x006b989c] = '\x00'
        mem[0x006b989d] = '\x00'
        mem[0x006b989e] = '\x00'
        mem[0x006b989f] = '\x00'
        mem[0x00411824] = 'I'
        mem[0x00411825] = '\x8d'
        mem[0x00411826] = '_'
        mem[0x00411827] = 'X'
        cpu.R15 = 0x6b9840
        cpu.RIP = 0x411824
        cpu.RBX = 0x6b9840
        cpu.execute()
    
        self.assertEqual(mem[0x6b9898], '\xa0')
        self.assertEqual(mem[0x6b9899], '\xf6')
        self.assertEqual(mem[0x6b989a], 'k')
        self.assertEqual(mem[0x6b989b], '\x00')
        self.assertEqual(mem[0x6b989c], '\x00')
        self.assertEqual(mem[0x6b989d], '\x00')
        self.assertEqual(mem[0x6b989e], '\x00')
        self.assertEqual(mem[0x6b989f], '\x00')
        self.assertEqual(mem[0x411824], 'I')
        self.assertEqual(mem[0x411825], '\x8d')
        self.assertEqual(mem[0x411826], '_')
        self.assertEqual(mem[0x411827], 'X')
        self.assertEqual(cpu.R15, 7051328L)
        self.assertEqual(cpu.RIP, 4266024L)
        self.assertEqual(cpu.RBX, 7051416L)

    def test_LEA_20(self):
        ''' Instruction LEA_20 
            Groups:  
            0x400a59:	lea	rsp, [rsp + 0x1020]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x00400a60] = '\x00'
        mem[0x7fffffffdaf0] = 'p'
        mem[0x7fffffffdaf1] = '\x12'
        mem[0x7fffffffdaf2] = '@'
        mem[0x7fffffffdaf3] = '\x00'
        mem[0x7fffffffdaf4] = '\x00'
        mem[0x7fffffffdaf5] = '\x00'
        mem[0x7fffffffdaf6] = '\x00'
        mem[0x7fffffffdaf7] = '\x00'
        mem[0x00400a59] = 'H'
        mem[0x00400a5a] = '\x8d'
        mem[0x00400a5b] = '\xa4'
        mem[0x00400a5c] = '$'
        mem[0x00400a5d] = ' '
        mem[0x00400a5e] = '\x10'
        mem[0x00400a5f] = '\x00'
        cpu.RSP = 0x7fffffffcad0
        cpu.RIP = 0x400a59
        cpu.execute()
    
        self.assertEqual(mem[0x400a60], '\x00')
        self.assertEqual(mem[0x7fffffffdaf0], 'p')
        self.assertEqual(mem[0x7fffffffdaf1], '\x12')
        self.assertEqual(mem[0x7fffffffdaf2], '@')
        self.assertEqual(mem[0x7fffffffdaf3], '\x00')
        self.assertEqual(mem[0x7fffffffdaf4], '\x00')
        self.assertEqual(mem[0x7fffffffdaf5], '\x00')
        self.assertEqual(mem[0x7fffffffdaf6], '\x00')
        self.assertEqual(mem[0x7fffffffdaf7], '\x00')
        self.assertEqual(mem[0x400a59], 'H')
        self.assertEqual(mem[0x400a5a], '\x8d')
        self.assertEqual(mem[0x400a5b], '\xa4')
        self.assertEqual(mem[0x400a5c], '$')
        self.assertEqual(mem[0x400a5d], ' ')
        self.assertEqual(mem[0x400a5e], '\x10')
        self.assertEqual(mem[0x400a5f], '\x00')
        self.assertEqual(cpu.RSP, 140737488345840L)
        self.assertEqual(cpu.RIP, 4196961L)

    def test_LEA_21(self):
        ''' Instruction LEA_21 
            Groups:  
            0x411824:	lea	rbx, [r15 + 0x58]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        mem[0x006b9898] = '\x10'
        mem[0x006b9899] = '\xf7'
        mem[0x006b989a] = 'k'
        mem[0x006b989b] = '\x00'
        mem[0x006b989c] = '\x00'
        mem[0x006b989d] = '\x00'
        mem[0x006b989e] = '\x00'
        mem[0x006b989f] = '\x00'
        mem[0x00411824] = 'I'
        mem[0x00411825] = '\x8d'
        mem[0x00411826] = '_'
        mem[0x00411827] = 'X'
        cpu.R15 = 0x6b9840
        cpu.RIP = 0x411824
        cpu.RBX = 0x6b9840
        cpu.execute()
    
        self.assertEqual(mem[0x6b9898], '\x10')
        self.assertEqual(mem[0x6b9899], '\xf7')
        self.assertEqual(mem[0x6b989a], 'k')
        self.assertEqual(mem[0x6b989b], '\x00')
        self.assertEqual(mem[0x6b989c], '\x00')
        self.assertEqual(mem[0x6b989d], '\x00')
        self.assertEqual(mem[0x6b989e], '\x00')
        self.assertEqual(mem[0x6b989f], '\x00')
        self.assertEqual(mem[0x411824], 'I')
        self.assertEqual(mem[0x411825], '\x8d')
        self.assertEqual(mem[0x411826], '_')
        self.assertEqual(mem[0x411827], 'X')
        self.assertEqual(cpu.R15, 7051328L)
        self.assertEqual(cpu.RIP, 4266024L)
        self.assertEqual(cpu.RBX, 7051416L)

    def test_LEA_3(self):
        ''' Instruction LEA_3 
            Groups:  
            0x4623f6:	lea	rcx, [r13 + 0x2b8]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, 'rwx')
        mem.mmap(0x006bf000, 0x1000, 'rwx')
        mem[0x006bf4c8] = '\x00'
        mem[0x006bf4c9] = '\x00'
        mem[0x006bf4ca] = '\x00'
        mem[0x006bf4cb] = '\x00'
        mem[0x006bf4cc] = '\x00'
        mem[0x006bf4cd] = '\x00'
        mem[0x006bf4ce] = '\x00'
        mem[0x006bf4cf] = '\x00'
        mem[0x004623f6] = 'I'
        mem[0x004623f7] = '\x8d'
        mem[0x004623f8] = '\x8d'
        mem[0x004623f9] = '\xb8'
        mem[0x004623fa] = '\x02'
        mem[0x004623fb] = '\x00'
        mem[0x004623fc] = '\x00'
        cpu.RCX = 0x0
        cpu.R13 = 0x6bf210
        cpu.RIP = 0x4623f6
        cpu.execute()
    
        self.assertEqual(mem[0x6bf4c8], '\x00')
        self.assertEqual(mem[0x6bf4c9], '\x00')
        self.assertEqual(mem[0x6bf4ca], '\x00')
        self.assertEqual(mem[0x6bf4cb], '\x00')
        self.assertEqual(mem[0x6bf4cc], '\x00')
        self.assertEqual(mem[0x6bf4cd], '\x00')
        self.assertEqual(mem[0x6bf4ce], '\x00')
        self.assertEqual(mem[0x6bf4cf], '\x00')
        self.assertEqual(mem[0x4623f6], 'I')
        self.assertEqual(mem[0x4623f7], '\x8d')
        self.assertEqual(mem[0x4623f8], '\x8d')
        self.assertEqual(mem[0x4623f9], '\xb8')
        self.assertEqual(mem[0x4623fa], '\x02')
        self.assertEqual(mem[0x4623fb], '\x00')
        self.assertEqual(mem[0x4623fc], '\x00')
        self.assertEqual(cpu.RCX, 7075016L)
        self.assertEqual(cpu.R13, 7074320L)
        self.assertEqual(cpu.RIP, 4596733L)

    def test_LEA_4(self):
        ''' Instruction LEA_4 
            Groups:  
            0x436ed5:	lea	rdi, [rip + 0x5dea6]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00494d82] = 'L'
        mem[0x00494d83] = 'D'
        mem[0x00494d84] = '_'
        mem[0x00494d85] = 'B'
        mem[0x00494d86] = 'I'
        mem[0x00494d87] = 'N'
        mem[0x00494d88] = 'D'
        mem[0x00494d89] = '_'
        mem[0x00436ed5] = 'H'
        mem[0x00436ed6] = '\x8d'
        mem[0x00436ed7] = '='
        mem[0x00436ed8] = '\xa6'
        mem[0x00436ed9] = '\xde'
        mem[0x00436eda] = '\x05'
        mem[0x00436edb] = '\x00'
        cpu.RDI = 0x494d76
        cpu.RIP = 0x436ed5
        cpu.execute()
    
        self.assertEqual(mem[0x494d82], 'L')
        self.assertEqual(mem[0x494d83], 'D')
        self.assertEqual(mem[0x494d84], '_')
        self.assertEqual(mem[0x494d85], 'B')
        self.assertEqual(mem[0x494d86], 'I')
        self.assertEqual(mem[0x494d87], 'N')
        self.assertEqual(mem[0x494d88], 'D')
        self.assertEqual(mem[0x494d89], '_')
        self.assertEqual(mem[0x436ed5], 'H')
        self.assertEqual(mem[0x436ed6], '\x8d')
        self.assertEqual(mem[0x436ed7], '=')
        self.assertEqual(mem[0x436ed8], '\xa6')
        self.assertEqual(mem[0x436ed9], '\xde')
        self.assertEqual(mem[0x436eda], '\x05')
        self.assertEqual(mem[0x436edb], '\x00')
        self.assertEqual(cpu.RDI, 4803970L)
        self.assertEqual(cpu.RIP, 4419292L)

    def test_LEA_5(self):
        ''' Instruction LEA_5 
            Groups:  
            0x400bd1:	lea	rdx, [rip + 0x2bac50]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x006bb000, 0x1000, 'rwx')
        mem[0x00400bd1] = 'H'
        mem[0x00400bd2] = '\x8d'
        mem[0x00400bd3] = '\x15'
        mem[0x00400bd4] = 'P'
        mem[0x00400bd5] = '\xac'
        mem[0x00400bd6] = '+'
        mem[0x00400bd7] = '\x00'
        mem[0x006bb828] = '\x00'
        mem[0x006bb829] = '\x00'
        mem[0x006bb82a] = '\x00'
        mem[0x006bb82b] = '\x00'
        mem[0x006bb82c] = '\x00'
        mem[0x006bb82d] = '\x00'
        mem[0x006bb82e] = '\x00'
        mem[0x006bb82f] = '\x00'
        cpu.RDX = 0x0
        cpu.RIP = 0x400bd1
        cpu.execute()
    
        self.assertEqual(mem[0x400bd1], 'H')
        self.assertEqual(mem[0x400bd2], '\x8d')
        self.assertEqual(mem[0x400bd3], '\x15')
        self.assertEqual(mem[0x400bd4], 'P')
        self.assertEqual(mem[0x400bd5], '\xac')
        self.assertEqual(mem[0x400bd6], '+')
        self.assertEqual(mem[0x400bd7], '\x00')
        self.assertEqual(mem[0x6bb828], '\x00')
        self.assertEqual(mem[0x6bb829], '\x00')
        self.assertEqual(mem[0x6bb82a], '\x00')
        self.assertEqual(mem[0x6bb82b], '\x00')
        self.assertEqual(mem[0x6bb82c], '\x00')
        self.assertEqual(mem[0x6bb82d], '\x00')
        self.assertEqual(mem[0x6bb82e], '\x00')
        self.assertEqual(mem[0x6bb82f], '\x00')
        self.assertEqual(cpu.RDX, 7059496L)
        self.assertEqual(cpu.RIP, 4197336L)

    def test_LEA_6(self):
        ''' Instruction LEA_6 
            Groups:  
            0x4322b0:	lea	r9, [rdx + rax*8]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x004942d8] = '|'
        mem[0x004942d9] = '\x08'
        mem[0x004942da] = '@'
        mem[0x004942db] = '\x06'
        mem[0x004942dc] = '\x00'
        mem[0x004942dd] = '\x00'
        mem[0x004942de] = '\x10'
        mem[0x004942df] = '\x00'
        mem[0x004322b0] = 'L'
        mem[0x004322b1] = '\x8d'
        mem[0x004322b2] = '\x0c'
        mem[0x004322b3] = '\xc2'
        cpu.RIP = 0x4322b0
        cpu.R9 = 0x494318
        cpu.RAX = 0x2b
        cpu.RDX = 0x494180
        cpu.execute()
    
        self.assertEqual(mem[0x4942d8], '|')
        self.assertEqual(mem[0x4942d9], '\x08')
        self.assertEqual(mem[0x4942da], '@')
        self.assertEqual(mem[0x4942db], '\x06')
        self.assertEqual(mem[0x4942dc], '\x00')
        self.assertEqual(mem[0x4942dd], '\x00')
        self.assertEqual(mem[0x4942de], '\x10')
        self.assertEqual(mem[0x4942df], '\x00')
        self.assertEqual(mem[0x4322b0], 'L')
        self.assertEqual(mem[0x4322b1], '\x8d')
        self.assertEqual(mem[0x4322b2], '\x0c')
        self.assertEqual(mem[0x4322b3], '\xc2')
        self.assertEqual(cpu.RAX, 43L)
        self.assertEqual(cpu.R9, 4801240L)
        self.assertEqual(cpu.RIP, 4399796L)
        self.assertEqual(cpu.RDX, 4800896L)

    def test_LEA_7(self):
        ''' Instruction LEA_7 
            Groups:  
            0x4322b0:	lea	r9, [rdx + rax*8]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x004941a0] = '\x0c'
        mem[0x004941a1] = '\x04'
        mem[0x004941a2] = ' '
        mem[0x004941a3] = '\x03'
        mem[0x004941a4] = '\x00'
        mem[0x004941a5] = '@'
        mem[0x004941a6] = '\x00'
        mem[0x004941a7] = '\x00'
        mem[0x004322b0] = 'L'
        mem[0x004322b1] = '\x8d'
        mem[0x004322b2] = '\x0c'
        mem[0x004322b3] = '\xc2'
        cpu.RIP = 0x4322b0
        cpu.R9 = 0x4941c0
        cpu.RAX = 0x4
        cpu.RDX = 0x494180
        cpu.execute()
    
        self.assertEqual(mem[0x4941a0], '\x0c')
        self.assertEqual(mem[0x4941a1], '\x04')
        self.assertEqual(mem[0x4941a2], ' ')
        self.assertEqual(mem[0x4941a3], '\x03')
        self.assertEqual(mem[0x4941a4], '\x00')
        self.assertEqual(mem[0x4941a5], '@')
        self.assertEqual(mem[0x4941a6], '\x00')
        self.assertEqual(mem[0x4941a7], '\x00')
        self.assertEqual(mem[0x4322b0], 'L')
        self.assertEqual(mem[0x4322b1], '\x8d')
        self.assertEqual(mem[0x4322b2], '\x0c')
        self.assertEqual(mem[0x4322b3], '\xc2')
        self.assertEqual(cpu.RAX, 4L)
        self.assertEqual(cpu.R9, 4800928L)
        self.assertEqual(cpu.RIP, 4399796L)
        self.assertEqual(cpu.RDX, 4800896L)

    def test_LEA_8(self):
        ''' Instruction LEA_8 
            Groups:  
            0x41abee:	lea	rax, [rip + 0x854b]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041a000, 0x1000, 'rwx')
        mem.mmap(0x00423000, 0x1000, 'rwx')
        mem[0x00423140] = 'f'
        mem[0x00423141] = '\x0f'
        mem[0x00423142] = '\xef'
        mem[0x00423143] = '\xc0'
        mem[0x00423144] = 'H'
        mem[0x00423145] = '\x83'
        mem[0x00423146] = '\xfa'
        mem[0x00423147] = 'O'
        mem[0x0041abee] = 'H'
        mem[0x0041abef] = '\x8d'
        mem[0x0041abf0] = '\x05'
        mem[0x0041abf1] = 'K'
        mem[0x0041abf2] = '\x85'
        mem[0x0041abf3] = '\x00'
        mem[0x0041abf4] = '\x00'
        cpu.RIP = 0x41abee
        cpu.RAX = 0x41dc10
        cpu.execute()
    
        self.assertEqual(mem[0x423140], 'f')
        self.assertEqual(mem[0x423141], '\x0f')
        self.assertEqual(mem[0x423142], '\xef')
        self.assertEqual(mem[0x423143], '\xc0')
        self.assertEqual(mem[0x423144], 'H')
        self.assertEqual(mem[0x423145], '\x83')
        self.assertEqual(mem[0x423146], '\xfa')
        self.assertEqual(mem[0x423147], 'O')
        self.assertEqual(mem[0x41abee], 'H')
        self.assertEqual(mem[0x41abef], '\x8d')
        self.assertEqual(mem[0x41abf0], '\x05')
        self.assertEqual(mem[0x41abf1], 'K')
        self.assertEqual(mem[0x41abf2], '\x85')
        self.assertEqual(mem[0x41abf3], '\x00')
        self.assertEqual(mem[0x41abf4], '\x00')
        self.assertEqual(cpu.RAX, 4337984L)
        self.assertEqual(cpu.RIP, 4303861L)

    def test_LEA_9(self):
        ''' Instruction LEA_9 
            Groups:  
            0x41b470:	lea	rsi, [rsi + 0x20]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041b000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x7fffffffca90] = 't'
        mem[0x7fffffffca91] = 'e'
        mem[0x7fffffffca92] = 's'
        mem[0x7fffffffca93] = 't'
        mem[0x7fffffffca94] = 's'
        mem[0x7fffffffca95] = '/'
        mem[0x7fffffffca96] = 'a'
        mem[0x7fffffffca97] = 'u'
        mem[0x0041b470] = 'H'
        mem[0x0041b471] = '\x8d'
        mem[0x0041b472] = 'v'
        mem[0x0041b473] = ' '
        cpu.RSI = 0x7fffffffca70
        cpu.RIP = 0x41b470
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffca90], 't')
        self.assertEqual(mem[0x7fffffffca91], 'e')
        self.assertEqual(mem[0x7fffffffca92], 's')
        self.assertEqual(mem[0x7fffffffca93], 't')
        self.assertEqual(mem[0x7fffffffca94], 's')
        self.assertEqual(mem[0x7fffffffca95], '/')
        self.assertEqual(mem[0x7fffffffca96], 'a')
        self.assertEqual(mem[0x7fffffffca97], 'u')
        self.assertEqual(mem[0x41b470], 'H')
        self.assertEqual(mem[0x41b471], '\x8d')
        self.assertEqual(mem[0x41b472], 'v')
        self.assertEqual(mem[0x41b473], ' ')
        self.assertEqual(cpu.RSI, 140737488341648L)
        self.assertEqual(cpu.RIP, 4306036L)

    def test_MOVABS_1(self):
        ''' Instruction MOVABS_1 
            Groups:  
            0x45f843:	movabs	rdx, 0xcccccccccccccccd
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045f000, 0x1000, 'rwx')
        mem[0x0045f843] = 'H'
        mem[0x0045f844] = '\xba'
        mem[0x0045f845] = '\xcd'
        mem[0x0045f846] = '\xcc'
        mem[0x0045f847] = '\xcc'
        mem[0x0045f848] = '\xcc'
        mem[0x0045f849] = '\xcc'
        mem[0x0045f84a] = '\xcc'
        mem[0x0045f84b] = '\xcc'
        mem[0x0045f84c] = '\xcc'
        cpu.RDX = 0x6bf700
        cpu.RIP = 0x45f843
        cpu.execute()
    
        self.assertEqual(mem[0x45f843], 'H')
        self.assertEqual(mem[0x45f844], '\xba')
        self.assertEqual(mem[0x45f845], '\xcd')
        self.assertEqual(mem[0x45f846], '\xcc')
        self.assertEqual(mem[0x45f847], '\xcc')
        self.assertEqual(mem[0x45f848], '\xcc')
        self.assertEqual(mem[0x45f849], '\xcc')
        self.assertEqual(mem[0x45f84a], '\xcc')
        self.assertEqual(mem[0x45f84b], '\xcc')
        self.assertEqual(mem[0x45f84c], '\xcc')
        self.assertEqual(cpu.RDX, 14757395258967641293L)
        self.assertEqual(cpu.RIP, 4585549L)

    def test_MOVABS_2(self):
        ''' Instruction MOVABS_2 
            Groups:  
            0x436b20:	movabs	r11, 0x37ffff1a0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436b20] = 'I'
        mem[0x00436b21] = '\xbb'
        mem[0x00436b22] = '\xa0'
        mem[0x00436b23] = '\xf1'
        mem[0x00436b24] = '\xff'
        mem[0x00436b25] = '\x7f'
        mem[0x00436b26] = '\x03'
        mem[0x00436b27] = '\x00'
        mem[0x00436b28] = '\x00'
        mem[0x00436b29] = '\x00'
        cpu.RIP = 0x436b20
        cpu.R11 = 0x346
        cpu.execute()
    
        self.assertEqual(mem[0x436b20], 'I')
        self.assertEqual(mem[0x436b21], '\xbb')
        self.assertEqual(mem[0x436b22], '\xa0')
        self.assertEqual(mem[0x436b23], '\xf1')
        self.assertEqual(mem[0x436b24], '\xff')
        self.assertEqual(mem[0x436b25], '\x7f')
        self.assertEqual(mem[0x436b26], '\x03')
        self.assertEqual(mem[0x436b27], '\x00')
        self.assertEqual(mem[0x436b28], '\x00')
        self.assertEqual(mem[0x436b29], '\x00')
        self.assertEqual(cpu.RIP, 4418346L)
        self.assertEqual(cpu.R11, 15032381856L)

    def test_MOVDQA_1(self):
        ''' Instruction MOVDQA_1 
            Groups: sse2 
            0x457935:	movdqa	xmm5, xmm4
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x00457938] = '\xec'
        mem[0x00457935] = 'f'
        mem[0x00457936] = '\x0f'
        mem[0x00457937] = 'o'
        cpu.RIP = 0x457935
        cpu.XMM4 = 0x2f65726f6369746e616d2f737463656a
        cpu.XMM5 = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x457938], '\xec')
        self.assertEqual(mem[0x457935], 'f')
        self.assertEqual(mem[0x457936], '\x0f')
        self.assertEqual(mem[0x457937], 'o')
        self.assertEqual(cpu.XMM4, 63000458804390422004777193253506344298L)
        self.assertEqual(cpu.RIP, 4553017L)
        self.assertEqual(cpu.XMM5, 63000458804390422004777193253506344298L)

    def test_MOVDQA_2(self):
        ''' Instruction MOVDQA_2 
            Groups: sse2 
            0x45794f:	movdqa	xmm5, xmm3
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x00457950] = '\x0f'
        mem[0x00457951] = 'o'
        mem[0x00457952] = '\xeb'
        mem[0x0045794f] = 'f'
        cpu.XMM3 = 0x7865646e692f6f7475612f7374736574
        cpu.RIP = 0x45794f
        cpu.XMM5 = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x457950], '\x0f')
        self.assertEqual(mem[0x457951], 'o')
        self.assertEqual(mem[0x457952], '\xeb')
        self.assertEqual(mem[0x45794f], 'f')
        self.assertEqual(cpu.XMM3, 160033818465513435950781081994195592564L)
        self.assertEqual(cpu.RIP, 4553043L)
        self.assertEqual(cpu.XMM5, 160033818465513435950781081994195592564L)

    def test_MOVDQA_3(self):
        ''' Instruction MOVDQA_3 
            Groups: sse2 
            0x4578fd:	movdqa	xmm3, xmm0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x00457900] = '\xd8'
        mem[0x004578fd] = 'f'
        mem[0x004578fe] = '\x0f'
        mem[0x004578ff] = 'o'
        cpu.XMM3 = 0x0
        cpu.XMM0 = 0x6f72502f6570696c65662f656d6f682f
        cpu.RIP = 0x4578fd
        cpu.execute()
    
        self.assertEqual(mem[0x457900], '\xd8')
        self.assertEqual(mem[0x4578fd], 'f')
        self.assertEqual(mem[0x4578fe], '\x0f')
        self.assertEqual(mem[0x4578ff], 'o')
        self.assertEqual(cpu.XMM3, 148137855721884446077821174189596305455L)
        self.assertEqual(cpu.XMM0, 148137855721884446077821174189596305455L)
        self.assertEqual(cpu.RIP, 4552961L)

    def test_MOVDQU_1(self):
        ''' Instruction MOVDQU_1 
            Groups: sse2 
            0x4183ca:	movdqu	xmm12, xmmword ptr [rax]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x7ffff7ffd000, 0x1000, 'rwx')
        mem[0x7ffff7ffd300] = 'o'
        mem[0x7ffff7ffd301] = '.'
        mem[0x7ffff7ffd302] = '1'
        mem[0x7ffff7ffd303] = '\x00'
        mem[0x004183ca] = '\xf3'
        mem[0x004183cb] = 'D'
        mem[0x004183cc] = '\x0f'
        mem[0x004183cd] = 'o'
        mem[0x004183ce] = ' '
        mem[0x7ffff7ffd2f4] = 'l'
        mem[0x7ffff7ffd2f5] = 'i'
        mem[0x7ffff7ffd2f6] = 'n'
        mem[0x7ffff7ffd2f7] = 'u'
        mem[0x7ffff7ffd2f8] = 'x'
        mem[0x7ffff7ffd2f9] = '-'
        mem[0x7ffff7ffd2fa] = 'v'
        mem[0x7ffff7ffd2fb] = 'd'
        mem[0x7ffff7ffd2fc] = 's'
        mem[0x7ffff7ffd2fd] = 'o'
        mem[0x7ffff7ffd2fe] = '.'
        mem[0x7ffff7ffd2ff] = 's'
        cpu.XMM12 = 0xff00ff
        cpu.RIP = 0x4183ca
        cpu.RAX = 0x7ffff7ffd2f4
        cpu.execute()
    
        self.assertEqual(mem[0x7ffff7ffd300], 'o')
        self.assertEqual(mem[0x7ffff7ffd301], '.')
        self.assertEqual(mem[0x7ffff7ffd302], '1')
        self.assertEqual(mem[0x7ffff7ffd303], '\x00')
        self.assertEqual(mem[0x4183ca], '\xf3')
        self.assertEqual(mem[0x4183cb], 'D')
        self.assertEqual(mem[0x4183cc], '\x0f')
        self.assertEqual(mem[0x4183cd], 'o')
        self.assertEqual(mem[0x4183ce], ' ')
        self.assertEqual(mem[0x7ffff7ffd2f4], 'l')
        self.assertEqual(mem[0x7ffff7ffd2f5], 'i')
        self.assertEqual(mem[0x7ffff7ffd2f6], 'n')
        self.assertEqual(mem[0x7ffff7ffd2f7], 'u')
        self.assertEqual(mem[0x7ffff7ffd2f8], 'x')
        self.assertEqual(mem[0x7ffff7ffd2f9], '-')
        self.assertEqual(mem[0x7ffff7ffd2fa], 'v')
        self.assertEqual(mem[0x7ffff7ffd2fb], 'd')
        self.assertEqual(mem[0x7ffff7ffd2fc], 's')
        self.assertEqual(mem[0x7ffff7ffd2fd], 'o')
        self.assertEqual(mem[0x7ffff7ffd2fe], '.')
        self.assertEqual(mem[0x7ffff7ffd2ff], 's')
        self.assertEqual(cpu.XMM12, 255364366882926642430115076107037036L)
        self.assertEqual(cpu.RAX, 140737354126068L)
        self.assertEqual(cpu.RIP, 4293583L)

    def test_MOVDQU_10(self):
        ''' Instruction MOVDQU_10 
            Groups: sse2 
            0x4183ca:	movdqu	xmm12, xmmword ptr [rax]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x004183ca] = '\xf3'
        mem[0x004183cb] = 'D'
        mem[0x004183cc] = '\x0f'
        mem[0x004183cd] = 'o'
        mem[0x004183ce] = ' '
        mem[0x00494d8f] = 'D'
        mem[0x00494d90] = '_'
        mem[0x00494d91] = 'D'
        mem[0x00494d92] = 'Y'
        mem[0x00494d93] = 'N'
        mem[0x00494d94] = 'A'
        mem[0x00494d8e] = 'L'
        mem[0x00494d96] = 'I'
        mem[0x00494d97] = 'C'
        mem[0x00494d98] = '_'
        mem[0x00494d99] = 'W'
        mem[0x00494d9a] = 'E'
        mem[0x00494d9b] = 'A'
        mem[0x00494d9c] = 'K'
        mem[0x00494d9d] = '\x00'
        mem[0x00494d95] = 'M'
        cpu.XMM12 = 0xff0000000000000000000000
        cpu.RIP = 0x4183ca
        cpu.RAX = 0x494d8e
        cpu.execute()
    
        self.assertEqual(mem[0x4183ca], '\xf3')
        self.assertEqual(mem[0x4183cb], 'D')
        self.assertEqual(mem[0x4183cc], '\x0f')
        self.assertEqual(mem[0x4183cd], 'o')
        self.assertEqual(mem[0x4183ce], ' ')
        self.assertEqual(mem[0x494d8f], 'D')
        self.assertEqual(mem[0x494d90], '_')
        self.assertEqual(mem[0x494d91], 'D')
        self.assertEqual(mem[0x494d92], 'Y')
        self.assertEqual(mem[0x494d93], 'N')
        self.assertEqual(mem[0x494d94], 'A')
        self.assertEqual(mem[0x494d8e], 'L')
        self.assertEqual(mem[0x494d96], 'I')
        self.assertEqual(mem[0x494d97], 'C')
        self.assertEqual(mem[0x494d98], '_')
        self.assertEqual(mem[0x494d99], 'W')
        self.assertEqual(mem[0x494d9a], 'E')
        self.assertEqual(mem[0x494d9b], 'A')
        self.assertEqual(mem[0x494d9c], 'K')
        self.assertEqual(mem[0x494d9d], '\x00')
        self.assertEqual(mem[0x494d95], 'M')
        self.assertEqual(cpu.XMM12, 390746114797924473010534907950089292L)
        self.assertEqual(cpu.RAX, 4803982L)
        self.assertEqual(cpu.RIP, 4293583L)

    def test_MOVDQU_11(self):
        ''' Instruction MOVDQU_11 
            Groups: sse2 
            0x4578f5:	movdqu	xmm0, xmmword ptr [rdi]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdfa0] = 'o'
        mem[0x004578f6] = '\x0f'
        mem[0x004578f7] = 'o'
        mem[0x7fffffffdf9a] = 'i'
        mem[0x7fffffffdf95] = 'e'
        mem[0x7fffffffdf91] = '/'
        mem[0x7fffffffdf92] = 'h'
        mem[0x7fffffffdf93] = 'o'
        mem[0x7fffffffdf94] = 'm'
        mem[0x004578f5] = '\xf3'
        mem[0x7fffffffdf96] = '/'
        mem[0x7fffffffdf97] = 'f'
        mem[0x004578f8] = '\x07'
        mem[0x7fffffffdf99] = 'l'
        mem[0x7fffffffdf98] = 'e'
        mem[0x7fffffffdf9b] = 'p'
        mem[0x7fffffffdf9c] = 'e'
        mem[0x7fffffffdf9d] = '/'
        mem[0x7fffffffdf9e] = 'P'
        mem[0x7fffffffdf9f] = 'r'
        cpu.XMM0 = 0x0
        cpu.RDI = 0x7fffffffdf91
        cpu.RIP = 0x4578f5
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdfa0], 'o')
        self.assertEqual(mem[0x4578f5], '\xf3')
        self.assertEqual(mem[0x4578f6], '\x0f')
        self.assertEqual(mem[0x4578f7], 'o')
        self.assertEqual(mem[0x4578f8], '\x07')
        self.assertEqual(mem[0x7fffffffdf91], '/')
        self.assertEqual(mem[0x7fffffffdf92], 'h')
        self.assertEqual(mem[0x7fffffffdf93], 'o')
        self.assertEqual(mem[0x7fffffffdf94], 'm')
        self.assertEqual(mem[0x7fffffffdf95], 'e')
        self.assertEqual(mem[0x7fffffffdf96], '/')
        self.assertEqual(mem[0x7fffffffdf97], 'f')
        self.assertEqual(mem[0x7fffffffdf98], 'e')
        self.assertEqual(mem[0x7fffffffdf99], 'l')
        self.assertEqual(mem[0x7fffffffdf9a], 'i')
        self.assertEqual(mem[0x7fffffffdf9b], 'p')
        self.assertEqual(mem[0x7fffffffdf9c], 'e')
        self.assertEqual(mem[0x7fffffffdf9d], '/')
        self.assertEqual(mem[0x7fffffffdf9e], 'P')
        self.assertEqual(mem[0x7fffffffdf9f], 'r')
        self.assertEqual(cpu.XMM0, 148137855721884446077821174189596305455L)
        self.assertEqual(cpu.RDI, 140737488347025L)
        self.assertEqual(cpu.RIP, 4552953L)

    def test_MOVDQU_12(self):
        ''' Instruction MOVDQU_12 
            Groups: sse2 
            0x457946:	movdqu	xmm0, xmmword ptr [rdi + 0x30]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdfc1] = 'h'
        mem[0x7fffffffdfc2] = 'e'
        mem[0x7fffffffdfc3] = 'l'
        mem[0x7fffffffdfc4] = 'l'
        mem[0x7fffffffdfc5] = '\x00'
        mem[0x00457946] = '\xf3'
        mem[0x00457947] = '\x0f'
        mem[0x00457948] = 'o'
        mem[0x00457949] = 'G'
        mem[0x0045794a] = '0'
        mem[0x7fffffffdfc7] = 'r'
        mem[0x7fffffffdfcc] = 'r'
        mem[0x7fffffffdfcd] = 'g'
        mem[0x7fffffffdfcb] = 'a'
        mem[0x7fffffffdfcf] = '\x00'
        mem[0x7fffffffdfd0] = 'X'
        mem[0x7fffffffdfc8] = 'g'
        mem[0x7fffffffdfce] = '2'
        mem[0x7fffffffdfc9] = '1'
        mem[0x7fffffffdfc6] = 'a'
        mem[0x7fffffffdfca] = '\x00'
        cpu.XMM0 = 0xff000000000000ff00000000ff
        cpu.RDI = 0x7fffffffdf91
        cpu.RIP = 0x457946
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdfc1], 'h')
        self.assertEqual(mem[0x7fffffffdfc2], 'e')
        self.assertEqual(mem[0x7fffffffdfc3], 'l')
        self.assertEqual(mem[0x7fffffffdfc4], 'l')
        self.assertEqual(mem[0x7fffffffdfc5], '\x00')
        self.assertEqual(mem[0x457946], '\xf3')
        self.assertEqual(mem[0x457947], '\x0f')
        self.assertEqual(mem[0x457948], 'o')
        self.assertEqual(mem[0x457949], 'G')
        self.assertEqual(mem[0x45794a], '0')
        self.assertEqual(mem[0x7fffffffdfcb], 'a')
        self.assertEqual(mem[0x7fffffffdfcc], 'r')
        self.assertEqual(mem[0x7fffffffdfcd], 'g')
        self.assertEqual(mem[0x7fffffffdfce], '2')
        self.assertEqual(mem[0x7fffffffdfcf], '\x00')
        self.assertEqual(mem[0x7fffffffdfd0], 'X')
        self.assertEqual(mem[0x7fffffffdfc8], 'g')
        self.assertEqual(mem[0x7fffffffdfc7], 'r')
        self.assertEqual(mem[0x7fffffffdfc9], '1')
        self.assertEqual(mem[0x7fffffffdfc6], 'a')
        self.assertEqual(mem[0x7fffffffdfca], '\x00')
        self.assertEqual(cpu.XMM0, 116973085945452076203763534266299606376L)
        self.assertEqual(cpu.RDI, 140737488347025L)
        self.assertEqual(cpu.RIP, 4553035L)

    def test_MOVDQU_13(self):
        ''' Instruction MOVDQU_13 
            Groups: sse2 
            0x4183ca:	movdqu	xmm12, xmmword ptr [rax]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x004a5000, 0x1000, 'rwx')
        mem[0x004a5301] = '\x00'
        mem[0x004a5302] = '\x02'
        mem[0x004a5303] = '\x00'
        mem[0x004a5304] = '%'
        mem[0x004a5305] = 'a'
        mem[0x004a5306] = ' '
        mem[0x004a5307] = '%'
        mem[0x004a5308] = 'b'
        mem[0x004a5309] = ' '
        mem[0x004183ca] = '\xf3'
        mem[0x004183cb] = 'D'
        mem[0x004183cc] = '\x0f'
        mem[0x004183cd] = 'o'
        mem[0x004183ce] = ' '
        mem[0x004a530d] = '%'
        mem[0x004a5310] = '%'
        mem[0x004a530c] = ' '
        mem[0x004a530e] = 'H'
        mem[0x004a530a] = '%'
        mem[0x004a530f] = ':'
        mem[0x004a530b] = 'e'
        cpu.XMM12 = 0xff00000000000000
        cpu.RIP = 0x4183ca
        cpu.RAX = 0x4a5301
        cpu.execute()
    
        self.assertEqual(mem[0x4a5301], '\x00')
        self.assertEqual(mem[0x4a5302], '\x02')
        self.assertEqual(mem[0x4a5303], '\x00')
        self.assertEqual(mem[0x4a5304], '%')
        self.assertEqual(mem[0x4a5305], 'a')
        self.assertEqual(mem[0x4a5306], ' ')
        self.assertEqual(mem[0x4a5307], '%')
        self.assertEqual(mem[0x4a5308], 'b')
        self.assertEqual(mem[0x4a5309], ' ')
        self.assertEqual(mem[0x4183ca], '\xf3')
        self.assertEqual(mem[0x4183cb], 'D')
        self.assertEqual(mem[0x4183cc], '\x0f')
        self.assertEqual(mem[0x4183cd], 'o')
        self.assertEqual(mem[0x4183ce], ' ')
        self.assertEqual(mem[0x4a530d], '%')
        self.assertEqual(mem[0x4a5310], '%')
        self.assertEqual(mem[0x4a530c], ' ')
        self.assertEqual(mem[0x4a530e], 'H')
        self.assertEqual(mem[0x4a530a], '%')
        self.assertEqual(mem[0x4a530f], ':')
        self.assertEqual(mem[0x4a530b], 'e')
        self.assertEqual(cpu.XMM12, 49484052336796180394938535853563052544L)
        self.assertEqual(cpu.RAX, 4870913L)
        self.assertEqual(cpu.RIP, 4293583L)

    def test_MOVDQU_2(self):
        ''' Instruction MOVDQU_2 
            Groups: sse2 
            0x4183ca:	movdqu	xmm12, xmmword ptr [rax]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00494da0] = '_'
        mem[0x00494da1] = 'P'
        mem[0x00494da2] = 'R'
        mem[0x00494da3] = 'O'
        mem[0x00494da4] = 'F'
        mem[0x00494da5] = 'I'
        mem[0x00494da6] = 'L'
        mem[0x00494da7] = 'E'
        mem[0x00494da8] = '_'
        mem[0x00494da9] = 'O'
        mem[0x004183ca] = '\xf3'
        mem[0x004183cb] = 'D'
        mem[0x004183cc] = '\x0f'
        mem[0x004183cd] = 'o'
        mem[0x004183ce] = ' '
        mem[0x00494dad] = 'U'
        mem[0x00494d9f] = 'D'
        mem[0x00494dac] = 'P'
        mem[0x00494dab] = 'T'
        mem[0x00494d9e] = 'L'
        mem[0x00494daa] = 'U'
        cpu.XMM12 = 0xff000000000000000000000000000000
        cpu.RIP = 0x4183ca
        cpu.RAX = 0x494d9e
        cpu.execute()
    
        self.assertEqual(mem[0x494da0], '_')
        self.assertEqual(mem[0x494da1], 'P')
        self.assertEqual(mem[0x494da2], 'R')
        self.assertEqual(mem[0x494da3], 'O')
        self.assertEqual(mem[0x494da4], 'F')
        self.assertEqual(mem[0x494da5], 'I')
        self.assertEqual(mem[0x494da6], 'L')
        self.assertEqual(mem[0x494da7], 'E')
        self.assertEqual(mem[0x494da8], '_')
        self.assertEqual(mem[0x494da9], 'O')
        self.assertEqual(mem[0x4183ca], '\xf3')
        self.assertEqual(mem[0x4183cb], 'D')
        self.assertEqual(mem[0x4183cc], '\x0f')
        self.assertEqual(mem[0x4183cd], 'o')
        self.assertEqual(mem[0x4183ce], ' ')
        self.assertEqual(mem[0x494dad], 'U')
        self.assertEqual(mem[0x494dac], 'P')
        self.assertEqual(mem[0x494dab], 'T')
        self.assertEqual(mem[0x494daa], 'U')
        self.assertEqual(mem[0x494d9e], 'L')
        self.assertEqual(mem[0x494d9f], 'D')
        self.assertEqual(cpu.XMM12, 113401473871765646839159859486903977036L)
        self.assertEqual(cpu.RAX, 4803998L)
        self.assertEqual(cpu.RIP, 4293583L)

    def test_MOVDQU_3(self):
        ''' Instruction MOVDQU_3 
            Groups: sse2 
            0x4183ca:	movdqu	xmm12, xmmword ptr [rax]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00494d80] = 'W'
        mem[0x00494d81] = '\x00'
        mem[0x00494d82] = 'L'
        mem[0x00494d83] = 'D'
        mem[0x00494d84] = '_'
        mem[0x00494d85] = 'B'
        mem[0x004183ca] = '\xf3'
        mem[0x004183cb] = 'D'
        mem[0x004183cc] = '\x0f'
        mem[0x004183cd] = 'o'
        mem[0x004183ce] = ' '
        mem[0x00494d76] = 'L'
        mem[0x00494d77] = 'D'
        mem[0x00494d78] = '_'
        mem[0x00494d79] = 'B'
        mem[0x00494d7a] = 'I'
        mem[0x00494d7b] = 'N'
        mem[0x00494d7c] = 'D'
        mem[0x00494d7d] = '_'
        mem[0x00494d7e] = 'N'
        mem[0x00494d7f] = 'O'
        cpu.XMM12 = 0xff000000000000000000000000000000
        cpu.RIP = 0x4183ca
        cpu.RAX = 0x494d76
        cpu.execute()
    
        self.assertEqual(mem[0x494d80], 'W')
        self.assertEqual(mem[0x494d81], '\x00')
        self.assertEqual(mem[0x494d82], 'L')
        self.assertEqual(mem[0x494d83], 'D')
        self.assertEqual(mem[0x494d84], '_')
        self.assertEqual(mem[0x494d85], 'B')
        self.assertEqual(mem[0x4183ca], '\xf3')
        self.assertEqual(mem[0x4183cb], 'D')
        self.assertEqual(mem[0x4183cc], '\x0f')
        self.assertEqual(mem[0x4183cd], 'o')
        self.assertEqual(mem[0x4183ce], ' ')
        self.assertEqual(mem[0x494d76], 'L')
        self.assertEqual(mem[0x494d77], 'D')
        self.assertEqual(mem[0x494d78], '_')
        self.assertEqual(mem[0x494d79], 'B')
        self.assertEqual(mem[0x494d7a], 'I')
        self.assertEqual(mem[0x494d7b], 'N')
        self.assertEqual(mem[0x494d7c], 'D')
        self.assertEqual(mem[0x494d7d], '_')
        self.assertEqual(mem[0x494d7e], 'N')
        self.assertEqual(mem[0x494d7f], 'O')
        self.assertEqual(cpu.XMM12, 88223701148664206693009503650295268428L)
        self.assertEqual(cpu.RAX, 4803958L)
        self.assertEqual(cpu.RIP, 4293583L)

    def test_MOVDQU_4(self):
        ''' Instruction MOVDQU_4 
            Groups: sse2 
            0x4183ca:	movdqu	xmm12, xmmword ptr [rax]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x004183cb] = 'D'
        mem[0x00494d05] = 'L'
        mem[0x00494d06] = 'D'
        mem[0x00494d07] = '_'
        mem[0x00494d08] = 'W'
        mem[0x00494d09] = 'A'
        mem[0x004183ca] = '\xf3'
        mem[0x00494d0b] = 'N'
        mem[0x004183cc] = '\x0f'
        mem[0x004183cd] = 'o'
        mem[0x004183ce] = ' '
        mem[0x00494d0d] = 's'
        mem[0x00494d10] = 'u'
        mem[0x00494d11] = 'p'
        mem[0x00494d12] = '-'
        mem[0x00494d13] = 'v'
        mem[0x00494d14] = 'd'
        mem[0x00494d0e] = 'e'
        mem[0x00494d0c] = '\x00'
        mem[0x00494d0f] = 't'
        mem[0x00494d0a] = 'R'
        cpu.XMM12 = 0x0
        cpu.RIP = 0x4183ca
        cpu.RAX = 0x494d05
        cpu.execute()
    
        self.assertEqual(mem[0x494d0b], 'N')
        self.assertEqual(mem[0x494d05], 'L')
        self.assertEqual(mem[0x494d06], 'D')
        self.assertEqual(mem[0x494d07], '_')
        self.assertEqual(mem[0x494d08], 'W')
        self.assertEqual(mem[0x494d09], 'A')
        self.assertEqual(mem[0x4183ca], '\xf3')
        self.assertEqual(mem[0x4183cb], 'D')
        self.assertEqual(mem[0x4183cc], '\x0f')
        self.assertEqual(mem[0x4183cd], 'o')
        self.assertEqual(mem[0x4183ce], ' ')
        self.assertEqual(mem[0x494d0d], 's')
        self.assertEqual(mem[0x494d10], 'u')
        self.assertEqual(mem[0x494d11], 'p')
        self.assertEqual(mem[0x494d12], '-')
        self.assertEqual(mem[0x494d13], 'v')
        self.assertEqual(mem[0x494d14], 'd')
        self.assertEqual(mem[0x494d0e], 'e')
        self.assertEqual(mem[0x494d0c], '\x00')
        self.assertEqual(mem[0x494d0f], 't')
        self.assertEqual(mem[0x494d0a], 'R')
        self.assertEqual(cpu.XMM12, 133536412226135523497907246522718700620L)
        self.assertEqual(cpu.RAX, 4803845L)
        self.assertEqual(cpu.RIP, 4293583L)

    def test_MOVDQU_5(self):
        ''' Instruction MOVDQU_5 
            Groups: sse2 
            0x457939:	movdqu	xmm3, xmmword ptr [rdi + 0x20]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdfc0] = 'x'
        mem[0x0045793b] = 'o'
        mem[0x0045793a] = '\x0f'
        mem[0x0045793c] = '_'
        mem[0x0045793d] = ' '
        mem[0x00457939] = '\xf3'
        mem[0x7fffffffdfb1] = 't'
        mem[0x7fffffffdfb2] = 'e'
        mem[0x7fffffffdfb3] = 's'
        mem[0x7fffffffdfb4] = 't'
        mem[0x7fffffffdfb5] = 's'
        mem[0x7fffffffdfb6] = '/'
        mem[0x7fffffffdfb7] = 'a'
        mem[0x7fffffffdfb8] = 'u'
        mem[0x7fffffffdfb9] = 't'
        mem[0x7fffffffdfba] = 'o'
        mem[0x7fffffffdfbb] = '/'
        mem[0x7fffffffdfbc] = 'i'
        mem[0x7fffffffdfbd] = 'n'
        mem[0x7fffffffdfbe] = 'd'
        mem[0x7fffffffdfbf] = 'e'
        cpu.XMM3 = 0x0
        cpu.RDI = 0x7fffffffdf91
        cpu.RIP = 0x457939
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdfc0], 'x')
        self.assertEqual(mem[0x7fffffffdfbb], '/')
        self.assertEqual(mem[0x7fffffffdfbd], 'n')
        self.assertEqual(mem[0x7fffffffdfbc], 'i')
        self.assertEqual(mem[0x7fffffffdfb9], 't')
        self.assertEqual(mem[0x7fffffffdfba], 'o')
        self.assertEqual(mem[0x7fffffffdfb1], 't')
        self.assertEqual(mem[0x7fffffffdfb2], 'e')
        self.assertEqual(mem[0x7fffffffdfb3], 's')
        self.assertEqual(mem[0x7fffffffdfb4], 't')
        self.assertEqual(mem[0x7fffffffdfb5], 's')
        self.assertEqual(mem[0x7fffffffdfb6], '/')
        self.assertEqual(mem[0x7fffffffdfb7], 'a')
        self.assertEqual(mem[0x7fffffffdfb8], 'u')
        self.assertEqual(mem[0x457939], '\xf3')
        self.assertEqual(mem[0x45793a], '\x0f')
        self.assertEqual(mem[0x45793b], 'o')
        self.assertEqual(mem[0x45793c], '_')
        self.assertEqual(mem[0x45793d], ' ')
        self.assertEqual(mem[0x7fffffffdfbe], 'd')
        self.assertEqual(mem[0x7fffffffdfbf], 'e')
        self.assertEqual(cpu.XMM3, 160033818465513435950781081994195592564L)
        self.assertEqual(cpu.RDI, 140737488347025L)
        self.assertEqual(cpu.RIP, 4553022L)

    def test_MOVDQU_6(self):
        ''' Instruction MOVDQU_6 
            Groups: sse2 
            0x457930:	movdqu	xmm4, xmmword ptr [rdi + 0x10]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdfa1] = 'j'
        mem[0x7fffffffdfa2] = 'e'
        mem[0x7fffffffdfa3] = 'c'
        mem[0x7fffffffdfa4] = 't'
        mem[0x7fffffffdfa5] = 's'
        mem[0x7fffffffdfa6] = '/'
        mem[0x7fffffffdfa7] = 'm'
        mem[0x7fffffffdfa8] = 'a'
        mem[0x7fffffffdfa9] = 'n'
        mem[0x7fffffffdfaa] = 't'
        mem[0x7fffffffdfab] = 'i'
        mem[0x7fffffffdfac] = 'c'
        mem[0x7fffffffdfad] = 'o'
        mem[0x7fffffffdfae] = 'r'
        mem[0x7fffffffdfaf] = 'e'
        mem[0x00457930] = '\xf3'
        mem[0x00457931] = '\x0f'
        mem[0x00457932] = 'o'
        mem[0x00457933] = 'g'
        mem[0x00457934] = '\x10'
        mem[0x7fffffffdfb0] = '/'
        cpu.RDI = 0x7fffffffdf91
        cpu.RIP = 0x457930
        cpu.XMM4 = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdfa1], 'j')
        self.assertEqual(mem[0x7fffffffdfa2], 'e')
        self.assertEqual(mem[0x7fffffffdfa3], 'c')
        self.assertEqual(mem[0x7fffffffdfa4], 't')
        self.assertEqual(mem[0x7fffffffdfa5], 's')
        self.assertEqual(mem[0x7fffffffdfa6], '/')
        self.assertEqual(mem[0x7fffffffdfa7], 'm')
        self.assertEqual(mem[0x7fffffffdfa8], 'a')
        self.assertEqual(mem[0x7fffffffdfa9], 'n')
        self.assertEqual(mem[0x7fffffffdfaa], 't')
        self.assertEqual(mem[0x7fffffffdfab], 'i')
        self.assertEqual(mem[0x7fffffffdfac], 'c')
        self.assertEqual(mem[0x7fffffffdfad], 'o')
        self.assertEqual(mem[0x7fffffffdfae], 'r')
        self.assertEqual(mem[0x7fffffffdfaf], 'e')
        self.assertEqual(mem[0x7fffffffdfb0], '/')
        self.assertEqual(mem[0x457931], '\x0f')
        self.assertEqual(mem[0x457932], 'o')
        self.assertEqual(mem[0x457933], 'g')
        self.assertEqual(mem[0x457934], '\x10')
        self.assertEqual(mem[0x457930], '\xf3')
        self.assertEqual(cpu.RDI, 140737488347025L)
        self.assertEqual(cpu.XMM4, 63000458804390422004777193253506344298L)
        self.assertEqual(cpu.RIP, 4553013L)

    def test_MOVDQU_7(self):
        ''' Instruction MOVDQU_7 
            Groups: sse2 
            0x4183ca:	movdqu	xmm12, xmmword ptr [rax]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x004183ca] = '\xf3'
        mem[0x004183cb] = 'D'
        mem[0x004183cc] = '\x0f'
        mem[0x004183cd] = 'o'
        mem[0x00494dce] = 'L'
        mem[0x00494dcf] = 'D'
        mem[0x00494dd0] = '_'
        mem[0x00494dd1] = 'A'
        mem[0x00494dd2] = 'S'
        mem[0x00494dd3] = 'S'
        mem[0x00494dd4] = 'U'
        mem[0x004183ce] = ' '
        mem[0x00494dd6] = 'E'
        mem[0x00494dd7] = '_'
        mem[0x00494dd8] = 'K'
        mem[0x00494dd9] = 'E'
        mem[0x00494dda] = 'R'
        mem[0x00494ddb] = 'N'
        mem[0x00494ddc] = 'E'
        mem[0x00494ddd] = 'L'
        mem[0x00494dd5] = 'M'
        cpu.XMM12 = 0x0
        cpu.RIP = 0x4183ca
        cpu.RAX = 0x494dce
        cpu.execute()
    
        self.assertEqual(mem[0x4183ca], '\xf3')
        self.assertEqual(mem[0x4183cb], 'D')
        self.assertEqual(mem[0x4183cc], '\x0f')
        self.assertEqual(mem[0x4183cd], 'o')
        self.assertEqual(mem[0x494dce], 'L')
        self.assertEqual(mem[0x494dcf], 'D')
        self.assertEqual(mem[0x494dd0], '_')
        self.assertEqual(mem[0x494dd1], 'A')
        self.assertEqual(mem[0x494dd2], 'S')
        self.assertEqual(mem[0x494dd3], 'S')
        self.assertEqual(mem[0x494dd4], 'U')
        self.assertEqual(mem[0x4183ce], ' ')
        self.assertEqual(mem[0x494dd6], 'E')
        self.assertEqual(mem[0x494dd7], '_')
        self.assertEqual(mem[0x494dd8], 'K')
        self.assertEqual(mem[0x494dd9], 'E')
        self.assertEqual(mem[0x494dda], 'R')
        self.assertEqual(mem[0x494ddb], 'N')
        self.assertEqual(mem[0x494ddc], 'E')
        self.assertEqual(mem[0x494ddd], 'L')
        self.assertEqual(mem[0x494dd5], 'M')
        self.assertEqual(cpu.XMM12, 101381184708996505464384263747578840140L)
        self.assertEqual(cpu.RAX, 4804046L)
        self.assertEqual(cpu.RIP, 4293583L)

    def test_MOVDQU_8(self):
        ''' Instruction MOVDQU_8 
            Groups: sse2 
            0x4183ca:	movdqu	xmm12, xmmword ptr [rax]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x004183cb] = 'D'
        mem[0x00494d66] = 'L'
        mem[0x00494d67] = 'D'
        mem[0x00494d68] = '_'
        mem[0x00494d69] = 'L'
        mem[0x004183ca] = '\xf3'
        mem[0x00494d6b] = 'B'
        mem[0x004183cc] = '\x0f'
        mem[0x004183cd] = 'o'
        mem[0x004183ce] = ' '
        mem[0x00494d6d] = 'A'
        mem[0x00494d70] = '_'
        mem[0x00494d71] = 'P'
        mem[0x00494d72] = 'A'
        mem[0x00494d73] = 'T'
        mem[0x00494d74] = 'H'
        mem[0x00494d6e] = 'R'
        mem[0x00494d6c] = 'R'
        mem[0x00494d6f] = 'Y'
        mem[0x00494d6a] = 'I'
        mem[0x00494d75] = '\x00'
        cpu.XMM12 = 0xff000000000000000000000000000000
        cpu.RIP = 0x4183ca
        cpu.RAX = 0x494d66
        cpu.execute()
    
        self.assertEqual(mem[0x494d6b], 'B')
        self.assertEqual(mem[0x494d66], 'L')
        self.assertEqual(mem[0x494d67], 'D')
        self.assertEqual(mem[0x494d68], '_')
        self.assertEqual(mem[0x494d69], 'L')
        self.assertEqual(mem[0x4183ca], '\xf3')
        self.assertEqual(mem[0x4183cb], 'D')
        self.assertEqual(mem[0x4183cc], '\x0f')
        self.assertEqual(mem[0x4183cd], 'o')
        self.assertEqual(mem[0x4183ce], ' ')
        self.assertEqual(mem[0x494d6d], 'A')
        self.assertEqual(mem[0x494d70], '_')
        self.assertEqual(mem[0x494d71], 'P')
        self.assertEqual(mem[0x494d72], 'A')
        self.assertEqual(mem[0x494d73], 'T')
        self.assertEqual(mem[0x494d74], 'H')
        self.assertEqual(mem[0x494d6e], 'R')
        self.assertEqual(mem[0x494d6c], 'R')
        self.assertEqual(mem[0x494d6f], 'Y')
        self.assertEqual(mem[0x494d6a], 'I')
        self.assertEqual(mem[0x494d75], '\x00')
        self.assertEqual(cpu.XMM12, 375554270925848303279633040492414028L)
        self.assertEqual(cpu.RAX, 4803942L)
        self.assertEqual(cpu.RIP, 4293583L)

    def test_MOVDQU_9(self):
        ''' Instruction MOVDQU_9 
            Groups: sse2 
            0x4183ca:	movdqu	xmm12, xmmword ptr [rax]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00494d82] = 'L'
        mem[0x00494d83] = 'D'
        mem[0x00494d84] = '_'
        mem[0x00494d85] = 'B'
        mem[0x00494d86] = 'I'
        mem[0x00494d87] = 'N'
        mem[0x00494d88] = 'D'
        mem[0x00494d89] = '_'
        mem[0x004183ca] = '\xf3'
        mem[0x004183cb] = 'D'
        mem[0x004183cc] = '\x0f'
        mem[0x004183cd] = 'o'
        mem[0x004183ce] = ' '
        mem[0x00494d8d] = '\x00'
        mem[0x00494d90] = '_'
        mem[0x00494d91] = 'D'
        mem[0x00494d8e] = 'L'
        mem[0x00494d8c] = 'T'
        mem[0x00494d8f] = 'D'
        mem[0x00494d8b] = 'O'
        mem[0x00494d8a] = 'N'
        cpu.XMM12 = 0xff0000000000000000000000
        cpu.RIP = 0x4183ca
        cpu.RAX = 0x494d82
        cpu.execute()
    
        self.assertEqual(mem[0x494d82], 'L')
        self.assertEqual(mem[0x494d83], 'D')
        self.assertEqual(mem[0x494d84], '_')
        self.assertEqual(mem[0x494d85], 'B')
        self.assertEqual(mem[0x494d86], 'I')
        self.assertEqual(mem[0x494d87], 'N')
        self.assertEqual(mem[0x494d88], 'D')
        self.assertEqual(mem[0x494d89], '_')
        self.assertEqual(mem[0x4183ca], '\xf3')
        self.assertEqual(mem[0x4183cb], 'D')
        self.assertEqual(mem[0x4183cc], '\x0f')
        self.assertEqual(mem[0x4183cd], 'o')
        self.assertEqual(mem[0x4183ce], ' ')
        self.assertEqual(mem[0x494d8d], '\x00')
        self.assertEqual(mem[0x494d90], '_')
        self.assertEqual(mem[0x494d91], 'D')
        self.assertEqual(mem[0x494d8e], 'L')
        self.assertEqual(mem[0x494d8c], 'T')
        self.assertEqual(mem[0x494d8f], 'D')
        self.assertEqual(mem[0x494d8b], 'O')
        self.assertEqual(mem[0x494d8a], 'N')
        self.assertEqual(cpu.XMM12, 90882157140230411661358273883331839052L)
        self.assertEqual(cpu.RAX, 4803970L)
        self.assertEqual(cpu.RIP, 4293583L)

    def test_MOVD_1(self):
        ''' Instruction MOVD_1 
            Groups: sse2 
            0x4578d0:	movd	xmm1, esi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x004578d0] = 'f'
        mem[0x004578d1] = '\x0f'
        mem[0x004578d2] = 'n'
        mem[0x004578d3] = '\xce'
        cpu.XMM1 = 0x0
        cpu.RIP = 0x4578d0
        cpu.ESI = 0x2f
        cpu.execute()
    
        self.assertEqual(mem[0x4578d0], 'f')
        self.assertEqual(mem[0x4578d1], '\x0f')
        self.assertEqual(mem[0x4578d2], 'n')
        self.assertEqual(mem[0x4578d3], '\xce')
        self.assertEqual(cpu.XMM1, 47)
        self.assertEqual(cpu.ESI, 47L)
        self.assertEqual(cpu.RIP, 4552916L)

    def test_MOVSXD_1(self):
        ''' Instruction MOVSXD_1 
            Groups: mode64 
            0x436812:	movsxd	rax, dword ptr [rdx + rax*4]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00436812] = 'H'
        mem[0x00436813] = 'c'
        mem[0x00436814] = '\x04'
        mem[0x00436815] = '\x82'
        mem[0x00494b68] = '\x10'
        mem[0x00494b69] = '\x1d'
        mem[0x00494b6a] = '\xfa'
        mem[0x00494b6b] = '\xff'
        cpu.RIP = 0x436812
        cpu.RAX = 0xa
        cpu.RDX = 0x494b40
        cpu.execute()
    
        self.assertEqual(mem[0x436812], 'H')
        self.assertEqual(mem[0x436813], 'c')
        self.assertEqual(mem[0x436814], '\x04')
        self.assertEqual(mem[0x436815], '\x82')
        self.assertEqual(mem[0x494b68], '\x10')
        self.assertEqual(mem[0x494b69], '\x1d')
        self.assertEqual(mem[0x494b6a], '\xfa')
        self.assertEqual(mem[0x494b6b], '\xff')
        self.assertEqual(cpu.RAX, 18446744073709165840L)
        self.assertEqual(cpu.RIP, 4417558L)
        self.assertEqual(cpu.RDX, 4803392L)

    def test_MOVSXD_10(self):
        ''' Instruction MOVSXD_10 
            Groups: mode64 
            0x465cd3:	movsxd	rdx, eax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x00465cd3] = 'H'
        mem[0x00465cd4] = 'c'
        mem[0x00465cd5] = '\xd0'
        cpu.EAX = 0x2e
        cpu.RDX = 0x2f
        cpu.RIP = 0x465cd3
        cpu.execute()
    
        self.assertEqual(mem[0x465cd3], 'H')
        self.assertEqual(mem[0x465cd4], 'c')
        self.assertEqual(mem[0x465cd5], '\xd0')
        self.assertEqual(cpu.EAX, 46L)
        self.assertEqual(cpu.RDX, 46L)
        self.assertEqual(cpu.RIP, 4611286L)

    def test_MOVSXD_11(self):
        ''' Instruction MOVSXD_11 
            Groups: mode64 
            0x436812:	movsxd	rax, dword ptr [rdx + rax*4]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00436812] = 'H'
        mem[0x00436813] = 'c'
        mem[0x00494b74] = '\xa8'
        mem[0x00436815] = '\x82'
        mem[0x00494b76] = '\xfa'
        mem[0x00494b77] = '\xff'
        mem[0x00436814] = '\x04'
        mem[0x00494b75] = '\x1d'
        cpu.RIP = 0x436812
        cpu.RAX = 0xd
        cpu.RDX = 0x494b40
        cpu.execute()
    
        self.assertEqual(mem[0x436812], 'H')
        self.assertEqual(mem[0x436813], 'c')
        self.assertEqual(mem[0x494b74], '\xa8')
        self.assertEqual(mem[0x436815], '\x82')
        self.assertEqual(mem[0x494b76], '\xfa')
        self.assertEqual(mem[0x494b77], '\xff')
        self.assertEqual(mem[0x436814], '\x04')
        self.assertEqual(mem[0x494b75], '\x1d')
        self.assertEqual(cpu.RAX, 18446744073709165992L)
        self.assertEqual(cpu.RIP, 4417558L)
        self.assertEqual(cpu.RDX, 4803392L)

    def test_MOVSXD_12(self):
        ''' Instruction MOVSXD_12 
            Groups: mode64 
            0x436c32:	movsxd	rdx, eax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436c32] = 'H'
        mem[0x00436c33] = 'c'
        mem[0x00436c34] = '\xd0'
        cpu.EAX = 0x2
        cpu.RDX = 0x6b7810
        cpu.RIP = 0x436c32
        cpu.execute()
    
        self.assertEqual(mem[0x436c32], 'H')
        self.assertEqual(mem[0x436c33], 'c')
        self.assertEqual(mem[0x436c34], '\xd0')
        self.assertEqual(cpu.EAX, 2L)
        self.assertEqual(cpu.RDX, 2L)
        self.assertEqual(cpu.RIP, 4418613L)

    def test_MOVSXD_13(self):
        ''' Instruction MOVSXD_13 
            Groups: mode64 
            0x465cd3:	movsxd	rdx, eax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x00465cd3] = 'H'
        mem[0x00465cd4] = 'c'
        mem[0x00465cd5] = '\xd0'
        cpu.EAX = 0x31
        cpu.RDX = 0x32
        cpu.RIP = 0x465cd3
        cpu.execute()
    
        self.assertEqual(mem[0x465cd3], 'H')
        self.assertEqual(mem[0x465cd4], 'c')
        self.assertEqual(mem[0x465cd5], '\xd0')
        self.assertEqual(cpu.EAX, 49L)
        self.assertEqual(cpu.RDX, 49L)
        self.assertEqual(cpu.RIP, 4611286L)

    def test_MOVSXD_14(self):
        ''' Instruction MOVSXD_14 
            Groups: mode64 
            0x436ce0:	movsxd	rdx, eax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436ce0] = 'H'
        mem[0x00436ce1] = 'c'
        mem[0x00436ce2] = '\xd0'
        cpu.EAX = 0x3
        cpu.RDX = 0x6b7820
        cpu.RIP = 0x436ce0
        cpu.execute()
    
        self.assertEqual(mem[0x436ce0], 'H')
        self.assertEqual(mem[0x436ce1], 'c')
        self.assertEqual(mem[0x436ce2], '\xd0')
        self.assertEqual(cpu.EAX, 3L)
        self.assertEqual(cpu.RDX, 3L)
        self.assertEqual(cpu.RIP, 4418787L)

    def test_MOVSXD_15(self):
        ''' Instruction MOVSXD_15 
            Groups: mode64 
            0x436812:	movsxd	rax, dword ptr [rdx + rax*4]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00436812] = 'H'
        mem[0x00436813] = 'c'
        mem[0x00436814] = '\x04'
        mem[0x00436815] = '\x82'
        mem[0x00494b48] = '0'
        mem[0x00494b49] = '\x1d'
        mem[0x00494b4a] = '\xfa'
        mem[0x00494b4b] = '\xff'
        cpu.RIP = 0x436812
        cpu.RAX = 0x2
        cpu.RDX = 0x494b40
        cpu.execute()
    
        self.assertEqual(mem[0x436812], 'H')
        self.assertEqual(mem[0x436813], 'c')
        self.assertEqual(mem[0x436814], '\x04')
        self.assertEqual(mem[0x436815], '\x82')
        self.assertEqual(mem[0x494b48], '0')
        self.assertEqual(mem[0x494b49], '\x1d')
        self.assertEqual(mem[0x494b4a], '\xfa')
        self.assertEqual(mem[0x494b4b], '\xff')
        self.assertEqual(cpu.RAX, 18446744073709165872L)
        self.assertEqual(cpu.RIP, 4417558L)
        self.assertEqual(cpu.RDX, 4803392L)

    def test_MOVSXD_16(self):
        ''' Instruction MOVSXD_16 
            Groups: mode64 
            0x436bfc:	movsxd	rdx, eax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436bfc] = 'H'
        mem[0x00436bfd] = 'c'
        mem[0x00436bfe] = '\xd0'
        cpu.EAX = 0x1
        cpu.RDX = 0x4
        cpu.RIP = 0x436bfc
        cpu.execute()
    
        self.assertEqual(mem[0x436bfc], 'H')
        self.assertEqual(mem[0x436bfd], 'c')
        self.assertEqual(mem[0x436bfe], '\xd0')
        self.assertEqual(cpu.EAX, 1L)
        self.assertEqual(cpu.RDX, 1L)
        self.assertEqual(cpu.RIP, 4418559L)

    def test_MOVSXD_17(self):
        ''' Instruction MOVSXD_17 
            Groups: mode64 
            0x436812:	movsxd	rax, dword ptr [rdx + rax*4]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00436812] = 'H'
        mem[0x00436813] = 'c'
        mem[0x00436814] = '\x04'
        mem[0x00436815] = '\x82'
        mem[0x00494bb8] = '\xe0'
        mem[0x00494bb9] = '\x1c'
        mem[0x00494bba] = '\xfa'
        mem[0x00494bbb] = '\xff'
        cpu.RIP = 0x436812
        cpu.RAX = 0x1e
        cpu.RDX = 0x494b40
        cpu.execute()
    
        self.assertEqual(mem[0x436812], 'H')
        self.assertEqual(mem[0x436813], 'c')
        self.assertEqual(mem[0x436814], '\x04')
        self.assertEqual(mem[0x436815], '\x82')
        self.assertEqual(mem[0x494bb8], '\xe0')
        self.assertEqual(mem[0x494bb9], '\x1c')
        self.assertEqual(mem[0x494bba], '\xfa')
        self.assertEqual(mem[0x494bbb], '\xff')
        self.assertEqual(cpu.RAX, 18446744073709165792L)
        self.assertEqual(cpu.RIP, 4417558L)
        self.assertEqual(cpu.RDX, 4803392L)

    def test_MOVSXD_18(self):
        ''' Instruction MOVSXD_18 
            Groups: mode64 
            0x436812:	movsxd	rax, dword ptr [rdx + rax*4]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00494b50] = '\xf0'
        mem[0x00494b51] = '\x1c'
        mem[0x00494b52] = '\xfa'
        mem[0x00436813] = 'c'
        mem[0x00436814] = '\x04'
        mem[0x00436815] = '\x82'
        mem[0x00494b53] = '\xff'
        mem[0x00436812] = 'H'
        cpu.RIP = 0x436812
        cpu.RAX = 0x4
        cpu.RDX = 0x494b40
        cpu.execute()
    
        self.assertEqual(mem[0x494b50], '\xf0')
        self.assertEqual(mem[0x494b51], '\x1c')
        self.assertEqual(mem[0x436812], 'H')
        self.assertEqual(mem[0x436813], 'c')
        self.assertEqual(mem[0x436814], '\x04')
        self.assertEqual(mem[0x436815], '\x82')
        self.assertEqual(mem[0x494b53], '\xff')
        self.assertEqual(mem[0x494b52], '\xfa')
        self.assertEqual(cpu.RAX, 18446744073709165808L)
        self.assertEqual(cpu.RIP, 4417558L)
        self.assertEqual(cpu.RDX, 4803392L)

    def test_MOVSXD_19(self):
        ''' Instruction MOVSXD_19 
            Groups: mode64 
            0x465cd3:	movsxd	rdx, eax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x00465cd3] = 'H'
        mem[0x00465cd4] = 'c'
        mem[0x00465cd5] = '\xd0'
        cpu.EAX = 0x2f
        cpu.RDX = 0x30
        cpu.RIP = 0x465cd3
        cpu.execute()
    
        self.assertEqual(mem[0x465cd3], 'H')
        self.assertEqual(mem[0x465cd4], 'c')
        self.assertEqual(mem[0x465cd5], '\xd0')
        self.assertEqual(cpu.EAX, 47L)
        self.assertEqual(cpu.RDX, 47L)
        self.assertEqual(cpu.RIP, 4611286L)

    def test_MOVSXD_2(self):
        ''' Instruction MOVSXD_2 
            Groups: mode64 
            0x465cb8:	movsxd	rdx, ebx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x00465cb8] = 'H'
        mem[0x00465cb9] = 'c'
        mem[0x00465cba] = '\xd3'
        cpu.EBX = 0x33
        cpu.RDX = 0x2f
        cpu.RIP = 0x465cb8
        cpu.execute()
    
        self.assertEqual(mem[0x465cb8], 'H')
        self.assertEqual(mem[0x465cb9], 'c')
        self.assertEqual(mem[0x465cba], '\xd3')
        self.assertEqual(cpu.EBX, 51L)
        self.assertEqual(cpu.RDX, 51L)
        self.assertEqual(cpu.RIP, 4611259L)

    def test_MOVSXD_20(self):
        ''' Instruction MOVSXD_20 
            Groups: mode64 
            0x465cd3:	movsxd	rdx, eax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x00465cd3] = 'H'
        mem[0x00465cd4] = 'c'
        mem[0x00465cd5] = '\xd0'
        cpu.EAX = 0x30
        cpu.RDX = 0x31
        cpu.RIP = 0x465cd3
        cpu.execute()
    
        self.assertEqual(mem[0x465cd3], 'H')
        self.assertEqual(mem[0x465cd4], 'c')
        self.assertEqual(mem[0x465cd5], '\xd0')
        self.assertEqual(cpu.EAX, 48L)
        self.assertEqual(cpu.RDX, 48L)
        self.assertEqual(cpu.RIP, 4611286L)

    def test_MOVSXD_21(self):
        ''' Instruction MOVSXD_21 
            Groups: mode64 
            0x465db0:	movsxd	rdx, edx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x00465db0] = 'H'
        mem[0x00465db1] = 'c'
        mem[0x00465db2] = '\xd2'
        cpu.EDX = 0x2a
        cpu.RDX = 0x2a
        cpu.RIP = 0x465db0
        cpu.execute()
    
        self.assertEqual(mem[0x465db0], 'H')
        self.assertEqual(mem[0x465db1], 'c')
        self.assertEqual(mem[0x465db2], '\xd2')
        self.assertEqual(cpu.EDX, 42L)
        self.assertEqual(cpu.RDX, 42L)
        self.assertEqual(cpu.RIP, 4611507L)

    def test_MOVSXD_3(self):
        ''' Instruction MOVSXD_3 
            Groups: mode64 
            0x465cd3:	movsxd	rdx, eax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x00465cd3] = 'H'
        mem[0x00465cd4] = 'c'
        mem[0x00465cd5] = '\xd0'
        cpu.EAX = 0x2a
        cpu.RDX = 0x2b
        cpu.RIP = 0x465cd3
        cpu.execute()
    
        self.assertEqual(mem[0x465cd3], 'H')
        self.assertEqual(mem[0x465cd4], 'c')
        self.assertEqual(mem[0x465cd5], '\xd0')
        self.assertEqual(cpu.EAX, 42L)
        self.assertEqual(cpu.RDX, 42L)
        self.assertEqual(cpu.RIP, 4611286L)

    def test_MOVSXD_4(self):
        ''' Instruction MOVSXD_4 
            Groups: mode64 
            0x465d93:	movsxd	rdi, edi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x00465d93] = 'H'
        mem[0x00465d94] = 'c'
        mem[0x00465d95] = '\xff'
        cpu.EDI = 0x2c
        cpu.RDI = 0x2c
        cpu.RIP = 0x465d93
        cpu.execute()
    
        self.assertEqual(mem[0x465d93], 'H')
        self.assertEqual(mem[0x465d94], 'c')
        self.assertEqual(mem[0x465d95], '\xff')
        self.assertEqual(cpu.EDI, 44L)
        self.assertEqual(cpu.RDI, 44L)
        self.assertEqual(cpu.RIP, 4611478L)

    def test_MOVSXD_5(self):
        ''' Instruction MOVSXD_5 
            Groups: mode64 
            0x436812:	movsxd	rax, dword ptr [rdx + rax*4]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00494b70] = '\xf0'
        mem[0x00494b71] = '\x1c'
        mem[0x00494b72] = '\xfa'
        mem[0x00436813] = 'c'
        mem[0x00436814] = '\x04'
        mem[0x00436815] = '\x82'
        mem[0x00494b73] = '\xff'
        mem[0x00436812] = 'H'
        cpu.RIP = 0x436812
        cpu.RAX = 0xc
        cpu.RDX = 0x494b40
        cpu.execute()
    
        self.assertEqual(mem[0x494b70], '\xf0')
        self.assertEqual(mem[0x494b71], '\x1c')
        self.assertEqual(mem[0x436812], 'H')
        self.assertEqual(mem[0x436813], 'c')
        self.assertEqual(mem[0x436814], '\x04')
        self.assertEqual(mem[0x436815], '\x82')
        self.assertEqual(mem[0x494b73], '\xff')
        self.assertEqual(mem[0x494b72], '\xfa')
        self.assertEqual(cpu.RAX, 18446744073709165808L)
        self.assertEqual(cpu.RIP, 4417558L)
        self.assertEqual(cpu.RDX, 4803392L)

    def test_MOVSXD_6(self):
        ''' Instruction MOVSXD_6 
            Groups: mode64 
            0x465cd3:	movsxd	rdx, eax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x00465cd3] = 'H'
        mem[0x00465cd4] = 'c'
        mem[0x00465cd5] = '\xd0'
        cpu.EAX = 0x2c
        cpu.RDX = 0x2d
        cpu.RIP = 0x465cd3
        cpu.execute()
    
        self.assertEqual(mem[0x465cd3], 'H')
        self.assertEqual(mem[0x465cd4], 'c')
        self.assertEqual(mem[0x465cd5], '\xd0')
        self.assertEqual(cpu.EAX, 44L)
        self.assertEqual(cpu.RDX, 44L)
        self.assertEqual(cpu.RIP, 4611286L)

    def test_MOVSXD_7(self):
        ''' Instruction MOVSXD_7 
            Groups: mode64 
            0x465cd3:	movsxd	rdx, eax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x00465cd3] = 'H'
        mem[0x00465cd4] = 'c'
        mem[0x00465cd5] = '\xd0'
        cpu.EAX = 0x2d
        cpu.RDX = 0x2e
        cpu.RIP = 0x465cd3
        cpu.execute()
    
        self.assertEqual(mem[0x465cd3], 'H')
        self.assertEqual(mem[0x465cd4], 'c')
        self.assertEqual(mem[0x465cd5], '\xd0')
        self.assertEqual(cpu.EAX, 45L)
        self.assertEqual(cpu.RDX, 45L)
        self.assertEqual(cpu.RIP, 4611286L)

    def test_MOVSXD_8(self):
        ''' Instruction MOVSXD_8 
            Groups: mode64 
            0x432cf1:	movsxd	rsi, edi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432cf1] = 'H'
        mem[0x00432cf2] = 'c'
        mem[0x00432cf3] = '\xf7'
        cpu.EDI = 0x0
        cpu.RSI = 0x0
        cpu.RIP = 0x432cf1
        cpu.execute()
    
        self.assertEqual(mem[0x432cf1], 'H')
        self.assertEqual(mem[0x432cf2], 'c')
        self.assertEqual(mem[0x432cf3], '\xf7')
        self.assertEqual(cpu.EDI, 0L)
        self.assertEqual(cpu.RSI, 0L)
        self.assertEqual(cpu.RIP, 4402420L)

    def test_MOVSXD_9(self):
        ''' Instruction MOVSXD_9 
            Groups: mode64 
            0x4379f0:	movsxd	rax, dword ptr [rdx + rax*4]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x004379f0] = 'H'
        mem[0x004379f1] = 'c'
        mem[0x004379f2] = '\x04'
        mem[0x004379f3] = '\x82'
        mem[0x00494f18] = '\xf2'
        mem[0x00494f19] = '+'
        mem[0x00494f1a] = '\xfa'
        mem[0x00494f1b] = '\xff'
        cpu.RIP = 0x4379f0
        cpu.RAX = 0x22
        cpu.RDX = 0x494e90
        cpu.execute()
    
        self.assertEqual(mem[0x4379f0], 'H')
        self.assertEqual(mem[0x4379f1], 'c')
        self.assertEqual(mem[0x4379f2], '\x04')
        self.assertEqual(mem[0x4379f3], '\x82')
        self.assertEqual(mem[0x494f18], '\xf2')
        self.assertEqual(mem[0x494f19], '+')
        self.assertEqual(mem[0x494f1a], '\xfa')
        self.assertEqual(mem[0x494f1b], '\xff')
        self.assertEqual(cpu.RAX, 18446744073709169650L)
        self.assertEqual(cpu.RIP, 4422132L)
        self.assertEqual(cpu.RDX, 4804240L)

    def test_MOVSX_1(self):
        ''' Instruction MOVSX_1 
            Groups:  
            0x4376bf:	movsx	ecx, byte ptr [rsi]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x004376c0] = '\xbe'
        mem[0x004376c1] = '\x0e'
        mem[0x7fffffffd9e4] = '4'
        mem[0x004376bf] = '\x0f'
        cpu.RSI = 0x7fffffffd9e4
        cpu.RIP = 0x4376bf
        cpu.ECX = 0x4
        cpu.execute()
    
        self.assertEqual(mem[0x4376c0], '\xbe')
        self.assertEqual(mem[0x4376c1], '\x0e')
        self.assertEqual(mem[0x7fffffffd9e4], '4')
        self.assertEqual(mem[0x4376bf], '\x0f')
        self.assertEqual(cpu.RSI, 140737488345572L)
        self.assertEqual(cpu.RIP, 4421314L)
        self.assertEqual(cpu.ECX, 52L)

    def test_MOVSX_2(self):
        ''' Instruction MOVSX_2 
            Groups:  
            0x4376ca:	movsx	edx, byte ptr [rsi + 1]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x004376ca] = '\x0f'
        mem[0x004376cb] = '\xbe'
        mem[0x004376cc] = 'V'
        mem[0x004376cd] = '\x01'
        mem[0x7fffffffd9e3] = '.'
        cpu.EDX = 0x4
        cpu.RSI = 0x7fffffffd9e2
        cpu.RIP = 0x4376ca
        cpu.execute()
    
        self.assertEqual(mem[0x4376ca], '\x0f')
        self.assertEqual(mem[0x4376cb], '\xbe')
        self.assertEqual(mem[0x4376cc], 'V')
        self.assertEqual(mem[0x4376cd], '\x01')
        self.assertEqual(mem[0x7fffffffd9e3], '.')
        self.assertEqual(cpu.EDX, 46L)
        self.assertEqual(cpu.RSI, 140737488345570L)
        self.assertEqual(cpu.RIP, 4421326L)

    def test_MOVSX_3(self):
        ''' Instruction MOVSX_3 
            Groups:  
            0x4376ca:	movsx	edx, byte ptr [rsi + 1]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x004376ca] = '\x0f'
        mem[0x004376cb] = '\xbe'
        mem[0x004376cc] = 'V'
        mem[0x004376cd] = '\x01'
        mem[0x7fffffffd9e7] = '9'
        cpu.EDX = 0x3
        cpu.RSI = 0x7fffffffd9e6
        cpu.RIP = 0x4376ca
        cpu.execute()
    
        self.assertEqual(mem[0x4376ca], '\x0f')
        self.assertEqual(mem[0x4376cb], '\xbe')
        self.assertEqual(mem[0x4376cc], 'V')
        self.assertEqual(mem[0x4376cd], '\x01')
        self.assertEqual(mem[0x7fffffffd9e7], '9')
        self.assertEqual(cpu.EDX, 57L)
        self.assertEqual(cpu.RSI, 140737488345574L)
        self.assertEqual(cpu.RIP, 4421326L)

    def test_MOVSX_4(self):
        ''' Instruction MOVSX_4 
            Groups:  
            0x4376bf:	movsx	ecx, byte ptr [rsi]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x004376c0] = '\xbe'
        mem[0x004376c1] = '\x0e'
        mem[0x7fffffffd9e2] = '4'
        mem[0x004376bf] = '\x0f'
        cpu.RSI = 0x7fffffffd9e2
        cpu.RIP = 0x4376bf
        cpu.ECX = 0x45c2f7
        cpu.execute()
    
        self.assertEqual(mem[0x4376c0], '\xbe')
        self.assertEqual(mem[0x4376c1], '\x0e')
        self.assertEqual(mem[0x7fffffffd9e2], '4')
        self.assertEqual(mem[0x4376bf], '\x0f')
        self.assertEqual(cpu.RSI, 140737488345570L)
        self.assertEqual(cpu.RIP, 4421314L)
        self.assertEqual(cpu.ECX, 52L)

    def test_MOVSX_5(self):
        ''' Instruction MOVSX_5 
            Groups:  
            0x4376eb:	movsx	edx, byte ptr [rdi]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffd9e8] = '-'
        mem[0x004376eb] = '\x0f'
        mem[0x004376ec] = '\xbe'
        mem[0x004376ed] = '\x17'
        cpu.EDX = 0x39
        cpu.RDI = 0x7fffffffd9e8
        cpu.RIP = 0x4376eb
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffd9e8], '-')
        self.assertEqual(mem[0x4376eb], '\x0f')
        self.assertEqual(mem[0x4376ec], '\xbe')
        self.assertEqual(mem[0x4376ed], '\x17')
        self.assertEqual(cpu.EDX, 45L)
        self.assertEqual(cpu.RDI, 140737488345576L)
        self.assertEqual(cpu.RIP, 4421358L)

    def test_MOVSX_6(self):
        ''' Instruction MOVSX_6 
            Groups:  
            0x4376ca:	movsx	edx, byte ptr [rsi + 1]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x004376ca] = '\x0f'
        mem[0x004376cb] = '\xbe'
        mem[0x004376cc] = 'V'
        mem[0x004376cd] = '\x01'
        mem[0x7fffffffd9e5] = '.'
        cpu.EDX = 0x4
        cpu.RSI = 0x7fffffffd9e4
        cpu.RIP = 0x4376ca
        cpu.execute()
    
        self.assertEqual(mem[0x4376ca], '\x0f')
        self.assertEqual(mem[0x4376cb], '\xbe')
        self.assertEqual(mem[0x4376cc], 'V')
        self.assertEqual(mem[0x4376cd], '\x01')
        self.assertEqual(mem[0x7fffffffd9e5], '.')
        self.assertEqual(cpu.EDX, 46L)
        self.assertEqual(cpu.RSI, 140737488345572L)
        self.assertEqual(cpu.RIP, 4421326L)

    def test_MOVSX_7(self):
        ''' Instruction MOVSX_7 
            Groups:  
            0x4376bf:	movsx	ecx, byte ptr [rsi]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x004376c0] = '\xbe'
        mem[0x004376c1] = '\x0e'
        mem[0x7fffffffd9e6] = '3'
        mem[0x004376bf] = '\x0f'
        cpu.RSI = 0x7fffffffd9e6
        cpu.RIP = 0x4376bf
        cpu.ECX = 0x4
        cpu.execute()
    
        self.assertEqual(mem[0x4376c0], '\xbe')
        self.assertEqual(mem[0x4376c1], '\x0e')
        self.assertEqual(mem[0x7fffffffd9e6], '3')
        self.assertEqual(mem[0x4376bf], '\x0f')
        self.assertEqual(cpu.RSI, 140737488345574L)
        self.assertEqual(cpu.RIP, 4421314L)
        self.assertEqual(cpu.ECX, 51L)

    def test_MOVZX_1(self):
        ''' Instruction MOVZX_1 
            Groups:  
            0x400aca:	movzx	eax, dl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400aca] = '\x0f'
        mem[0x00400acb] = '\xb6'
        mem[0x00400acc] = '\xc2'
        cpu.EAX = 0x1e
        cpu.DL = 0x5
        cpu.RIP = 0x400aca
        cpu.execute()
    
        self.assertEqual(mem[0x400aca], '\x0f')
        self.assertEqual(mem[0x400acb], '\xb6')
        self.assertEqual(mem[0x400acc], '\xc2')
        self.assertEqual(cpu.EAX, 5L)
        self.assertEqual(cpu.DL, 5L)
        self.assertEqual(cpu.RIP, 4197069L)

    def test_MOVZX_10(self):
        ''' Instruction MOVZX_10 
            Groups:  
            0x412014:	movzx	ecx, cl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x00412014] = '\x0f'
        mem[0x00412015] = '\xb6'
        mem[0x00412016] = '\xc9'
        cpu.ECX = 0x6b9800
        cpu.RIP = 0x412014
        cpu.CL = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x412014], '\x0f')
        self.assertEqual(mem[0x412015], '\xb6')
        self.assertEqual(mem[0x412016], '\xc9')
        self.assertEqual(cpu.CL, 0L)
        self.assertEqual(cpu.RIP, 4268055L)
        self.assertEqual(cpu.ECX, 0L)

    def test_MOVZX_11(self):
        ''' Instruction MOVZX_11 
            Groups:  
            0x400b08:	movzx	eax, byte ptr [rbp + rax - 0x10]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdb01] = '\xd8'
        mem[0x00400b08] = '\x0f'
        mem[0x00400b09] = '\xb6'
        mem[0x00400b0a] = 'D'
        mem[0x00400b0b] = '\x05'
        mem[0x00400b0c] = '\xf0'
        cpu.EAX = 0x1
        cpu.RIP = 0x400b08
        cpu.RAX = 0x1
        cpu.RBP = 0x7fffffffdb10
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdb01], '\xd8')
        self.assertEqual(mem[0x400b08], '\x0f')
        self.assertEqual(mem[0x400b09], '\xb6')
        self.assertEqual(mem[0x400b0a], 'D')
        self.assertEqual(mem[0x400b0b], '\x05')
        self.assertEqual(mem[0x400b0c], '\xf0')
        self.assertEqual(cpu.EAX, 216L)
        self.assertEqual(cpu.RAX, 216L)
        self.assertEqual(cpu.RIP, 4197133L)
        self.assertEqual(cpu.RBP, 140737488345872L)

    def test_MOVZX_12(self):
        ''' Instruction MOVZX_12 
            Groups:  
            0x406e64:	movzx	r14d, word ptr [r13]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00406e64] = 'E'
        mem[0x00406e65] = '\x0f'
        mem[0x00406e66] = '\xb7'
        mem[0x00406e67] = 'u'
        mem[0x00406e68] = '\x00'
        mem[0x00494d76] = 'L'
        mem[0x00494d77] = 'D'
        cpu.R14D = 0x0
        cpu.R13 = 0x494d76
        cpu.RIP = 0x406e64
        cpu.execute()
    
        self.assertEqual(mem[0x406e64], 'E')
        self.assertEqual(mem[0x406e65], '\x0f')
        self.assertEqual(mem[0x406e66], '\xb7')
        self.assertEqual(mem[0x406e67], 'u')
        self.assertEqual(mem[0x406e68], '\x00')
        self.assertEqual(mem[0x494d76], 'L')
        self.assertEqual(mem[0x494d77], 'D')
        self.assertEqual(cpu.R14D, 17484L)
        self.assertEqual(cpu.R13, 4803958L)
        self.assertEqual(cpu.RIP, 4222569L)

    def test_MOVZX_13(self):
        ''' Instruction MOVZX_13 
            Groups:  
            0x412014:	movzx	ecx, cl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x00412014] = '\x0f'
        mem[0x00412015] = '\xb6'
        mem[0x00412016] = '\xc9'
        cpu.ECX = 0x6b9800
        cpu.RIP = 0x412014
        cpu.CL = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x412014], '\x0f')
        self.assertEqual(mem[0x412015], '\xb6')
        self.assertEqual(mem[0x412016], '\xc9')
        self.assertEqual(cpu.CL, 0L)
        self.assertEqual(cpu.RIP, 4268055L)
        self.assertEqual(cpu.ECX, 0L)

    def test_MOVZX_14(self):
        ''' Instruction MOVZX_14 
            Groups:  
            0x400ad9:	movzx	eax, byte ptr [rbp + rax - 0x10]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdb01] = '\xfb'
        mem[0x00400ad9] = '\x0f'
        mem[0x00400ada] = '\xb6'
        mem[0x00400adb] = 'D'
        mem[0x00400adc] = '\x05'
        mem[0x00400add] = '\xf0'
        cpu.EAX = 0x1
        cpu.RIP = 0x400ad9
        cpu.RAX = 0x1
        cpu.RBP = 0x7fffffffdb10
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdb01], '\xfb')
        self.assertEqual(mem[0x400ad9], '\x0f')
        self.assertEqual(mem[0x400ada], '\xb6')
        self.assertEqual(mem[0x400adb], 'D')
        self.assertEqual(mem[0x400adc], '\x05')
        self.assertEqual(mem[0x400add], '\xf0')
        self.assertEqual(cpu.EAX, 251L)
        self.assertEqual(cpu.RAX, 251L)
        self.assertEqual(cpu.RIP, 4197086L)
        self.assertEqual(cpu.RBP, 140737488345872L)

    def test_MOVZX_15(self):
        ''' Instruction MOVZX_15 
            Groups:  
            0x406e64:	movzx	r14d, word ptr [r13]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00494d82] = 'L'
        mem[0x00494d83] = 'D'
        mem[0x00406e64] = 'E'
        mem[0x00406e65] = '\x0f'
        mem[0x00406e66] = '\xb7'
        mem[0x00406e67] = 'u'
        mem[0x00406e68] = '\x00'
        cpu.R14D = 0x0
        cpu.R13 = 0x494d82
        cpu.RIP = 0x406e64
        cpu.execute()
    
        self.assertEqual(mem[0x494d82], 'L')
        self.assertEqual(mem[0x494d83], 'D')
        self.assertEqual(mem[0x406e64], 'E')
        self.assertEqual(mem[0x406e65], '\x0f')
        self.assertEqual(mem[0x406e66], '\xb7')
        self.assertEqual(mem[0x406e67], 'u')
        self.assertEqual(mem[0x406e68], '\x00')
        self.assertEqual(cpu.R14D, 17484L)
        self.assertEqual(cpu.R13, 4803970L)
        self.assertEqual(cpu.RIP, 4222569L)

    def test_MOVZX_16(self):
        ''' Instruction MOVZX_16 
            Groups:  
            0x406e0e:	movzx	eax, byte ptr [r13]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00494d66] = 'L'
        mem[0x00406e0e] = 'A'
        mem[0x00406e0f] = '\x0f'
        mem[0x00406e10] = '\xb6'
        mem[0x00406e11] = 'E'
        mem[0x00406e12] = '\x00'
        cpu.EAX = 0x6bb828
        cpu.R13 = 0x494d66
        cpu.RIP = 0x406e0e
        cpu.execute()
    
        self.assertEqual(mem[0x494d66], 'L')
        self.assertEqual(mem[0x406e0e], 'A')
        self.assertEqual(mem[0x406e0f], '\x0f')
        self.assertEqual(mem[0x406e10], '\xb6')
        self.assertEqual(mem[0x406e11], 'E')
        self.assertEqual(mem[0x406e12], '\x00')
        self.assertEqual(cpu.EAX, 76L)
        self.assertEqual(cpu.R13, 4803942L)
        self.assertEqual(cpu.RIP, 4222483L)

    def test_MOVZX_17(self):
        ''' Instruction MOVZX_17 
            Groups:  
            0x43259e:	movzx	edi, al
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004325a0] = '\xf8'
        mem[0x0043259e] = '\x0f'
        mem[0x0043259f] = '\xb6'
        cpu.EDI = 0xc2
        cpu.AL = 0x1
        cpu.RIP = 0x43259e
        cpu.execute()
    
        self.assertEqual(mem[0x4325a0], '\xf8')
        self.assertEqual(mem[0x43259e], '\x0f')
        self.assertEqual(mem[0x43259f], '\xb6')
        self.assertEqual(cpu.EDI, 1L)
        self.assertEqual(cpu.AL, 1L)
        self.assertEqual(cpu.RIP, 4400545L)

    def test_MOVZX_18(self):
        ''' Instruction MOVZX_18 
            Groups:  
            0x406e64:	movzx	r14d, word ptr [r13]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00494d06] = 'D'
        mem[0x00406e64] = 'E'
        mem[0x00494d05] = 'L'
        mem[0x00406e66] = '\xb7'
        mem[0x00406e67] = 'u'
        mem[0x00406e68] = '\x00'
        mem[0x00406e65] = '\x0f'
        cpu.R14D = 0x0
        cpu.R13 = 0x494d05
        cpu.RIP = 0x406e64
        cpu.execute()
    
        self.assertEqual(mem[0x494d06], 'D')
        self.assertEqual(mem[0x406e64], 'E')
        self.assertEqual(mem[0x494d05], 'L')
        self.assertEqual(mem[0x406e66], '\xb7')
        self.assertEqual(mem[0x406e67], 'u')
        self.assertEqual(mem[0x406e68], '\x00')
        self.assertEqual(mem[0x406e65], '\x0f')
        self.assertEqual(cpu.R14D, 17484L)
        self.assertEqual(cpu.R13, 4803845L)
        self.assertEqual(cpu.RIP, 4222569L)

    def test_MOVZX_19(self):
        ''' Instruction MOVZX_19 
            Groups:  
            0x406e0e:	movzx	eax, byte ptr [r13]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00406e0e] = 'A'
        mem[0x00406e0f] = '\x0f'
        mem[0x00406e10] = '\xb6'
        mem[0x00406e11] = 'E'
        mem[0x00406e12] = '\x00'
        mem[0x00494d9e] = 'L'
        cpu.EAX = 0x6bb828
        cpu.R13 = 0x494d9e
        cpu.RIP = 0x406e0e
        cpu.execute()
    
        self.assertEqual(mem[0x406e0e], 'A')
        self.assertEqual(mem[0x406e0f], '\x0f')
        self.assertEqual(mem[0x406e10], '\xb6')
        self.assertEqual(mem[0x406e11], 'E')
        self.assertEqual(mem[0x406e12], '\x00')
        self.assertEqual(mem[0x494d9e], 'L')
        self.assertEqual(cpu.EAX, 76L)
        self.assertEqual(cpu.R13, 4803998L)
        self.assertEqual(cpu.RIP, 4222483L)

    def test_MOVZX_2(self):
        ''' Instruction MOVZX_2 
            Groups:  
            0x432238:	movzx	r10d, sil
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432238] = 'D'
        mem[0x00432239] = '\x0f'
        mem[0x0043223a] = '\xb6'
        mem[0x0043223b] = '\xd6'
        cpu.R10D = 0x1
        cpu.RIP = 0x432238
        cpu.SIL = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x432238], 'D')
        self.assertEqual(mem[0x432239], '\x0f')
        self.assertEqual(mem[0x43223a], '\xb6')
        self.assertEqual(mem[0x43223b], '\xd6')
        self.assertEqual(cpu.SIL, 0L)
        self.assertEqual(cpu.RIP, 4399676L)
        self.assertEqual(cpu.R10D, 0L)

    def test_MOVZX_20(self):
        ''' Instruction MOVZX_20 
            Groups:  
            0x400b0d:	movzx	eax, al
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b0d] = '\x0f'
        mem[0x00400b0e] = '\xb6'
        mem[0x00400b0f] = '\xc0'
        cpu.EAX = 0x9b
        cpu.AL = 0x9b
        cpu.RIP = 0x400b0d
        cpu.execute()
    
        self.assertEqual(mem[0x400b0d], '\x0f')
        self.assertEqual(mem[0x400b0e], '\xb6')
        self.assertEqual(mem[0x400b0f], '\xc0')
        self.assertEqual(cpu.EAX, 155L)
        self.assertEqual(cpu.AL, 155L)
        self.assertEqual(cpu.RIP, 4197136L)

    def test_MOVZX_21(self):
        ''' Instruction MOVZX_21 
            Groups:  
            0x432238:	movzx	r10d, sil
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432238] = 'D'
        mem[0x00432239] = '\x0f'
        mem[0x0043223a] = '\xb6'
        mem[0x0043223b] = '\xd6'
        cpu.R10D = 0x3
        cpu.RIP = 0x432238
        cpu.SIL = 0x76
        cpu.execute()
    
        self.assertEqual(mem[0x432238], 'D')
        self.assertEqual(mem[0x432239], '\x0f')
        self.assertEqual(mem[0x43223a], '\xb6')
        self.assertEqual(mem[0x43223b], '\xd6')
        self.assertEqual(cpu.SIL, 118L)
        self.assertEqual(cpu.RIP, 4399676L)
        self.assertEqual(cpu.R10D, 118L)

    def test_MOVZX_3(self):
        ''' Instruction MOVZX_3 
            Groups:  
            0x465c9b:	movzx	edx, byte ptr [rbp - 0x1020]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x00465ca0] = '\xff'
        mem[0x00465ca1] = '\xff'
        mem[0x7fffffffca70] = '/'
        mem[0x00465c9b] = '\x0f'
        mem[0x00465c9c] = '\xb6'
        mem[0x00465c9d] = '\x95'
        mem[0x00465c9e] = '\xe0'
        mem[0x00465c9f] = '\xef'
        cpu.EDX = 0x1000
        cpu.RIP = 0x465c9b
        cpu.RBP = 0x7fffffffda90
        cpu.execute()
    
        self.assertEqual(mem[0x465ca0], '\xff')
        self.assertEqual(mem[0x465ca1], '\xff')
        self.assertEqual(mem[0x7fffffffca70], '/')
        self.assertEqual(mem[0x465c9b], '\x0f')
        self.assertEqual(mem[0x465c9c], '\xb6')
        self.assertEqual(mem[0x465c9d], '\x95')
        self.assertEqual(mem[0x465c9e], '\xe0')
        self.assertEqual(mem[0x465c9f], '\xef')
        self.assertEqual(cpu.EDX, 47L)
        self.assertEqual(cpu.RIP, 4611234L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_MOVZX_4(self):
        ''' Instruction MOVZX_4 
            Groups:  
            0x436a63:	movzx	esi, word ptr [rcx + 0x38]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x7ffff7ffd000, 0x1000, 'rwx')
        mem[0x00436a63] = '\x0f'
        mem[0x00436a64] = '\xb7'
        mem[0x00436a65] = 'q'
        mem[0x00436a66] = '8'
        mem[0x7ffff7ffd038] = '\x04'
        mem[0x7ffff7ffd039] = '\x00'
        cpu.RCX = 0x7ffff7ffd000
        cpu.RIP = 0x436a63
        cpu.ESI = 0x6bf4c8
        cpu.execute()
    
        self.assertEqual(mem[0x436a63], '\x0f')
        self.assertEqual(mem[0x436a64], '\xb7')
        self.assertEqual(mem[0x436a65], 'q')
        self.assertEqual(mem[0x436a66], '8')
        self.assertEqual(mem[0x7ffff7ffd038], '\x04')
        self.assertEqual(mem[0x7ffff7ffd039], '\x00')
        self.assertEqual(cpu.RCX, 140737354125312L)
        self.assertEqual(cpu.ESI, 4L)
        self.assertEqual(cpu.RIP, 4418151L)

    def test_MOVZX_5(self):
        ''' Instruction MOVZX_5 
            Groups:  
            0x406e64:	movzx	r14d, word ptr [r13]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00406e64] = 'E'
        mem[0x00406e65] = '\x0f'
        mem[0x00406e66] = '\xb7'
        mem[0x00406e67] = 'u'
        mem[0x00406e68] = '\x00'
        mem[0x00494d8e] = 'L'
        mem[0x00494d8f] = 'D'
        cpu.R14D = 0x0
        cpu.R13 = 0x494d8e
        cpu.RIP = 0x406e64
        cpu.execute()
    
        self.assertEqual(mem[0x406e64], 'E')
        self.assertEqual(mem[0x406e65], '\x0f')
        self.assertEqual(mem[0x406e66], '\xb7')
        self.assertEqual(mem[0x406e67], 'u')
        self.assertEqual(mem[0x406e68], '\x00')
        self.assertEqual(mem[0x494d8e], 'L')
        self.assertEqual(mem[0x494d8f], 'D')
        self.assertEqual(cpu.R14D, 17484L)
        self.assertEqual(cpu.R13, 4803982L)
        self.assertEqual(cpu.RIP, 4222569L)

    def test_MOVZX_6(self):
        ''' Instruction MOVZX_6 
            Groups:  
            0x400834:	movzx	ebx, bl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400834] = '\x0f'
        mem[0x00400835] = '\xb6'
        mem[0x00400836] = '\xdb'
        cpu.BL = 0x8
        cpu.EBX = 0x8
        cpu.RIP = 0x400834
        cpu.execute()
    
        self.assertEqual(mem[0x400834], '\x0f')
        self.assertEqual(mem[0x400835], '\xb6')
        self.assertEqual(mem[0x400836], '\xdb')
        self.assertEqual(cpu.BL, 8L)
        self.assertEqual(cpu.EBX, 8L)
        self.assertEqual(cpu.RIP, 4196407L)

    def test_MOVZX_7(self):
        ''' Instruction MOVZX_7 
            Groups:  
            0x400aca:	movzx	eax, dl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400aca] = '\x0f'
        mem[0x00400acb] = '\xb6'
        mem[0x00400acc] = '\xc2'
        cpu.EAX = 0xf6
        cpu.DL = 0x5
        cpu.RIP = 0x400aca
        cpu.execute()
    
        self.assertEqual(mem[0x400aca], '\x0f')
        self.assertEqual(mem[0x400acb], '\xb6')
        self.assertEqual(mem[0x400acc], '\xc2')
        self.assertEqual(cpu.EAX, 5L)
        self.assertEqual(cpu.DL, 5L)
        self.assertEqual(cpu.RIP, 4197069L)

    def test_MOVZX_8(self):
        ''' Instruction MOVZX_8 
            Groups:  
            0x462349:	movzx	eax, byte ptr [r14 + 0x314]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, 'rwx')
        mem.mmap(0x006bf000, 0x1000, 'rwx')
        mem[0x00462350] = '\x00'
        mem[0x006bf524] = '\x00'
        mem[0x00462349] = 'A'
        mem[0x0046234a] = '\x0f'
        mem[0x0046234b] = '\xb6'
        mem[0x0046234c] = '\x86'
        mem[0x0046234d] = '\x14'
        mem[0x0046234e] = '\x03'
        mem[0x0046234f] = '\x00'
        cpu.EAX = 0x4a5301
        cpu.R14 = 0x6bf210
        cpu.RIP = 0x462349
        cpu.execute()
    
        self.assertEqual(mem[0x462350], '\x00')
        self.assertEqual(mem[0x6bf524], '\x00')
        self.assertEqual(mem[0x462349], 'A')
        self.assertEqual(mem[0x46234a], '\x0f')
        self.assertEqual(mem[0x46234b], '\xb6')
        self.assertEqual(mem[0x46234c], '\x86')
        self.assertEqual(mem[0x46234d], '\x14')
        self.assertEqual(mem[0x46234e], '\x03')
        self.assertEqual(mem[0x46234f], '\x00')
        self.assertEqual(cpu.EAX, 0L)
        self.assertEqual(cpu.R14, 7074320L)
        self.assertEqual(cpu.RIP, 4596561L)

    def test_MOVZX_9(self):
        ''' Instruction MOVZX_9 
            Groups:  
            0x406e0e:	movzx	eax, byte ptr [r13]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00494d05] = 'L'
        mem[0x00406e0e] = 'A'
        mem[0x00406e0f] = '\x0f'
        mem[0x00406e10] = '\xb6'
        mem[0x00406e11] = 'E'
        mem[0x00406e12] = '\x00'
        cpu.EAX = 0x6bb828
        cpu.R13 = 0x494d05
        cpu.RIP = 0x406e0e
        cpu.execute()
    
        self.assertEqual(mem[0x494d05], 'L')
        self.assertEqual(mem[0x406e0e], 'A')
        self.assertEqual(mem[0x406e0f], '\x0f')
        self.assertEqual(mem[0x406e10], '\xb6')
        self.assertEqual(mem[0x406e11], 'E')
        self.assertEqual(mem[0x406e12], '\x00')
        self.assertEqual(cpu.EAX, 76L)
        self.assertEqual(cpu.R13, 4803845L)
        self.assertEqual(cpu.RIP, 4222483L)

    def test_MOV_1(self):
        ''' Instruction MOV_1 
            Groups:  
            0x40d922:	mov	qword ptr [rip + 0x2ade07], rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem.mmap(0x006bb000, 0x1000, 'rwx')
        mem[0x0040d922] = 'H'
        mem[0x0040d923] = '\x89'
        mem[0x0040d924] = '\x1d'
        mem[0x0040d925] = '\x07'
        mem[0x0040d926] = '\xde'
        mem[0x0040d927] = '*'
        mem[0x0040d928] = '\x00'
        mem[0x006bb730] = '\x00'
        mem[0x006bb731] = '\x00'
        mem[0x006bb732] = '\x00'
        mem[0x006bb733] = '\x00'
        mem[0x006bb734] = '\x00'
        mem[0x006bb735] = '\x00'
        mem[0x006bb736] = '\x00'
        mem[0x006bb737] = '\x00'
        cpu.RIP = 0x40d922
        cpu.RBX = 0x6b9280
        cpu.execute()
    
        self.assertEqual(mem[0x40d922], 'H')
        self.assertEqual(mem[0x40d923], '\x89')
        self.assertEqual(mem[0x40d924], '\x1d')
        self.assertEqual(mem[0x40d925], '\x07')
        self.assertEqual(mem[0x40d926], '\xde')
        self.assertEqual(mem[0x40d927], '*')
        self.assertEqual(mem[0x40d928], '\x00')
        self.assertEqual(mem[0x6bb730], '\x80')
        self.assertEqual(mem[0x6bb731], '\x92')
        self.assertEqual(mem[0x6bb732], 'k')
        self.assertEqual(mem[0x6bb733], '\x00')
        self.assertEqual(mem[0x6bb734], '\x00')
        self.assertEqual(mem[0x6bb735], '\x00')
        self.assertEqual(mem[0x6bb736], '\x00')
        self.assertEqual(mem[0x6bb737], '\x00')
        self.assertEqual(cpu.RIP, 4249897L)
        self.assertEqual(cpu.RBX, 7049856L)

    def test_MOV_10(self):
        ''' Instruction MOV_10 
            Groups:  
            0x411bef:	mov	rax, qword ptr [rdx + 8]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x006bf000, 0x1000, 'rwx')
        mem[0x00411bef] = 'H'
        mem[0x00411bf0] = '\x8b'
        mem[0x00411bf1] = 'B'
        mem[0x00411bf2] = '\x08'
        mem[0x006bf6f8] = '\x11'
        mem[0x006bf6f9] = '\x19'
        mem[0x006bf6fa] = '\x02'
        mem[0x006bf6fb] = '\x00'
        mem[0x006bf6fc] = '\x00'
        mem[0x006bf6fd] = '\x00'
        mem[0x006bf6fe] = '\x00'
        mem[0x006bf6ff] = '\x00'
        cpu.RIP = 0x411bef
        cpu.RAX = 0x8
        cpu.RDX = 0x6bf6f0
        cpu.execute()
    
        self.assertEqual(mem[0x411bef], 'H')
        self.assertEqual(mem[0x411bf0], '\x8b')
        self.assertEqual(mem[0x411bf1], 'B')
        self.assertEqual(mem[0x411bf2], '\x08')
        self.assertEqual(mem[0x6bf6f8], '\x11')
        self.assertEqual(mem[0x6bf6f9], '\x19')
        self.assertEqual(mem[0x6bf6fa], '\x02')
        self.assertEqual(mem[0x6bf6fb], '\x00')
        self.assertEqual(mem[0x6bf6fc], '\x00')
        self.assertEqual(mem[0x6bf6fd], '\x00')
        self.assertEqual(mem[0x6bf6fe], '\x00')
        self.assertEqual(mem[0x6bf6ff], '\x00')
        self.assertEqual(cpu.RAX, 137489L)
        self.assertEqual(cpu.RIP, 4266995L)
        self.assertEqual(cpu.RDX, 7075568L)

    def test_MOV_11(self):
        ''' Instruction MOV_11 
            Groups:  
            0x4012f0:	mov	rax, r14
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x004012f0] = 'L'
        mem[0x004012f1] = '\x89'
        mem[0x004012f2] = '\xf0'
        cpu.R14 = 0x2
        cpu.RIP = 0x4012f0
        cpu.RAX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x4012f0], 'L')
        self.assertEqual(mem[0x4012f1], '\x89')
        self.assertEqual(mem[0x4012f2], '\xf0')
        self.assertEqual(cpu.R14, 2L)
        self.assertEqual(cpu.RAX, 2L)
        self.assertEqual(cpu.RIP, 4199155L)

    def test_MOV_12(self):
        ''' Instruction MOV_12 
            Groups:  
            0x406e84:	mov	rbx, qword ptr [r12]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x00406e84] = 'I'
        mem[0x00406e85] = '\x8b'
        mem[0x00406e86] = '\x1c'
        mem[0x00406e87] = '$'
        mem[0x7fffffffdc90] = '\xbd'
        mem[0x7fffffffdc91] = '\xe1'
        mem[0x7fffffffdc92] = '\xff'
        mem[0x7fffffffdc93] = '\xff'
        mem[0x7fffffffdc94] = '\xff'
        mem[0x7fffffffdc95] = '\x7f'
        mem[0x7fffffffdc96] = '\x00'
        mem[0x7fffffffdc97] = '\x00'
        cpu.R12 = 0x7fffffffdc90
        cpu.RIP = 0x406e84
        cpu.RBX = 0x7fffffffe19d
        cpu.execute()
    
        self.assertEqual(mem[0x406e84], 'I')
        self.assertEqual(mem[0x406e85], '\x8b')
        self.assertEqual(mem[0x406e86], '\x1c')
        self.assertEqual(mem[0x406e87], '$')
        self.assertEqual(mem[0x7fffffffdc90], '\xbd')
        self.assertEqual(mem[0x7fffffffdc91], '\xe1')
        self.assertEqual(mem[0x7fffffffdc92], '\xff')
        self.assertEqual(mem[0x7fffffffdc93], '\xff')
        self.assertEqual(mem[0x7fffffffdc94], '\xff')
        self.assertEqual(mem[0x7fffffffdc95], '\x7f')
        self.assertEqual(mem[0x7fffffffdc96], '\x00')
        self.assertEqual(mem[0x7fffffffdc97], '\x00')
        self.assertEqual(cpu.R12, 140737488346256L)
        self.assertEqual(cpu.RIP, 4222600L)
        self.assertEqual(cpu.RBX, 140737488347581L)

    def test_MOV_13(self):
        ''' Instruction MOV_13 
            Groups:  
            0x4323ca:	mov	edx, eax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004323ca] = '\x89'
        mem[0x004323cb] = '\xc2'
        cpu.EAX = 0x1c004122
        cpu.EDX = 0x0
        cpu.RIP = 0x4323ca
        cpu.execute()
    
        self.assertEqual(mem[0x4323ca], '\x89')
        self.assertEqual(mem[0x4323cb], '\xc2')
        self.assertEqual(cpu.EAX, 469778722L)
        self.assertEqual(cpu.EDX, 469778722L)
        self.assertEqual(cpu.RIP, 4400076L)

    def test_MOV_14(self):
        ''' Instruction MOV_14 
            Groups:  
            0x464494:	mov	rax, qword ptr [rbp - 0x60]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00464000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda00] = '\xd0'
        mem[0x7fffffffda01] = '\xf6'
        mem[0x7fffffffda02] = 'k'
        mem[0x7fffffffda03] = '\x00'
        mem[0x7fffffffda04] = '\x00'
        mem[0x7fffffffda05] = '\x00'
        mem[0x7fffffffda06] = '\x00'
        mem[0x7fffffffda07] = '\x00'
        mem[0x00464494] = 'H'
        mem[0x00464495] = '\x8b'
        mem[0x00464496] = 'E'
        mem[0x00464497] = '\xa0'
        cpu.RIP = 0x464494
        cpu.RAX = 0x6bf6d0
        cpu.RBP = 0x7fffffffda60
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda00], '\xd0')
        self.assertEqual(mem[0x7fffffffda01], '\xf6')
        self.assertEqual(mem[0x7fffffffda02], 'k')
        self.assertEqual(mem[0x7fffffffda03], '\x00')
        self.assertEqual(mem[0x7fffffffda04], '\x00')
        self.assertEqual(mem[0x7fffffffda05], '\x00')
        self.assertEqual(mem[0x7fffffffda06], '\x00')
        self.assertEqual(mem[0x7fffffffda07], '\x00')
        self.assertEqual(mem[0x464494], 'H')
        self.assertEqual(mem[0x464495], '\x8b')
        self.assertEqual(mem[0x464496], 'E')
        self.assertEqual(mem[0x464497], '\xa0')
        self.assertEqual(cpu.RAX, 7075536L)
        self.assertEqual(cpu.RIP, 4605080L)
        self.assertEqual(cpu.RBP, 140737488345696L)

    def test_MOV_15(self):
        ''' Instruction MOV_15 
            Groups:  
            0x4117f3:	mov	qword ptr [rbp - 0x60], rax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffd9a0] = '\x00'
        mem[0x7fffffffd9a1] = 'l'
        mem[0x7fffffffd9a2] = 'o'
        mem[0x7fffffffd9a3] = 'c'
        mem[0x7fffffffd9a4] = 'a'
        mem[0x7fffffffd9a5] = 'l'
        mem[0x7fffffffd9a6] = 'h'
        mem[0x7fffffffd9a7] = 'o'
        mem[0x004117f3] = 'H'
        mem[0x004117f4] = '\x89'
        mem[0x004117f5] = 'E'
        mem[0x004117f6] = '\xa0'
        cpu.RIP = 0x4117f3
        cpu.RAX = 0x12
        cpu.RBP = 0x7fffffffda00
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffd9a0], '\x12')
        self.assertEqual(mem[0x7fffffffd9a1], '\x00')
        self.assertEqual(mem[0x7fffffffd9a2], '\x00')
        self.assertEqual(mem[0x7fffffffd9a3], '\x00')
        self.assertEqual(mem[0x7fffffffd9a4], '\x00')
        self.assertEqual(mem[0x7fffffffd9a5], '\x00')
        self.assertEqual(mem[0x7fffffffd9a6], '\x00')
        self.assertEqual(mem[0x7fffffffd9a7], '\x00')
        self.assertEqual(mem[0x4117f3], 'H')
        self.assertEqual(mem[0x4117f4], '\x89')
        self.assertEqual(mem[0x4117f5], 'E')
        self.assertEqual(mem[0x4117f6], '\xa0')
        self.assertEqual(cpu.RAX, 18L)
        self.assertEqual(cpu.RIP, 4265975L)
        self.assertEqual(cpu.RBP, 140737488345600L)

    def test_MOV_16(self):
        ''' Instruction MOV_16 
            Groups:  
            0x4369b5:	mov	qword ptr [rip + 0x283c7c], rax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x006ba000, 0x1000, 'rwx')
        mem[0x006ba638] = '\x00'
        mem[0x006ba639] = '\x00'
        mem[0x006ba63a] = '\x00'
        mem[0x006ba63b] = '\x00'
        mem[0x004369b5] = 'H'
        mem[0x004369b6] = '\x89'
        mem[0x004369b7] = '\x05'
        mem[0x004369b8] = '|'
        mem[0x004369b9] = '<'
        mem[0x004369ba] = '('
        mem[0x004369bb] = '\x00'
        mem[0x006ba63c] = '\x00'
        mem[0x006ba63d] = '\x00'
        mem[0x006ba63e] = '\x00'
        mem[0x006ba63f] = '\x00'
        cpu.RIP = 0x4369b5
        cpu.RAX = 0x6bf1d0
        cpu.execute()
    
        self.assertEqual(mem[0x4369b8], '|')
        self.assertEqual(mem[0x4369b9], '<')
        self.assertEqual(mem[0x4369ba], '(')
        self.assertEqual(mem[0x6ba63b], '\x00')
        self.assertEqual(mem[0x4369b5], 'H')
        self.assertEqual(mem[0x4369b6], '\x89')
        self.assertEqual(mem[0x4369b7], '\x05')
        self.assertEqual(mem[0x6ba638], '\xd0')
        self.assertEqual(mem[0x6ba639], '\xf1')
        self.assertEqual(mem[0x6ba63a], 'k')
        self.assertEqual(mem[0x4369bb], '\x00')
        self.assertEqual(mem[0x6ba63c], '\x00')
        self.assertEqual(mem[0x6ba63d], '\x00')
        self.assertEqual(mem[0x6ba63e], '\x00')
        self.assertEqual(mem[0x6ba63f], '\x00')
        self.assertEqual(cpu.RAX, 7074256L)
        self.assertEqual(cpu.RIP, 4417980L)

    def test_MOV_17(self):
        ''' Instruction MOV_17 
            Groups:  
            0x406e84:	mov	rbx, qword ptr [r12]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x00406e84] = 'I'
        mem[0x00406e85] = '\x8b'
        mem[0x00406e86] = '\x1c'
        mem[0x00406e87] = '$'
        mem[0x7fffffffdc50] = '\xf8'
        mem[0x7fffffffdc51] = '\xe0'
        mem[0x7fffffffdc52] = '\xff'
        mem[0x7fffffffdc53] = '\xff'
        mem[0x7fffffffdc54] = '\xff'
        mem[0x7fffffffdc55] = '\x7f'
        mem[0x7fffffffdc56] = '\x00'
        mem[0x7fffffffdc57] = '\x00'
        cpu.R12 = 0x7fffffffdc50
        cpu.RIP = 0x406e84
        cpu.RBX = 0x7fffffffe0e8
        cpu.execute()
    
        self.assertEqual(mem[0x406e84], 'I')
        self.assertEqual(mem[0x406e85], '\x8b')
        self.assertEqual(mem[0x406e86], '\x1c')
        self.assertEqual(mem[0x406e87], '$')
        self.assertEqual(mem[0x7fffffffdc50], '\xf8')
        self.assertEqual(mem[0x7fffffffdc51], '\xe0')
        self.assertEqual(mem[0x7fffffffdc52], '\xff')
        self.assertEqual(mem[0x7fffffffdc53], '\xff')
        self.assertEqual(mem[0x7fffffffdc54], '\xff')
        self.assertEqual(mem[0x7fffffffdc55], '\x7f')
        self.assertEqual(mem[0x7fffffffdc56], '\x00')
        self.assertEqual(mem[0x7fffffffdc57], '\x00')
        self.assertEqual(cpu.R12, 140737488346192L)
        self.assertEqual(cpu.RIP, 4222600L)
        self.assertEqual(cpu.RBX, 140737488347384L)

    def test_MOV_18(self):
        ''' Instruction MOV_18 
            Groups:  
            0x442603:	mov	qword ptr [rdi + 8], rax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00442000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x00442603] = 'H'
        mem[0x00442604] = '\x89'
        mem[0x00442605] = 'G'
        mem[0x00442606] = '\x08'
        mem[0x7fffffffdb48] = '\x00'
        mem[0x7fffffffdb49] = '\x00'
        mem[0x7fffffffdb4a] = '\x00'
        mem[0x7fffffffdb4b] = '\x00'
        mem[0x7fffffffdb4c] = '\x00'
        mem[0x7fffffffdb4d] = '\x00'
        mem[0x7fffffffdb4e] = '\x00'
        mem[0x7fffffffdb4f] = '\x00'
        cpu.RDI = 0x7fffffffdb40
        cpu.RIP = 0x442603
        cpu.RAX = 0x89da7bf088fd4a75
        cpu.execute()
    
        self.assertEqual(mem[0x442603], 'H')
        self.assertEqual(mem[0x442604], '\x89')
        self.assertEqual(mem[0x442605], 'G')
        self.assertEqual(mem[0x442606], '\x08')
        self.assertEqual(mem[0x7fffffffdb48], 'u')
        self.assertEqual(mem[0x7fffffffdb49], 'J')
        self.assertEqual(mem[0x7fffffffdb4a], '\xfd')
        self.assertEqual(mem[0x7fffffffdb4b], '\x88')
        self.assertEqual(mem[0x7fffffffdb4c], '\xf0')
        self.assertEqual(mem[0x7fffffffdb4d], '{')
        self.assertEqual(mem[0x7fffffffdb4e], '\xda')
        self.assertEqual(mem[0x7fffffffdb4f], '\x89')
        self.assertEqual(cpu.RDI, 140737488345920L)
        self.assertEqual(cpu.RAX, 9933388201139718773L)
        self.assertEqual(cpu.RIP, 4466183L)

    def test_MOV_19(self):
        ''' Instruction MOV_19 
            Groups:  
            0x406e84:	mov	rbx, qword ptr [r12]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x00406e84] = 'I'
        mem[0x00406e85] = '\x8b'
        mem[0x00406e86] = '\x1c'
        mem[0x00406e87] = '$'
        mem[0x7fffffffdda8] = '\xf7'
        mem[0x7fffffffdda9] = '\xec'
        mem[0x7fffffffddaa] = '\xff'
        mem[0x7fffffffddab] = '\xff'
        mem[0x7fffffffddac] = '\xff'
        mem[0x7fffffffddad] = '\x7f'
        mem[0x7fffffffddae] = '\x00'
        mem[0x7fffffffddaf] = '\x00'
        cpu.R12 = 0x7fffffffdda8
        cpu.RIP = 0x406e84
        cpu.RBX = 0x7fffffffece5
        cpu.execute()
    
        self.assertEqual(mem[0x406e84], 'I')
        self.assertEqual(mem[0x406e85], '\x8b')
        self.assertEqual(mem[0x406e86], '\x1c')
        self.assertEqual(mem[0x406e87], '$')
        self.assertEqual(mem[0x7fffffffdda8], '\xf7')
        self.assertEqual(mem[0x7fffffffdda9], '\xec')
        self.assertEqual(mem[0x7fffffffddaa], '\xff')
        self.assertEqual(mem[0x7fffffffddab], '\xff')
        self.assertEqual(mem[0x7fffffffddac], '\xff')
        self.assertEqual(mem[0x7fffffffddad], '\x7f')
        self.assertEqual(mem[0x7fffffffddae], '\x00')
        self.assertEqual(mem[0x7fffffffddaf], '\x00')
        self.assertEqual(cpu.R12, 140737488346536L)
        self.assertEqual(cpu.RIP, 4222600L)
        self.assertEqual(cpu.RBX, 140737488350455L)

    def test_MOV_2(self):
        ''' Instruction MOV_2 
            Groups:  
            0x4341d6:	mov	rbx, qword ptr [r13]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem.mmap(0x006bc000, 0x1000, 'rwx')
        mem[0x004341d6] = 'I'
        mem[0x004341d7] = '\x8b'
        mem[0x006bcad0] = '\x00'
        mem[0x006bcad1] = '\x00'
        mem[0x006bcad2] = '\x00'
        mem[0x006bcad3] = '\x00'
        mem[0x006bcad4] = '\x00'
        mem[0x006bcad5] = '\x00'
        mem[0x006bcad6] = '\x00'
        mem[0x006bcad7] = '\x00'
        mem[0x004341d8] = ']'
        mem[0x004341d9] = '\x00'
        cpu.R13 = 0x6bcad0
        cpu.RIP = 0x4341d6
        cpu.RBX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x6bcad6], '\x00')
        self.assertEqual(mem[0x6bcad7], '\x00')
        self.assertEqual(mem[0x6bcad0], '\x00')
        self.assertEqual(mem[0x6bcad1], '\x00')
        self.assertEqual(mem[0x6bcad2], '\x00')
        self.assertEqual(mem[0x6bcad3], '\x00')
        self.assertEqual(mem[0x6bcad4], '\x00')
        self.assertEqual(mem[0x6bcad5], '\x00')
        self.assertEqual(mem[0x4341d6], 'I')
        self.assertEqual(mem[0x4341d7], '\x8b')
        self.assertEqual(mem[0x4341d8], ']')
        self.assertEqual(mem[0x4341d9], '\x00')
        self.assertEqual(cpu.R13, 7064272L)
        self.assertEqual(cpu.RIP, 4407770L)
        self.assertEqual(cpu.RBX, 0L)

    def test_MOV_20(self):
        ''' Instruction MOV_20 
            Groups:  
            0x436799:	mov	rdx, qword ptr [rdx]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x006ba000, 0x1000, 'rwx')
        mem[0x006ba240] = '\x00'
        mem[0x006ba241] = '\xa3'
        mem[0x006ba242] = 'k'
        mem[0x006ba243] = '\x00'
        mem[0x006ba244] = '\x00'
        mem[0x006ba245] = '\x00'
        mem[0x006ba246] = '\x00'
        mem[0x006ba247] = '\x00'
        mem[0x00436799] = 'H'
        mem[0x0043679a] = '\x8b'
        mem[0x0043679b] = '\x12'
        cpu.RDX = 0x6ba240
        cpu.RIP = 0x436799
        cpu.execute()
    
        self.assertEqual(mem[0x6ba240], '\x00')
        self.assertEqual(mem[0x6ba241], '\xa3')
        self.assertEqual(mem[0x6ba242], 'k')
        self.assertEqual(mem[0x6ba243], '\x00')
        self.assertEqual(mem[0x6ba244], '\x00')
        self.assertEqual(mem[0x6ba245], '\x00')
        self.assertEqual(mem[0x6ba246], '\x00')
        self.assertEqual(mem[0x6ba247], '\x00')
        self.assertEqual(mem[0x436799], 'H')
        self.assertEqual(mem[0x43679a], '\x8b')
        self.assertEqual(mem[0x43679b], '\x12')
        self.assertEqual(cpu.RDX, 7054080L)
        self.assertEqual(cpu.RIP, 4417436L)

    def test_MOV_21(self):
        ''' Instruction MOV_21 
            Groups:  
            0x4117d7:	mov	rsi, r13
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x004117d8] = '\x89'
        mem[0x004117d9] = '\xee'
        mem[0x004117d7] = 'L'
        cpu.RSI = 0x640
        cpu.RIP = 0x4117d7
        cpu.R13 = 0x650
        cpu.execute()
    
        self.assertEqual(mem[0x4117d8], '\x89')
        self.assertEqual(mem[0x4117d9], '\xee')
        self.assertEqual(mem[0x4117d7], 'L')
        self.assertEqual(cpu.RSI, 1616L)
        self.assertEqual(cpu.RIP, 4265946L)
        self.assertEqual(cpu.R13, 1616L)

    def test_MOV_3(self):
        ''' Instruction MOV_3 
            Groups:  
            0x406e84:	mov	rbx, qword ptr [r12]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x00406e84] = 'I'
        mem[0x00406e85] = '\x8b'
        mem[0x00406e86] = '\x1c'
        mem[0x00406e87] = '$'
        mem[0x7fffffffdcf8] = '\xa4'
        mem[0x7fffffffdcf9] = '\xea'
        mem[0x7fffffffdcfa] = '\xff'
        mem[0x7fffffffdcfb] = '\xff'
        mem[0x7fffffffdcfc] = '\xff'
        mem[0x7fffffffdcfd] = '\x7f'
        mem[0x7fffffffdcfe] = '\x00'
        mem[0x7fffffffdcff] = '\x00'
        cpu.R12 = 0x7fffffffdcf8
        cpu.RIP = 0x406e84
        cpu.RBX = 0x7fffffffea8b
        cpu.execute()
    
        self.assertEqual(mem[0x406e84], 'I')
        self.assertEqual(mem[0x406e85], '\x8b')
        self.assertEqual(mem[0x406e86], '\x1c')
        self.assertEqual(mem[0x406e87], '$')
        self.assertEqual(mem[0x7fffffffdcf8], '\xa4')
        self.assertEqual(mem[0x7fffffffdcf9], '\xea')
        self.assertEqual(mem[0x7fffffffdcfa], '\xff')
        self.assertEqual(mem[0x7fffffffdcfb], '\xff')
        self.assertEqual(mem[0x7fffffffdcfc], '\xff')
        self.assertEqual(mem[0x7fffffffdcfd], '\x7f')
        self.assertEqual(mem[0x7fffffffdcfe], '\x00')
        self.assertEqual(mem[0x7fffffffdcff], '\x00')
        self.assertEqual(cpu.R12, 140737488346360L)
        self.assertEqual(cpu.RIP, 4222600L)
        self.assertEqual(cpu.RBX, 140737488349860L)

    def test_MOV_4(self):
        ''' Instruction MOV_4 
            Groups:  
            0x406e84:	mov	rbx, qword ptr [r12]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x00406e84] = 'I'
        mem[0x00406e85] = '\x8b'
        mem[0x00406e86] = '\x1c'
        mem[0x00406e87] = '$'
        mem[0x7fffffffde18] = '\x18'
        mem[0x7fffffffde19] = '\xef'
        mem[0x7fffffffde1a] = '\xff'
        mem[0x7fffffffde1b] = '\xff'
        mem[0x7fffffffde1c] = '\xff'
        mem[0x7fffffffde1d] = '\x7f'
        mem[0x7fffffffde1e] = '\x00'
        mem[0x7fffffffde1f] = '\x00'
        cpu.R12 = 0x7fffffffde18
        cpu.RIP = 0x406e84
        cpu.RBX = 0x7fffffffef00
        cpu.execute()
    
        self.assertEqual(mem[0x406e84], 'I')
        self.assertEqual(mem[0x406e85], '\x8b')
        self.assertEqual(mem[0x406e86], '\x1c')
        self.assertEqual(mem[0x406e87], '$')
        self.assertEqual(mem[0x7fffffffde18], '\x18')
        self.assertEqual(mem[0x7fffffffde19], '\xef')
        self.assertEqual(mem[0x7fffffffde1a], '\xff')
        self.assertEqual(mem[0x7fffffffde1b], '\xff')
        self.assertEqual(mem[0x7fffffffde1c], '\xff')
        self.assertEqual(mem[0x7fffffffde1d], '\x7f')
        self.assertEqual(mem[0x7fffffffde1e], '\x00')
        self.assertEqual(mem[0x7fffffffde1f], '\x00')
        self.assertEqual(cpu.R12, 140737488346648L)
        self.assertEqual(cpu.RIP, 4222600L)
        self.assertEqual(cpu.RBX, 140737488351000L)

    def test_MOV_5(self):
        ''' Instruction MOV_5 
            Groups:  
            0x411b7d:	mov	r8d, edi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411b7d] = 'A'
        mem[0x00411b7e] = '\x89'
        mem[0x00411b7f] = '\xf8'
        cpu.EDI = 0x0
        cpu.R8D = 0x6baa80
        cpu.RIP = 0x411b7d
        cpu.execute()
    
        self.assertEqual(mem[0x411b7d], 'A')
        self.assertEqual(mem[0x411b7e], '\x89')
        self.assertEqual(mem[0x411b7f], '\xf8')
        self.assertEqual(cpu.EDI, 0L)
        self.assertEqual(cpu.R8D, 0L)
        self.assertEqual(cpu.RIP, 4266880L)

    def test_MOV_6(self):
        ''' Instruction MOV_6 
            Groups:  
            0x4644b1:	mov	qword ptr [rax + 0x10], rdi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00464000, 0x1000, 'rwx')
        mem.mmap(0x006bf000, 0x1000, 'rwx')
        mem[0x006bf6e0] = '\x00'
        mem[0x006bf6e1] = '\x00'
        mem[0x006bf6e2] = '\x00'
        mem[0x006bf6e3] = '\x00'
        mem[0x006bf6e4] = '\x00'
        mem[0x006bf6e5] = '\x00'
        mem[0x006bf6e6] = '\x00'
        mem[0x006bf6e7] = '\x00'
        mem[0x004644b1] = 'H'
        mem[0x004644b2] = '\x89'
        mem[0x004644b3] = 'x'
        mem[0x004644b4] = '\x10'
        cpu.RDI = 0x6bf6f0
        cpu.RIP = 0x4644b1
        cpu.RAX = 0x6bf6d0
        cpu.execute()
    
        self.assertEqual(mem[0x6bf6e0], '\xf0')
        self.assertEqual(mem[0x6bf6e1], '\xf6')
        self.assertEqual(mem[0x6bf6e2], 'k')
        self.assertEqual(mem[0x6bf6e3], '\x00')
        self.assertEqual(mem[0x6bf6e4], '\x00')
        self.assertEqual(mem[0x6bf6e5], '\x00')
        self.assertEqual(mem[0x6bf6e6], '\x00')
        self.assertEqual(mem[0x6bf6e7], '\x00')
        self.assertEqual(mem[0x4644b1], 'H')
        self.assertEqual(mem[0x4644b2], '\x89')
        self.assertEqual(mem[0x4644b3], 'x')
        self.assertEqual(mem[0x4644b4], '\x10')
        self.assertEqual(cpu.RDI, 7075568L)
        self.assertEqual(cpu.RAX, 7075536L)
        self.assertEqual(cpu.RIP, 4605109L)

    def test_MOV_7(self):
        ''' Instruction MOV_7 
            Groups:  
            0x4113df:	mov	rsi, qword ptr [rdx]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x006bb000, 0x1000, 'rwx')
        mem[0x006bb780] = '\x00'
        mem[0x006bb781] = '\x00'
        mem[0x006bb782] = '\x00'
        mem[0x006bb783] = '\x00'
        mem[0x006bb784] = '\x00'
        mem[0x006bb785] = '\x00'
        mem[0x006bb786] = '\x00'
        mem[0x006bb787] = '\x00'
        mem[0x004113df] = 'H'
        mem[0x004113e0] = '\x8b'
        mem[0x004113e1] = '2'
        cpu.RSI = 0x6e1000
        cpu.RIP = 0x4113df
        cpu.RDX = 0x6bb780
        cpu.execute()
    
        self.assertEqual(mem[0x6bb780], '\x00')
        self.assertEqual(mem[0x6bb781], '\x00')
        self.assertEqual(mem[0x6bb782], '\x00')
        self.assertEqual(mem[0x6bb783], '\x00')
        self.assertEqual(mem[0x6bb784], '\x00')
        self.assertEqual(mem[0x6bb785], '\x00')
        self.assertEqual(mem[0x6bb786], '\x00')
        self.assertEqual(mem[0x6bb787], '\x00')
        self.assertEqual(mem[0x4113df], 'H')
        self.assertEqual(mem[0x4113e0], '\x8b')
        self.assertEqual(mem[0x4113e1], '2')
        self.assertEqual(cpu.RSI, 0L)
        self.assertEqual(cpu.RIP, 4264930L)
        self.assertEqual(cpu.RDX, 7059328L)

    def test_MOV_8(self):
        ''' Instruction MOV_8 
            Groups:  
            0x464602:	mov	rax, rdx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00464000, 0x1000, 'rwx')
        mem[0x00464602] = 'H'
        mem[0x00464603] = '\x89'
        mem[0x00464604] = '\xd0'
        cpu.RIP = 0x464602
        cpu.RAX = 0x20
        cpu.RDX = 0x1
        cpu.execute()
    
        self.assertEqual(mem[0x464602], 'H')
        self.assertEqual(mem[0x464603], '\x89')
        self.assertEqual(mem[0x464604], '\xd0')
        self.assertEqual(cpu.RAX, 1L)
        self.assertEqual(cpu.RIP, 4605445L)
        self.assertEqual(cpu.RDX, 1L)

    def test_MOV_9(self):
        ''' Instruction MOV_9 
            Groups:  
            0x406e84:	mov	rbx, qword ptr [r12]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x00406e84] = 'I'
        mem[0x00406e85] = '\x8b'
        mem[0x00406e86] = '\x1c'
        mem[0x00406e87] = '$'
        mem[0x7fffffffdc88] = '\x9d'
        mem[0x7fffffffdc89] = '\xe1'
        mem[0x7fffffffdc8a] = '\xff'
        mem[0x7fffffffdc8b] = '\xff'
        mem[0x7fffffffdc8c] = '\xff'
        mem[0x7fffffffdc8d] = '\x7f'
        mem[0x7fffffffdc8e] = '\x00'
        mem[0x7fffffffdc8f] = '\x00'
        cpu.R12 = 0x7fffffffdc88
        cpu.RIP = 0x406e84
        cpu.RBX = 0x7fffffffe17c
        cpu.execute()
    
        self.assertEqual(mem[0x406e84], 'I')
        self.assertEqual(mem[0x406e85], '\x8b')
        self.assertEqual(mem[0x406e86], '\x1c')
        self.assertEqual(mem[0x406e87], '$')
        self.assertEqual(mem[0x7fffffffdc88], '\x9d')
        self.assertEqual(mem[0x7fffffffdc89], '\xe1')
        self.assertEqual(mem[0x7fffffffdc8a], '\xff')
        self.assertEqual(mem[0x7fffffffdc8b], '\xff')
        self.assertEqual(mem[0x7fffffffdc8c], '\xff')
        self.assertEqual(mem[0x7fffffffdc8d], '\x7f')
        self.assertEqual(mem[0x7fffffffdc8e], '\x00')
        self.assertEqual(mem[0x7fffffffdc8f], '\x00')
        self.assertEqual(cpu.R12, 140737488346248L)
        self.assertEqual(cpu.RIP, 4222600L)
        self.assertEqual(cpu.RBX, 140737488347549L)

    def test_NEG_1(self):
        ''' Instruction NEG_1 
            Groups:  
            0x40103d:	neg	rax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x0040103d] = 'H'
        mem[0x0040103e] = '\xf7'
        mem[0x0040103f] = '\xd8'
        cpu.PF = False
        cpu.RAX = 0x40
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x40103d
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40103d], 'H')
        self.assertEqual(mem[0x40103e], '\xf7')
        self.assertEqual(mem[0x40103f], '\xd8')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 18446744073709551552L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4198464L)
        self.assertEqual(cpu.SF, True)

    def test_NEG_2(self):
        ''' Instruction NEG_2 
            Groups:  
            0x45f8f1:	neg	rdx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045f000, 0x1000, 'rwx')
        mem[0x0045f8f1] = 'H'
        mem[0x0045f8f2] = '\xf7'
        mem[0x0045f8f3] = '\xda'
        cpu.SF = False
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x45f8f1
        cpu.RDX = 0x50
        cpu.execute()
    
        self.assertEqual(mem[0x45f8f1], 'H')
        self.assertEqual(mem[0x45f8f2], '\xf7')
        self.assertEqual(mem[0x45f8f3], '\xda')
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4585716L)
        self.assertEqual(cpu.RDX, 18446744073709551536L)

    def test_NEG_3(self):
        ''' Instruction NEG_3 
            Groups:  
            0x410dd5:	neg	rdx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, 'rwx')
        mem[0x00410dd5] = 'H'
        mem[0x00410dd6] = '\xf7'
        mem[0x00410dd7] = '\xda'
        cpu.SF = False
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x410dd5
        cpu.RDX = 0x1000
        cpu.execute()
    
        self.assertEqual(mem[0x410dd5], 'H')
        self.assertEqual(mem[0x410dd6], '\xf7')
        self.assertEqual(mem[0x410dd7], '\xda')
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4263384L)
        self.assertEqual(cpu.RDX, 18446744073709547520L)

    def test_NEG_4(self):
        ''' Instruction NEG_4 
            Groups:  
            0x411166:	neg	r10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411168] = '\xda'
        mem[0x00411166] = 'I'
        mem[0x00411167] = '\xf7'
        cpu.PF = True
        cpu.R10 = 0x1000
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x411166
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x411168], '\xda')
        self.assertEqual(mem[0x411166], 'I')
        self.assertEqual(mem[0x411167], '\xf7')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.R10, 18446744073709547520L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4264297L)
        self.assertEqual(cpu.SF, True)

    def test_NOT_1(self):
        ''' Instruction NOT_1 
            Groups:  
            0x400857:	not	esi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400858] = '\xd6'
        mem[0x00400857] = '\xf7'
        cpu.RIP = 0x400857
        cpu.ESI = 0xfffffff0
        cpu.execute()
    
        self.assertEqual(mem[0x400858], '\xd6')
        self.assertEqual(mem[0x400857], '\xf7')
        self.assertEqual(cpu.ESI, 15L)
        self.assertEqual(cpu.RIP, 4196441L)

    def test_NOT_2(self):
        ''' Instruction NOT_2 
            Groups:  
            0x436f6b:	not	eax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436f6b] = '\xf7'
        mem[0x00436f6c] = '\xd0'
        cpu.EAX = 0xffffffff
        cpu.RIP = 0x436f6b
        cpu.execute()
    
        self.assertEqual(mem[0x436f6b], '\xf7')
        self.assertEqual(mem[0x436f6c], '\xd0')
        self.assertEqual(cpu.EAX, 0L)
        self.assertEqual(cpu.RIP, 4419437L)

    def test_OR_1(self):
        ''' Instruction OR_1 
            Groups:  
            0x412010:	or	rax, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x00412010] = 'H'
        mem[0x00412011] = '\x83'
        mem[0x00412012] = '\xc8'
        mem[0x00412013] = '\x01'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x412010
        cpu.PF = True
        cpu.SF = False
        cpu.RAX = 0x21940
        cpu.execute()
    
        self.assertEqual(mem[0x412010], 'H')
        self.assertEqual(mem[0x412011], '\x83')
        self.assertEqual(mem[0x412012], '\xc8')
        self.assertEqual(mem[0x412013], '\x01')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4268052L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 137537L)

    def test_OR_10(self):
        ''' Instruction OR_10 
            Groups:  
            0x436904:	or	ecx, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436904] = '\x83'
        mem[0x00436905] = '\xc9'
        mem[0x00436906] = '\x08'
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x436904
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x436904], '\x83')
        self.assertEqual(mem[0x436905], '\xc9')
        self.assertEqual(mem[0x436906], '\x08')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4417799L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 15L)

    def test_OR_11(self):
        ''' Instruction OR_11 
            Groups:  
            0x437702:	or	eax, ecx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x00437702] = '\t'
        mem[0x00437703] = '\xc8'
        cpu.EAX = 0x400
        cpu.PF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x4
        cpu.CF = False
        cpu.RIP = 0x437702
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x437702], '\t')
        self.assertEqual(mem[0x437703], '\xc8')
        self.assertEqual(cpu.EAX, 1028L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 4L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4421380L)
        self.assertEqual(cpu.SF, False)

    def test_OR_12(self):
        ''' Instruction OR_12 
            Groups:  
            0x41348e:	or	qword ptr [rsp], 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffb000, 0x1000, 'rwx')
        mem[0x0041348e] = 'H'
        mem[0x0041348f] = '\x83'
        mem[0x00413490] = '\x0c'
        mem[0x00413491] = '$'
        mem[0x00413492] = '\x00'
        mem[0x7fffffffba30] = '\x00'
        mem[0x7fffffffba31] = '\x00'
        mem[0x7fffffffba32] = '\x00'
        mem[0x7fffffffba33] = '\x00'
        mem[0x7fffffffba34] = '\x00'
        mem[0x7fffffffba35] = '\x00'
        mem[0x7fffffffba36] = '\x00'
        mem[0x7fffffffba37] = '\x00'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x41348e
        cpu.PF = True
        cpu.RSP = 0x7fffffffba30
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x41348e], 'H')
        self.assertEqual(mem[0x41348f], '\x83')
        self.assertEqual(mem[0x413490], '\x0c')
        self.assertEqual(mem[0x413491], '$')
        self.assertEqual(mem[0x413492], '\x00')
        self.assertEqual(mem[0x7fffffffba30], '\x00')
        self.assertEqual(mem[0x7fffffffba31], '\x00')
        self.assertEqual(mem[0x7fffffffba32], '\x00')
        self.assertEqual(mem[0x7fffffffba33], '\x00')
        self.assertEqual(mem[0x7fffffffba34], '\x00')
        self.assertEqual(mem[0x7fffffffba35], '\x00')
        self.assertEqual(mem[0x7fffffffba36], '\x00')
        self.assertEqual(mem[0x7fffffffba37], '\x00')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4273299L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RSP, 140737488337456L)
        self.assertEqual(cpu.SF, False)

    def test_OR_13(self):
        ''' Instruction OR_13 
            Groups:  
            0x41165e:	or	qword ptr [rsp], 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x7fffffffc950] = '\xc0'
        mem[0x7fffffffc951] = '\xf1'
        mem[0x7fffffffc952] = 'k'
        mem[0x7fffffffc953] = '\x00'
        mem[0x7fffffffc954] = '\x00'
        mem[0x7fffffffc955] = '\x00'
        mem[0x7fffffffc956] = '\x00'
        mem[0x7fffffffc957] = '\x00'
        mem[0x0041165e] = 'H'
        mem[0x0041165f] = '\x83'
        mem[0x00411660] = '\x0c'
        mem[0x00411661] = '$'
        mem[0x00411662] = '\x00'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x41165e
        cpu.PF = True
        cpu.RSP = 0x7fffffffc950
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffc950], '\xc0')
        self.assertEqual(mem[0x7fffffffc951], '\xf1')
        self.assertEqual(mem[0x7fffffffc952], 'k')
        self.assertEqual(mem[0x7fffffffc953], '\x00')
        self.assertEqual(mem[0x7fffffffc954], '\x00')
        self.assertEqual(mem[0x7fffffffc955], '\x00')
        self.assertEqual(mem[0x7fffffffc956], '\x00')
        self.assertEqual(mem[0x7fffffffc957], '\x00')
        self.assertEqual(mem[0x41165e], 'H')
        self.assertEqual(mem[0x41165f], '\x83')
        self.assertEqual(mem[0x411660], '\x0c')
        self.assertEqual(mem[0x411661], '$')
        self.assertEqual(mem[0x411662], '\x00')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4265571L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RSP, 140737488341328L)
        self.assertEqual(cpu.SF, False)

    def test_OR_14(self):
        ''' Instruction OR_14 
            Groups:  
            0x4321fa:	or	qword ptr [rsp], 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x7fffffffc9f0] = '`'
        mem[0x7fffffffc9f1] = '\x00'
        mem[0x7fffffffc9f2] = '\x00'
        mem[0x7fffffffc9f3] = '\x00'
        mem[0x7fffffffc9f4] = '\x00'
        mem[0x7fffffffc9f5] = '\x00'
        mem[0x7fffffffc9f6] = '\x00'
        mem[0x7fffffffc9f7] = '\x00'
        mem[0x004321fa] = 'H'
        mem[0x004321fb] = '\x83'
        mem[0x004321fc] = '\x0c'
        mem[0x004321fd] = '$'
        mem[0x004321fe] = '\x00'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4321fa
        cpu.PF = True
        cpu.RSP = 0x7fffffffc9f0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffc9f0], '`')
        self.assertEqual(mem[0x7fffffffc9f1], '\x00')
        self.assertEqual(mem[0x7fffffffc9f2], '\x00')
        self.assertEqual(mem[0x7fffffffc9f3], '\x00')
        self.assertEqual(mem[0x7fffffffc9f4], '\x00')
        self.assertEqual(mem[0x7fffffffc9f5], '\x00')
        self.assertEqual(mem[0x7fffffffc9f6], '\x00')
        self.assertEqual(mem[0x7fffffffc9f7], '\x00')
        self.assertEqual(mem[0x4321fa], 'H')
        self.assertEqual(mem[0x4321fb], '\x83')
        self.assertEqual(mem[0x4321fc], '\x0c')
        self.assertEqual(mem[0x4321fd], '$')
        self.assertEqual(mem[0x4321fe], '\x00')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4399615L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RSP, 140737488341488L)
        self.assertEqual(cpu.SF, False)

    def test_OR_15(self):
        ''' Instruction OR_15 
            Groups:  
            0x4341c0:	or	qword ptr [rsp], 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffb000, 0x1000, 'rwx')
        mem[0x004341c0] = 'H'
        mem[0x004341c1] = '\x83'
        mem[0x004341c2] = '\x0c'
        mem[0x004341c3] = '$'
        mem[0x004341c4] = '\x00'
        mem[0x7fffffffb8e0] = '\x00'
        mem[0x7fffffffb8e1] = '\x00'
        mem[0x7fffffffb8e2] = '\x00'
        mem[0x7fffffffb8e3] = '\x00'
        mem[0x7fffffffb8e4] = '\x00'
        mem[0x7fffffffb8e5] = '\x00'
        mem[0x7fffffffb8e6] = '\x00'
        mem[0x7fffffffb8e7] = '\x00'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4341c0
        cpu.PF = False
        cpu.RSP = 0x7fffffffb8e0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4341c0], 'H')
        self.assertEqual(mem[0x4341c1], '\x83')
        self.assertEqual(mem[0x4341c2], '\x0c')
        self.assertEqual(mem[0x4341c3], '$')
        self.assertEqual(mem[0x4341c4], '\x00')
        self.assertEqual(mem[0x7fffffffb8e0], '\x00')
        self.assertEqual(mem[0x7fffffffb8e1], '\x00')
        self.assertEqual(mem[0x7fffffffb8e2], '\x00')
        self.assertEqual(mem[0x7fffffffb8e3], '\x00')
        self.assertEqual(mem[0x7fffffffb8e4], '\x00')
        self.assertEqual(mem[0x7fffffffb8e5], '\x00')
        self.assertEqual(mem[0x7fffffffb8e6], '\x00')
        self.assertEqual(mem[0x7fffffffb8e7], '\x00')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4407749L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RSP, 140737488337120L)
        self.assertEqual(cpu.SF, False)

    def test_OR_16(self):
        ''' Instruction OR_16 
            Groups:  
            0x41a82c:	or	qword ptr [rsp], 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041a000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x7fffffffcae0] = '\x00'
        mem[0x7fffffffcae1] = '\x00'
        mem[0x7fffffffcae2] = '\x00'
        mem[0x7fffffffcae3] = '\x00'
        mem[0x7fffffffcae4] = '\x00'
        mem[0x7fffffffcae5] = '\x00'
        mem[0x7fffffffcae6] = '\x00'
        mem[0x7fffffffcae7] = '\x00'
        mem[0x0041a82c] = 'H'
        mem[0x0041a82d] = '\x83'
        mem[0x0041a82e] = '\x0c'
        mem[0x0041a82f] = '$'
        mem[0x0041a830] = '\x00'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x41a82c
        cpu.PF = False
        cpu.RSP = 0x7fffffffcae0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffcae0], '\x00')
        self.assertEqual(mem[0x7fffffffcae1], '\x00')
        self.assertEqual(mem[0x7fffffffcae2], '\x00')
        self.assertEqual(mem[0x7fffffffcae3], '\x00')
        self.assertEqual(mem[0x7fffffffcae4], '\x00')
        self.assertEqual(mem[0x7fffffffcae5], '\x00')
        self.assertEqual(mem[0x7fffffffcae6], '\x00')
        self.assertEqual(mem[0x7fffffffcae7], '\x00')
        self.assertEqual(mem[0x41a82c], 'H')
        self.assertEqual(mem[0x41a82d], '\x83')
        self.assertEqual(mem[0x41a82e], '\x0c')
        self.assertEqual(mem[0x41a82f], '$')
        self.assertEqual(mem[0x41a830], '\x00')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4302897L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RSP, 140737488341728L)
        self.assertEqual(cpu.SF, False)

    def test_OR_17(self):
        ''' Instruction OR_17 
            Groups:  
            0x410efe:	or	rcx, r12
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, 'rwx')
        mem[0x00410f00] = '\xe1'
        mem[0x00410efe] = 'L'
        mem[0x00410eff] = '\t'
        cpu.PF = True
        cpu.RCX = 0x0
        cpu.R12 = 0x41
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x410efe
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x410f00], '\xe1')
        self.assertEqual(mem[0x410efe], 'L')
        self.assertEqual(mem[0x410eff], '\t')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RCX, 65L)
        self.assertEqual(cpu.R12, 65L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4263681L)
        self.assertEqual(cpu.SF, False)

    def test_OR_18(self):
        ''' Instruction OR_18 
            Groups:  
            0x41165e:	or	qword ptr [rsp], 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffb000, 0x1000, 'rwx')
        mem[0x7fffffffb990] = '\x00'
        mem[0x7fffffffb991] = '\x00'
        mem[0x7fffffffb992] = '\x00'
        mem[0x7fffffffb993] = '\x00'
        mem[0x7fffffffb994] = '\x00'
        mem[0x7fffffffb995] = '\x00'
        mem[0x7fffffffb996] = '\x00'
        mem[0x7fffffffb997] = '\x00'
        mem[0x0041165e] = 'H'
        mem[0x0041165f] = '\x83'
        mem[0x00411660] = '\x0c'
        mem[0x00411661] = '$'
        mem[0x00411662] = '\x00'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x41165e
        cpu.PF = True
        cpu.RSP = 0x7fffffffb990
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffb990], '\x00')
        self.assertEqual(mem[0x7fffffffb991], '\x00')
        self.assertEqual(mem[0x7fffffffb992], '\x00')
        self.assertEqual(mem[0x7fffffffb993], '\x00')
        self.assertEqual(mem[0x7fffffffb994], '\x00')
        self.assertEqual(mem[0x7fffffffb995], '\x00')
        self.assertEqual(mem[0x7fffffffb996], '\x00')
        self.assertEqual(mem[0x7fffffffb997], '\x00')
        self.assertEqual(mem[0x41165e], 'H')
        self.assertEqual(mem[0x41165f], '\x83')
        self.assertEqual(mem[0x411660], '\x0c')
        self.assertEqual(mem[0x411661], '$')
        self.assertEqual(mem[0x411662], '\x00')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4265571L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RSP, 140737488337296L)
        self.assertEqual(cpu.SF, False)

    def test_OR_19(self):
        ''' Instruction OR_19 
            Groups:  
            0x406de4:	or	qword ptr [rsp], 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x00406de4] = 'H'
        mem[0x00406de5] = '\x83'
        mem[0x00406de6] = '\x0c'
        mem[0x00406de7] = '$'
        mem[0x00406de8] = '\x00'
        mem[0x7fffffffca30] = '\x00'
        mem[0x7fffffffca31] = '\x00'
        mem[0x7fffffffca32] = '\x00'
        mem[0x7fffffffca33] = '\x00'
        mem[0x7fffffffca34] = '\x00'
        mem[0x7fffffffca35] = '\x00'
        mem[0x7fffffffca36] = '\x00'
        mem[0x7fffffffca37] = '\x00'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406de4
        cpu.PF = True
        cpu.RSP = 0x7fffffffca30
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406de4], 'H')
        self.assertEqual(mem[0x406de5], '\x83')
        self.assertEqual(mem[0x406de6], '\x0c')
        self.assertEqual(mem[0x406de7], '$')
        self.assertEqual(mem[0x406de8], '\x00')
        self.assertEqual(mem[0x7fffffffca30], '\x00')
        self.assertEqual(mem[0x7fffffffca31], '\x00')
        self.assertEqual(mem[0x7fffffffca32], '\x00')
        self.assertEqual(mem[0x7fffffffca33], '\x00')
        self.assertEqual(mem[0x7fffffffca34], '\x00')
        self.assertEqual(mem[0x7fffffffca35], '\x00')
        self.assertEqual(mem[0x7fffffffca36], '\x00')
        self.assertEqual(mem[0x7fffffffca37], '\x00')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222441L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RSP, 140737488341552L)
        self.assertEqual(cpu.SF, False)

    def test_OR_2(self):
        ''' Instruction OR_2 
            Groups:  
            0x41348e:	or	qword ptr [rsp], 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x0041348e] = 'H'
        mem[0x0041348f] = '\x83'
        mem[0x00413490] = '\x0c'
        mem[0x00413491] = '$'
        mem[0x00413492] = '\x00'
        mem[0x7fffffffca30] = '\x00'
        mem[0x7fffffffca31] = '\x00'
        mem[0x7fffffffca32] = '\x00'
        mem[0x7fffffffca33] = '\x00'
        mem[0x7fffffffca34] = '\x00'
        mem[0x7fffffffca35] = '\x00'
        mem[0x7fffffffca36] = '\x00'
        mem[0x7fffffffca37] = '\x00'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x41348e
        cpu.PF = True
        cpu.RSP = 0x7fffffffca30
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x41348e], 'H')
        self.assertEqual(mem[0x41348f], '\x83')
        self.assertEqual(mem[0x413490], '\x0c')
        self.assertEqual(mem[0x413491], '$')
        self.assertEqual(mem[0x413492], '\x00')
        self.assertEqual(mem[0x7fffffffca30], '\x00')
        self.assertEqual(mem[0x7fffffffca31], '\x00')
        self.assertEqual(mem[0x7fffffffca32], '\x00')
        self.assertEqual(mem[0x7fffffffca33], '\x00')
        self.assertEqual(mem[0x7fffffffca34], '\x00')
        self.assertEqual(mem[0x7fffffffca35], '\x00')
        self.assertEqual(mem[0x7fffffffca36], '\x00')
        self.assertEqual(mem[0x7fffffffca37], '\x00')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4273299L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RSP, 140737488341552L)
        self.assertEqual(cpu.SF, False)

    def test_OR_20(self):
        ''' Instruction OR_20 
            Groups:  
            0x437a94:	or	dword ptr [rsi + 0x40], 0x33
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x006bd000, 0x1000, 'rwx')
        mem[0x006bd500] = '\x00'
        mem[0x006bd501] = '\x00'
        mem[0x006bd502] = '\x00'
        mem[0x006bd503] = '\x00'
        mem[0x00437a94] = '\x83'
        mem[0x00437a95] = 'N'
        mem[0x00437a96] = '@'
        mem[0x00437a97] = '3'
        cpu.RSI = 0x6bd4c0
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x437a94
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x6bd500], '3')
        self.assertEqual(mem[0x6bd501], '\x00')
        self.assertEqual(mem[0x6bd502], '\x00')
        self.assertEqual(mem[0x6bd503], '\x00')
        self.assertEqual(mem[0x437a94], '\x83')
        self.assertEqual(mem[0x437a95], 'N')
        self.assertEqual(mem[0x437a96], '@')
        self.assertEqual(mem[0x437a97], '3')
        self.assertEqual(cpu.RSI, 7066816L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4422296L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_OR_21(self):
        ''' Instruction OR_21 
            Groups:  
            0x406de4:	or	qword ptr [rsp], 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x00406de4] = 'H'
        mem[0x00406de5] = '\x83'
        mem[0x00406de6] = '\x0c'
        mem[0x00406de7] = '$'
        mem[0x00406de8] = '\x00'
        mem[0x7fffffffca30] = '\x00'
        mem[0x7fffffffca31] = '\x00'
        mem[0x7fffffffca32] = '\x00'
        mem[0x7fffffffca33] = '\x00'
        mem[0x7fffffffca34] = '\x00'
        mem[0x7fffffffca35] = '\x00'
        mem[0x7fffffffca36] = '\x00'
        mem[0x7fffffffca37] = '\x00'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406de4
        cpu.PF = True
        cpu.RSP = 0x7fffffffca30
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406de4], 'H')
        self.assertEqual(mem[0x406de5], '\x83')
        self.assertEqual(mem[0x406de6], '\x0c')
        self.assertEqual(mem[0x406de7], '$')
        self.assertEqual(mem[0x406de8], '\x00')
        self.assertEqual(mem[0x7fffffffca30], '\x00')
        self.assertEqual(mem[0x7fffffffca31], '\x00')
        self.assertEqual(mem[0x7fffffffca32], '\x00')
        self.assertEqual(mem[0x7fffffffca33], '\x00')
        self.assertEqual(mem[0x7fffffffca34], '\x00')
        self.assertEqual(mem[0x7fffffffca35], '\x00')
        self.assertEqual(mem[0x7fffffffca36], '\x00')
        self.assertEqual(mem[0x7fffffffca37], '\x00')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222441L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RSP, 140737488341552L)
        self.assertEqual(cpu.SF, False)

    def test_OR_3(self):
        ''' Instruction OR_3 
            Groups:  
            0x41840e:	or	rcx, r8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x00418410] = '\xc1'
        mem[0x0041840e] = 'L'
        mem[0x0041840f] = '\t'
        cpu.PF = True
        cpu.RCX = 0x0
        cpu.OF = False
        cpu.ZF = True
        cpu.R8 = 0xfe00
        cpu.CF = False
        cpu.RIP = 0x41840e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x418410], '\xc1')
        self.assertEqual(mem[0x41840e], 'L')
        self.assertEqual(mem[0x41840f], '\t')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RCX, 65024L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.R8, 65024L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4293649L)
        self.assertEqual(cpu.SF, False)

    def test_OR_4(self):
        ''' Instruction OR_4 
            Groups:  
            0x406ed2:	or	qword ptr [rsp], 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x7fffffffcac0] = '\x00'
        mem[0x7fffffffcac1] = '\x00'
        mem[0x7fffffffcac2] = '\x00'
        mem[0x7fffffffcac3] = '\x00'
        mem[0x7fffffffcac4] = '\x00'
        mem[0x7fffffffcac5] = '\x00'
        mem[0x7fffffffcac6] = '\x00'
        mem[0x7fffffffcac7] = '\x00'
        mem[0x00406ed2] = 'H'
        mem[0x00406ed3] = '\x83'
        mem[0x00406ed4] = '\x0c'
        mem[0x00406ed5] = '$'
        mem[0x00406ed6] = '\x00'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406ed2
        cpu.PF = True
        cpu.RSP = 0x7fffffffcac0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffcac0], '\x00')
        self.assertEqual(mem[0x7fffffffcac1], '\x00')
        self.assertEqual(mem[0x7fffffffcac2], '\x00')
        self.assertEqual(mem[0x7fffffffcac3], '\x00')
        self.assertEqual(mem[0x7fffffffcac4], '\x00')
        self.assertEqual(mem[0x7fffffffcac5], '\x00')
        self.assertEqual(mem[0x7fffffffcac6], '\x00')
        self.assertEqual(mem[0x7fffffffcac7], '\x00')
        self.assertEqual(mem[0x406ed2], 'H')
        self.assertEqual(mem[0x406ed3], '\x83')
        self.assertEqual(mem[0x406ed4], '\x0c')
        self.assertEqual(mem[0x406ed5], '$')
        self.assertEqual(mem[0x406ed6], '\x00')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222679L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RSP, 140737488341696L)
        self.assertEqual(cpu.SF, False)

    def test_OR_5(self):
        ''' Instruction OR_5 
            Groups:  
            0x41165e:	or	qword ptr [rsp], 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x7fffffffc990] = '\x98'
        mem[0x7fffffffc991] = '\x98'
        mem[0x7fffffffc992] = 'k'
        mem[0x7fffffffc993] = '\x00'
        mem[0x7fffffffc994] = '\x00'
        mem[0x7fffffffc995] = '\x00'
        mem[0x7fffffffc996] = '\x00'
        mem[0x7fffffffc997] = '\x00'
        mem[0x0041165e] = 'H'
        mem[0x0041165f] = '\x83'
        mem[0x00411660] = '\x0c'
        mem[0x00411661] = '$'
        mem[0x00411662] = '\x00'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x41165e
        cpu.PF = True
        cpu.RSP = 0x7fffffffc990
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffc990], '\x98')
        self.assertEqual(mem[0x7fffffffc991], '\x98')
        self.assertEqual(mem[0x7fffffffc992], 'k')
        self.assertEqual(mem[0x7fffffffc993], '\x00')
        self.assertEqual(mem[0x7fffffffc994], '\x00')
        self.assertEqual(mem[0x7fffffffc995], '\x00')
        self.assertEqual(mem[0x7fffffffc996], '\x00')
        self.assertEqual(mem[0x7fffffffc997], '\x00')
        self.assertEqual(mem[0x41165e], 'H')
        self.assertEqual(mem[0x41165f], '\x83')
        self.assertEqual(mem[0x411660], '\x0c')
        self.assertEqual(mem[0x411661], '$')
        self.assertEqual(mem[0x411662], '\x00')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4265571L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RSP, 140737488341392L)
        self.assertEqual(cpu.SF, False)

    def test_OR_6(self):
        ''' Instruction OR_6 
            Groups:  
            0x437965:	or	dword ptr [rsi + 0x40], 0x80
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x006bd000, 0x1000, 'rwx')
        mem[0x006bd500] = 's'
        mem[0x006bd501] = '\x0c'
        mem[0x006bd502] = '\x00'
        mem[0x006bd503] = '\x00'
        mem[0x00437965] = '\x81'
        mem[0x00437966] = 'N'
        mem[0x00437967] = '@'
        mem[0x00437968] = '\x80'
        mem[0x00437969] = '\x00'
        mem[0x0043796a] = '\x00'
        mem[0x0043796b] = '\x00'
        cpu.RSI = 0x6bd4c0
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x437965
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x6bd500], '\xf3')
        self.assertEqual(mem[0x6bd501], '\x0c')
        self.assertEqual(mem[0x6bd502], '\x00')
        self.assertEqual(mem[0x6bd503], '\x00')
        self.assertEqual(mem[0x437965], '\x81')
        self.assertEqual(mem[0x437966], 'N')
        self.assertEqual(mem[0x437967], '@')
        self.assertEqual(mem[0x437968], '\x80')
        self.assertEqual(mem[0x437969], '\x00')
        self.assertEqual(mem[0x43796a], '\x00')
        self.assertEqual(mem[0x43796b], '\x00')
        self.assertEqual(cpu.RSI, 7066816L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4421996L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_OR_7(self):
        ''' Instruction OR_7 
            Groups:  
            0x418415:	or	rdx, rcx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x00418415] = 'H'
        mem[0x00418416] = '\t'
        mem[0x00418417] = '\xca'
        cpu.PF = True
        cpu.RCX = 0x2000800000000000
        cpu.SF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x418415
        cpu.RDX = 0x80000000
        cpu.execute()
    
        self.assertEqual(mem[0x418415], 'H')
        self.assertEqual(mem[0x418416], '\t')
        self.assertEqual(mem[0x418417], '\xca')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RCX, 2305983746702049280L)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4293656L)
        self.assertEqual(cpu.RDX, 2305983748849532928L)

    def test_OR_8(self):
        ''' Instruction OR_8 
            Groups:  
            0x41348e:	or	qword ptr [rsp], 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffb000, 0x1000, 'rwx')
        mem[0x0041348e] = 'H'
        mem[0x0041348f] = '\x83'
        mem[0x00413490] = '\x0c'
        mem[0x00413491] = '$'
        mem[0x00413492] = '\x00'
        mem[0x7fffffffba30] = '\x00'
        mem[0x7fffffffba31] = '\x00'
        mem[0x7fffffffba32] = '\x00'
        mem[0x7fffffffba33] = '\x00'
        mem[0x7fffffffba34] = '\x00'
        mem[0x7fffffffba35] = '\x00'
        mem[0x7fffffffba36] = '\x00'
        mem[0x7fffffffba37] = '\x00'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x41348e
        cpu.PF = True
        cpu.RSP = 0x7fffffffba30
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x41348e], 'H')
        self.assertEqual(mem[0x41348f], '\x83')
        self.assertEqual(mem[0x413490], '\x0c')
        self.assertEqual(mem[0x413491], '$')
        self.assertEqual(mem[0x413492], '\x00')
        self.assertEqual(mem[0x7fffffffba30], '\x00')
        self.assertEqual(mem[0x7fffffffba31], '\x00')
        self.assertEqual(mem[0x7fffffffba32], '\x00')
        self.assertEqual(mem[0x7fffffffba33], '\x00')
        self.assertEqual(mem[0x7fffffffba34], '\x00')
        self.assertEqual(mem[0x7fffffffba35], '\x00')
        self.assertEqual(mem[0x7fffffffba36], '\x00')
        self.assertEqual(mem[0x7fffffffba37], '\x00')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4273299L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RSP, 140737488337456L)
        self.assertEqual(cpu.SF, False)

    def test_OR_9(self):
        ''' Instruction OR_9 
            Groups:  
            0x435533:	or	qword ptr [rsp], 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00435000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x00435536] = '$'
        mem[0x00435537] = '\x00'
        mem[0x7fffffffcab3] = '\x00'
        mem[0x7fffffffcab0] = '\x00'
        mem[0x7fffffffcab1] = '\x00'
        mem[0x7fffffffcab2] = '\x00'
        mem[0x00435533] = 'H'
        mem[0x00435534] = '\x83'
        mem[0x00435535] = '\x0c'
        mem[0x7fffffffcab6] = '\x00'
        mem[0x7fffffffcab7] = '\x00'
        mem[0x7fffffffcab4] = '\x00'
        mem[0x7fffffffcab5] = '\x00'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x435533
        cpu.PF = False
        cpu.RSP = 0x7fffffffcab0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffcab6], '\x00')
        self.assertEqual(mem[0x7fffffffcab7], '\x00')
        self.assertEqual(mem[0x7fffffffcab3], '\x00')
        self.assertEqual(mem[0x7fffffffcab0], '\x00')
        self.assertEqual(mem[0x7fffffffcab1], '\x00')
        self.assertEqual(mem[0x7fffffffcab2], '\x00')
        self.assertEqual(mem[0x435533], 'H')
        self.assertEqual(mem[0x435534], '\x83')
        self.assertEqual(mem[0x435535], '\x0c')
        self.assertEqual(mem[0x435536], '$')
        self.assertEqual(mem[0x435537], '\x00')
        self.assertEqual(mem[0x7fffffffcab4], '\x00')
        self.assertEqual(mem[0x7fffffffcab5], '\x00')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4412728L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RSP, 140737488341680L)
        self.assertEqual(cpu.SF, False)

    def test_PCMPEQB_1(self):
        ''' Instruction PCMPEQB_1 
            Groups: sse2 
            0x4183eb:	pcmpeqb	xmm10, xmmword ptr [rax + 0x20]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00494db0] = '/'
        mem[0x00494db1] = 'e'
        mem[0x00494db2] = 't'
        mem[0x00494db3] = 'c'
        mem[0x00494db4] = '/'
        mem[0x00494db5] = 's'
        mem[0x00494db6] = 'u'
        mem[0x00494db7] = 'i'
        mem[0x00494db8] = 'd'
        mem[0x00494db9] = '-'
        mem[0x00494dba] = 'd'
        mem[0x00494dbb] = 'e'
        mem[0x00494dbc] = 'b'
        mem[0x00494dbd] = 'u'
        mem[0x00494dbe] = 'g'
        mem[0x00494dbf] = '\x00'
        mem[0x004183eb] = 'f'
        mem[0x004183ec] = 'D'
        mem[0x004183ed] = '\x0f'
        mem[0x004183ee] = 't'
        mem[0x004183ef] = 'P'
        mem[0x004183f0] = ' '
        cpu.XMM10 = 0x0
        cpu.RIP = 0x4183eb
        cpu.RAX = 0x494d90
        cpu.execute()
    
        self.assertEqual(mem[0x494db0], '/')
        self.assertEqual(mem[0x494db1], 'e')
        self.assertEqual(mem[0x494db2], 't')
        self.assertEqual(mem[0x494db3], 'c')
        self.assertEqual(mem[0x494db4], '/')
        self.assertEqual(mem[0x494db5], 's')
        self.assertEqual(mem[0x494db6], 'u')
        self.assertEqual(mem[0x494db7], 'i')
        self.assertEqual(mem[0x494db8], 'd')
        self.assertEqual(mem[0x494db9], '-')
        self.assertEqual(mem[0x494dba], 'd')
        self.assertEqual(mem[0x494dbb], 'e')
        self.assertEqual(mem[0x494dbc], 'b')
        self.assertEqual(mem[0x494dbd], 'u')
        self.assertEqual(mem[0x494dbe], 'g')
        self.assertEqual(mem[0x494dbf], '\x00')
        self.assertEqual(mem[0x4183eb], 'f')
        self.assertEqual(mem[0x4183ec], 'D')
        self.assertEqual(mem[0x4183ed], '\x0f')
        self.assertEqual(mem[0x4183ee], 't')
        self.assertEqual(mem[0x4183ef], 'P')
        self.assertEqual(mem[0x4183f0], ' ')
        self.assertEqual(cpu.XMM10, 338953138925153547590470800371487866880L)
        self.assertEqual(cpu.RAX, 4803984L)
        self.assertEqual(cpu.RIP, 4293617L)

    def test_PCMPEQB_10(self):
        ''' Instruction PCMPEQB_10 
            Groups: sse2 
            0x4183cf:	pcmpeqb	xmm12, xmm8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183d0] = 'E'
        mem[0x004183d1] = '\x0f'
        mem[0x004183d2] = 't'
        mem[0x004183d3] = '\xe0'
        mem[0x004183cf] = 'f'
        cpu.XMM12 = 0x425f444c00574f4e5f444e49425f444c
        cpu.XMM8 = 0x0
        cpu.RIP = 0x4183cf
        cpu.execute()
    
        self.assertEqual(mem[0x4183d0], 'E')
        self.assertEqual(mem[0x4183d1], '\x0f')
        self.assertEqual(mem[0x4183d2], 't')
        self.assertEqual(mem[0x4183d3], '\xe0')
        self.assertEqual(mem[0x4183cf], 'f')
        self.assertEqual(cpu.XMM12, 78918677504442992524819169280L)
        self.assertEqual(cpu.XMM8, 0)
        self.assertEqual(cpu.RIP, 4293588L)

    def test_PCMPEQB_11(self):
        ''' Instruction PCMPEQB_11 
            Groups: sse2 
            0x4183cf:	pcmpeqb	xmm12, xmm8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183d0] = 'E'
        mem[0x004183d1] = '\x0f'
        mem[0x004183d2] = 't'
        mem[0x004183d3] = '\xe0'
        mem[0x004183cf] = 'f'
        cpu.XMM12 = 0x555054554f5f454c49464f52505f444c
        cpu.XMM8 = 0x0
        cpu.RIP = 0x4183cf
        cpu.execute()
    
        self.assertEqual(mem[0x4183d0], 'E')
        self.assertEqual(mem[0x4183d1], '\x0f')
        self.assertEqual(mem[0x4183d2], 't')
        self.assertEqual(mem[0x4183d3], '\xe0')
        self.assertEqual(mem[0x4183cf], 'f')
        self.assertEqual(cpu.XMM12, 0)
        self.assertEqual(cpu.XMM8, 0)
        self.assertEqual(cpu.RIP, 4293588L)

    def test_PCMPEQB_12(self):
        ''' Instruction PCMPEQB_12 
            Groups: sse2 
            0x4183cf:	pcmpeqb	xmm12, xmm8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183d0] = 'E'
        mem[0x004183d1] = '\x0f'
        mem[0x004183d2] = 't'
        mem[0x004183d3] = '\xe0'
        mem[0x004183cf] = 'f'
        cpu.XMM12 = 0x4b4145575f43494d414e59445f444c
        cpu.XMM8 = 0x0
        cpu.RIP = 0x4183cf
        cpu.execute()
    
        self.assertEqual(mem[0x4183d0], 'E')
        self.assertEqual(mem[0x4183d1], '\x0f')
        self.assertEqual(mem[0x4183d2], 't')
        self.assertEqual(mem[0x4183d3], '\xe0')
        self.assertEqual(mem[0x4183cf], 'f')
        self.assertEqual(cpu.XMM12, 338953138925153547590470800371487866880L)
        self.assertEqual(cpu.XMM8, 0)
        self.assertEqual(cpu.RIP, 4293588L)

    def test_PCMPEQB_13(self):
        ''' Instruction PCMPEQB_13 
            Groups: sse2 
            0x457942:	pcmpeqb	xmm5, xmm2
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x00457942] = 'f'
        mem[0x00457943] = '\x0f'
        mem[0x00457944] = 't'
        mem[0x00457945] = '\xea'
        cpu.XMM2 = 0x0
        cpu.RIP = 0x457942
        cpu.XMM5 = 0x2f65726f6369746e616d2f737463656a
        cpu.execute()
    
        self.assertEqual(mem[0x457942], 'f')
        self.assertEqual(mem[0x457943], '\x0f')
        self.assertEqual(mem[0x457944], 't')
        self.assertEqual(mem[0x457945], '\xea')
        self.assertEqual(cpu.XMM2, 0)
        self.assertEqual(cpu.RIP, 4553030L)
        self.assertEqual(cpu.XMM5, 0)

    def test_PCMPEQB_14(self):
        ''' Instruction PCMPEQB_14 
            Groups: sse2 
            0x457953:	pcmpeqb	xmm3, xmm1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x00457953] = 'f'
        mem[0x00457954] = '\x0f'
        mem[0x00457955] = 't'
        mem[0x00457956] = '\xd9'
        cpu.XMM3 = 0x7865646e692f6f7475612f7374736574
        cpu.XMM1 = 0x2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f
        cpu.RIP = 0x457953
        cpu.execute()
    
        self.assertEqual(mem[0x457953], 'f')
        self.assertEqual(mem[0x457954], '\x0f')
        self.assertEqual(mem[0x457955], 't')
        self.assertEqual(mem[0x457956], '\xd9')
        self.assertEqual(cpu.XMM3, 308276084002010815015157760L)
        self.assertEqual(cpu.XMM1, 62718710765820030520700417840365121327L)
        self.assertEqual(cpu.RIP, 4553047L)

    def test_PCMPEQB_15(self):
        ''' Instruction PCMPEQB_15 
            Groups: sse2 
            0x4183eb:	pcmpeqb	xmm10, xmmword ptr [rax + 0x20]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x004183eb] = 'f'
        mem[0x004183ec] = 'D'
        mem[0x004183ed] = '\x0f'
        mem[0x004183ee] = 't'
        mem[0x004183ef] = 'P'
        mem[0x00494de0] = 'e'
        mem[0x00494de1] = 't'
        mem[0x00494de2] = 'u'
        mem[0x00494de3] = 'p'
        mem[0x00494de4] = '_'
        mem[0x00494de5] = 'v'
        mem[0x00494de6] = 'd'
        mem[0x00494de7] = 's'
        mem[0x00494de8] = 'o'
        mem[0x00494de9] = '\x00'
        mem[0x00494dea] = '\x00'
        mem[0x00494deb] = '\x00'
        mem[0x00494dec] = '\x00'
        mem[0x00494ded] = '\x00'
        mem[0x00494dee] = '\x00'
        mem[0x00494def] = '\x00'
        mem[0x004183f0] = ' '
        cpu.XMM10 = 0x0
        cpu.RIP = 0x4183eb
        cpu.RAX = 0x494dc0
        cpu.execute()
    
        self.assertEqual(mem[0x494deb], '\x00')
        self.assertEqual(mem[0x494dec], '\x00')
        self.assertEqual(mem[0x494ded], '\x00')
        self.assertEqual(mem[0x494dee], '\x00')
        self.assertEqual(mem[0x494def], '\x00')
        self.assertEqual(mem[0x494de0], 'e')
        self.assertEqual(mem[0x494de1], 't')
        self.assertEqual(mem[0x494de2], 'u')
        self.assertEqual(mem[0x494de3], 'p')
        self.assertEqual(mem[0x494de4], '_')
        self.assertEqual(mem[0x494de5], 'v')
        self.assertEqual(mem[0x494de6], 'd')
        self.assertEqual(mem[0x494de7], 's')
        self.assertEqual(mem[0x494de8], 'o')
        self.assertEqual(mem[0x494de9], '\x00')
        self.assertEqual(mem[0x494dea], '\x00')
        self.assertEqual(mem[0x4183eb], 'f')
        self.assertEqual(mem[0x4183ec], 'D')
        self.assertEqual(mem[0x4183ed], '\x0f')
        self.assertEqual(mem[0x4183ee], 't')
        self.assertEqual(mem[0x4183ef], 'P')
        self.assertEqual(mem[0x4183f0], ' ')
        self.assertEqual(cpu.XMM10, 340282366920938458741008124562122997760L)
        self.assertEqual(cpu.RAX, 4804032L)
        self.assertEqual(cpu.RIP, 4293617L)

    def test_PCMPEQB_16(self):
        ''' Instruction PCMPEQB_16 
            Groups: sse2 
            0x4183e5:	pcmpeqb	xmm9, xmmword ptr [rax + 0x10]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00494da0] = '_'
        mem[0x00494da1] = 'P'
        mem[0x00494da2] = 'R'
        mem[0x00494da3] = 'O'
        mem[0x00494da4] = 'F'
        mem[0x00494da5] = 'I'
        mem[0x00494da6] = 'L'
        mem[0x00494da7] = 'E'
        mem[0x00494da8] = '_'
        mem[0x00494da9] = 'O'
        mem[0x00494daa] = 'U'
        mem[0x00494dab] = 'T'
        mem[0x00494dac] = 'P'
        mem[0x00494dad] = 'U'
        mem[0x00494dae] = 'T'
        mem[0x00494daf] = '\x00'
        mem[0x004183e5] = 'f'
        mem[0x004183e6] = 'D'
        mem[0x004183e7] = '\x0f'
        mem[0x004183e8] = 't'
        mem[0x004183e9] = 'H'
        mem[0x004183ea] = '\x10'
        cpu.XMM9 = 0x0
        cpu.RIP = 0x4183e5
        cpu.RAX = 0x494d90
        cpu.execute()
    
        self.assertEqual(mem[0x494da0], '_')
        self.assertEqual(mem[0x494da1], 'P')
        self.assertEqual(mem[0x494da2], 'R')
        self.assertEqual(mem[0x494da3], 'O')
        self.assertEqual(mem[0x494da4], 'F')
        self.assertEqual(mem[0x494da5], 'I')
        self.assertEqual(mem[0x494da6], 'L')
        self.assertEqual(mem[0x494da7], 'E')
        self.assertEqual(mem[0x494da8], '_')
        self.assertEqual(mem[0x494da9], 'O')
        self.assertEqual(mem[0x494daa], 'U')
        self.assertEqual(mem[0x494dab], 'T')
        self.assertEqual(mem[0x494dac], 'P')
        self.assertEqual(mem[0x494dad], 'U')
        self.assertEqual(mem[0x494dae], 'T')
        self.assertEqual(mem[0x494daf], '\x00')
        self.assertEqual(mem[0x4183e5], 'f')
        self.assertEqual(mem[0x4183e6], 'D')
        self.assertEqual(mem[0x4183e7], '\x0f')
        self.assertEqual(mem[0x4183e8], 't')
        self.assertEqual(mem[0x4183e9], 'H')
        self.assertEqual(mem[0x4183ea], '\x10')
        self.assertEqual(cpu.XMM9, 338953138925153547590470800371487866880L)
        self.assertEqual(cpu.RAX, 4803984L)
        self.assertEqual(cpu.RIP, 4293611L)

    def test_PCMPEQB_17(self):
        ''' Instruction PCMPEQB_17 
            Groups: sse2 
            0x45795b:	pcmpeqb	xmm2, xmm0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x0045795b] = 'f'
        mem[0x0045795c] = '\x0f'
        mem[0x0045795d] = 't'
        mem[0x0045795e] = '\xd0'
        cpu.XMM2 = 0x0
        cpu.XMM0 = 0x5800326772610031677261006c6c6568
        cpu.RIP = 0x45795b
        cpu.execute()
    
        self.assertEqual(mem[0x45795b], 'f')
        self.assertEqual(mem[0x45795c], '\x0f')
        self.assertEqual(mem[0x45795d], 't')
        self.assertEqual(mem[0x45795e], '\xd0')
        self.assertEqual(cpu.XMM2, 1324035698927585248728409418697277440L)
        self.assertEqual(cpu.XMM0, 116973085945452076203763534266299606376L)
        self.assertEqual(cpu.RIP, 4553055L)

    def test_PCMPEQB_18(self):
        ''' Instruction PCMPEQB_18 
            Groups: sse2 
            0x4183f1:	pcmpeqb	xmm11, xmmword ptr [rax + 0x30]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x004183f1] = 'f'
        mem[0x004183f2] = 'D'
        mem[0x004183f3] = '\x0f'
        mem[0x004183f4] = 't'
        mem[0x004183f5] = 'X'
        mem[0x004183f6] = '0'
        mem[0x00494df0] = 'i'
        mem[0x00494df1] = 'n'
        mem[0x00494df2] = 'f'
        mem[0x00494df3] = 'o'
        mem[0x00494df4] = '['
        mem[0x00494df5] = '9'
        mem[0x00494df6] = ']'
        mem[0x00494df7] = '-'
        mem[0x00494df8] = '>'
        mem[0x00494df9] = 'd'
        mem[0x00494dfa] = '_'
        mem[0x00494dfb] = 'u'
        mem[0x00494dfc] = 'n'
        mem[0x00494dfd] = '.'
        mem[0x00494dfe] = 'd'
        mem[0x00494dff] = '_'
        cpu.XMM11 = 0x0
        cpu.RIP = 0x4183f1
        cpu.RAX = 0x494dc0
        cpu.execute()
    
        self.assertEqual(mem[0x494df1], 'n')
        self.assertEqual(mem[0x494df2], 'f')
        self.assertEqual(mem[0x4183f3], '\x0f')
        self.assertEqual(mem[0x4183f4], 't')
        self.assertEqual(mem[0x494df5], '9')
        self.assertEqual(mem[0x494df6], ']')
        self.assertEqual(mem[0x494df0], 'i')
        self.assertEqual(mem[0x4183f1], 'f')
        self.assertEqual(mem[0x4183f2], 'D')
        self.assertEqual(mem[0x494df3], 'o')
        self.assertEqual(mem[0x494df4], '[')
        self.assertEqual(mem[0x4183f5], 'X')
        self.assertEqual(mem[0x4183f6], '0')
        self.assertEqual(mem[0x494df7], '-')
        self.assertEqual(mem[0x494df8], '>')
        self.assertEqual(mem[0x494df9], 'd')
        self.assertEqual(mem[0x494dfa], '_')
        self.assertEqual(mem[0x494dfb], 'u')
        self.assertEqual(mem[0x494dfc], 'n')
        self.assertEqual(mem[0x494dfd], '.')
        self.assertEqual(mem[0x494dfe], 'd')
        self.assertEqual(mem[0x494dff], '_')
        self.assertEqual(cpu.XMM11, 0)
        self.assertEqual(cpu.RAX, 4804032L)
        self.assertEqual(cpu.RIP, 4293623L)

    def test_PCMPEQB_19(self):
        ''' Instruction PCMPEQB_19 
            Groups: sse2 
            0x4183cf:	pcmpeqb	xmm12, xmm8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183d0] = 'E'
        mem[0x004183d1] = '\x0f'
        mem[0x004183d2] = 't'
        mem[0x004183d3] = '\xe0'
        mem[0x004183cf] = 'f'
        cpu.XMM12 = 0x485441505f5952415242494c5f444c
        cpu.XMM8 = 0x0
        cpu.RIP = 0x4183cf
        cpu.execute()
    
        self.assertEqual(mem[0x4183d0], 'E')
        self.assertEqual(mem[0x4183d1], '\x0f')
        self.assertEqual(mem[0x4183d2], 't')
        self.assertEqual(mem[0x4183d3], '\xe0')
        self.assertEqual(mem[0x4183cf], 'f')
        self.assertEqual(cpu.XMM12, 338953138925153547590470800371487866880L)
        self.assertEqual(cpu.XMM8, 0)
        self.assertEqual(cpu.RIP, 4293588L)

    def test_PCMPEQB_2(self):
        ''' Instruction PCMPEQB_2 
            Groups: sse2 
            0x4183e5:	pcmpeqb	xmm9, xmmword ptr [rax + 0x10]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00494dd0] = '_'
        mem[0x00494dd1] = 'A'
        mem[0x00494dd2] = 'S'
        mem[0x00494dd3] = 'S'
        mem[0x00494dd4] = 'U'
        mem[0x00494dd5] = 'M'
        mem[0x00494dd6] = 'E'
        mem[0x00494dd7] = '_'
        mem[0x00494dd8] = 'K'
        mem[0x00494dd9] = 'E'
        mem[0x00494dda] = 'R'
        mem[0x00494ddb] = 'N'
        mem[0x00494ddc] = 'E'
        mem[0x00494ddd] = 'L'
        mem[0x00494dde] = '\x00'
        mem[0x00494ddf] = 's'
        mem[0x004183e5] = 'f'
        mem[0x004183e6] = 'D'
        mem[0x004183e7] = '\x0f'
        mem[0x004183e8] = 't'
        mem[0x004183e9] = 'H'
        mem[0x004183ea] = '\x10'
        cpu.XMM9 = 0x0
        cpu.RIP = 0x4183e5
        cpu.RAX = 0x494dc0
        cpu.execute()
    
        self.assertEqual(mem[0x494dd0], '_')
        self.assertEqual(mem[0x494dd1], 'A')
        self.assertEqual(mem[0x494dd2], 'S')
        self.assertEqual(mem[0x494dd3], 'S')
        self.assertEqual(mem[0x494dd4], 'U')
        self.assertEqual(mem[0x494dd5], 'M')
        self.assertEqual(mem[0x494dd6], 'E')
        self.assertEqual(mem[0x494dd7], '_')
        self.assertEqual(mem[0x494dd8], 'K')
        self.assertEqual(mem[0x494dd9], 'E')
        self.assertEqual(mem[0x494dda], 'R')
        self.assertEqual(mem[0x494ddb], 'N')
        self.assertEqual(mem[0x494ddc], 'E')
        self.assertEqual(mem[0x494ddd], 'L')
        self.assertEqual(mem[0x494dde], '\x00')
        self.assertEqual(mem[0x494ddf], 's')
        self.assertEqual(mem[0x4183e5], 'f')
        self.assertEqual(mem[0x4183e6], 'D')
        self.assertEqual(mem[0x4183e7], '\x0f')
        self.assertEqual(mem[0x4183e8], 't')
        self.assertEqual(mem[0x4183e9], 'H')
        self.assertEqual(mem[0x4183ea], '\x10')
        self.assertEqual(cpu.XMM9, 1324035698926381045275276563951124480L)
        self.assertEqual(cpu.RAX, 4804032L)
        self.assertEqual(cpu.RIP, 4293611L)

    def test_PCMPEQB_20(self):
        ''' Instruction PCMPEQB_20 
            Groups: sse2 
            0x45793e:	pcmpeqb	xmm4, xmm1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x00457940] = 't'
        mem[0x00457941] = '\xe1'
        mem[0x0045793e] = 'f'
        mem[0x0045793f] = '\x0f'
        cpu.XMM1 = 0x2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f
        cpu.RIP = 0x45793e
        cpu.XMM4 = 0x2f65726f6369746e616d2f737463656a
        cpu.execute()
    
        self.assertEqual(mem[0x457940], 't')
        self.assertEqual(mem[0x457941], '\xe1')
        self.assertEqual(mem[0x45793e], 'f')
        self.assertEqual(mem[0x45793f], '\x0f')
        self.assertEqual(cpu.XMM1, 62718710765820030520700417840365121327L)
        self.assertEqual(cpu.XMM4, 338953138925153547590471080746952949760L)
        self.assertEqual(cpu.RIP, 4553026L)

    def test_PCMPEQB_21(self):
        ''' Instruction PCMPEQB_21 
            Groups: sse2 
            0x4183cf:	pcmpeqb	xmm12, xmm8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183d0] = 'E'
        mem[0x004183d1] = '\x0f'
        mem[0x004183d2] = 't'
        mem[0x004183d3] = '\xe0'
        mem[0x004183cf] = 'f'
        cpu.XMM12 = 0x253a4825206525206225206125000200
        cpu.XMM8 = 0x0
        cpu.RIP = 0x4183cf
        cpu.execute()
    
        self.assertEqual(mem[0x4183d0], 'E')
        self.assertEqual(mem[0x4183d1], '\x0f')
        self.assertEqual(mem[0x4183d2], 't')
        self.assertEqual(mem[0x4183d3], '\xe0')
        self.assertEqual(mem[0x4183cf], 'f')
        self.assertEqual(cpu.XMM12, 16711935)
        self.assertEqual(cpu.XMM8, 0)
        self.assertEqual(cpu.RIP, 4293588L)

    def test_PCMPEQB_3(self):
        ''' Instruction PCMPEQB_3 
            Groups: sse2 
            0x4183cf:	pcmpeqb	xmm12, xmm8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183d0] = 'E'
        mem[0x004183d1] = '\x0f'
        mem[0x004183d2] = 't'
        mem[0x004183d3] = '\xe0'
        mem[0x004183cf] = 'f'
        cpu.XMM12 = 0x312e6f732e6f7364762d78756e696c
        cpu.XMM8 = 0x0
        cpu.RIP = 0x4183cf
        cpu.execute()
    
        self.assertEqual(mem[0x4183d0], 'E')
        self.assertEqual(mem[0x4183d1], '\x0f')
        self.assertEqual(mem[0x4183d2], 't')
        self.assertEqual(mem[0x4183d3], '\xe0')
        self.assertEqual(mem[0x4183cf], 'f')
        self.assertEqual(cpu.XMM12, 338953138925153547590470800371487866880L)
        self.assertEqual(cpu.XMM8, 0)
        self.assertEqual(cpu.RIP, 4293588L)

    def test_PCMPEQB_4(self):
        ''' Instruction PCMPEQB_4 
            Groups: sse2 
            0x4183cf:	pcmpeqb	xmm12, xmm8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183d0] = 'E'
        mem[0x004183d1] = '\x0f'
        mem[0x004183d2] = 't'
        mem[0x004183d3] = '\xe0'
        mem[0x004183cf] = 'f'
        cpu.XMM12 = 0x64762d7075746573004e5241575f444c
        cpu.XMM8 = 0x0
        cpu.RIP = 0x4183cf
        cpu.execute()
    
        self.assertEqual(mem[0x4183d0], 'E')
        self.assertEqual(mem[0x4183d1], '\x0f')
        self.assertEqual(mem[0x4183d2], 't')
        self.assertEqual(mem[0x4183d3], '\xe0')
        self.assertEqual(mem[0x4183cf], 'f')
        self.assertEqual(cpu.XMM12, 18374686479671623680L)
        self.assertEqual(cpu.XMM8, 0)
        self.assertEqual(cpu.RIP, 4293588L)

    def test_PCMPEQB_5(self):
        ''' Instruction PCMPEQB_5 
            Groups: sse2 
            0x457905:	pcmpeqb	xmm3, xmm2
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x00457908] = '\xda'
        mem[0x00457905] = 'f'
        mem[0x00457906] = '\x0f'
        mem[0x00457907] = 't'
        cpu.XMM2 = 0x0
        cpu.XMM3 = 0x6f72502f6570696c65662f656d6f682f
        cpu.RIP = 0x457905
        cpu.execute()
    
        self.assertEqual(mem[0x457908], '\xda')
        self.assertEqual(mem[0x457905], 'f')
        self.assertEqual(mem[0x457906], '\x0f')
        self.assertEqual(mem[0x457907], 't')
        self.assertEqual(cpu.XMM2, 0)
        self.assertEqual(cpu.XMM3, 0)
        self.assertEqual(cpu.RIP, 4552969L)

    def test_PCMPEQB_6(self):
        ''' Instruction PCMPEQB_6 
            Groups: sse2 
            0x457901:	pcmpeqb	xmm0, xmm1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x00457901] = 'f'
        mem[0x00457902] = '\x0f'
        mem[0x00457903] = 't'
        mem[0x00457904] = '\xc1'
        cpu.XMM0 = 0x6f72502f6570696c65662f656d6f682f
        cpu.XMM1 = 0x2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f
        cpu.RIP = 0x457901
        cpu.execute()
    
        self.assertEqual(mem[0x457901], 'f')
        self.assertEqual(mem[0x457902], '\x0f')
        self.assertEqual(mem[0x457903], 't')
        self.assertEqual(mem[0x457904], '\xc1')
        self.assertEqual(cpu.XMM0, 20203181441137406366729172418815L)
        self.assertEqual(cpu.XMM1, 62718710765820030520700417840365121327L)
        self.assertEqual(cpu.RIP, 4552965L)

    def test_PCMPEQB_7(self):
        ''' Instruction PCMPEQB_7 
            Groups: sse2 
            0x4183f1:	pcmpeqb	xmm11, xmmword ptr [rax + 0x30]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x00494dc0] = 'M'
        mem[0x00494dc1] = 'A'
        mem[0x00494dc2] = 'L'
        mem[0x00494dc3] = 'L'
        mem[0x00494dc4] = 'O'
        mem[0x00494dc5] = 'C'
        mem[0x00494dc6] = '_'
        mem[0x00494dc7] = 'C'
        mem[0x00494dc8] = 'H'
        mem[0x00494dc9] = 'E'
        mem[0x00494dca] = 'C'
        mem[0x00494dcb] = 'K'
        mem[0x00494dcc] = '_'
        mem[0x00494dcd] = '\x00'
        mem[0x00494dce] = 'L'
        mem[0x00494dcf] = 'D'
        mem[0x004183f1] = 'f'
        mem[0x004183f2] = 'D'
        mem[0x004183f3] = '\x0f'
        mem[0x004183f4] = 't'
        mem[0x004183f5] = 'X'
        mem[0x004183f6] = '0'
        cpu.XMM11 = 0x0
        cpu.RIP = 0x4183f1
        cpu.RAX = 0x494d90
        cpu.execute()
    
        self.assertEqual(mem[0x494dc0], 'M')
        self.assertEqual(mem[0x494dc1], 'A')
        self.assertEqual(mem[0x494dc2], 'L')
        self.assertEqual(mem[0x494dc3], 'L')
        self.assertEqual(mem[0x494dc4], 'O')
        self.assertEqual(mem[0x494dc5], 'C')
        self.assertEqual(mem[0x494dc6], '_')
        self.assertEqual(mem[0x494dc7], 'C')
        self.assertEqual(mem[0x494dc8], 'H')
        self.assertEqual(mem[0x494dc9], 'E')
        self.assertEqual(mem[0x494dca], 'C')
        self.assertEqual(mem[0x494dcb], 'K')
        self.assertEqual(mem[0x494dcc], '_')
        self.assertEqual(mem[0x494dcd], '\x00')
        self.assertEqual(mem[0x494dce], 'L')
        self.assertEqual(mem[0x494dcf], 'D')
        self.assertEqual(mem[0x4183f1], 'f')
        self.assertEqual(mem[0x4183f2], 'D')
        self.assertEqual(mem[0x4183f3], '\x0f')
        self.assertEqual(mem[0x4183f4], 't')
        self.assertEqual(mem[0x4183f5], 'X')
        self.assertEqual(mem[0x4183f6], '0')
        self.assertEqual(cpu.XMM11, 5172014448931175958106549077934080L)
        self.assertEqual(cpu.RAX, 4803984L)
        self.assertEqual(cpu.RIP, 4293623L)

    def test_PCMPEQB_8(self):
        ''' Instruction PCMPEQB_8 
            Groups: sse2 
            0x457978:	pcmpeqb	xmm0, xmm1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x00457978] = 'f'
        mem[0x00457979] = '\x0f'
        mem[0x0045797a] = 't'
        mem[0x0045797b] = '\xc1'
        cpu.XMM0 = 0x5800326772610031677261006c6c6568
        cpu.XMM1 = 0x2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f
        cpu.RIP = 0x457978
        cpu.execute()
    
        self.assertEqual(mem[0x457978], 'f')
        self.assertEqual(mem[0x457979], '\x0f')
        self.assertEqual(mem[0x45797a], 't')
        self.assertEqual(mem[0x45797b], '\xc1')
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 62718710765820030520700417840365121327L)
        self.assertEqual(cpu.RIP, 4553084L)

    def test_PCMPEQB_9(self):
        ''' Instruction PCMPEQB_9 
            Groups: sse2 
            0x4183cf:	pcmpeqb	xmm12, xmm8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183d0] = 'E'
        mem[0x004183d1] = '\x0f'
        mem[0x004183d2] = 't'
        mem[0x004183d3] = '\xe0'
        mem[0x004183cf] = 'f'
        cpu.XMM12 = 0x445f444c00544f4e5f444e49425f444c
        cpu.XMM8 = 0x0
        cpu.RIP = 0x4183cf
        cpu.execute()
    
        self.assertEqual(mem[0x4183d0], 'E')
        self.assertEqual(mem[0x4183d1], '\x0f')
        self.assertEqual(mem[0x4183d2], 't')
        self.assertEqual(mem[0x4183d3], '\xe0')
        self.assertEqual(mem[0x4183cf], 'f')
        self.assertEqual(cpu.XMM12, 78918677504442992524819169280L)
        self.assertEqual(cpu.XMM8, 0)
        self.assertEqual(cpu.RIP, 4293588L)

    def test_PMOVMSKB_1(self):
        ''' Instruction PMOVMSKB_1 
            Groups: sse2 
            0x4183d4:	pmovmskb	edx, xmm12
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183d8] = '\xd4'
        mem[0x004183d4] = 'f'
        mem[0x004183d5] = 'A'
        mem[0x004183d6] = '\x0f'
        mem[0x004183d7] = '\xd7'
        cpu.EDX = 0x1
        cpu.XMM12 = 0x0
        cpu.RIP = 0x4183d4
        cpu.execute()
    
        self.assertEqual(mem[0x4183d8], '\xd4')
        self.assertEqual(mem[0x4183d4], 'f')
        self.assertEqual(mem[0x4183d5], 'A')
        self.assertEqual(mem[0x4183d6], '\x0f')
        self.assertEqual(mem[0x4183d7], '\xd7')
        self.assertEqual(cpu.EDX, 0L)
        self.assertEqual(cpu.XMM12, 0)
        self.assertEqual(cpu.RIP, 4293593L)

    def test_PMOVMSKB_10(self):
        ''' Instruction PMOVMSKB_10 
            Groups: sse2 
            0x4183f7:	pmovmskb	edx, xmm9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183f8] = 'A'
        mem[0x004183f9] = '\x0f'
        mem[0x004183fa] = '\xd7'
        mem[0x004183fb] = '\xd1'
        mem[0x004183f7] = 'f'
        cpu.EDX = 0x0
        cpu.XMM9 = 0xff0000000000000000000000000000
        cpu.RIP = 0x4183f7
        cpu.execute()
    
        self.assertEqual(mem[0x4183f8], 'A')
        self.assertEqual(mem[0x4183f9], '\x0f')
        self.assertEqual(mem[0x4183fa], '\xd7')
        self.assertEqual(mem[0x4183fb], '\xd1')
        self.assertEqual(mem[0x4183f7], 'f')
        self.assertEqual(cpu.EDX, 16384L)
        self.assertEqual(cpu.XMM9, 1324035698926381045275276563951124480L)
        self.assertEqual(cpu.RIP, 4293628L)

    def test_PMOVMSKB_11(self):
        ''' Instruction PMOVMSKB_11 
            Groups: sse2 
            0x4183d4:	pmovmskb	edx, xmm12
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183d8] = '\xd4'
        mem[0x004183d4] = 'f'
        mem[0x004183d5] = 'A'
        mem[0x004183d6] = '\x0f'
        mem[0x004183d7] = '\xd7'
        cpu.EDX = 0x1
        cpu.XMM12 = 0xff0000000000000000000000
        cpu.RIP = 0x4183d4
        cpu.execute()
    
        self.assertEqual(mem[0x4183d8], '\xd4')
        self.assertEqual(mem[0x4183d4], 'f')
        self.assertEqual(mem[0x4183d5], 'A')
        self.assertEqual(mem[0x4183d6], '\x0f')
        self.assertEqual(mem[0x4183d7], '\xd7')
        self.assertEqual(cpu.EDX, 2048L)
        self.assertEqual(cpu.XMM12, 78918677504442992524819169280L)
        self.assertEqual(cpu.RIP, 4293593L)

    def test_PMOVMSKB_12(self):
        ''' Instruction PMOVMSKB_12 
            Groups: sse2 
            0x457968:	pmovmskb	eax, xmm5
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x00457968] = 'f'
        mem[0x00457969] = '\x0f'
        mem[0x0045796a] = '\xd7'
        mem[0x0045796b] = '\xc5'
        cpu.EAX = 0xf91
        cpu.RIP = 0x457968
        cpu.XMM5 = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x457968], 'f')
        self.assertEqual(mem[0x457969], '\x0f')
        self.assertEqual(mem[0x45796a], '\xd7')
        self.assertEqual(mem[0x45796b], '\xc5')
        self.assertEqual(cpu.EAX, 0L)
        self.assertEqual(cpu.RIP, 4553068L)
        self.assertEqual(cpu.XMM5, 0)

    def test_PMOVMSKB_13(self):
        ''' Instruction PMOVMSKB_13 
            Groups: sse2 
            0x4183d4:	pmovmskb	edx, xmm12
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183d8] = '\xd4'
        mem[0x004183d4] = 'f'
        mem[0x004183d5] = 'A'
        mem[0x004183d6] = '\x0f'
        mem[0x004183d7] = '\xd7'
        cpu.EDX = 0x6bf720
        cpu.XMM12 = 0xff0000000000000000000000
        cpu.RIP = 0x4183d4
        cpu.execute()
    
        self.assertEqual(mem[0x4183d8], '\xd4')
        self.assertEqual(mem[0x4183d4], 'f')
        self.assertEqual(mem[0x4183d5], 'A')
        self.assertEqual(mem[0x4183d6], '\x0f')
        self.assertEqual(mem[0x4183d7], '\xd7')
        self.assertEqual(cpu.EDX, 2048L)
        self.assertEqual(cpu.XMM12, 78918677504442992524819169280L)
        self.assertEqual(cpu.RIP, 4293593L)

    def test_PMOVMSKB_14(self):
        ''' Instruction PMOVMSKB_14 
            Groups: sse2 
            0x457909:	pmovmskb	ecx, xmm0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x00457909] = 'f'
        mem[0x0045790a] = '\x0f'
        mem[0x0045790b] = '\xd7'
        mem[0x0045790c] = '\xc8'
        cpu.XMM0 = 0xff000000000000ff00000000ff
        cpu.RIP = 0x457909
        cpu.ECX = 0x400120
        cpu.execute()
    
        self.assertEqual(mem[0x457909], 'f')
        self.assertEqual(mem[0x45790a], '\x0f')
        self.assertEqual(mem[0x45790b], '\xd7')
        self.assertEqual(mem[0x45790c], '\xc8')
        self.assertEqual(cpu.XMM0, 20203181441137406366729172418815L)
        self.assertEqual(cpu.RIP, 4552973L)
        self.assertEqual(cpu.ECX, 4129L)

    def test_PMOVMSKB_15(self):
        ''' Instruction PMOVMSKB_15 
            Groups: sse2 
            0x457963:	pmovmskb	r8d, xmm3
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x00457963] = 'f'
        mem[0x00457964] = 'D'
        mem[0x00457965] = '\x0f'
        mem[0x00457966] = '\xd7'
        mem[0x00457967] = '\xc3'
        cpu.XMM3 = 0xff00000000ff0000000000
        cpu.R8D = 0xfe00
        cpu.RIP = 0x457963
        cpu.execute()
    
        self.assertEqual(mem[0x457963], 'f')
        self.assertEqual(mem[0x457964], 'D')
        self.assertEqual(mem[0x457965], '\x0f')
        self.assertEqual(mem[0x457966], '\xd7')
        self.assertEqual(mem[0x457967], '\xc3')
        self.assertEqual(cpu.XMM3, 308276084002010815015157760L)
        self.assertEqual(cpu.R8D, 1056L)
        self.assertEqual(cpu.RIP, 4553064L)

    def test_PMOVMSKB_16(self):
        ''' Instruction PMOVMSKB_16 
            Groups: sse2 
            0x4183fc:	pmovmskb	r8d, xmm10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x00418400] = '\xc2'
        mem[0x004183fc] = 'f'
        mem[0x004183fd] = 'E'
        mem[0x004183fe] = '\x0f'
        mem[0x004183ff] = '\xd7'
        cpu.XMM10 = 0xff000000000000000000000000000000
        cpu.R8D = 0x3
        cpu.RIP = 0x4183fc
        cpu.execute()
    
        self.assertEqual(mem[0x418400], '\xc2')
        self.assertEqual(mem[0x4183fc], 'f')
        self.assertEqual(mem[0x4183fd], 'E')
        self.assertEqual(mem[0x4183fe], '\x0f')
        self.assertEqual(mem[0x4183ff], '\xd7')
        self.assertEqual(cpu.XMM10, 338953138925153547590470800371487866880L)
        self.assertEqual(cpu.R8D, 32768L)
        self.assertEqual(cpu.RIP, 4293633L)

    def test_PMOVMSKB_17(self):
        ''' Instruction PMOVMSKB_17 
            Groups: sse2 
            0x4183f7:	pmovmskb	edx, xmm9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183f8] = 'A'
        mem[0x004183f9] = '\x0f'
        mem[0x004183fa] = '\xd7'
        mem[0x004183fb] = '\xd1'
        mem[0x004183f7] = 'f'
        cpu.EDX = 0x0
        cpu.XMM9 = 0xff000000000000000000000000000000
        cpu.RIP = 0x4183f7
        cpu.execute()
    
        self.assertEqual(mem[0x4183f8], 'A')
        self.assertEqual(mem[0x4183f9], '\x0f')
        self.assertEqual(mem[0x4183fa], '\xd7')
        self.assertEqual(mem[0x4183fb], '\xd1')
        self.assertEqual(mem[0x4183f7], 'f')
        self.assertEqual(cpu.EDX, 32768L)
        self.assertEqual(cpu.XMM9, 338953138925153547590470800371487866880L)
        self.assertEqual(cpu.RIP, 4293628L)

    def test_PMOVMSKB_18(self):
        ''' Instruction PMOVMSKB_18 
            Groups: sse2 
            0x4183fc:	pmovmskb	r8d, xmm10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x00418400] = '\xc2'
        mem[0x004183fc] = 'f'
        mem[0x004183fd] = 'E'
        mem[0x004183fe] = '\x0f'
        mem[0x004183ff] = '\xd7'
        cpu.XMM10 = 0xffffffffffffff000000000000000000
        cpu.R8D = 0x8000
        cpu.RIP = 0x4183fc
        cpu.execute()
    
        self.assertEqual(mem[0x418400], '\xc2')
        self.assertEqual(mem[0x4183fc], 'f')
        self.assertEqual(mem[0x4183fd], 'E')
        self.assertEqual(mem[0x4183fe], '\x0f')
        self.assertEqual(mem[0x4183ff], '\xd7')
        self.assertEqual(cpu.XMM10, 340282366920938458741008124562122997760L)
        self.assertEqual(cpu.R8D, 65024L)
        self.assertEqual(cpu.RIP, 4293633L)

    def test_PMOVMSKB_19(self):
        ''' Instruction PMOVMSKB_19 
            Groups: sse2 
            0x4183d4:	pmovmskb	edx, xmm12
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183d8] = '\xd4'
        mem[0x004183d4] = 'f'
        mem[0x004183d5] = 'A'
        mem[0x004183d6] = '\x0f'
        mem[0x004183d7] = '\xd7'
        cpu.EDX = 0x6bd3f0
        cpu.XMM12 = 0xff00000000000000
        cpu.RIP = 0x4183d4
        cpu.execute()
    
        self.assertEqual(mem[0x4183d8], '\xd4')
        self.assertEqual(mem[0x4183d4], 'f')
        self.assertEqual(mem[0x4183d5], 'A')
        self.assertEqual(mem[0x4183d6], '\x0f')
        self.assertEqual(mem[0x4183d7], '\xd7')
        self.assertEqual(cpu.EDX, 128L)
        self.assertEqual(cpu.XMM12, 18374686479671623680L)
        self.assertEqual(cpu.RIP, 4293593L)

    def test_PMOVMSKB_2(self):
        ''' Instruction PMOVMSKB_2 
            Groups: sse2 
            0x457994:	pmovmskb	ecx, xmm0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x00457994] = 'f'
        mem[0x00457995] = '\x0f'
        mem[0x00457996] = '\xd7'
        mem[0x00457997] = '\xc8'
        cpu.XMM0 = 0x0
        cpu.RIP = 0x457994
        cpu.ECX = 0x1021
        cpu.execute()
    
        self.assertEqual(mem[0x457994], 'f')
        self.assertEqual(mem[0x457995], '\x0f')
        self.assertEqual(mem[0x457996], '\xd7')
        self.assertEqual(mem[0x457997], '\xc8')
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.RIP, 4553112L)
        self.assertEqual(cpu.ECX, 0L)

    def test_PMOVMSKB_20(self):
        ''' Instruction PMOVMSKB_20 
            Groups: sse2 
            0x45790d:	pmovmskb	edx, xmm3
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x00457910] = '\xd3'
        mem[0x0045790d] = 'f'
        mem[0x0045790e] = '\x0f'
        mem[0x0045790f] = '\xd7'
        cpu.XMM3 = 0x0
        cpu.EDX = 0xffffdc28
        cpu.RIP = 0x45790d
        cpu.execute()
    
        self.assertEqual(mem[0x457910], '\xd3')
        self.assertEqual(mem[0x45790d], 'f')
        self.assertEqual(mem[0x45790e], '\x0f')
        self.assertEqual(mem[0x45790f], '\xd7')
        self.assertEqual(cpu.XMM3, 0)
        self.assertEqual(cpu.EDX, 0L)
        self.assertEqual(cpu.RIP, 4552977L)

    def test_PMOVMSKB_21(self):
        ''' Instruction PMOVMSKB_21 
            Groups: sse2 
            0x45794b:	pmovmskb	edx, xmm5
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x0045794b] = 'f'
        mem[0x0045794c] = '\x0f'
        mem[0x0045794d] = '\xd7'
        mem[0x0045794e] = '\xd5'
        cpu.EDX = 0x0
        cpu.RIP = 0x45794b
        cpu.XMM5 = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x45794b], 'f')
        self.assertEqual(mem[0x45794c], '\x0f')
        self.assertEqual(mem[0x45794d], '\xd7')
        self.assertEqual(mem[0x45794e], '\xd5')
        self.assertEqual(cpu.EDX, 0L)
        self.assertEqual(cpu.RIP, 4553039L)
        self.assertEqual(cpu.XMM5, 0)

    def test_PMOVMSKB_3(self):
        ''' Instruction PMOVMSKB_3 
            Groups: sse2 
            0x45796c:	pmovmskb	esi, xmm2
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x0045796c] = 'f'
        mem[0x0045796d] = '\x0f'
        mem[0x0045796e] = '\xd7'
        mem[0x0045796f] = '\xf2'
        cpu.XMM2 = 0xff00000000ff00000000ff00000000
        cpu.RIP = 0x45796c
        cpu.ESI = 0x2f
        cpu.execute()
    
        self.assertEqual(mem[0x45796c], 'f')
        self.assertEqual(mem[0x45796d], '\x0f')
        self.assertEqual(mem[0x45796e], '\xd7')
        self.assertEqual(mem[0x45796f], '\xf2')
        self.assertEqual(cpu.XMM2, 1324035698927585248728409418697277440L)
        self.assertEqual(cpu.ESI, 16912L)
        self.assertEqual(cpu.RIP, 4553072L)

    def test_PMOVMSKB_4(self):
        ''' Instruction PMOVMSKB_4 
            Groups: sse2 
            0x4183d4:	pmovmskb	edx, xmm12
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183d8] = '\xd4'
        mem[0x004183d4] = 'f'
        mem[0x004183d5] = 'A'
        mem[0x004183d6] = '\x0f'
        mem[0x004183d7] = '\xd7'
        cpu.EDX = 0x6b7810
        cpu.XMM12 = 0xff000000000000000000000000000000
        cpu.RIP = 0x4183d4
        cpu.execute()
    
        self.assertEqual(mem[0x4183d8], '\xd4')
        self.assertEqual(mem[0x4183d4], 'f')
        self.assertEqual(mem[0x4183d5], 'A')
        self.assertEqual(mem[0x4183d6], '\x0f')
        self.assertEqual(mem[0x4183d7], '\xd7')
        self.assertEqual(cpu.EDX, 32768L)
        self.assertEqual(cpu.XMM12, 338953138925153547590470800371487866880L)
        self.assertEqual(cpu.RIP, 4293593L)

    def test_PMOVMSKB_5(self):
        ''' Instruction PMOVMSKB_5 
            Groups: sse2 
            0x418401:	pmovmskb	ecx, xmm11
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x00418401] = 'f'
        mem[0x00418402] = 'A'
        mem[0x00418403] = '\x0f'
        mem[0x00418404] = '\xd7'
        mem[0x00418405] = '\xcb'
        cpu.XMM11 = 0x0
        cpu.RIP = 0x418401
        cpu.ECX = 0xdce
        cpu.execute()
    
        self.assertEqual(mem[0x418401], 'f')
        self.assertEqual(mem[0x418402], 'A')
        self.assertEqual(mem[0x418403], '\x0f')
        self.assertEqual(mem[0x418404], '\xd7')
        self.assertEqual(mem[0x418405], '\xcb')
        self.assertEqual(cpu.XMM11, 0)
        self.assertEqual(cpu.RIP, 4293638L)
        self.assertEqual(cpu.ECX, 0L)

    def test_PMOVMSKB_6(self):
        ''' Instruction PMOVMSKB_6 
            Groups: sse2 
            0x4183d4:	pmovmskb	edx, xmm12
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183d8] = '\xd4'
        mem[0x004183d4] = 'f'
        mem[0x004183d5] = 'A'
        mem[0x004183d6] = '\x0f'
        mem[0x004183d7] = '\xd7'
        cpu.EDX = 0x0
        cpu.XMM12 = 0xff000000000000000000000000000000
        cpu.RIP = 0x4183d4
        cpu.execute()
    
        self.assertEqual(mem[0x4183d8], '\xd4')
        self.assertEqual(mem[0x4183d4], 'f')
        self.assertEqual(mem[0x4183d5], 'A')
        self.assertEqual(mem[0x4183d6], '\x0f')
        self.assertEqual(mem[0x4183d7], '\xd7')
        self.assertEqual(cpu.EDX, 32768L)
        self.assertEqual(cpu.XMM12, 338953138925153547590470800371487866880L)
        self.assertEqual(cpu.RIP, 4293593L)

    def test_PMOVMSKB_7(self):
        ''' Instruction PMOVMSKB_7 
            Groups: sse2 
            0x4183d4:	pmovmskb	edx, xmm12
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183d8] = '\xd4'
        mem[0x004183d4] = 'f'
        mem[0x004183d5] = 'A'
        mem[0x004183d6] = '\x0f'
        mem[0x004183d7] = '\xd7'
        cpu.EDX = 0x0
        cpu.XMM12 = 0x0
        cpu.RIP = 0x4183d4
        cpu.execute()
    
        self.assertEqual(mem[0x4183d8], '\xd4')
        self.assertEqual(mem[0x4183d4], 'f')
        self.assertEqual(mem[0x4183d5], 'A')
        self.assertEqual(mem[0x4183d6], '\x0f')
        self.assertEqual(mem[0x4183d7], '\xd7')
        self.assertEqual(cpu.EDX, 0L)
        self.assertEqual(cpu.XMM12, 0)
        self.assertEqual(cpu.RIP, 4293593L)

    def test_PMOVMSKB_8(self):
        ''' Instruction PMOVMSKB_8 
            Groups: sse2 
            0x418401:	pmovmskb	ecx, xmm11
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x00418401] = 'f'
        mem[0x00418402] = 'A'
        mem[0x00418403] = '\x0f'
        mem[0x00418404] = '\xd7'
        mem[0x00418405] = '\xcb'
        cpu.XMM11 = 0xff00000000000000000000000000
        cpu.RIP = 0x418401
        cpu.ECX = 0xd9e
        cpu.execute()
    
        self.assertEqual(mem[0x418401], 'f')
        self.assertEqual(mem[0x418402], 'A')
        self.assertEqual(mem[0x418403], '\x0f')
        self.assertEqual(mem[0x418404], '\xd7')
        self.assertEqual(mem[0x418405], '\xcb')
        self.assertEqual(cpu.XMM11, 5172014448931175958106549077934080L)
        self.assertEqual(cpu.RIP, 4293638L)
        self.assertEqual(cpu.ECX, 8192L)

    def test_PMOVMSKB_9(self):
        ''' Instruction PMOVMSKB_9 
            Groups: sse2 
            0x457982:	pmovmskb	esi, xmm4
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x00457982] = 'f'
        mem[0x00457983] = '\x0f'
        mem[0x00457984] = '\xd7'
        mem[0x00457985] = '\xf4'
        cpu.RIP = 0x457982
        cpu.ESI = 0x4210
        cpu.XMM4 = 0xff000000000000000000ff0000000000
        cpu.execute()
    
        self.assertEqual(mem[0x457982], 'f')
        self.assertEqual(mem[0x457983], '\x0f')
        self.assertEqual(mem[0x457984], '\xd7')
        self.assertEqual(mem[0x457985], '\xf4')
        self.assertEqual(cpu.ESI, 32800L)
        self.assertEqual(cpu.RIP, 4553094L)
        self.assertEqual(cpu.XMM4, 338953138925153547590471080746952949760L)

    def test_POP_1(self):
        ''' Instruction POP_1 
            Groups: mode64 
            0x411787:	pop	rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffd9e0] = '\x91'
        mem[0x00411787] = '['
        mem[0x7fffffffd9d0] = '\x00'
        mem[0x7fffffffd9d1] = '\x00'
        mem[0x7fffffffd9d2] = '\x00'
        mem[0x7fffffffd9d3] = '\x00'
        mem[0x7fffffffd9d4] = '\x00'
        mem[0x7fffffffd9d5] = '\x00'
        mem[0x7fffffffd9d6] = '\x00'
        mem[0x7fffffffd9d7] = '\x00'
        mem[0x7fffffffd9d8] = '@'
        mem[0x7fffffffd9d9] = '\x98'
        mem[0x7fffffffd9da] = 'k'
        mem[0x7fffffffd9db] = '\x00'
        mem[0x7fffffffd9dc] = '\x00'
        mem[0x7fffffffd9dd] = '\x00'
        mem[0x7fffffffd9de] = '\x00'
        mem[0x7fffffffd9df] = '\x00'
        cpu.RBP = 0x7fffffffda00
        cpu.RSP = 0x7fffffffd9d8
        cpu.RIP = 0x411787
        cpu.RBX = 0x6b9898
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffd9e0], '\x91')
        self.assertEqual(mem[0x411787], '[')
        self.assertEqual(mem[0x7fffffffd9d0], '\x00')
        self.assertEqual(mem[0x7fffffffd9d1], '\x00')
        self.assertEqual(mem[0x7fffffffd9d2], '\x00')
        self.assertEqual(mem[0x7fffffffd9d3], '\x00')
        self.assertEqual(mem[0x7fffffffd9d4], '\x00')
        self.assertEqual(mem[0x7fffffffd9d5], '\x00')
        self.assertEqual(mem[0x7fffffffd9d6], '\x00')
        self.assertEqual(mem[0x7fffffffd9d7], '\x00')
        self.assertEqual(mem[0x7fffffffd9d8], '@')
        self.assertEqual(mem[0x7fffffffd9d9], '\x98')
        self.assertEqual(mem[0x7fffffffd9da], 'k')
        self.assertEqual(mem[0x7fffffffd9db], '\x00')
        self.assertEqual(mem[0x7fffffffd9dc], '\x00')
        self.assertEqual(mem[0x7fffffffd9dd], '\x00')
        self.assertEqual(mem[0x7fffffffd9de], '\x00')
        self.assertEqual(mem[0x7fffffffd9df], '\x00')
        self.assertEqual(cpu.RBX, 7051328L)
        self.assertEqual(cpu.RSP, 140737488345568L)
        self.assertEqual(cpu.RIP, 4265864L)
        self.assertEqual(cpu.RBP, 140737488345600L)

    def test_POP_10(self):
        ''' Instruction POP_10 
            Groups: mode64 
            0x45c5b9:	pop	rbp
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045c000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x7fffffffc8e8] = '\x00'
        mem[0x7fffffffc8e9] = '\x00'
        mem[0x7fffffffc8ea] = '\x00'
        mem[0x7fffffffc8eb] = '\x00'
        mem[0x7fffffffc8ec] = '\x00'
        mem[0x7fffffffc8ed] = '\x00'
        mem[0x7fffffffc8ee] = '\x00'
        mem[0x7fffffffc8ef] = '\x00'
        mem[0x7fffffffc8f0] = ' '
        mem[0x7fffffffc8f1] = '\xc9'
        mem[0x7fffffffc8f2] = '\xff'
        mem[0x7fffffffc8f3] = '\xff'
        mem[0x7fffffffc8f4] = '\xff'
        mem[0x7fffffffc8f5] = '\x7f'
        mem[0x7fffffffc8f6] = '\x00'
        mem[0x7fffffffc8f7] = '\x00'
        mem[0x7fffffffc8f8] = 'I'
        mem[0x0045c5b9] = ']'
        cpu.RSP = 0x7fffffffc8f0
        cpu.RIP = 0x45c5b9
        cpu.RBP = 0x7fffffffc8f0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffc8e8], '\x00')
        self.assertEqual(mem[0x7fffffffc8e9], '\x00')
        self.assertEqual(mem[0x7fffffffc8ea], '\x00')
        self.assertEqual(mem[0x7fffffffc8eb], '\x00')
        self.assertEqual(mem[0x7fffffffc8ec], '\x00')
        self.assertEqual(mem[0x7fffffffc8ed], '\x00')
        self.assertEqual(mem[0x7fffffffc8ee], '\x00')
        self.assertEqual(mem[0x7fffffffc8ef], '\x00')
        self.assertEqual(mem[0x7fffffffc8f0], ' ')
        self.assertEqual(mem[0x7fffffffc8f1], '\xc9')
        self.assertEqual(mem[0x7fffffffc8f2], '\xff')
        self.assertEqual(mem[0x7fffffffc8f3], '\xff')
        self.assertEqual(mem[0x7fffffffc8f4], '\xff')
        self.assertEqual(mem[0x7fffffffc8f5], '\x7f')
        self.assertEqual(mem[0x7fffffffc8f6], '\x00')
        self.assertEqual(mem[0x7fffffffc8f7], '\x00')
        self.assertEqual(mem[0x7fffffffc8f8], 'I')
        self.assertEqual(mem[0x45c5b9], ']')
        self.assertEqual(cpu.RSP, 140737488341240L)
        self.assertEqual(cpu.RIP, 4572602L)
        self.assertEqual(cpu.RBP, 140737488341280L)

    def test_POP_11(self):
        ''' Instruction POP_11 
            Groups: mode64 
            0x4011b1:	pop	r12
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x004011b1] = 'A'
        mem[0x7fffffffdae8] = '\xd8'
        mem[0x7fffffffdae9] = '\x02'
        mem[0x7fffffffdaea] = '@'
        mem[0x7fffffffdaeb] = '\x00'
        mem[0x7fffffffdaec] = '\x00'
        mem[0x7fffffffdaed] = '\x00'
        mem[0x7fffffffdaee] = '\x00'
        mem[0x7fffffffdaef] = '\x00'
        mem[0x7fffffffdaf0] = 'p'
        mem[0x7fffffffdaf1] = '\x12'
        mem[0x004011b2] = '\\'
        mem[0x7fffffffdaf3] = '\x00'
        mem[0x7fffffffdaf4] = '\x00'
        mem[0x7fffffffdaf5] = '\x00'
        mem[0x7fffffffdaf6] = '\x00'
        mem[0x7fffffffdaf7] = '\x00'
        mem[0x7fffffffdaf8] = '0'
        mem[0x7fffffffdaf2] = '@'
        cpu.RSP = 0x7fffffffdaf0
        cpu.R12 = 0x40
        cpu.RIP = 0x4011b1
        cpu.RBP = 0x7fffffffdb10
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdaf1], '\x12')
        self.assertEqual(mem[0x7fffffffdae8], '\xd8')
        self.assertEqual(mem[0x7fffffffdae9], '\x02')
        self.assertEqual(mem[0x7fffffffdaea], '@')
        self.assertEqual(mem[0x7fffffffdaeb], '\x00')
        self.assertEqual(mem[0x7fffffffdaec], '\x00')
        self.assertEqual(mem[0x7fffffffdaed], '\x00')
        self.assertEqual(mem[0x7fffffffdaee], '\x00')
        self.assertEqual(mem[0x7fffffffdaef], '\x00')
        self.assertEqual(mem[0x7fffffffdaf0], 'p')
        self.assertEqual(mem[0x4011b1], 'A')
        self.assertEqual(mem[0x4011b2], '\\')
        self.assertEqual(mem[0x7fffffffdaf3], '\x00')
        self.assertEqual(mem[0x7fffffffdaf4], '\x00')
        self.assertEqual(mem[0x7fffffffdaf5], '\x00')
        self.assertEqual(mem[0x7fffffffdaf6], '\x00')
        self.assertEqual(mem[0x7fffffffdaf7], '\x00')
        self.assertEqual(mem[0x7fffffffdaf8], '0')
        self.assertEqual(mem[0x7fffffffdaf2], '@')
        self.assertEqual(cpu.R12, 4199024L)
        self.assertEqual(cpu.RSP, 140737488345848L)
        self.assertEqual(cpu.RIP, 4198835L)
        self.assertEqual(cpu.RBP, 140737488345872L)

    def test_POP_12(self):
        ''' Instruction POP_12 
            Groups: mode64 
            0x434254:	pop	rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdaa0] = '@'
        mem[0x7fffffffda94] = '\x00'
        mem[0x7fffffffda90] = '\x00'
        mem[0x7fffffffda91] = '\x00'
        mem[0x7fffffffda92] = '\x00'
        mem[0x7fffffffda93] = '\x00'
        mem[0x00434254] = '['
        mem[0x7fffffffda95] = '\x00'
        mem[0x7fffffffda96] = '\x00'
        mem[0x7fffffffda97] = '\x00'
        mem[0x7fffffffda98] = '\x08'
        mem[0x7fffffffda99] = '\x00'
        mem[0x7fffffffda9a] = '\x00'
        mem[0x7fffffffda9b] = '\x00'
        mem[0x7fffffffda9c] = '\x00'
        mem[0x7fffffffda9d] = '\x00'
        mem[0x7fffffffda9e] = '\x00'
        mem[0x7fffffffda9f] = '\x00'
        cpu.RBP = 0x7fffffffdab0
        cpu.RSP = 0x7fffffffda98
        cpu.RIP = 0x434254
        cpu.RBX = 0x6be000
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdaa0], '@')
        self.assertEqual(mem[0x7fffffffda94], '\x00')
        self.assertEqual(mem[0x7fffffffda90], '\x00')
        self.assertEqual(mem[0x7fffffffda91], '\x00')
        self.assertEqual(mem[0x7fffffffda92], '\x00')
        self.assertEqual(mem[0x7fffffffda93], '\x00')
        self.assertEqual(mem[0x434254], '[')
        self.assertEqual(mem[0x7fffffffda95], '\x00')
        self.assertEqual(mem[0x7fffffffda96], '\x00')
        self.assertEqual(mem[0x7fffffffda97], '\x00')
        self.assertEqual(mem[0x7fffffffda98], '\x08')
        self.assertEqual(mem[0x7fffffffda99], '\x00')
        self.assertEqual(mem[0x7fffffffda9a], '\x00')
        self.assertEqual(mem[0x7fffffffda9b], '\x00')
        self.assertEqual(mem[0x7fffffffda9c], '\x00')
        self.assertEqual(mem[0x7fffffffda9d], '\x00')
        self.assertEqual(mem[0x7fffffffda9e], '\x00')
        self.assertEqual(mem[0x7fffffffda9f], '\x00')
        self.assertEqual(cpu.RBX, 8L)
        self.assertEqual(cpu.RSP, 140737488345760L)
        self.assertEqual(cpu.RIP, 4407893L)
        self.assertEqual(cpu.RBP, 140737488345776L)

    def test_POP_13(self):
        ''' Instruction POP_13 
            Groups: mode64 
            0x40dc99:	pop	rbp
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdac8] = '\x00'
        mem[0x7fffffffdac9] = '\xb3'
        mem[0x7fffffffdaca] = 'k'
        mem[0x7fffffffdacb] = '\x00'
        mem[0x7fffffffdacc] = '\x00'
        mem[0x7fffffffdacd] = '\x00'
        mem[0x7fffffffdace] = '\x00'
        mem[0x7fffffffdacf] = '\x00'
        mem[0x7fffffffdad0] = '\x00'
        mem[0x7fffffffdad1] = '\xdb'
        mem[0x7fffffffdad2] = '\xff'
        mem[0x7fffffffdad3] = '\xff'
        mem[0x7fffffffdad4] = '\xff'
        mem[0x7fffffffdad5] = '\x7f'
        mem[0x7fffffffdad6] = '\x00'
        mem[0x7fffffffdad7] = '\x00'
        mem[0x7fffffffdad8] = 'o'
        mem[0x0040dc99] = ']'
        cpu.RSP = 0x7fffffffdad0
        cpu.RIP = 0x40dc99
        cpu.RBP = 0x7fffffffdad0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdac8], '\x00')
        self.assertEqual(mem[0x7fffffffdac9], '\xb3')
        self.assertEqual(mem[0x7fffffffdaca], 'k')
        self.assertEqual(mem[0x7fffffffdacb], '\x00')
        self.assertEqual(mem[0x7fffffffdacc], '\x00')
        self.assertEqual(mem[0x7fffffffdacd], '\x00')
        self.assertEqual(mem[0x7fffffffdace], '\x00')
        self.assertEqual(mem[0x7fffffffdacf], '\x00')
        self.assertEqual(mem[0x7fffffffdad0], '\x00')
        self.assertEqual(mem[0x7fffffffdad1], '\xdb')
        self.assertEqual(mem[0x7fffffffdad2], '\xff')
        self.assertEqual(mem[0x7fffffffdad3], '\xff')
        self.assertEqual(mem[0x7fffffffdad4], '\xff')
        self.assertEqual(mem[0x7fffffffdad5], '\x7f')
        self.assertEqual(mem[0x7fffffffdad6], '\x00')
        self.assertEqual(mem[0x7fffffffdad7], '\x00')
        self.assertEqual(mem[0x7fffffffdad8], 'o')
        self.assertEqual(mem[0x40dc99], ']')
        self.assertEqual(cpu.RSP, 140737488345816L)
        self.assertEqual(cpu.RIP, 4250778L)
        self.assertEqual(cpu.RBP, 140737488345856L)

    def test_POP_14(self):
        ''' Instruction POP_14 
            Groups: mode64 
            0x400745:	pop	r13
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x00400745] = 'A'
        mem[0x00400746] = ']'
        mem[0x7fffffffdaa8] = '\x08'
        mem[0x7fffffffdaa9] = '\xdc'
        mem[0x7fffffffdaaa] = '\xff'
        mem[0x7fffffffdaab] = '\xff'
        mem[0x7fffffffdaac] = '\xff'
        mem[0x7fffffffdaad] = '\x7f'
        mem[0x7fffffffdaae] = '\x00'
        mem[0x7fffffffdaaf] = '\x00'
        mem[0x7fffffffdab0] = '('
        mem[0x7fffffffdab1] = '\xdc'
        mem[0x7fffffffdab2] = '\xff'
        mem[0x7fffffffdab3] = '\xff'
        mem[0x7fffffffdab4] = '\xff'
        mem[0x7fffffffdab5] = '\x7f'
        mem[0x7fffffffdab6] = '\x00'
        mem[0x7fffffffdab7] = '\x00'
        mem[0x7fffffffdab8] = '\x01'
        cpu.RSP = 0x7fffffffdab0
        cpu.R13 = 0x8000
        cpu.RIP = 0x400745
        cpu.RBP = 0x7fffffffdac0
        cpu.execute()
    
        self.assertEqual(mem[0x400745], 'A')
        self.assertEqual(mem[0x400746], ']')
        self.assertEqual(mem[0x7fffffffdaa8], '\x08')
        self.assertEqual(mem[0x7fffffffdaa9], '\xdc')
        self.assertEqual(mem[0x7fffffffdaaa], '\xff')
        self.assertEqual(mem[0x7fffffffdaab], '\xff')
        self.assertEqual(mem[0x7fffffffdaac], '\xff')
        self.assertEqual(mem[0x7fffffffdaad], '\x7f')
        self.assertEqual(mem[0x7fffffffdaae], '\x00')
        self.assertEqual(mem[0x7fffffffdaaf], '\x00')
        self.assertEqual(mem[0x7fffffffdab0], '(')
        self.assertEqual(mem[0x7fffffffdab1], '\xdc')
        self.assertEqual(mem[0x7fffffffdab2], '\xff')
        self.assertEqual(mem[0x7fffffffdab3], '\xff')
        self.assertEqual(mem[0x7fffffffdab4], '\xff')
        self.assertEqual(mem[0x7fffffffdab5], '\x7f')
        self.assertEqual(mem[0x7fffffffdab6], '\x00')
        self.assertEqual(mem[0x7fffffffdab7], '\x00')
        self.assertEqual(mem[0x7fffffffdab8], '\x01')
        self.assertEqual(cpu.RSP, 140737488345784L)
        self.assertEqual(cpu.R13, 140737488346152L)
        self.assertEqual(cpu.RIP, 4196167L)
        self.assertEqual(cpu.RBP, 140737488345792L)

    def test_POP_15(self):
        ''' Instruction POP_15 
            Groups: mode64 
            0x4011b7:	pop	r15
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdb00] = '\x00'
        mem[0x7fffffffdb01] = '\x00'
        mem[0x7fffffffdb02] = '\x00'
        mem[0x7fffffffdb03] = '\x00'
        mem[0x7fffffffdb04] = '\x00'
        mem[0x7fffffffdb05] = '\x00'
        mem[0x7fffffffdb06] = '\x00'
        mem[0x7fffffffdb07] = '\x00'
        mem[0x7fffffffdb08] = 'p'
        mem[0x7fffffffdb09] = '\x8c'
        mem[0x7fffffffdb0a] = 'k'
        mem[0x7fffffffdb0b] = '\x00'
        mem[0x7fffffffdb0c] = '\x00'
        mem[0x7fffffffdb0d] = '\x00'
        mem[0x7fffffffdb0e] = '\x00'
        mem[0x7fffffffdb0f] = '\x00'
        mem[0x7fffffffdb10] = '\xe0'
        mem[0x004011b7] = 'A'
        mem[0x004011b8] = '_'
        cpu.R15 = 0x880
        cpu.RSP = 0x7fffffffdb08
        cpu.RIP = 0x4011b7
        cpu.RBP = 0x7fffffffdb10
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdb00], '\x00')
        self.assertEqual(mem[0x7fffffffdb01], '\x00')
        self.assertEqual(mem[0x7fffffffdb02], '\x00')
        self.assertEqual(mem[0x7fffffffdb03], '\x00')
        self.assertEqual(mem[0x7fffffffdb04], '\x00')
        self.assertEqual(mem[0x7fffffffdb05], '\x00')
        self.assertEqual(mem[0x7fffffffdb06], '\x00')
        self.assertEqual(mem[0x7fffffffdb07], '\x00')
        self.assertEqual(mem[0x7fffffffdb08], 'p')
        self.assertEqual(mem[0x7fffffffdb09], '\x8c')
        self.assertEqual(mem[0x7fffffffdb0a], 'k')
        self.assertEqual(mem[0x7fffffffdb0b], '\x00')
        self.assertEqual(mem[0x7fffffffdb0c], '\x00')
        self.assertEqual(mem[0x7fffffffdb0d], '\x00')
        self.assertEqual(mem[0x7fffffffdb0e], '\x00')
        self.assertEqual(mem[0x7fffffffdb0f], '\x00')
        self.assertEqual(mem[0x7fffffffdb10], '\xe0')
        self.assertEqual(mem[0x4011b7], 'A')
        self.assertEqual(mem[0x4011b8], '_')
        self.assertEqual(cpu.R15, 7048304L)
        self.assertEqual(cpu.RSP, 140737488345872L)
        self.assertEqual(cpu.RIP, 4198841L)
        self.assertEqual(cpu.RBP, 140737488345872L)

    def test_POP_16(self):
        ''' Instruction POP_16 
            Groups: mode64 
            0x4147b5:	pop	rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x7fffffffca20] = '\x08'
        mem[0x7fffffffca15] = '\x00'
        mem[0x7fffffffca10] = '\x00'
        mem[0x7fffffffca11] = '\x00'
        mem[0x7fffffffca12] = '\x00'
        mem[0x7fffffffca13] = '\x00'
        mem[0x7fffffffca14] = '\x00'
        mem[0x004147b5] = '['
        mem[0x7fffffffca16] = '\x00'
        mem[0x7fffffffca17] = '\x00'
        mem[0x7fffffffca18] = '+'
        mem[0x7fffffffca19] = '\x00'
        mem[0x7fffffffca1a] = '\x00'
        mem[0x7fffffffca1b] = '\x00'
        mem[0x7fffffffca1c] = '\x00'
        mem[0x7fffffffca1d] = '\x00'
        mem[0x7fffffffca1e] = '\x00'
        mem[0x7fffffffca1f] = '\x00'
        cpu.RBP = 0x7fffffffca40
        cpu.RSP = 0x7fffffffca18
        cpu.RIP = 0x4147b5
        cpu.RBX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffca20], '\x08')
        self.assertEqual(mem[0x4147b5], '[')
        self.assertEqual(mem[0x7fffffffca10], '\x00')
        self.assertEqual(mem[0x7fffffffca11], '\x00')
        self.assertEqual(mem[0x7fffffffca12], '\x00')
        self.assertEqual(mem[0x7fffffffca13], '\x00')
        self.assertEqual(mem[0x7fffffffca14], '\x00')
        self.assertEqual(mem[0x7fffffffca15], '\x00')
        self.assertEqual(mem[0x7fffffffca16], '\x00')
        self.assertEqual(mem[0x7fffffffca17], '\x00')
        self.assertEqual(mem[0x7fffffffca18], '+')
        self.assertEqual(mem[0x7fffffffca19], '\x00')
        self.assertEqual(mem[0x7fffffffca1a], '\x00')
        self.assertEqual(mem[0x7fffffffca1b], '\x00')
        self.assertEqual(mem[0x7fffffffca1c], '\x00')
        self.assertEqual(mem[0x7fffffffca1d], '\x00')
        self.assertEqual(mem[0x7fffffffca1e], '\x00')
        self.assertEqual(mem[0x7fffffffca1f], '\x00')
        self.assertEqual(cpu.RBX, 43L)
        self.assertEqual(cpu.RSP, 140737488341536L)
        self.assertEqual(cpu.RIP, 4278198L)
        self.assertEqual(cpu.RBP, 140737488341568L)

    def test_POP_17(self):
        ''' Instruction POP_17 
            Groups: mode64 
            0x41178e:	pop	r15
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffd960] = '\x00'
        mem[0x7fffffffd961] = '\x00'
        mem[0x7fffffffd962] = '\x00'
        mem[0x7fffffffd963] = '\x00'
        mem[0x7fffffffd964] = '\x00'
        mem[0x7fffffffd965] = '\x00'
        mem[0x7fffffffd966] = '\x00'
        mem[0x7fffffffd967] = '\x00'
        mem[0x7fffffffd968] = '\xa0'
        mem[0x7fffffffd969] = '\xd9'
        mem[0x7fffffffd96a] = '\xff'
        mem[0x7fffffffd96b] = '\xff'
        mem[0x7fffffffd96c] = '\xff'
        mem[0x7fffffffd96d] = '\x7f'
        mem[0x0041178e] = 'A'
        mem[0x0041178f] = '_'
        mem[0x7fffffffd970] = '\x90'
        mem[0x7fffffffd96e] = '\x00'
        mem[0x7fffffffd96f] = '\x00'
        cpu.R15 = 0x6b9840
        cpu.RSP = 0x7fffffffd968
        cpu.RIP = 0x41178e
        cpu.RBP = 0x7fffffffd970
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffd960], '\x00')
        self.assertEqual(mem[0x7fffffffd961], '\x00')
        self.assertEqual(mem[0x7fffffffd962], '\x00')
        self.assertEqual(mem[0x7fffffffd963], '\x00')
        self.assertEqual(mem[0x7fffffffd964], '\x00')
        self.assertEqual(mem[0x7fffffffd965], '\x00')
        self.assertEqual(mem[0x7fffffffd966], '\x00')
        self.assertEqual(mem[0x7fffffffd967], '\x00')
        self.assertEqual(mem[0x7fffffffd968], '\xa0')
        self.assertEqual(mem[0x7fffffffd969], '\xd9')
        self.assertEqual(mem[0x7fffffffd96a], '\xff')
        self.assertEqual(mem[0x7fffffffd96b], '\xff')
        self.assertEqual(mem[0x7fffffffd96c], '\xff')
        self.assertEqual(mem[0x7fffffffd96d], '\x7f')
        self.assertEqual(mem[0x41178e], 'A')
        self.assertEqual(mem[0x41178f], '_')
        self.assertEqual(mem[0x7fffffffd970], '\x90')
        self.assertEqual(mem[0x7fffffffd96e], '\x00')
        self.assertEqual(mem[0x7fffffffd96f], '\x00')
        self.assertEqual(cpu.R15, 140737488345504L)
        self.assertEqual(cpu.RSP, 140737488345456L)
        self.assertEqual(cpu.RIP, 4265872L)
        self.assertEqual(cpu.RBP, 140737488345456L)

    def test_POP_18(self):
        ''' Instruction POP_18 
            Groups: mode64 
            0x406e50:	pop	r13
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda80] = '\x00'
        mem[0x00406e50] = 'A'
        mem[0x00406e51] = ']'
        mem[0x7fffffffda70] = '\x08'
        mem[0x7fffffffda71] = '\xdc'
        mem[0x7fffffffda72] = '\xff'
        mem[0x7fffffffda73] = '\xff'
        mem[0x7fffffffda74] = '\xff'
        mem[0x7fffffffda75] = '\x7f'
        mem[0x7fffffffda76] = '\x00'
        mem[0x7fffffffda77] = '\x00'
        mem[0x7fffffffda78] = '('
        mem[0x7fffffffda79] = '\xdc'
        mem[0x7fffffffda7a] = '\xff'
        mem[0x7fffffffda7b] = '\xff'
        mem[0x7fffffffda7c] = '\xff'
        mem[0x7fffffffda7d] = '\x7f'
        mem[0x7fffffffda7e] = '\x00'
        mem[0x7fffffffda7f] = '\x00'
        cpu.RSP = 0x7fffffffda78
        cpu.R13 = 0x494d07
        cpu.RIP = 0x406e50
        cpu.RBP = 0x7fffffffda90
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda80], '\x00')
        self.assertEqual(mem[0x7fffffffda70], '\x08')
        self.assertEqual(mem[0x7fffffffda71], '\xdc')
        self.assertEqual(mem[0x406e50], 'A')
        self.assertEqual(mem[0x406e51], ']')
        self.assertEqual(mem[0x7fffffffda72], '\xff')
        self.assertEqual(mem[0x7fffffffda73], '\xff')
        self.assertEqual(mem[0x7fffffffda74], '\xff')
        self.assertEqual(mem[0x7fffffffda75], '\x7f')
        self.assertEqual(mem[0x7fffffffda76], '\x00')
        self.assertEqual(mem[0x7fffffffda77], '\x00')
        self.assertEqual(mem[0x7fffffffda78], '(')
        self.assertEqual(mem[0x7fffffffda79], '\xdc')
        self.assertEqual(mem[0x7fffffffda7a], '\xff')
        self.assertEqual(mem[0x7fffffffda7b], '\xff')
        self.assertEqual(mem[0x7fffffffda7c], '\xff')
        self.assertEqual(mem[0x7fffffffda7d], '\x7f')
        self.assertEqual(mem[0x7fffffffda7e], '\x00')
        self.assertEqual(mem[0x7fffffffda7f], '\x00')
        self.assertEqual(cpu.RSP, 140737488345728L)
        self.assertEqual(cpu.R13, 140737488346152L)
        self.assertEqual(cpu.RIP, 4222546L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_POP_19(self):
        ''' Instruction POP_19 
            Groups: mode64 
            0x4322de:	pop	rbp
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda28] = '^'
        mem[0x7fffffffda29] = '\xda'
        mem[0x7fffffffda2a] = '\xff'
        mem[0x7fffffffda2b] = '\xff'
        mem[0x7fffffffda2c] = '\xff'
        mem[0x7fffffffda2d] = '\x7f'
        mem[0x7fffffffda2e] = '\x00'
        mem[0x7fffffffda2f] = '\x00'
        mem[0x7fffffffda30] = '\x90'
        mem[0x7fffffffda31] = '\xda'
        mem[0x7fffffffda32] = '\xff'
        mem[0x7fffffffda33] = '\xff'
        mem[0x7fffffffda34] = '\xff'
        mem[0x7fffffffda35] = '\x7f'
        mem[0x7fffffffda36] = '\x00'
        mem[0x7fffffffda37] = '\x00'
        mem[0x7fffffffda38] = '0'
        mem[0x004322de] = ']'
        cpu.RSP = 0x7fffffffda30
        cpu.RIP = 0x4322de
        cpu.RBP = 0x7fffffffda30
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda28], '^')
        self.assertEqual(mem[0x7fffffffda29], '\xda')
        self.assertEqual(mem[0x7fffffffda2a], '\xff')
        self.assertEqual(mem[0x7fffffffda2b], '\xff')
        self.assertEqual(mem[0x7fffffffda2c], '\xff')
        self.assertEqual(mem[0x7fffffffda2d], '\x7f')
        self.assertEqual(mem[0x7fffffffda2e], '\x00')
        self.assertEqual(mem[0x7fffffffda2f], '\x00')
        self.assertEqual(mem[0x7fffffffda30], '\x90')
        self.assertEqual(mem[0x7fffffffda31], '\xda')
        self.assertEqual(mem[0x7fffffffda32], '\xff')
        self.assertEqual(mem[0x7fffffffda33], '\xff')
        self.assertEqual(mem[0x7fffffffda34], '\xff')
        self.assertEqual(mem[0x7fffffffda35], '\x7f')
        self.assertEqual(mem[0x7fffffffda36], '\x00')
        self.assertEqual(mem[0x7fffffffda37], '\x00')
        self.assertEqual(mem[0x7fffffffda38], '0')
        self.assertEqual(mem[0x4322de], ']')
        self.assertEqual(cpu.RSP, 140737488345656L)
        self.assertEqual(cpu.RIP, 4399839L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_POP_2(self):
        ''' Instruction POP_2 
            Groups: mode64 
            0x401323:	pop	rbp
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x00401323] = ']'
        mem[0x7fffffffdb08] = 'p'
        mem[0x7fffffffdb09] = '\x8c'
        mem[0x7fffffffdb0a] = 'k'
        mem[0x7fffffffdb0b] = '\x00'
        mem[0x7fffffffdb0c] = '\x00'
        mem[0x7fffffffdb0d] = '\x00'
        mem[0x7fffffffdb0e] = '\x00'
        mem[0x7fffffffdb0f] = '\x00'
        mem[0x7fffffffdb10] = '\xe0'
        mem[0x7fffffffdb11] = '\xdb'
        mem[0x7fffffffdb12] = '\xff'
        mem[0x7fffffffdb13] = '\xff'
        mem[0x7fffffffdb14] = '\xff'
        mem[0x7fffffffdb15] = '\x7f'
        mem[0x7fffffffdb16] = '\x00'
        mem[0x7fffffffdb17] = '\x00'
        mem[0x7fffffffdb18] = '\x80'
        cpu.RSP = 0x7fffffffdb10
        cpu.RIP = 0x401323
        cpu.RBP = 0x7fffffffdb10
        cpu.execute()
    
        self.assertEqual(mem[0x401323], ']')
        self.assertEqual(mem[0x7fffffffdb08], 'p')
        self.assertEqual(mem[0x7fffffffdb09], '\x8c')
        self.assertEqual(mem[0x7fffffffdb0a], 'k')
        self.assertEqual(mem[0x7fffffffdb0b], '\x00')
        self.assertEqual(mem[0x7fffffffdb0c], '\x00')
        self.assertEqual(mem[0x7fffffffdb0d], '\x00')
        self.assertEqual(mem[0x7fffffffdb0e], '\x00')
        self.assertEqual(mem[0x7fffffffdb0f], '\x00')
        self.assertEqual(mem[0x7fffffffdb10], '\xe0')
        self.assertEqual(mem[0x7fffffffdb11], '\xdb')
        self.assertEqual(mem[0x7fffffffdb12], '\xff')
        self.assertEqual(mem[0x7fffffffdb13], '\xff')
        self.assertEqual(mem[0x7fffffffdb14], '\xff')
        self.assertEqual(mem[0x7fffffffdb15], '\x7f')
        self.assertEqual(mem[0x7fffffffdb16], '\x00')
        self.assertEqual(mem[0x7fffffffdb17], '\x00')
        self.assertEqual(mem[0x7fffffffdb18], '\x80')
        self.assertEqual(cpu.RSP, 140737488345880L)
        self.assertEqual(cpu.RIP, 4199204L)
        self.assertEqual(cpu.RBP, 140737488346080L)

    def test_POP_20(self):
        ''' Instruction POP_20 
            Groups: mode64 
            0x4325d4:	pop	rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda60] = '\x90'
        mem[0x7fffffffda61] = '\xda'
        mem[0x7fffffffda62] = '\xff'
        mem[0x7fffffffda63] = '\xff'
        mem[0x7fffffffda64] = '\xff'
        mem[0x7fffffffda65] = '\x7f'
        mem[0x7fffffffda66] = '\x00'
        mem[0x7fffffffda67] = '\x00'
        mem[0x7fffffffda68] = '\xc0'
        mem[0x7fffffffda69] = '\xd4'
        mem[0x7fffffffda6a] = 'k'
        mem[0x7fffffffda6b] = '\x00'
        mem[0x7fffffffda6c] = '\x00'
        mem[0x7fffffffda6d] = '\x00'
        mem[0x7fffffffda6e] = '\x00'
        mem[0x7fffffffda6f] = '\x00'
        mem[0x7fffffffda70] = '\x08'
        mem[0x004325d4] = '['
        cpu.RBP = 0x7fffffffda90
        cpu.RSP = 0x7fffffffda68
        cpu.RIP = 0x4325d4
        cpu.RBX = 0xf0b5ff
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda60], '\x90')
        self.assertEqual(mem[0x7fffffffda61], '\xda')
        self.assertEqual(mem[0x7fffffffda62], '\xff')
        self.assertEqual(mem[0x7fffffffda63], '\xff')
        self.assertEqual(mem[0x7fffffffda64], '\xff')
        self.assertEqual(mem[0x7fffffffda65], '\x7f')
        self.assertEqual(mem[0x7fffffffda66], '\x00')
        self.assertEqual(mem[0x7fffffffda67], '\x00')
        self.assertEqual(mem[0x7fffffffda68], '\xc0')
        self.assertEqual(mem[0x7fffffffda69], '\xd4')
        self.assertEqual(mem[0x7fffffffda6a], 'k')
        self.assertEqual(mem[0x7fffffffda6b], '\x00')
        self.assertEqual(mem[0x7fffffffda6c], '\x00')
        self.assertEqual(mem[0x7fffffffda6d], '\x00')
        self.assertEqual(mem[0x7fffffffda6e], '\x00')
        self.assertEqual(mem[0x7fffffffda6f], '\x00')
        self.assertEqual(mem[0x7fffffffda70], '\x08')
        self.assertEqual(mem[0x4325d4], '[')
        self.assertEqual(cpu.RBX, 7066816L)
        self.assertEqual(cpu.RSP, 140737488345712L)
        self.assertEqual(cpu.RIP, 4400597L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_POP_21(self):
        ''' Instruction POP_21 
            Groups: mode64 
            0x465d75:	pop	r12
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda80] = '\x08'
        mem[0x7fffffffda81] = '\xdc'
        mem[0x7fffffffda82] = '\xff'
        mem[0x7fffffffda83] = '\xff'
        mem[0x7fffffffda84] = '\xff'
        mem[0x7fffffffda85] = '\x7f'
        mem[0x7fffffffda86] = '\x00'
        mem[0x7fffffffda87] = '\x00'
        mem[0x7fffffffda88] = '('
        mem[0x00465d75] = 'A'
        mem[0x00465d76] = '\\'
        mem[0x7fffffffda78] = '\x03'
        mem[0x7fffffffda79] = '\x00'
        mem[0x7fffffffda7a] = '\x00'
        mem[0x7fffffffda7b] = '\x00'
        mem[0x7fffffffda7c] = '\x00'
        mem[0x7fffffffda7d] = '\x00'
        mem[0x7fffffffda7e] = '\x00'
        mem[0x7fffffffda7f] = '\x00'
        cpu.RSP = 0x7fffffffda80
        cpu.R12 = 0x6bf1d0
        cpu.RIP = 0x465d75
        cpu.RBP = 0x7fffffffda90
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda80], '\x08')
        self.assertEqual(mem[0x7fffffffda81], '\xdc')
        self.assertEqual(mem[0x7fffffffda82], '\xff')
        self.assertEqual(mem[0x7fffffffda83], '\xff')
        self.assertEqual(mem[0x7fffffffda84], '\xff')
        self.assertEqual(mem[0x7fffffffda85], '\x7f')
        self.assertEqual(mem[0x7fffffffda86], '\x00')
        self.assertEqual(mem[0x7fffffffda87], '\x00')
        self.assertEqual(mem[0x7fffffffda88], '(')
        self.assertEqual(mem[0x465d75], 'A')
        self.assertEqual(mem[0x465d76], '\\')
        self.assertEqual(mem[0x7fffffffda78], '\x03')
        self.assertEqual(mem[0x7fffffffda79], '\x00')
        self.assertEqual(mem[0x7fffffffda7a], '\x00')
        self.assertEqual(mem[0x7fffffffda7b], '\x00')
        self.assertEqual(mem[0x7fffffffda7c], '\x00')
        self.assertEqual(mem[0x7fffffffda7d], '\x00')
        self.assertEqual(mem[0x7fffffffda7e], '\x00')
        self.assertEqual(mem[0x7fffffffda7f], '\x00')
        self.assertEqual(cpu.R12, 140737488346120L)
        self.assertEqual(cpu.RSP, 140737488345736L)
        self.assertEqual(cpu.RIP, 4611447L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_POP_3(self):
        ''' Instruction POP_3 
            Groups: mode64 
            0x4135e0:	pop	rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x004135e0] = '['
        mem[0x7fffffffca48] = '\x00'
        mem[0x7fffffffca49] = '\x00'
        mem[0x7fffffffca4a] = '\x00'
        mem[0x7fffffffca4b] = '\x00'
        mem[0x7fffffffca4c] = '\x00'
        mem[0x7fffffffca4d] = '\x00'
        mem[0x7fffffffca4e] = '\x00'
        mem[0x7fffffffca4f] = '\x00'
        mem[0x7fffffffca50] = '+'
        mem[0x7fffffffca51] = '\x00'
        mem[0x7fffffffca52] = '\x00'
        mem[0x7fffffffca53] = '\x00'
        mem[0x7fffffffca54] = '\x00'
        mem[0x7fffffffca55] = '\x00'
        mem[0x7fffffffca56] = '\x00'
        mem[0x7fffffffca57] = '\x00'
        mem[0x7fffffffca58] = '\x08'
        cpu.RBP = 0x7fffffffca60
        cpu.RSP = 0x7fffffffca50
        cpu.RIP = 0x4135e0
        cpu.RBX = 0x2b
        cpu.execute()
    
        self.assertEqual(mem[0x4135e0], '[')
        self.assertEqual(mem[0x7fffffffca48], '\x00')
        self.assertEqual(mem[0x7fffffffca49], '\x00')
        self.assertEqual(mem[0x7fffffffca4a], '\x00')
        self.assertEqual(mem[0x7fffffffca4b], '\x00')
        self.assertEqual(mem[0x7fffffffca4c], '\x00')
        self.assertEqual(mem[0x7fffffffca4d], '\x00')
        self.assertEqual(mem[0x7fffffffca4e], '\x00')
        self.assertEqual(mem[0x7fffffffca4f], '\x00')
        self.assertEqual(mem[0x7fffffffca50], '+')
        self.assertEqual(mem[0x7fffffffca51], '\x00')
        self.assertEqual(mem[0x7fffffffca52], '\x00')
        self.assertEqual(mem[0x7fffffffca53], '\x00')
        self.assertEqual(mem[0x7fffffffca54], '\x00')
        self.assertEqual(mem[0x7fffffffca55], '\x00')
        self.assertEqual(mem[0x7fffffffca56], '\x00')
        self.assertEqual(mem[0x7fffffffca57], '\x00')
        self.assertEqual(mem[0x7fffffffca58], '\x08')
        self.assertEqual(cpu.RBX, 43L)
        self.assertEqual(cpu.RSP, 140737488341592L)
        self.assertEqual(cpu.RIP, 4273633L)
        self.assertEqual(cpu.RBP, 140737488341600L)

    def test_POP_4(self):
        ''' Instruction POP_4 
            Groups: mode64 
            0x44268f:	pop	rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00442000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdb00] = '\x00'
        mem[0x7fffffffdb01] = '\x00'
        mem[0x7fffffffdb02] = '\x00'
        mem[0x7fffffffdb03] = '\x00'
        mem[0x7fffffffdb04] = '\x00'
        mem[0x7fffffffdb05] = '\x00'
        mem[0x7fffffffdb06] = '\x00'
        mem[0x7fffffffdb07] = '\x00'
        mem[0x7fffffffdb08] = '\xd8'
        mem[0x7fffffffdb09] = '\x02'
        mem[0x7fffffffdb0a] = '@'
        mem[0x7fffffffdb0b] = '\x00'
        mem[0x7fffffffdb0c] = '\x00'
        mem[0x7fffffffdb0d] = '\x00'
        mem[0x7fffffffdb0e] = '\x00'
        mem[0x0044268f] = '['
        mem[0x7fffffffdb10] = '\xe0'
        mem[0x7fffffffdb0f] = '\x00'
        cpu.RBP = 0x7fffffffdb10
        cpu.RSP = 0x7fffffffdb08
        cpu.RIP = 0x44268f
        cpu.RBX = 0x7fffffffdb40
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdb00], '\x00')
        self.assertEqual(mem[0x7fffffffdb01], '\x00')
        self.assertEqual(mem[0x7fffffffdb02], '\x00')
        self.assertEqual(mem[0x7fffffffdb03], '\x00')
        self.assertEqual(mem[0x7fffffffdb04], '\x00')
        self.assertEqual(mem[0x7fffffffdb05], '\x00')
        self.assertEqual(mem[0x7fffffffdb06], '\x00')
        self.assertEqual(mem[0x7fffffffdb07], '\x00')
        self.assertEqual(mem[0x7fffffffdb08], '\xd8')
        self.assertEqual(mem[0x7fffffffdb09], '\x02')
        self.assertEqual(mem[0x7fffffffdb0a], '@')
        self.assertEqual(mem[0x7fffffffdb0b], '\x00')
        self.assertEqual(mem[0x7fffffffdb0c], '\x00')
        self.assertEqual(mem[0x7fffffffdb0d], '\x00')
        self.assertEqual(mem[0x7fffffffdb0e], '\x00')
        self.assertEqual(mem[0x44268f], '[')
        self.assertEqual(mem[0x7fffffffdb10], '\xe0')
        self.assertEqual(mem[0x7fffffffdb0f], '\x00')
        self.assertEqual(cpu.RBX, 4195032L)
        self.assertEqual(cpu.RSP, 140737488345872L)
        self.assertEqual(cpu.RIP, 4466320L)
        self.assertEqual(cpu.RBP, 140737488345872L)

    def test_POP_5(self):
        ''' Instruction POP_5 
            Groups: mode64 
            0x406e52:	pop	r14
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda80] = '\x00'
        mem[0x7fffffffda81] = '\x00'
        mem[0x7fffffffda82] = '\x00'
        mem[0x7fffffffda83] = '\x00'
        mem[0x7fffffffda84] = '\x00'
        mem[0x7fffffffda85] = '\x00'
        mem[0x7fffffffda86] = '\x00'
        mem[0x7fffffffda87] = '\x00'
        mem[0x7fffffffda88] = '\x10'
        mem[0x00406e52] = 'A'
        mem[0x00406e53] = '^'
        mem[0x7fffffffda78] = '\x88'
        mem[0x7fffffffda79] = '\xf6'
        mem[0x7fffffffda7a] = 'k'
        mem[0x7fffffffda7b] = '\x00'
        mem[0x7fffffffda7c] = '\x00'
        mem[0x7fffffffda7d] = '\x00'
        mem[0x7fffffffda7e] = '\x00'
        mem[0x7fffffffda7f] = '\x00'
        cpu.R14 = 0x444c
        cpu.RSP = 0x7fffffffda80
        cpu.RIP = 0x406e52
        cpu.RBP = 0x7fffffffda90
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda80], '\x00')
        self.assertEqual(mem[0x7fffffffda81], '\x00')
        self.assertEqual(mem[0x7fffffffda82], '\x00')
        self.assertEqual(mem[0x7fffffffda83], '\x00')
        self.assertEqual(mem[0x7fffffffda84], '\x00')
        self.assertEqual(mem[0x7fffffffda85], '\x00')
        self.assertEqual(mem[0x7fffffffda86], '\x00')
        self.assertEqual(mem[0x7fffffffda87], '\x00')
        self.assertEqual(mem[0x7fffffffda88], '\x10')
        self.assertEqual(mem[0x406e52], 'A')
        self.assertEqual(mem[0x406e53], '^')
        self.assertEqual(mem[0x7fffffffda78], '\x88')
        self.assertEqual(mem[0x7fffffffda79], '\xf6')
        self.assertEqual(mem[0x7fffffffda7a], 'k')
        self.assertEqual(mem[0x7fffffffda7b], '\x00')
        self.assertEqual(mem[0x7fffffffda7c], '\x00')
        self.assertEqual(mem[0x7fffffffda7d], '\x00')
        self.assertEqual(mem[0x7fffffffda7e], '\x00')
        self.assertEqual(mem[0x7fffffffda7f], '\x00')
        self.assertEqual(cpu.R14, 0L)
        self.assertEqual(cpu.RSP, 140737488345736L)
        self.assertEqual(cpu.RIP, 4222548L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_POP_6(self):
        ''' Instruction POP_6 
            Groups: mode64 
            0x414275:	pop	r14
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda20] = '\x00'
        mem[0x7fffffffda21] = '\x00'
        mem[0x7fffffffda22] = '\x00'
        mem[0x7fffffffda23] = '\x00'
        mem[0x7fffffffda24] = '\x00'
        mem[0x7fffffffda25] = '\x00'
        mem[0x7fffffffda26] = '\x00'
        mem[0x7fffffffda27] = '\x00'
        mem[0x7fffffffda28] = '\x00'
        mem[0x7fffffffda29] = '\x00'
        mem[0x7fffffffda2a] = '\x00'
        mem[0x7fffffffda2b] = '\x00'
        mem[0x7fffffffda2c] = '\x00'
        mem[0x7fffffffda2d] = '\x00'
        mem[0x7fffffffda2e] = '\x00'
        mem[0x7fffffffda2f] = '\x00'
        mem[0x7fffffffda30] = '\x90'
        mem[0x00414275] = 'A'
        mem[0x00414276] = '^'
        cpu.R14 = 0x6bf200
        cpu.RSP = 0x7fffffffda28
        cpu.RIP = 0x414275
        cpu.RBP = 0x7fffffffda30
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda20], '\x00')
        self.assertEqual(mem[0x7fffffffda21], '\x00')
        self.assertEqual(mem[0x7fffffffda22], '\x00')
        self.assertEqual(mem[0x7fffffffda23], '\x00')
        self.assertEqual(mem[0x7fffffffda24], '\x00')
        self.assertEqual(mem[0x7fffffffda25], '\x00')
        self.assertEqual(mem[0x7fffffffda26], '\x00')
        self.assertEqual(mem[0x7fffffffda27], '\x00')
        self.assertEqual(mem[0x7fffffffda28], '\x00')
        self.assertEqual(mem[0x7fffffffda29], '\x00')
        self.assertEqual(mem[0x7fffffffda2a], '\x00')
        self.assertEqual(mem[0x7fffffffda2b], '\x00')
        self.assertEqual(mem[0x7fffffffda2c], '\x00')
        self.assertEqual(mem[0x7fffffffda2d], '\x00')
        self.assertEqual(mem[0x7fffffffda2e], '\x00')
        self.assertEqual(mem[0x7fffffffda2f], '\x00')
        self.assertEqual(mem[0x7fffffffda30], '\x90')
        self.assertEqual(mem[0x414275], 'A')
        self.assertEqual(mem[0x414276], '^')
        self.assertEqual(cpu.R14, 0L)
        self.assertEqual(cpu.RSP, 140737488345648L)
        self.assertEqual(cpu.RIP, 4276855L)
        self.assertEqual(cpu.RBP, 140737488345648L)

    def test_POP_7(self):
        ''' Instruction POP_7 
            Groups: mode64 
            0x437926:	pop	rbp
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdb00] = '\xe8'
        mem[0x7fffffffdb01] = '\x01'
        mem[0x7fffffffdb02] = '@'
        mem[0x7fffffffdb03] = '\x00'
        mem[0x7fffffffdb04] = '\x00'
        mem[0x7fffffffdb05] = '\x00'
        mem[0x00437926] = ']'
        mem[0x7fffffffdb07] = '\x00'
        mem[0x7fffffffdb08] = '\xe0'
        mem[0x7fffffffdb09] = '\xdb'
        mem[0x7fffffffdb0a] = '\xff'
        mem[0x7fffffffdb0b] = '\xff'
        mem[0x7fffffffdb0c] = '\xff'
        mem[0x7fffffffdb0d] = '\x7f'
        mem[0x7fffffffdb0e] = '\x00'
        mem[0x7fffffffdb0f] = '\x00'
        mem[0x7fffffffdb10] = '\xbe'
        mem[0x7fffffffdb06] = '\x00'
        cpu.RSP = 0x7fffffffdb08
        cpu.RIP = 0x437926
        cpu.RBP = 0x7fffffffdb08
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdb00], '\xe8')
        self.assertEqual(mem[0x7fffffffdb01], '\x01')
        self.assertEqual(mem[0x7fffffffdb02], '@')
        self.assertEqual(mem[0x7fffffffdb03], '\x00')
        self.assertEqual(mem[0x7fffffffdb04], '\x00')
        self.assertEqual(mem[0x7fffffffdb05], '\x00')
        self.assertEqual(mem[0x7fffffffdb06], '\x00')
        self.assertEqual(mem[0x7fffffffdb07], '\x00')
        self.assertEqual(mem[0x7fffffffdb08], '\xe0')
        self.assertEqual(mem[0x7fffffffdb09], '\xdb')
        self.assertEqual(mem[0x7fffffffdb0a], '\xff')
        self.assertEqual(mem[0x7fffffffdb0b], '\xff')
        self.assertEqual(mem[0x7fffffffdb0c], '\xff')
        self.assertEqual(mem[0x7fffffffdb0d], '\x7f')
        self.assertEqual(mem[0x7fffffffdb0e], '\x00')
        self.assertEqual(mem[0x7fffffffdb0f], '\x00')
        self.assertEqual(mem[0x7fffffffdb10], '\xbe')
        self.assertEqual(mem[0x437926], ']')
        self.assertEqual(cpu.RSP, 140737488345872L)
        self.assertEqual(cpu.RIP, 4421927L)
        self.assertEqual(cpu.RBP, 140737488346080L)

    def test_POP_8(self):
        ''' Instruction POP_8 
            Groups: mode64 
            0x406e4d:	pop	rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda60] = '\x90'
        mem[0x7fffffffda61] = '\xda'
        mem[0x7fffffffda62] = '\xff'
        mem[0x7fffffffda63] = '\xff'
        mem[0x7fffffffda64] = '\xff'
        mem[0x7fffffffda65] = '\x7f'
        mem[0x7fffffffda66] = '\x00'
        mem[0x7fffffffda67] = '\x00'
        mem[0x7fffffffda68] = '\x01'
        mem[0x7fffffffda69] = 'S'
        mem[0x7fffffffda6a] = 'J'
        mem[0x7fffffffda6b] = '\x00'
        mem[0x7fffffffda6c] = '\x00'
        mem[0x00406e4d] = '['
        mem[0x7fffffffda6e] = '\x00'
        mem[0x7fffffffda6d] = '\x00'
        mem[0x7fffffffda70] = '\xf4'
        mem[0x7fffffffda6f] = '\x00'
        cpu.RBP = 0x7fffffffda90
        cpu.RSP = 0x7fffffffda68
        cpu.RIP = 0x406e4d
        cpu.RBX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda60], '\x90')
        self.assertEqual(mem[0x7fffffffda61], '\xda')
        self.assertEqual(mem[0x7fffffffda62], '\xff')
        self.assertEqual(mem[0x7fffffffda63], '\xff')
        self.assertEqual(mem[0x7fffffffda64], '\xff')
        self.assertEqual(mem[0x7fffffffda65], '\x7f')
        self.assertEqual(mem[0x7fffffffda66], '\x00')
        self.assertEqual(mem[0x7fffffffda67], '\x00')
        self.assertEqual(mem[0x7fffffffda68], '\x01')
        self.assertEqual(mem[0x7fffffffda69], 'S')
        self.assertEqual(mem[0x7fffffffda6a], 'J')
        self.assertEqual(mem[0x7fffffffda6b], '\x00')
        self.assertEqual(mem[0x7fffffffda6c], '\x00')
        self.assertEqual(mem[0x406e4d], '[')
        self.assertEqual(mem[0x7fffffffda6e], '\x00')
        self.assertEqual(mem[0x7fffffffda6d], '\x00')
        self.assertEqual(mem[0x7fffffffda70], '\xf4')
        self.assertEqual(mem[0x7fffffffda6f], '\x00')
        self.assertEqual(cpu.RBX, 4870913L)
        self.assertEqual(cpu.RSP, 140737488345712L)
        self.assertEqual(cpu.RIP, 4222542L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_POP_9(self):
        ''' Instruction POP_9 
            Groups: mode64 
            0x406e4d:	pop	rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda60] = '\x90'
        mem[0x7fffffffda61] = '\xda'
        mem[0x7fffffffda62] = '\xff'
        mem[0x7fffffffda63] = '\xff'
        mem[0x7fffffffda64] = '\xff'
        mem[0x7fffffffda65] = '\x7f'
        mem[0x7fffffffda66] = '\x00'
        mem[0x7fffffffda67] = '\x00'
        mem[0x7fffffffda68] = '\x01'
        mem[0x7fffffffda69] = 'S'
        mem[0x7fffffffda6a] = 'J'
        mem[0x7fffffffda6b] = '\x00'
        mem[0x7fffffffda6c] = '\x00'
        mem[0x00406e4d] = '['
        mem[0x7fffffffda6e] = '\x00'
        mem[0x7fffffffda6d] = '\x00'
        mem[0x7fffffffda70] = '\xf4'
        mem[0x7fffffffda6f] = '\x00'
        cpu.RBP = 0x7fffffffda90
        cpu.RSP = 0x7fffffffda68
        cpu.RIP = 0x406e4d
        cpu.RBX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda60], '\x90')
        self.assertEqual(mem[0x7fffffffda61], '\xda')
        self.assertEqual(mem[0x7fffffffda62], '\xff')
        self.assertEqual(mem[0x7fffffffda63], '\xff')
        self.assertEqual(mem[0x7fffffffda64], '\xff')
        self.assertEqual(mem[0x7fffffffda65], '\x7f')
        self.assertEqual(mem[0x7fffffffda66], '\x00')
        self.assertEqual(mem[0x7fffffffda67], '\x00')
        self.assertEqual(mem[0x7fffffffda68], '\x01')
        self.assertEqual(mem[0x7fffffffda69], 'S')
        self.assertEqual(mem[0x7fffffffda6a], 'J')
        self.assertEqual(mem[0x7fffffffda6b], '\x00')
        self.assertEqual(mem[0x7fffffffda6c], '\x00')
        self.assertEqual(mem[0x406e4d], '[')
        self.assertEqual(mem[0x7fffffffda6e], '\x00')
        self.assertEqual(mem[0x7fffffffda6d], '\x00')
        self.assertEqual(mem[0x7fffffffda70], '\xf4')
        self.assertEqual(mem[0x7fffffffda6f], '\x00')
        self.assertEqual(cpu.RBX, 4870913L)
        self.assertEqual(cpu.RSP, 140737488345712L)
        self.assertEqual(cpu.RIP, 4222542L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_PSHUFD_1(self):
        ''' Instruction PSHUFD_1 
            Groups: sse2 
            0x4578ea:	pshufd	xmm1, xmm1, 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x004578ea] = 'f'
        mem[0x004578eb] = '\x0f'
        mem[0x004578ec] = 'p'
        mem[0x004578ed] = '\xc9'
        mem[0x004578ee] = '\x00'
        cpu.XMM1 = 0x2f2f2f2f
        cpu.RIP = 0x4578ea
        cpu.execute()
    
        self.assertEqual(mem[0x4578ea], 'f')
        self.assertEqual(mem[0x4578eb], '\x0f')
        self.assertEqual(mem[0x4578ec], 'p')
        self.assertEqual(mem[0x4578ed], '\xc9')
        self.assertEqual(mem[0x4578ee], '\x00')
        self.assertEqual(cpu.XMM1, 62718710765820030520700417840365121327L)
        self.assertEqual(cpu.RIP, 4552943L)

    def test_PUNPCKLBW_1(self):
        ''' Instruction PUNPCKLBW_1 
            Groups: sse2 
            0x4578dc:	punpcklbw	xmm1, xmm1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x004578dc] = 'f'
        mem[0x004578dd] = '\x0f'
        mem[0x004578de] = '`'
        mem[0x004578df] = '\xc9'
        cpu.XMM1 = 0x2f
        cpu.RIP = 0x4578dc
        cpu.execute()
    
        self.assertEqual(mem[0x4578dc], 'f')
        self.assertEqual(mem[0x4578dd], '\x0f')
        self.assertEqual(mem[0x4578de], '`')
        self.assertEqual(mem[0x4578df], '\xc9')
        self.assertEqual(cpu.XMM1, 12079)
        self.assertEqual(cpu.RIP, 4552928L)

    def test_PUNPCKLWD_1(self):
        ''' Instruction PUNPCKLWD_1 
            Groups: sse2 
            0x4578e6:	punpcklwd	xmm1, xmm1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x004578e8] = 'a'
        mem[0x004578e9] = '\xc9'
        mem[0x004578e6] = 'f'
        mem[0x004578e7] = '\x0f'
        cpu.XMM1 = 0x2f2f
        cpu.RIP = 0x4578e6
        cpu.execute()
    
        self.assertEqual(mem[0x4578e8], 'a')
        self.assertEqual(mem[0x4578e9], '\xc9')
        self.assertEqual(mem[0x4578e6], 'f')
        self.assertEqual(mem[0x4578e7], '\x0f')
        self.assertEqual(cpu.XMM1, 791621423)
        self.assertEqual(cpu.RIP, 4552938L)

    def test_PUSH_1(self):
        ''' Instruction PUSH_1 
            Groups: mode64 
            0x4008fe:	push	rsp
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdc00] = '\x03'
        mem[0x004008fe] = 'T'
        mem[0x7fffffffdbf0] = '\x00'
        mem[0x7fffffffdbf1] = '\x00'
        mem[0x7fffffffdbf2] = '\x00'
        mem[0x7fffffffdbf3] = '\x00'
        mem[0x7fffffffdbf4] = '\x00'
        mem[0x7fffffffdbf5] = '\x00'
        mem[0x7fffffffdbf6] = '\x00'
        mem[0x7fffffffdbf7] = '\x00'
        mem[0x7fffffffdbf8] = '\x00'
        mem[0x7fffffffdbf9] = '\x00'
        mem[0x7fffffffdbfa] = '\x00'
        mem[0x7fffffffdbfb] = '\x00'
        mem[0x7fffffffdbfc] = '\x00'
        mem[0x7fffffffdbfd] = '\x00'
        mem[0x7fffffffdbfe] = '\x00'
        mem[0x7fffffffdbff] = '\x00'
        cpu.RSP = 0x7fffffffdbf8
        cpu.RIP = 0x4008fe
        cpu.RBP = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdc00], '\x03')
        self.assertEqual(mem[0x7fffffffdbfe], '\x00')
        self.assertEqual(mem[0x7fffffffdbf0], '\xf8')
        self.assertEqual(mem[0x7fffffffdbf1], '\xdb')
        self.assertEqual(mem[0x7fffffffdbf2], '\xff')
        self.assertEqual(mem[0x7fffffffdbf3], '\xff')
        self.assertEqual(mem[0x7fffffffdbf4], '\xff')
        self.assertEqual(mem[0x7fffffffdbf5], '\x7f')
        self.assertEqual(mem[0x7fffffffdbf6], '\x00')
        self.assertEqual(mem[0x7fffffffdbf7], '\x00')
        self.assertEqual(mem[0x7fffffffdbf8], '\x00')
        self.assertEqual(mem[0x7fffffffdbf9], '\x00')
        self.assertEqual(mem[0x7fffffffdbfa], '\x00')
        self.assertEqual(mem[0x7fffffffdbfb], '\x00')
        self.assertEqual(mem[0x7fffffffdbfc], '\x00')
        self.assertEqual(mem[0x7fffffffdbfd], '\x00')
        self.assertEqual(mem[0x4008fe], 'T')
        self.assertEqual(mem[0x7fffffffdbff], '\x00')
        self.assertEqual(cpu.RSP, 140737488346096L)
        self.assertEqual(cpu.RIP, 4196607L)
        self.assertEqual(cpu.RBP, 0L)

    def test_PUSH_10(self):
        ''' Instruction PUSH_10 
            Groups: mode64 
            0x413484:	push	r12
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x7fffffffca60] = '\x90'
        mem[0x7fffffffca61] = '\xda'
        mem[0x7fffffffca62] = '\xff'
        mem[0x7fffffffca63] = '\xff'
        mem[0x00413484] = 'A'
        mem[0x00413485] = 'T'
        mem[0x7fffffffca66] = '\x00'
        mem[0x7fffffffca67] = '\x00'
        mem[0x7fffffffca68] = '\x9b'
        mem[0x7fffffffca5f] = '\x00'
        mem[0x7fffffffca59] = '\x00'
        mem[0x7fffffffca58] = ','
        mem[0x7fffffffca64] = '\xff'
        mem[0x7fffffffca5a] = '\x00'
        mem[0x7fffffffca5b] = '\x00'
        mem[0x7fffffffca5c] = '\x00'
        mem[0x7fffffffca5d] = '\x00'
        mem[0x7fffffffca5e] = '\x00'
        mem[0x7fffffffca65] = '\x7f'
        cpu.RSP = 0x7fffffffca60
        cpu.R12 = 0x7fffffffdc08
        cpu.RIP = 0x413484
        cpu.RBP = 0x7fffffffca60
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffca60], '\x90')
        self.assertEqual(mem[0x7fffffffca61], '\xda')
        self.assertEqual(mem[0x7fffffffca62], '\xff')
        self.assertEqual(mem[0x7fffffffca63], '\xff')
        self.assertEqual(mem[0x413484], 'A')
        self.assertEqual(mem[0x413485], 'T')
        self.assertEqual(mem[0x7fffffffca66], '\x00')
        self.assertEqual(mem[0x7fffffffca67], '\x00')
        self.assertEqual(mem[0x7fffffffca68], '\x9b')
        self.assertEqual(mem[0x7fffffffca65], '\x7f')
        self.assertEqual(mem[0x7fffffffca64], '\xff')
        self.assertEqual(mem[0x7fffffffca58], '\x08')
        self.assertEqual(mem[0x7fffffffca59], '\xdc')
        self.assertEqual(mem[0x7fffffffca5a], '\xff')
        self.assertEqual(mem[0x7fffffffca5b], '\xff')
        self.assertEqual(mem[0x7fffffffca5c], '\xff')
        self.assertEqual(mem[0x7fffffffca5d], '\x7f')
        self.assertEqual(mem[0x7fffffffca5e], '\x00')
        self.assertEqual(mem[0x7fffffffca5f], '\x00')
        self.assertEqual(cpu.R12, 140737488346120L)
        self.assertEqual(cpu.RSP, 140737488341592L)
        self.assertEqual(cpu.RIP, 4273286L)
        self.assertEqual(cpu.RBP, 140737488341600L)

    def test_PUSH_11(self):
        ''' Instruction PUSH_11 
            Groups: mode64 
            0x406dd6:	push	r14
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda80] = '\x00'
        mem[0x7fffffffda81] = '\x00'
        mem[0x7fffffffda82] = '\x00'
        mem[0x7fffffffda83] = '\x00'
        mem[0x7fffffffda84] = '\x00'
        mem[0x7fffffffda85] = '\x00'
        mem[0x7fffffffda86] = '\x00'
        mem[0x7fffffffda87] = '\x00'
        mem[0x7fffffffda88] = '\x10'
        mem[0x7fffffffda89] = '\x00'
        mem[0x7fffffffda8a] = '\x00'
        mem[0x7fffffffda8b] = '\x00'
        mem[0x7fffffffda8c] = '\x00'
        mem[0x7fffffffda8d] = '\x00'
        mem[0x7fffffffda8e] = '\x00'
        mem[0x7fffffffda8f] = '\x00'
        mem[0x7fffffffda90] = '\xe0'
        mem[0x00406dd6] = 'A'
        mem[0x00406dd7] = 'V'
        cpu.R14 = 0x0
        cpu.RSP = 0x7fffffffda88
        cpu.RIP = 0x406dd6
        cpu.RBP = 0x7fffffffda90
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda80], '\x00')
        self.assertEqual(mem[0x7fffffffda81], '\x00')
        self.assertEqual(mem[0x7fffffffda82], '\x00')
        self.assertEqual(mem[0x7fffffffda83], '\x00')
        self.assertEqual(mem[0x7fffffffda84], '\x00')
        self.assertEqual(mem[0x7fffffffda85], '\x00')
        self.assertEqual(mem[0x7fffffffda86], '\x00')
        self.assertEqual(mem[0x7fffffffda87], '\x00')
        self.assertEqual(mem[0x7fffffffda88], '\x10')
        self.assertEqual(mem[0x7fffffffda89], '\x00')
        self.assertEqual(mem[0x7fffffffda8a], '\x00')
        self.assertEqual(mem[0x7fffffffda8b], '\x00')
        self.assertEqual(mem[0x7fffffffda8c], '\x00')
        self.assertEqual(mem[0x7fffffffda8d], '\x00')
        self.assertEqual(mem[0x7fffffffda8e], '\x00')
        self.assertEqual(mem[0x7fffffffda8f], '\x00')
        self.assertEqual(mem[0x7fffffffda90], '\xe0')
        self.assertEqual(mem[0x406dd6], 'A')
        self.assertEqual(mem[0x406dd7], 'V')
        self.assertEqual(cpu.R14, 0L)
        self.assertEqual(cpu.RSP, 140737488345728L)
        self.assertEqual(cpu.RIP, 4222424L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_PUSH_12(self):
        ''' Instruction PUSH_12 
            Groups: mode64 
            0x411652:	push	r13
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffd960] = '\x00'
        mem[0x7fffffffd961] = '\x00'
        mem[0x7fffffffd962] = '\x00'
        mem[0x7fffffffd963] = '\x00'
        mem[0x7fffffffd964] = '\x00'
        mem[0x7fffffffd965] = '\x00'
        mem[0x7fffffffd966] = '\x00'
        mem[0x7fffffffd967] = '\x00'
        mem[0x7fffffffd968] = '\xa0'
        mem[0x00411652] = 'A'
        mem[0x00411653] = 'U'
        mem[0x7fffffffd958] = '\x00'
        mem[0x7fffffffd959] = '\x00'
        mem[0x7fffffffd95a] = '\x00'
        mem[0x7fffffffd95b] = '\x00'
        mem[0x7fffffffd95c] = '\x00'
        mem[0x7fffffffd95d] = '\x00'
        mem[0x7fffffffd95e] = '\x00'
        mem[0x7fffffffd95f] = '\x00'
        cpu.RSP = 0x7fffffffd960
        cpu.R13 = 0x3c
        cpu.RIP = 0x411652
        cpu.RBP = 0x7fffffffd970
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffd960], '\x00')
        self.assertEqual(mem[0x7fffffffd961], '\x00')
        self.assertEqual(mem[0x7fffffffd962], '\x00')
        self.assertEqual(mem[0x7fffffffd963], '\x00')
        self.assertEqual(mem[0x7fffffffd964], '\x00')
        self.assertEqual(mem[0x7fffffffd965], '\x00')
        self.assertEqual(mem[0x7fffffffd966], '\x00')
        self.assertEqual(mem[0x7fffffffd967], '\x00')
        self.assertEqual(mem[0x7fffffffd968], '\xa0')
        self.assertEqual(mem[0x411652], 'A')
        self.assertEqual(mem[0x411653], 'U')
        self.assertEqual(mem[0x7fffffffd958], '<')
        self.assertEqual(mem[0x7fffffffd959], '\x00')
        self.assertEqual(mem[0x7fffffffd95a], '\x00')
        self.assertEqual(mem[0x7fffffffd95b], '\x00')
        self.assertEqual(mem[0x7fffffffd95c], '\x00')
        self.assertEqual(mem[0x7fffffffd95d], '\x00')
        self.assertEqual(mem[0x7fffffffd95e], '\x00')
        self.assertEqual(mem[0x7fffffffd95f], '\x00')
        self.assertEqual(cpu.RSP, 140737488345432L)
        self.assertEqual(cpu.R13, 60L)
        self.assertEqual(cpu.RIP, 4265556L)
        self.assertEqual(cpu.RBP, 140737488345456L)

    def test_PUSH_13(self):
        ''' Instruction PUSH_13 
            Groups: mode64 
            0x406ddc:	push	rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda68] = '6'
        mem[0x7fffffffda69] = '4'
        mem[0x7fffffffda6a] = '\x00'
        mem[0x7fffffffda6b] = '\x00'
        mem[0x7fffffffda6c] = '\x00'
        mem[0x7fffffffda6d] = '\x00'
        mem[0x7fffffffda6e] = '\x00'
        mem[0x7fffffffda6f] = '\x00'
        mem[0x7fffffffda70] = '\x08'
        mem[0x7fffffffda71] = '\xdc'
        mem[0x7fffffffda72] = '\xff'
        mem[0x7fffffffda73] = '\xff'
        mem[0x7fffffffda74] = '\xff'
        mem[0x7fffffffda75] = '\x7f'
        mem[0x7fffffffda76] = '\x00'
        mem[0x7fffffffda77] = '\x00'
        mem[0x7fffffffda78] = '('
        mem[0x00406ddc] = 'S'
        cpu.RBP = 0x7fffffffda90
        cpu.RSP = 0x7fffffffda70
        cpu.RIP = 0x406ddc
        cpu.RBX = 0x3
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda68], '\x03')
        self.assertEqual(mem[0x7fffffffda69], '\x00')
        self.assertEqual(mem[0x7fffffffda6a], '\x00')
        self.assertEqual(mem[0x7fffffffda6b], '\x00')
        self.assertEqual(mem[0x7fffffffda6c], '\x00')
        self.assertEqual(mem[0x7fffffffda6d], '\x00')
        self.assertEqual(mem[0x7fffffffda6e], '\x00')
        self.assertEqual(mem[0x7fffffffda6f], '\x00')
        self.assertEqual(mem[0x7fffffffda70], '\x08')
        self.assertEqual(mem[0x7fffffffda71], '\xdc')
        self.assertEqual(mem[0x7fffffffda72], '\xff')
        self.assertEqual(mem[0x7fffffffda73], '\xff')
        self.assertEqual(mem[0x7fffffffda74], '\xff')
        self.assertEqual(mem[0x7fffffffda75], '\x7f')
        self.assertEqual(mem[0x7fffffffda76], '\x00')
        self.assertEqual(mem[0x7fffffffda77], '\x00')
        self.assertEqual(mem[0x7fffffffda78], '(')
        self.assertEqual(mem[0x406ddc], 'S')
        self.assertEqual(cpu.RBX, 3L)
        self.assertEqual(cpu.RSP, 140737488345704L)
        self.assertEqual(cpu.RIP, 4222429L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_PUSH_14(self):
        ''' Instruction PUSH_14 
            Groups: mode64 
            0x4321ee:	push	r13
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda20] = '_'
        mem[0x7fffffffda21] = '\xda'
        mem[0x7fffffffda22] = '\xff'
        mem[0x7fffffffda23] = '\xff'
        mem[0x7fffffffda24] = '\xff'
        mem[0x7fffffffda25] = '\x7f'
        mem[0x7fffffffda26] = '\x00'
        mem[0x7fffffffda27] = '\x00'
        mem[0x7fffffffda28] = '^'
        mem[0x7fffffffda29] = '\xda'
        mem[0x7fffffffda2a] = '\xff'
        mem[0x7fffffffda2b] = '\xff'
        mem[0x7fffffffda2c] = '\xff'
        mem[0x7fffffffda2d] = '\x7f'
        mem[0x004321ee] = 'A'
        mem[0x004321ef] = 'U'
        mem[0x7fffffffda30] = '\x90'
        mem[0x7fffffffda2e] = '\x00'
        mem[0x7fffffffda2f] = '\x00'
        cpu.RSP = 0x7fffffffda28
        cpu.R13 = 0x7fffffffda5f
        cpu.RIP = 0x4321ee
        cpu.RBP = 0x7fffffffda30
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda20], '_')
        self.assertEqual(mem[0x7fffffffda21], '\xda')
        self.assertEqual(mem[0x7fffffffda22], '\xff')
        self.assertEqual(mem[0x7fffffffda23], '\xff')
        self.assertEqual(mem[0x7fffffffda24], '\xff')
        self.assertEqual(mem[0x7fffffffda25], '\x7f')
        self.assertEqual(mem[0x7fffffffda26], '\x00')
        self.assertEqual(mem[0x7fffffffda27], '\x00')
        self.assertEqual(mem[0x7fffffffda28], '^')
        self.assertEqual(mem[0x7fffffffda29], '\xda')
        self.assertEqual(mem[0x7fffffffda2a], '\xff')
        self.assertEqual(mem[0x7fffffffda2b], '\xff')
        self.assertEqual(mem[0x7fffffffda2c], '\xff')
        self.assertEqual(mem[0x7fffffffda2d], '\x7f')
        self.assertEqual(mem[0x7fffffffda2e], '\x00')
        self.assertEqual(mem[0x7fffffffda2f], '\x00')
        self.assertEqual(mem[0x7fffffffda30], '\x90')
        self.assertEqual(mem[0x4321ee], 'A')
        self.assertEqual(mem[0x4321ef], 'U')
        self.assertEqual(cpu.RSP, 140737488345632L)
        self.assertEqual(cpu.R13, 140737488345695L)
        self.assertEqual(cpu.RIP, 4399600L)
        self.assertEqual(cpu.RBP, 140737488345648L)

    def test_PUSH_15(self):
        ''' Instruction PUSH_15 
            Groups: mode64 
            0x41b194:	push	rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041b000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdb08] = 'x'
        mem[0x7fffffffdb09] = '\x02'
        mem[0x7fffffffdb0a] = '@'
        mem[0x7fffffffdb0b] = '\x00'
        mem[0x7fffffffdb0c] = '\x00'
        mem[0x7fffffffdb0d] = '\x00'
        mem[0x7fffffffdb0e] = '\x00'
        mem[0x7fffffffdb0f] = '\x00'
        mem[0x7fffffffdb10] = '\xe0'
        mem[0x7fffffffdb11] = '\xdb'
        mem[0x7fffffffdb12] = '\xff'
        mem[0x7fffffffdb13] = '\xff'
        mem[0x0041b194] = 'S'
        mem[0x7fffffffdb15] = '\x7f'
        mem[0x7fffffffdb16] = '\x00'
        mem[0x7fffffffdb17] = '\x00'
        mem[0x7fffffffdb18] = '\x83'
        mem[0x7fffffffdb14] = '\xff'
        cpu.RBP = 0x7fffffffdb10
        cpu.RSP = 0x7fffffffdb10
        cpu.RIP = 0x41b194
        cpu.RBX = 0x4002a8
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdb08], '\xa8')
        self.assertEqual(mem[0x7fffffffdb09], '\x02')
        self.assertEqual(mem[0x7fffffffdb0a], '@')
        self.assertEqual(mem[0x7fffffffdb0b], '\x00')
        self.assertEqual(mem[0x7fffffffdb0c], '\x00')
        self.assertEqual(mem[0x7fffffffdb0d], '\x00')
        self.assertEqual(mem[0x7fffffffdb0e], '\x00')
        self.assertEqual(mem[0x7fffffffdb0f], '\x00')
        self.assertEqual(mem[0x7fffffffdb10], '\xe0')
        self.assertEqual(mem[0x7fffffffdb11], '\xdb')
        self.assertEqual(mem[0x7fffffffdb12], '\xff')
        self.assertEqual(mem[0x7fffffffdb13], '\xff')
        self.assertEqual(mem[0x41b194], 'S')
        self.assertEqual(mem[0x7fffffffdb15], '\x7f')
        self.assertEqual(mem[0x7fffffffdb16], '\x00')
        self.assertEqual(mem[0x7fffffffdb17], '\x00')
        self.assertEqual(mem[0x7fffffffdb18], '\x83')
        self.assertEqual(mem[0x7fffffffdb14], '\xff')
        self.assertEqual(cpu.RBX, 4194984L)
        self.assertEqual(cpu.RSP, 140737488345864L)
        self.assertEqual(cpu.RIP, 4305301L)
        self.assertEqual(cpu.RBP, 140737488345872L)

    def test_PUSH_16(self):
        ''' Instruction PUSH_16 
            Groups: mode64 
            0x400f78:	push	r13
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdb00] = '\x00'
        mem[0x7fffffffdb01] = '\x00'
        mem[0x7fffffffdb02] = '\x00'
        mem[0x7fffffffdb03] = '\x00'
        mem[0x7fffffffdb04] = '\x00'
        mem[0x7fffffffdb05] = '\x00'
        mem[0x7fffffffdb06] = '\x00'
        mem[0x7fffffffdb07] = '\x00'
        mem[0x7fffffffdb08] = 'p'
        mem[0x00400f78] = 'A'
        mem[0x00400f79] = 'U'
        mem[0x7fffffffdaf8] = '\x00'
        mem[0x7fffffffdaf9] = '\x00'
        mem[0x7fffffffdafa] = '\x00'
        mem[0x7fffffffdafb] = '\x00'
        mem[0x7fffffffdafc] = '\x00'
        mem[0x7fffffffdafd] = '\x00'
        mem[0x7fffffffdafe] = '\x00'
        mem[0x7fffffffdaff] = '\x00'
        cpu.RSP = 0x7fffffffdb00
        cpu.R13 = 0x401330
        cpu.RIP = 0x400f78
        cpu.RBP = 0x7fffffffdb10
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdb00], '\x00')
        self.assertEqual(mem[0x7fffffffdb01], '\x00')
        self.assertEqual(mem[0x7fffffffdb02], '\x00')
        self.assertEqual(mem[0x7fffffffdb03], '\x00')
        self.assertEqual(mem[0x7fffffffdb04], '\x00')
        self.assertEqual(mem[0x7fffffffdb05], '\x00')
        self.assertEqual(mem[0x7fffffffdb06], '\x00')
        self.assertEqual(mem[0x7fffffffdb07], '\x00')
        self.assertEqual(mem[0x7fffffffdb08], 'p')
        self.assertEqual(mem[0x7fffffffdaf8], '0')
        self.assertEqual(mem[0x7fffffffdaf9], '\x13')
        self.assertEqual(mem[0x400f78], 'A')
        self.assertEqual(mem[0x400f79], 'U')
        self.assertEqual(mem[0x7fffffffdafa], '@')
        self.assertEqual(mem[0x7fffffffdafb], '\x00')
        self.assertEqual(mem[0x7fffffffdafc], '\x00')
        self.assertEqual(mem[0x7fffffffdafd], '\x00')
        self.assertEqual(mem[0x7fffffffdafe], '\x00')
        self.assertEqual(mem[0x7fffffffdaff], '\x00')
        self.assertEqual(cpu.RSP, 140737488345848L)
        self.assertEqual(cpu.R13, 4199216L)
        self.assertEqual(cpu.RIP, 4198266L)
        self.assertEqual(cpu.RBP, 140737488345872L)

    def test_PUSH_17(self):
        ''' Instruction PUSH_17 
            Groups: mode64 
            0x400967:	push	rbp
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdac0] = '\x10'
        mem[0x7fffffffdac1] = '\xdb'
        mem[0x7fffffffdac2] = '\xff'
        mem[0x7fffffffdac3] = '\xff'
        mem[0x7fffffffdac4] = '\xff'
        mem[0x7fffffffdac5] = '\x7f'
        mem[0x7fffffffdac6] = '\x00'
        mem[0x00400967] = 'U'
        mem[0x7fffffffdac8] = '\x0c'
        mem[0x7fffffffdac9] = '\x13'
        mem[0x7fffffffdaca] = '@'
        mem[0x7fffffffdac7] = '\x00'
        mem[0x7fffffffdacc] = '\x00'
        mem[0x7fffffffdacd] = '\x00'
        mem[0x7fffffffdace] = '\x00'
        mem[0x7fffffffdacf] = '\x00'
        mem[0x7fffffffdad0] = '\x03'
        mem[0x7fffffffdacb] = '\x00'
        cpu.RSP = 0x7fffffffdac8
        cpu.RIP = 0x400967
        cpu.RBP = 0x7fffffffdb10
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdac0], '\x10')
        self.assertEqual(mem[0x7fffffffdac1], '\xdb')
        self.assertEqual(mem[0x7fffffffdac2], '\xff')
        self.assertEqual(mem[0x7fffffffdac3], '\xff')
        self.assertEqual(mem[0x7fffffffdac4], '\xff')
        self.assertEqual(mem[0x7fffffffdac5], '\x7f')
        self.assertEqual(mem[0x7fffffffdac6], '\x00')
        self.assertEqual(mem[0x7fffffffdac7], '\x00')
        self.assertEqual(mem[0x7fffffffdac8], '\x0c')
        self.assertEqual(mem[0x7fffffffdac9], '\x13')
        self.assertEqual(mem[0x7fffffffdaca], '@')
        self.assertEqual(mem[0x7fffffffdacb], '\x00')
        self.assertEqual(mem[0x7fffffffdacc], '\x00')
        self.assertEqual(mem[0x7fffffffdacd], '\x00')
        self.assertEqual(mem[0x7fffffffdace], '\x00')
        self.assertEqual(mem[0x7fffffffdacf], '\x00')
        self.assertEqual(mem[0x7fffffffdad0], '\x03')
        self.assertEqual(mem[0x400967], 'U')
        self.assertEqual(cpu.RSP, 140737488345792L)
        self.assertEqual(cpu.RIP, 4196712L)
        self.assertEqual(cpu.RBP, 140737488345872L)

    def test_PUSH_18(self):
        ''' Instruction PUSH_18 
            Groups: mode64 
            0x406ddc:	push	rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda68] = '\x01'
        mem[0x7fffffffda69] = 'S'
        mem[0x7fffffffda6a] = 'J'
        mem[0x7fffffffda6b] = '\x00'
        mem[0x7fffffffda6c] = '\x00'
        mem[0x7fffffffda6d] = '\x00'
        mem[0x7fffffffda6e] = '\x00'
        mem[0x7fffffffda6f] = '\x00'
        mem[0x7fffffffda70] = '\xf4'
        mem[0x7fffffffda71] = '\xd2'
        mem[0x7fffffffda72] = '\xff'
        mem[0x7fffffffda73] = '\xf7'
        mem[0x7fffffffda74] = '\xff'
        mem[0x7fffffffda75] = '\x7f'
        mem[0x7fffffffda76] = '\x00'
        mem[0x7fffffffda77] = '\x00'
        mem[0x7fffffffda78] = '\x88'
        mem[0x00406ddc] = 'S'
        cpu.RBP = 0x7fffffffda90
        cpu.RSP = 0x7fffffffda70
        cpu.RIP = 0x406ddc
        cpu.RBX = 0x4a5301
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda68], '\x01')
        self.assertEqual(mem[0x7fffffffda69], 'S')
        self.assertEqual(mem[0x7fffffffda6a], 'J')
        self.assertEqual(mem[0x7fffffffda6b], '\x00')
        self.assertEqual(mem[0x7fffffffda6c], '\x00')
        self.assertEqual(mem[0x7fffffffda6d], '\x00')
        self.assertEqual(mem[0x7fffffffda6e], '\x00')
        self.assertEqual(mem[0x7fffffffda6f], '\x00')
        self.assertEqual(mem[0x7fffffffda70], '\xf4')
        self.assertEqual(mem[0x7fffffffda71], '\xd2')
        self.assertEqual(mem[0x7fffffffda72], '\xff')
        self.assertEqual(mem[0x7fffffffda73], '\xf7')
        self.assertEqual(mem[0x7fffffffda74], '\xff')
        self.assertEqual(mem[0x7fffffffda75], '\x7f')
        self.assertEqual(mem[0x7fffffffda76], '\x00')
        self.assertEqual(mem[0x7fffffffda77], '\x00')
        self.assertEqual(mem[0x7fffffffda78], '\x88')
        self.assertEqual(mem[0x406ddc], 'S')
        self.assertEqual(cpu.RBX, 4870913L)
        self.assertEqual(cpu.RSP, 140737488345704L)
        self.assertEqual(cpu.RIP, 4222429L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_PUSH_19(self):
        ''' Instruction PUSH_19 
            Groups: mode64 
            0x462294:	push	r15
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda88] = 'p'
        mem[0x7fffffffda89] = '\x8c'
        mem[0x7fffffffda8a] = 'k'
        mem[0x7fffffffda8b] = '\x00'
        mem[0x7fffffffda8c] = '\x00'
        mem[0x7fffffffda8d] = '\x00'
        mem[0x7fffffffda8e] = '\x00'
        mem[0x7fffffffda8f] = '\x00'
        mem[0x7fffffffda90] = '\xe0'
        mem[0x7fffffffda91] = '\xda'
        mem[0x7fffffffda92] = '\xff'
        mem[0x7fffffffda93] = '\xff'
        mem[0x00462294] = 'A'
        mem[0x00462295] = 'W'
        mem[0x7fffffffda96] = '\x00'
        mem[0x7fffffffda97] = '\x00'
        mem[0x7fffffffda98] = 'E'
        mem[0x7fffffffda94] = '\xff'
        mem[0x7fffffffda95] = '\x7f'
        cpu.R15 = 0x6b8c70
        cpu.RSP = 0x7fffffffda90
        cpu.RIP = 0x462294
        cpu.RBP = 0x7fffffffda90
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda88], 'p')
        self.assertEqual(mem[0x7fffffffda89], '\x8c')
        self.assertEqual(mem[0x7fffffffda8a], 'k')
        self.assertEqual(mem[0x7fffffffda8b], '\x00')
        self.assertEqual(mem[0x7fffffffda8c], '\x00')
        self.assertEqual(mem[0x7fffffffda8d], '\x00')
        self.assertEqual(mem[0x7fffffffda8e], '\x00')
        self.assertEqual(mem[0x7fffffffda8f], '\x00')
        self.assertEqual(mem[0x7fffffffda90], '\xe0')
        self.assertEqual(mem[0x7fffffffda91], '\xda')
        self.assertEqual(mem[0x7fffffffda92], '\xff')
        self.assertEqual(mem[0x7fffffffda93], '\xff')
        self.assertEqual(mem[0x462294], 'A')
        self.assertEqual(mem[0x462295], 'W')
        self.assertEqual(mem[0x7fffffffda96], '\x00')
        self.assertEqual(mem[0x7fffffffda97], '\x00')
        self.assertEqual(mem[0x7fffffffda98], 'E')
        self.assertEqual(mem[0x7fffffffda94], '\xff')
        self.assertEqual(mem[0x7fffffffda95], '\x7f')
        self.assertEqual(cpu.R15, 7048304L)
        self.assertEqual(cpu.RSP, 140737488345736L)
        self.assertEqual(cpu.RIP, 4596374L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_PUSH_2(self):
        ''' Instruction PUSH_2 
            Groups: mode64 
            0x413480:	push	rbp
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x00413480] = 'U'
        mem[0x7fffffffdaa0] = '@'
        mem[0x7fffffffda90] = '\xe0'
        mem[0x7fffffffda91] = '\xda'
        mem[0x7fffffffda92] = '\xff'
        mem[0x7fffffffda93] = '\xff'
        mem[0x7fffffffda94] = '\xff'
        mem[0x7fffffffda95] = '\x7f'
        mem[0x7fffffffda96] = '\x00'
        mem[0x7fffffffda97] = '\x00'
        mem[0x7fffffffda98] = 'U'
        mem[0x7fffffffda99] = 'n'
        mem[0x7fffffffda9a] = 'C'
        mem[0x7fffffffda9b] = '\x00'
        mem[0x7fffffffda9c] = '\x00'
        mem[0x7fffffffda9d] = '\x00'
        mem[0x7fffffffda9e] = '\x00'
        mem[0x7fffffffda9f] = '\x00'
        cpu.RSP = 0x7fffffffda98
        cpu.RIP = 0x413480
        cpu.RBP = 0x7fffffffdae0
        cpu.execute()
    
        self.assertEqual(mem[0x413480], 'U')
        self.assertEqual(mem[0x7fffffffdaa0], '@')
        self.assertEqual(mem[0x7fffffffda90], '\xe0')
        self.assertEqual(mem[0x7fffffffda91], '\xda')
        self.assertEqual(mem[0x7fffffffda92], '\xff')
        self.assertEqual(mem[0x7fffffffda93], '\xff')
        self.assertEqual(mem[0x7fffffffda94], '\xff')
        self.assertEqual(mem[0x7fffffffda95], '\x7f')
        self.assertEqual(mem[0x7fffffffda96], '\x00')
        self.assertEqual(mem[0x7fffffffda97], '\x00')
        self.assertEqual(mem[0x7fffffffda98], 'U')
        self.assertEqual(mem[0x7fffffffda99], 'n')
        self.assertEqual(mem[0x7fffffffda9a], 'C')
        self.assertEqual(mem[0x7fffffffda9b], '\x00')
        self.assertEqual(mem[0x7fffffffda9c], '\x00')
        self.assertEqual(mem[0x7fffffffda9d], '\x00')
        self.assertEqual(mem[0x7fffffffda9e], '\x00')
        self.assertEqual(mem[0x7fffffffda9f], '\x00')
        self.assertEqual(cpu.RSP, 140737488345744L)
        self.assertEqual(cpu.RIP, 4273281L)
        self.assertEqual(cpu.RBP, 140737488345824L)

    def test_PUSH_20(self):
        ''' Instruction PUSH_20 
            Groups: mode64 
            0x406dd4:	push	r15
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda88] = '\xf4'
        mem[0x7fffffffda89] = '\xd2'
        mem[0x7fffffffda8a] = '\xff'
        mem[0x7fffffffda8b] = '\xf7'
        mem[0x7fffffffda8c] = '\xff'
        mem[0x7fffffffda8d] = '\x7f'
        mem[0x7fffffffda8e] = '\x00'
        mem[0x7fffffffda8f] = '\x00'
        mem[0x7fffffffda90] = '\xe0'
        mem[0x7fffffffda91] = '\xda'
        mem[0x7fffffffda92] = '\xff'
        mem[0x7fffffffda93] = '\xff'
        mem[0x00406dd4] = 'A'
        mem[0x00406dd5] = 'W'
        mem[0x7fffffffda96] = '\x00'
        mem[0x7fffffffda97] = '\x00'
        mem[0x7fffffffda98] = '\xaa'
        mem[0x7fffffffda94] = '\xff'
        mem[0x7fffffffda95] = '\x7f'
        cpu.R15 = 0x10
        cpu.RSP = 0x7fffffffda90
        cpu.RIP = 0x406dd4
        cpu.RBP = 0x7fffffffda90
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda88], '\x10')
        self.assertEqual(mem[0x7fffffffda89], '\x00')
        self.assertEqual(mem[0x7fffffffda8a], '\x00')
        self.assertEqual(mem[0x7fffffffda8b], '\x00')
        self.assertEqual(mem[0x7fffffffda8c], '\x00')
        self.assertEqual(mem[0x7fffffffda8d], '\x00')
        self.assertEqual(mem[0x7fffffffda8e], '\x00')
        self.assertEqual(mem[0x7fffffffda8f], '\x00')
        self.assertEqual(mem[0x7fffffffda90], '\xe0')
        self.assertEqual(mem[0x7fffffffda91], '\xda')
        self.assertEqual(mem[0x7fffffffda92], '\xff')
        self.assertEqual(mem[0x7fffffffda93], '\xff')
        self.assertEqual(mem[0x406dd4], 'A')
        self.assertEqual(mem[0x406dd5], 'W')
        self.assertEqual(mem[0x7fffffffda96], '\x00')
        self.assertEqual(mem[0x7fffffffda97], '\x00')
        self.assertEqual(mem[0x7fffffffda98], '\xaa')
        self.assertEqual(mem[0x7fffffffda94], '\xff')
        self.assertEqual(mem[0x7fffffffda95], '\x7f')
        self.assertEqual(cpu.R15, 16L)
        self.assertEqual(cpu.RSP, 140737488345736L)
        self.assertEqual(cpu.RIP, 4222422L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_PUSH_21(self):
        ''' Instruction PUSH_21 
            Groups: mode64 
            0x406dd6:	push	r14
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda80] = '\x00'
        mem[0x7fffffffda81] = '\x00'
        mem[0x7fffffffda82] = '\x00'
        mem[0x7fffffffda83] = '\x00'
        mem[0x7fffffffda84] = '\x00'
        mem[0x7fffffffda85] = '\x00'
        mem[0x7fffffffda86] = '\x00'
        mem[0x7fffffffda87] = '\x00'
        mem[0x7fffffffda88] = '\x10'
        mem[0x7fffffffda89] = '\x00'
        mem[0x7fffffffda8a] = '\x00'
        mem[0x7fffffffda8b] = '\x00'
        mem[0x7fffffffda8c] = '\x00'
        mem[0x7fffffffda8d] = '\x00'
        mem[0x7fffffffda8e] = '\x00'
        mem[0x7fffffffda8f] = '\x00'
        mem[0x7fffffffda90] = '\xe0'
        mem[0x00406dd6] = 'A'
        mem[0x00406dd7] = 'V'
        cpu.R14 = 0x0
        cpu.RSP = 0x7fffffffda88
        cpu.RIP = 0x406dd6
        cpu.RBP = 0x7fffffffda90
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda80], '\x00')
        self.assertEqual(mem[0x7fffffffda81], '\x00')
        self.assertEqual(mem[0x7fffffffda82], '\x00')
        self.assertEqual(mem[0x7fffffffda83], '\x00')
        self.assertEqual(mem[0x7fffffffda84], '\x00')
        self.assertEqual(mem[0x7fffffffda85], '\x00')
        self.assertEqual(mem[0x7fffffffda86], '\x00')
        self.assertEqual(mem[0x7fffffffda87], '\x00')
        self.assertEqual(mem[0x7fffffffda88], '\x10')
        self.assertEqual(mem[0x7fffffffda89], '\x00')
        self.assertEqual(mem[0x7fffffffda8a], '\x00')
        self.assertEqual(mem[0x7fffffffda8b], '\x00')
        self.assertEqual(mem[0x7fffffffda8c], '\x00')
        self.assertEqual(mem[0x7fffffffda8d], '\x00')
        self.assertEqual(mem[0x7fffffffda8e], '\x00')
        self.assertEqual(mem[0x7fffffffda8f], '\x00')
        self.assertEqual(mem[0x7fffffffda90], '\xe0')
        self.assertEqual(mem[0x406dd6], 'A')
        self.assertEqual(mem[0x406dd7], 'V')
        self.assertEqual(cpu.R14, 0L)
        self.assertEqual(cpu.RSP, 140737488345728L)
        self.assertEqual(cpu.RIP, 4222424L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_PUSH_3(self):
        ''' Instruction PUSH_3 
            Groups: mode64 
            0x4321f0:	push	r12
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda20] = '_'
        mem[0x7fffffffda21] = '\xda'
        mem[0x7fffffffda22] = '\xff'
        mem[0x7fffffffda23] = '\xff'
        mem[0x7fffffffda24] = '\xff'
        mem[0x7fffffffda25] = '\x7f'
        mem[0x7fffffffda26] = '\x00'
        mem[0x7fffffffda27] = '\x00'
        mem[0x7fffffffda28] = '^'
        mem[0x004321f0] = 'A'
        mem[0x004321f1] = 'T'
        mem[0x7fffffffda18] = '@'
        mem[0x7fffffffda19] = '\x98'
        mem[0x7fffffffda1a] = 'k'
        mem[0x7fffffffda1b] = '\x00'
        mem[0x7fffffffda1c] = '\x00'
        mem[0x7fffffffda1d] = '\x00'
        mem[0x7fffffffda1e] = '\x00'
        mem[0x7fffffffda1f] = '\x00'
        cpu.RSP = 0x7fffffffda20
        cpu.R12 = 0xbc
        cpu.RIP = 0x4321f0
        cpu.RBP = 0x7fffffffda30
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda20], '_')
        self.assertEqual(mem[0x7fffffffda21], '\xda')
        self.assertEqual(mem[0x7fffffffda22], '\xff')
        self.assertEqual(mem[0x7fffffffda23], '\xff')
        self.assertEqual(mem[0x7fffffffda24], '\xff')
        self.assertEqual(mem[0x7fffffffda25], '\x7f')
        self.assertEqual(mem[0x7fffffffda26], '\x00')
        self.assertEqual(mem[0x7fffffffda27], '\x00')
        self.assertEqual(mem[0x7fffffffda28], '^')
        self.assertEqual(mem[0x4321f0], 'A')
        self.assertEqual(mem[0x4321f1], 'T')
        self.assertEqual(mem[0x7fffffffda18], '\xbc')
        self.assertEqual(mem[0x7fffffffda19], '\x00')
        self.assertEqual(mem[0x7fffffffda1a], '\x00')
        self.assertEqual(mem[0x7fffffffda1b], '\x00')
        self.assertEqual(mem[0x7fffffffda1c], '\x00')
        self.assertEqual(mem[0x7fffffffda1d], '\x00')
        self.assertEqual(mem[0x7fffffffda1e], '\x00')
        self.assertEqual(mem[0x7fffffffda1f], '\x00')
        self.assertEqual(cpu.R12, 188L)
        self.assertEqual(cpu.RSP, 140737488345624L)
        self.assertEqual(cpu.RIP, 4399602L)
        self.assertEqual(cpu.RBP, 140737488345648L)

    def test_PUSH_4(self):
        ''' Instruction PUSH_4 
            Groups: mode64 
            0x442650:	push	rbp
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00442000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdb20] = '\x00'
        mem[0x00442650] = 'U'
        mem[0x7fffffffdb10] = '\xe0'
        mem[0x7fffffffdb11] = '\xdb'
        mem[0x7fffffffdb12] = '\xff'
        mem[0x7fffffffdb13] = '\xff'
        mem[0x7fffffffdb14] = '\xff'
        mem[0x7fffffffdb15] = '\x7f'
        mem[0x7fffffffdb16] = '\x00'
        mem[0x7fffffffdb17] = '\x00'
        mem[0x7fffffffdb18] = '\x95'
        mem[0x7fffffffdb19] = '\r'
        mem[0x7fffffffdb1a] = '@'
        mem[0x7fffffffdb1b] = '\x00'
        mem[0x7fffffffdb1c] = '\x00'
        mem[0x7fffffffdb1d] = '\x00'
        mem[0x7fffffffdb1e] = '\x00'
        mem[0x7fffffffdb1f] = '\x00'
        cpu.RSP = 0x7fffffffdb18
        cpu.RIP = 0x442650
        cpu.RBP = 0x7fffffffdbe0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdb20], '\x00')
        self.assertEqual(mem[0x442650], 'U')
        self.assertEqual(mem[0x7fffffffdb10], '\xe0')
        self.assertEqual(mem[0x7fffffffdb11], '\xdb')
        self.assertEqual(mem[0x7fffffffdb12], '\xff')
        self.assertEqual(mem[0x7fffffffdb13], '\xff')
        self.assertEqual(mem[0x7fffffffdb14], '\xff')
        self.assertEqual(mem[0x7fffffffdb15], '\x7f')
        self.assertEqual(mem[0x7fffffffdb16], '\x00')
        self.assertEqual(mem[0x7fffffffdb17], '\x00')
        self.assertEqual(mem[0x7fffffffdb18], '\x95')
        self.assertEqual(mem[0x7fffffffdb19], '\r')
        self.assertEqual(mem[0x7fffffffdb1a], '@')
        self.assertEqual(mem[0x7fffffffdb1b], '\x00')
        self.assertEqual(mem[0x7fffffffdb1c], '\x00')
        self.assertEqual(mem[0x7fffffffdb1d], '\x00')
        self.assertEqual(mem[0x7fffffffdb1e], '\x00')
        self.assertEqual(mem[0x7fffffffdb1f], '\x00')
        self.assertEqual(cpu.RSP, 140737488345872L)
        self.assertEqual(cpu.RIP, 4466257L)
        self.assertEqual(cpu.RBP, 140737488346080L)

    def test_PUSH_5(self):
        ''' Instruction PUSH_5 
            Groups: mode64 
            0x407284:	push	r13
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00407000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x00407284] = 'A'
        mem[0x00407285] = 'U'
        mem[0x7fffffffdb08] = '0'
        mem[0x7fffffffdb09] = '\x13'
        mem[0x7fffffffdb0a] = '@'
        mem[0x7fffffffdb0b] = '\x00'
        mem[0x7fffffffdb0c] = '\x00'
        mem[0x7fffffffdb0d] = '\x00'
        mem[0x7fffffffdb0e] = '\x00'
        mem[0x7fffffffdb0f] = '\x00'
        mem[0x7fffffffdb10] = '\xe0'
        mem[0x7fffffffdb11] = '\xdb'
        mem[0x7fffffffdb12] = '\xff'
        mem[0x7fffffffdb13] = '\xff'
        mem[0x7fffffffdb14] = '\xff'
        mem[0x7fffffffdb15] = '\x7f'
        mem[0x7fffffffdb16] = '\x00'
        mem[0x7fffffffdb17] = '\x00'
        mem[0x7fffffffdb18] = 'Q'
        cpu.RSP = 0x7fffffffdb10
        cpu.R13 = 0x401330
        cpu.RIP = 0x407284
        cpu.RBP = 0x7fffffffdb10
        cpu.execute()
    
        self.assertEqual(mem[0x407284], 'A')
        self.assertEqual(mem[0x407285], 'U')
        self.assertEqual(mem[0x7fffffffdb08], '0')
        self.assertEqual(mem[0x7fffffffdb09], '\x13')
        self.assertEqual(mem[0x7fffffffdb0a], '@')
        self.assertEqual(mem[0x7fffffffdb0b], '\x00')
        self.assertEqual(mem[0x7fffffffdb0c], '\x00')
        self.assertEqual(mem[0x7fffffffdb0d], '\x00')
        self.assertEqual(mem[0x7fffffffdb0e], '\x00')
        self.assertEqual(mem[0x7fffffffdb0f], '\x00')
        self.assertEqual(mem[0x7fffffffdb10], '\xe0')
        self.assertEqual(mem[0x7fffffffdb11], '\xdb')
        self.assertEqual(mem[0x7fffffffdb12], '\xff')
        self.assertEqual(mem[0x7fffffffdb13], '\xff')
        self.assertEqual(mem[0x7fffffffdb14], '\xff')
        self.assertEqual(mem[0x7fffffffdb15], '\x7f')
        self.assertEqual(mem[0x7fffffffdb16], '\x00')
        self.assertEqual(mem[0x7fffffffdb17], '\x00')
        self.assertEqual(mem[0x7fffffffdb18], 'Q')
        self.assertEqual(cpu.RSP, 140737488345864L)
        self.assertEqual(cpu.R13, 4199216L)
        self.assertEqual(cpu.RIP, 4223622L)
        self.assertEqual(cpu.RBP, 140737488345872L)

    def test_PUSH_6(self):
        ''' Instruction PUSH_6 
            Groups: mode64 
            0x4341b8:	push	rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x7fffffffc908] = '@'
        mem[0x7fffffffc909] = '\x98'
        mem[0x7fffffffc90a] = 'k'
        mem[0x7fffffffc90b] = '\x00'
        mem[0x7fffffffc90c] = '\x00'
        mem[0x7fffffffc90d] = '\x00'
        mem[0x7fffffffc90e] = '\x00'
        mem[0x7fffffffc90f] = '\x00'
        mem[0x7fffffffc910] = '@'
        mem[0x7fffffffc911] = '\x00'
        mem[0x7fffffffc912] = '\x00'
        mem[0x7fffffffc913] = '\x00'
        mem[0x7fffffffc914] = '\x00'
        mem[0x7fffffffc915] = '\x00'
        mem[0x7fffffffc916] = '\x00'
        mem[0x7fffffffc917] = '\x00'
        mem[0x004341b8] = 'S'
        mem[0x7fffffffc918] = '\x00'
        cpu.RBP = 0x7fffffffc920
        cpu.RSP = 0x7fffffffc910
        cpu.RIP = 0x4341b8
        cpu.RBX = 0x6b9840
        cpu.execute()
    
        self.assertEqual(mem[0x4341b8], 'S')
        self.assertEqual(mem[0x7fffffffc908], '@')
        self.assertEqual(mem[0x7fffffffc909], '\x98')
        self.assertEqual(mem[0x7fffffffc90a], 'k')
        self.assertEqual(mem[0x7fffffffc90b], '\x00')
        self.assertEqual(mem[0x7fffffffc90c], '\x00')
        self.assertEqual(mem[0x7fffffffc90d], '\x00')
        self.assertEqual(mem[0x7fffffffc90e], '\x00')
        self.assertEqual(mem[0x7fffffffc90f], '\x00')
        self.assertEqual(mem[0x7fffffffc910], '@')
        self.assertEqual(mem[0x7fffffffc911], '\x00')
        self.assertEqual(mem[0x7fffffffc912], '\x00')
        self.assertEqual(mem[0x7fffffffc913], '\x00')
        self.assertEqual(mem[0x7fffffffc914], '\x00')
        self.assertEqual(mem[0x7fffffffc915], '\x00')
        self.assertEqual(mem[0x7fffffffc916], '\x00')
        self.assertEqual(mem[0x7fffffffc917], '\x00')
        self.assertEqual(mem[0x7fffffffc918], '\x00')
        self.assertEqual(cpu.RBX, 7051328L)
        self.assertEqual(cpu.RSP, 140737488341256L)
        self.assertEqual(cpu.RIP, 4407737L)
        self.assertEqual(cpu.RBP, 140737488341280L)

    def test_PUSH_7(self):
        ''' Instruction PUSH_7 
            Groups: mode64 
            0x4324d8:	push	r13
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda80] = '\x01'
        mem[0x7fffffffda81] = '\x00'
        mem[0x7fffffffda82] = '\x00'
        mem[0x7fffffffda83] = '\x00'
        mem[0x7fffffffda84] = '\x00'
        mem[0x7fffffffda85] = '\x00'
        mem[0x7fffffffda86] = '\x00'
        mem[0x7fffffffda87] = '\x00'
        mem[0x7fffffffda88] = '\xd8'
        mem[0x004324d8] = 'A'
        mem[0x004324d9] = 'U'
        mem[0x7fffffffda78] = '\x88'
        mem[0x7fffffffda79] = '\xf6'
        mem[0x7fffffffda7a] = 'k'
        mem[0x7fffffffda7b] = '\x00'
        mem[0x7fffffffda7c] = '\x00'
        mem[0x7fffffffda7d] = '\x00'
        mem[0x7fffffffda7e] = '\x00'
        mem[0x7fffffffda7f] = '\x00'
        cpu.RSP = 0x7fffffffda80
        cpu.R13 = 0x7fffffffdc28
        cpu.RIP = 0x4324d8
        cpu.RBP = 0x7fffffffda90
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda80], '\x01')
        self.assertEqual(mem[0x7fffffffda81], '\x00')
        self.assertEqual(mem[0x7fffffffda82], '\x00')
        self.assertEqual(mem[0x7fffffffda83], '\x00')
        self.assertEqual(mem[0x7fffffffda84], '\x00')
        self.assertEqual(mem[0x7fffffffda85], '\x00')
        self.assertEqual(mem[0x7fffffffda86], '\x00')
        self.assertEqual(mem[0x7fffffffda87], '\x00')
        self.assertEqual(mem[0x7fffffffda88], '\xd8')
        self.assertEqual(mem[0x7fffffffda78], '(')
        self.assertEqual(mem[0x7fffffffda79], '\xdc')
        self.assertEqual(mem[0x4324d8], 'A')
        self.assertEqual(mem[0x4324d9], 'U')
        self.assertEqual(mem[0x7fffffffda7a], '\xff')
        self.assertEqual(mem[0x7fffffffda7b], '\xff')
        self.assertEqual(mem[0x7fffffffda7c], '\xff')
        self.assertEqual(mem[0x7fffffffda7d], '\x7f')
        self.assertEqual(mem[0x7fffffffda7e], '\x00')
        self.assertEqual(mem[0x7fffffffda7f], '\x00')
        self.assertEqual(cpu.RSP, 140737488345720L)
        self.assertEqual(cpu.R13, 140737488346152L)
        self.assertEqual(cpu.RIP, 4400346L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_PUSH_8(self):
        ''' Instruction PUSH_8 
            Groups: mode64 
            0x414654:	push	r15
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x7fffffffca40] = '`'
        mem[0x7fffffffca41] = '\xca'
        mem[0x7fffffffca42] = '\xff'
        mem[0x7fffffffca43] = '\xff'
        mem[0x7fffffffca44] = '\xff'
        mem[0x7fffffffca45] = '\x7f'
        mem[0x7fffffffca46] = '\x00'
        mem[0x7fffffffca47] = '\x00'
        mem[0x7fffffffca48] = '`'
        mem[0x00414654] = 'A'
        mem[0x00414655] = 'W'
        mem[0x7fffffffca38] = '\x00'
        mem[0x7fffffffca39] = '\x00'
        mem[0x7fffffffca3a] = '\x00'
        mem[0x7fffffffca3b] = '\x00'
        mem[0x7fffffffca3c] = '\x00'
        mem[0x7fffffffca3d] = '\x00'
        mem[0x7fffffffca3e] = '\x00'
        mem[0x7fffffffca3f] = '\x00'
        cpu.R15 = 0x6b8c70
        cpu.RSP = 0x7fffffffca40
        cpu.RIP = 0x414654
        cpu.RBP = 0x7fffffffca40
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffca40], '`')
        self.assertEqual(mem[0x7fffffffca41], '\xca')
        self.assertEqual(mem[0x7fffffffca42], '\xff')
        self.assertEqual(mem[0x7fffffffca43], '\xff')
        self.assertEqual(mem[0x7fffffffca44], '\xff')
        self.assertEqual(mem[0x7fffffffca45], '\x7f')
        self.assertEqual(mem[0x7fffffffca46], '\x00')
        self.assertEqual(mem[0x7fffffffca47], '\x00')
        self.assertEqual(mem[0x7fffffffca48], '`')
        self.assertEqual(mem[0x414654], 'A')
        self.assertEqual(mem[0x414655], 'W')
        self.assertEqual(mem[0x7fffffffca38], 'p')
        self.assertEqual(mem[0x7fffffffca39], '\x8c')
        self.assertEqual(mem[0x7fffffffca3a], 'k')
        self.assertEqual(mem[0x7fffffffca3b], '\x00')
        self.assertEqual(mem[0x7fffffffca3c], '\x00')
        self.assertEqual(mem[0x7fffffffca3d], '\x00')
        self.assertEqual(mem[0x7fffffffca3e], '\x00')
        self.assertEqual(mem[0x7fffffffca3f], '\x00')
        self.assertEqual(cpu.R15, 7048304L)
        self.assertEqual(cpu.RSP, 140737488341560L)
        self.assertEqual(cpu.RIP, 4277846L)
        self.assertEqual(cpu.RBP, 140737488341568L)

    def test_PUSH_9(self):
        ''' Instruction PUSH_9 
            Groups: mode64 
            0x4321ee:	push	r13
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda20] = '_'
        mem[0x7fffffffda21] = '\xda'
        mem[0x7fffffffda22] = '\xff'
        mem[0x7fffffffda23] = '\xff'
        mem[0x7fffffffda24] = '\xff'
        mem[0x7fffffffda25] = '\x7f'
        mem[0x7fffffffda26] = '\x00'
        mem[0x7fffffffda27] = '\x00'
        mem[0x7fffffffda28] = '^'
        mem[0x7fffffffda29] = '\xda'
        mem[0x7fffffffda2a] = '\xff'
        mem[0x7fffffffda2b] = '\xff'
        mem[0x7fffffffda2c] = '\xff'
        mem[0x7fffffffda2d] = '\x7f'
        mem[0x004321ee] = 'A'
        mem[0x004321ef] = 'U'
        mem[0x7fffffffda30] = '\x90'
        mem[0x7fffffffda2e] = '\x00'
        mem[0x7fffffffda2f] = '\x00'
        cpu.RSP = 0x7fffffffda28
        cpu.R13 = 0x7fffffffda5f
        cpu.RIP = 0x4321ee
        cpu.RBP = 0x7fffffffda30
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda20], '_')
        self.assertEqual(mem[0x7fffffffda21], '\xda')
        self.assertEqual(mem[0x7fffffffda22], '\xff')
        self.assertEqual(mem[0x7fffffffda23], '\xff')
        self.assertEqual(mem[0x7fffffffda24], '\xff')
        self.assertEqual(mem[0x7fffffffda25], '\x7f')
        self.assertEqual(mem[0x7fffffffda26], '\x00')
        self.assertEqual(mem[0x7fffffffda27], '\x00')
        self.assertEqual(mem[0x7fffffffda28], '^')
        self.assertEqual(mem[0x7fffffffda29], '\xda')
        self.assertEqual(mem[0x7fffffffda2a], '\xff')
        self.assertEqual(mem[0x7fffffffda2b], '\xff')
        self.assertEqual(mem[0x7fffffffda2c], '\xff')
        self.assertEqual(mem[0x7fffffffda2d], '\x7f')
        self.assertEqual(mem[0x7fffffffda2e], '\x00')
        self.assertEqual(mem[0x7fffffffda2f], '\x00')
        self.assertEqual(mem[0x7fffffffda30], '\x90')
        self.assertEqual(mem[0x4321ee], 'A')
        self.assertEqual(mem[0x4321ef], 'U')
        self.assertEqual(cpu.RSP, 140737488345632L)
        self.assertEqual(cpu.R13, 140737488345695L)
        self.assertEqual(cpu.RIP, 4399600L)
        self.assertEqual(cpu.RBP, 140737488345648L)

    def test_PXOR_1(self):
        ''' Instruction PXOR_1 
            Groups: sse2 
            0x4183af:	pxor	xmm11, xmm11
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183b0] = 'E'
        mem[0x004183b1] = '\x0f'
        mem[0x004183b2] = '\xef'
        mem[0x004183b3] = '\xdb'
        mem[0x004183af] = 'f'
        cpu.XMM11 = 0x0
        cpu.RIP = 0x4183af
        cpu.execute()
    
        self.assertEqual(mem[0x4183b0], 'E')
        self.assertEqual(mem[0x4183b1], '\x0f')
        self.assertEqual(mem[0x4183b2], '\xef')
        self.assertEqual(mem[0x4183b3], '\xdb')
        self.assertEqual(mem[0x4183af], 'f')
        self.assertEqual(cpu.XMM11, 0)
        self.assertEqual(cpu.RIP, 4293556L)

    def test_PXOR_10(self):
        ''' Instruction PXOR_10 
            Groups: sse2 
            0x4183aa:	pxor	xmm10, xmm10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183aa] = 'f'
        mem[0x004183ab] = 'E'
        mem[0x004183ac] = '\x0f'
        mem[0x004183ad] = '\xef'
        mem[0x004183ae] = '\xd2'
        cpu.XMM10 = 0x0
        cpu.RIP = 0x4183aa
        cpu.execute()
    
        self.assertEqual(mem[0x4183aa], 'f')
        self.assertEqual(mem[0x4183ab], 'E')
        self.assertEqual(mem[0x4183ac], '\x0f')
        self.assertEqual(mem[0x4183ad], '\xef')
        self.assertEqual(mem[0x4183ae], '\xd2')
        self.assertEqual(cpu.XMM10, 0)
        self.assertEqual(cpu.RIP, 4293551L)

    def test_PXOR_11(self):
        ''' Instruction PXOR_11 
            Groups: sse2 
            0x4183aa:	pxor	xmm10, xmm10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183aa] = 'f'
        mem[0x004183ab] = 'E'
        mem[0x004183ac] = '\x0f'
        mem[0x004183ad] = '\xef'
        mem[0x004183ae] = '\xd2'
        cpu.XMM10 = 0x0
        cpu.RIP = 0x4183aa
        cpu.execute()
    
        self.assertEqual(mem[0x4183aa], 'f')
        self.assertEqual(mem[0x4183ab], 'E')
        self.assertEqual(mem[0x4183ac], '\x0f')
        self.assertEqual(mem[0x4183ad], '\xef')
        self.assertEqual(mem[0x4183ae], '\xd2')
        self.assertEqual(cpu.XMM10, 0)
        self.assertEqual(cpu.RIP, 4293551L)

    def test_PXOR_12(self):
        ''' Instruction PXOR_12 
            Groups: sse2 
            0x4183a0:	pxor	xmm8, xmm8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183a0] = 'f'
        mem[0x004183a1] = 'E'
        mem[0x004183a2] = '\x0f'
        mem[0x004183a3] = '\xef'
        mem[0x004183a4] = '\xc0'
        cpu.XMM8 = 0x0
        cpu.RIP = 0x4183a0
        cpu.execute()
    
        self.assertEqual(mem[0x4183a0], 'f')
        self.assertEqual(mem[0x4183a1], 'E')
        self.assertEqual(mem[0x4183a2], '\x0f')
        self.assertEqual(mem[0x4183a3], '\xef')
        self.assertEqual(mem[0x4183a4], '\xc0')
        self.assertEqual(cpu.XMM8, 0)
        self.assertEqual(cpu.RIP, 4293541L)

    def test_PXOR_13(self):
        ''' Instruction PXOR_13 
            Groups: sse2 
            0x4183a0:	pxor	xmm8, xmm8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183a0] = 'f'
        mem[0x004183a1] = 'E'
        mem[0x004183a2] = '\x0f'
        mem[0x004183a3] = '\xef'
        mem[0x004183a4] = '\xc0'
        cpu.XMM8 = 0x0
        cpu.RIP = 0x4183a0
        cpu.execute()
    
        self.assertEqual(mem[0x4183a0], 'f')
        self.assertEqual(mem[0x4183a1], 'E')
        self.assertEqual(mem[0x4183a2], '\x0f')
        self.assertEqual(mem[0x4183a3], '\xef')
        self.assertEqual(mem[0x4183a4], '\xc0')
        self.assertEqual(cpu.XMM8, 0)
        self.assertEqual(cpu.RIP, 4293541L)

    def test_PXOR_14(self):
        ''' Instruction PXOR_14 
            Groups: sse2 
            0x4183a0:	pxor	xmm8, xmm8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183a0] = 'f'
        mem[0x004183a1] = 'E'
        mem[0x004183a2] = '\x0f'
        mem[0x004183a3] = '\xef'
        mem[0x004183a4] = '\xc0'
        cpu.XMM8 = 0x0
        cpu.RIP = 0x4183a0
        cpu.execute()
    
        self.assertEqual(mem[0x4183a0], 'f')
        self.assertEqual(mem[0x4183a1], 'E')
        self.assertEqual(mem[0x4183a2], '\x0f')
        self.assertEqual(mem[0x4183a3], '\xef')
        self.assertEqual(mem[0x4183a4], '\xc0')
        self.assertEqual(cpu.XMM8, 0)
        self.assertEqual(cpu.RIP, 4293541L)

    def test_PXOR_15(self):
        ''' Instruction PXOR_15 
            Groups: sse2 
            0x4183a5:	pxor	xmm9, xmm9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183a8] = '\xef'
        mem[0x004183a9] = '\xc9'
        mem[0x004183a5] = 'f'
        mem[0x004183a6] = 'E'
        mem[0x004183a7] = '\x0f'
        cpu.XMM9 = 0xff000000000000000000000000000000
        cpu.RIP = 0x4183a5
        cpu.execute()
    
        self.assertEqual(mem[0x4183a8], '\xef')
        self.assertEqual(mem[0x4183a9], '\xc9')
        self.assertEqual(mem[0x4183a5], 'f')
        self.assertEqual(mem[0x4183a6], 'E')
        self.assertEqual(mem[0x4183a7], '\x0f')
        self.assertEqual(cpu.XMM9, 0)
        self.assertEqual(cpu.RIP, 4293546L)

    def test_PXOR_16(self):
        ''' Instruction PXOR_16 
            Groups: sse2 
            0x4183a5:	pxor	xmm9, xmm9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183a8] = '\xef'
        mem[0x004183a9] = '\xc9'
        mem[0x004183a5] = 'f'
        mem[0x004183a6] = 'E'
        mem[0x004183a7] = '\x0f'
        cpu.XMM9 = 0x0
        cpu.RIP = 0x4183a5
        cpu.execute()
    
        self.assertEqual(mem[0x4183a8], '\xef')
        self.assertEqual(mem[0x4183a9], '\xc9')
        self.assertEqual(mem[0x4183a5], 'f')
        self.assertEqual(mem[0x4183a6], 'E')
        self.assertEqual(mem[0x4183a7], '\x0f')
        self.assertEqual(cpu.XMM9, 0)
        self.assertEqual(cpu.RIP, 4293546L)

    def test_PXOR_17(self):
        ''' Instruction PXOR_17 
            Groups: sse2 
            0x4183a0:	pxor	xmm8, xmm8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183a0] = 'f'
        mem[0x004183a1] = 'E'
        mem[0x004183a2] = '\x0f'
        mem[0x004183a3] = '\xef'
        mem[0x004183a4] = '\xc0'
        cpu.XMM8 = 0x0
        cpu.RIP = 0x4183a0
        cpu.execute()
    
        self.assertEqual(mem[0x4183a0], 'f')
        self.assertEqual(mem[0x4183a1], 'E')
        self.assertEqual(mem[0x4183a2], '\x0f')
        self.assertEqual(mem[0x4183a3], '\xef')
        self.assertEqual(mem[0x4183a4], '\xc0')
        self.assertEqual(cpu.XMM8, 0)
        self.assertEqual(cpu.RIP, 4293541L)

    def test_PXOR_18(self):
        ''' Instruction PXOR_18 
            Groups: sse2 
            0x4183a5:	pxor	xmm9, xmm9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183a8] = '\xef'
        mem[0x004183a9] = '\xc9'
        mem[0x004183a5] = 'f'
        mem[0x004183a6] = 'E'
        mem[0x004183a7] = '\x0f'
        cpu.XMM9 = 0x0
        cpu.RIP = 0x4183a5
        cpu.execute()
    
        self.assertEqual(mem[0x4183a8], '\xef')
        self.assertEqual(mem[0x4183a9], '\xc9')
        self.assertEqual(mem[0x4183a5], 'f')
        self.assertEqual(mem[0x4183a6], 'E')
        self.assertEqual(mem[0x4183a7], '\x0f')
        self.assertEqual(cpu.XMM9, 0)
        self.assertEqual(cpu.RIP, 4293546L)

    def test_PXOR_19(self):
        ''' Instruction PXOR_19 
            Groups: sse2 
            0x4183af:	pxor	xmm11, xmm11
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183b0] = 'E'
        mem[0x004183b1] = '\x0f'
        mem[0x004183b2] = '\xef'
        mem[0x004183b3] = '\xdb'
        mem[0x004183af] = 'f'
        cpu.XMM11 = 0x0
        cpu.RIP = 0x4183af
        cpu.execute()
    
        self.assertEqual(mem[0x4183b0], 'E')
        self.assertEqual(mem[0x4183b1], '\x0f')
        self.assertEqual(mem[0x4183b2], '\xef')
        self.assertEqual(mem[0x4183b3], '\xdb')
        self.assertEqual(mem[0x4183af], 'f')
        self.assertEqual(cpu.XMM11, 0)
        self.assertEqual(cpu.RIP, 4293556L)

    def test_PXOR_2(self):
        ''' Instruction PXOR_2 
            Groups: sse2 
            0x4183a5:	pxor	xmm9, xmm9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183a8] = '\xef'
        mem[0x004183a9] = '\xc9'
        mem[0x004183a5] = 'f'
        mem[0x004183a6] = 'E'
        mem[0x004183a7] = '\x0f'
        cpu.XMM9 = 0x0
        cpu.RIP = 0x4183a5
        cpu.execute()
    
        self.assertEqual(mem[0x4183a8], '\xef')
        self.assertEqual(mem[0x4183a9], '\xc9')
        self.assertEqual(mem[0x4183a5], 'f')
        self.assertEqual(mem[0x4183a6], 'E')
        self.assertEqual(mem[0x4183a7], '\x0f')
        self.assertEqual(cpu.XMM9, 0)
        self.assertEqual(cpu.RIP, 4293546L)

    def test_PXOR_20(self):
        ''' Instruction PXOR_20 
            Groups: sse2 
            0x4183a5:	pxor	xmm9, xmm9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183a8] = '\xef'
        mem[0x004183a9] = '\xc9'
        mem[0x004183a5] = 'f'
        mem[0x004183a6] = 'E'
        mem[0x004183a7] = '\x0f'
        cpu.XMM9 = 0x0
        cpu.RIP = 0x4183a5
        cpu.execute()
    
        self.assertEqual(mem[0x4183a8], '\xef')
        self.assertEqual(mem[0x4183a9], '\xc9')
        self.assertEqual(mem[0x4183a5], 'f')
        self.assertEqual(mem[0x4183a6], 'E')
        self.assertEqual(mem[0x4183a7], '\x0f')
        self.assertEqual(cpu.XMM9, 0)
        self.assertEqual(cpu.RIP, 4293546L)

    def test_PXOR_21(self):
        ''' Instruction PXOR_21 
            Groups: sse2 
            0x4183aa:	pxor	xmm10, xmm10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183aa] = 'f'
        mem[0x004183ab] = 'E'
        mem[0x004183ac] = '\x0f'
        mem[0x004183ad] = '\xef'
        mem[0x004183ae] = '\xd2'
        cpu.XMM10 = 0x0
        cpu.RIP = 0x4183aa
        cpu.execute()
    
        self.assertEqual(mem[0x4183aa], 'f')
        self.assertEqual(mem[0x4183ab], 'E')
        self.assertEqual(mem[0x4183ac], '\x0f')
        self.assertEqual(mem[0x4183ad], '\xef')
        self.assertEqual(mem[0x4183ae], '\xd2')
        self.assertEqual(cpu.XMM10, 0)
        self.assertEqual(cpu.RIP, 4293551L)

    def test_PXOR_3(self):
        ''' Instruction PXOR_3 
            Groups: sse2 
            0x4183a5:	pxor	xmm9, xmm9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183a8] = '\xef'
        mem[0x004183a9] = '\xc9'
        mem[0x004183a5] = 'f'
        mem[0x004183a6] = 'E'
        mem[0x004183a7] = '\x0f'
        cpu.XMM9 = 0x0
        cpu.RIP = 0x4183a5
        cpu.execute()
    
        self.assertEqual(mem[0x4183a8], '\xef')
        self.assertEqual(mem[0x4183a9], '\xc9')
        self.assertEqual(mem[0x4183a5], 'f')
        self.assertEqual(mem[0x4183a6], 'E')
        self.assertEqual(mem[0x4183a7], '\x0f')
        self.assertEqual(cpu.XMM9, 0)
        self.assertEqual(cpu.RIP, 4293546L)

    def test_PXOR_4(self):
        ''' Instruction PXOR_4 
            Groups: sse2 
            0x4183aa:	pxor	xmm10, xmm10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183aa] = 'f'
        mem[0x004183ab] = 'E'
        mem[0x004183ac] = '\x0f'
        mem[0x004183ad] = '\xef'
        mem[0x004183ae] = '\xd2'
        cpu.XMM10 = 0x0
        cpu.RIP = 0x4183aa
        cpu.execute()
    
        self.assertEqual(mem[0x4183aa], 'f')
        self.assertEqual(mem[0x4183ab], 'E')
        self.assertEqual(mem[0x4183ac], '\x0f')
        self.assertEqual(mem[0x4183ad], '\xef')
        self.assertEqual(mem[0x4183ae], '\xd2')
        self.assertEqual(cpu.XMM10, 0)
        self.assertEqual(cpu.RIP, 4293551L)

    def test_PXOR_5(self):
        ''' Instruction PXOR_5 
            Groups: sse2 
            0x4183aa:	pxor	xmm10, xmm10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183aa] = 'f'
        mem[0x004183ab] = 'E'
        mem[0x004183ac] = '\x0f'
        mem[0x004183ad] = '\xef'
        mem[0x004183ae] = '\xd2'
        cpu.XMM10 = 0xff000000000000000000000000000000
        cpu.RIP = 0x4183aa
        cpu.execute()
    
        self.assertEqual(mem[0x4183aa], 'f')
        self.assertEqual(mem[0x4183ab], 'E')
        self.assertEqual(mem[0x4183ac], '\x0f')
        self.assertEqual(mem[0x4183ad], '\xef')
        self.assertEqual(mem[0x4183ae], '\xd2')
        self.assertEqual(cpu.XMM10, 0)
        self.assertEqual(cpu.RIP, 4293551L)

    def test_PXOR_6(self):
        ''' Instruction PXOR_6 
            Groups: sse2 
            0x4183a5:	pxor	xmm9, xmm9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183a8] = '\xef'
        mem[0x004183a9] = '\xc9'
        mem[0x004183a5] = 'f'
        mem[0x004183a6] = 'E'
        mem[0x004183a7] = '\x0f'
        cpu.XMM9 = 0x0
        cpu.RIP = 0x4183a5
        cpu.execute()
    
        self.assertEqual(mem[0x4183a8], '\xef')
        self.assertEqual(mem[0x4183a9], '\xc9')
        self.assertEqual(mem[0x4183a5], 'f')
        self.assertEqual(mem[0x4183a6], 'E')
        self.assertEqual(mem[0x4183a7], '\x0f')
        self.assertEqual(cpu.XMM9, 0)
        self.assertEqual(cpu.RIP, 4293546L)

    def test_PXOR_7(self):
        ''' Instruction PXOR_7 
            Groups: sse2 
            0x4183a0:	pxor	xmm8, xmm8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183a0] = 'f'
        mem[0x004183a1] = 'E'
        mem[0x004183a2] = '\x0f'
        mem[0x004183a3] = '\xef'
        mem[0x004183a4] = '\xc0'
        cpu.XMM8 = 0x0
        cpu.RIP = 0x4183a0
        cpu.execute()
    
        self.assertEqual(mem[0x4183a0], 'f')
        self.assertEqual(mem[0x4183a1], 'E')
        self.assertEqual(mem[0x4183a2], '\x0f')
        self.assertEqual(mem[0x4183a3], '\xef')
        self.assertEqual(mem[0x4183a4], '\xc0')
        self.assertEqual(cpu.XMM8, 0)
        self.assertEqual(cpu.RIP, 4293541L)

    def test_PXOR_8(self):
        ''' Instruction PXOR_8 
            Groups: sse2 
            0x4183aa:	pxor	xmm10, xmm10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183aa] = 'f'
        mem[0x004183ab] = 'E'
        mem[0x004183ac] = '\x0f'
        mem[0x004183ad] = '\xef'
        mem[0x004183ae] = '\xd2'
        cpu.XMM10 = 0x0
        cpu.RIP = 0x4183aa
        cpu.execute()
    
        self.assertEqual(mem[0x4183aa], 'f')
        self.assertEqual(mem[0x4183ab], 'E')
        self.assertEqual(mem[0x4183ac], '\x0f')
        self.assertEqual(mem[0x4183ad], '\xef')
        self.assertEqual(mem[0x4183ae], '\xd2')
        self.assertEqual(cpu.XMM10, 0)
        self.assertEqual(cpu.RIP, 4293551L)

    def test_PXOR_9(self):
        ''' Instruction PXOR_9 
            Groups: sse2 
            0x4183aa:	pxor	xmm10, xmm10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x004183aa] = 'f'
        mem[0x004183ab] = 'E'
        mem[0x004183ac] = '\x0f'
        mem[0x004183ad] = '\xef'
        mem[0x004183ae] = '\xd2'
        cpu.XMM10 = 0x0
        cpu.RIP = 0x4183aa
        cpu.execute()
    
        self.assertEqual(mem[0x4183aa], 'f')
        self.assertEqual(mem[0x4183ab], 'E')
        self.assertEqual(mem[0x4183ac], '\x0f')
        self.assertEqual(mem[0x4183ad], '\xef')
        self.assertEqual(mem[0x4183ae], '\xd2')
        self.assertEqual(cpu.XMM10, 0)
        self.assertEqual(cpu.RIP, 4293551L)

    def test_RET_1(self):
        ''' Instruction RET_1 
            Groups: ret, mode64 
            0x43761d:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdae0] = '\x00'
        mem[0x7fffffffdae1] = '\x00'
        mem[0x7fffffffdae2] = '\x00'
        mem[0x7fffffffdae3] = '\x00'
        mem[0x7fffffffdae4] = '\x00'
        mem[0x7fffffffdae5] = '\x00'
        mem[0x7fffffffdae6] = '\x00'
        mem[0x7fffffffdae7] = '\x00'
        mem[0x7fffffffdae8] = '\x12'
        mem[0x7fffffffdae9] = 'x'
        mem[0x7fffffffdaea] = 'C'
        mem[0x7fffffffdaeb] = '\x00'
        mem[0x7fffffffdaec] = '\x00'
        mem[0x7fffffffdaed] = '\x00'
        mem[0x7fffffffdaee] = '\x00'
        mem[0x7fffffffdaef] = '\x00'
        mem[0x7fffffffdaf0] = 'p'
        mem[0x0043761d] = '\xc3'
        cpu.RSP = 0x7fffffffdae8
        cpu.RIP = 0x43761d
        cpu.RBP = 0x7fffffffdb10
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdae0], '\x00')
        self.assertEqual(mem[0x7fffffffdae1], '\x00')
        self.assertEqual(mem[0x7fffffffdae2], '\x00')
        self.assertEqual(mem[0x7fffffffdae3], '\x00')
        self.assertEqual(mem[0x7fffffffdae4], '\x00')
        self.assertEqual(mem[0x7fffffffdae5], '\x00')
        self.assertEqual(mem[0x7fffffffdae6], '\x00')
        self.assertEqual(mem[0x7fffffffdae7], '\x00')
        self.assertEqual(mem[0x7fffffffdae8], '\x12')
        self.assertEqual(mem[0x7fffffffdae9], 'x')
        self.assertEqual(mem[0x7fffffffdaea], 'C')
        self.assertEqual(mem[0x7fffffffdaeb], '\x00')
        self.assertEqual(mem[0x7fffffffdaec], '\x00')
        self.assertEqual(mem[0x7fffffffdaed], '\x00')
        self.assertEqual(mem[0x7fffffffdaee], '\x00')
        self.assertEqual(mem[0x7fffffffdaef], '\x00')
        self.assertEqual(mem[0x7fffffffdaf0], 'p')
        self.assertEqual(mem[0x43761d], '\xc3')
        self.assertEqual(cpu.RSP, 140737488345840L)
        self.assertEqual(cpu.RIP, 4421650L)
        self.assertEqual(cpu.RBP, 140737488345872L)

    def test_RET_10(self):
        ''' Instruction RET_10 
            Groups: ret, mode64 
            0x475260:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00475000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x00475260] = '\xc3'
        mem[0x7fffffffdac0] = '\x00'
        mem[0x7fffffffdab0] = '\xd0'
        mem[0x7fffffffdab1] = '\xda'
        mem[0x7fffffffdab2] = '\xff'
        mem[0x7fffffffdab3] = '\xff'
        mem[0x7fffffffdab4] = '\xff'
        mem[0x7fffffffdab5] = '\x7f'
        mem[0x7fffffffdab6] = '\x00'
        mem[0x7fffffffdab7] = '\x00'
        mem[0x7fffffffdab8] = 'm'
        mem[0x7fffffffdab9] = '\x13'
        mem[0x7fffffffdaba] = '@'
        mem[0x7fffffffdabb] = '\x00'
        mem[0x7fffffffdabc] = '\x00'
        mem[0x7fffffffdabd] = '\x00'
        mem[0x7fffffffdabe] = '\x00'
        mem[0x7fffffffdabf] = '\x00'
        cpu.RSP = 0x7fffffffdab8
        cpu.RIP = 0x475260
        cpu.RBP = 0x7fffffffdad0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdac0], '\x00')
        self.assertEqual(mem[0x475260], '\xc3')
        self.assertEqual(mem[0x7fffffffdab0], '\xd0')
        self.assertEqual(mem[0x7fffffffdab1], '\xda')
        self.assertEqual(mem[0x7fffffffdab2], '\xff')
        self.assertEqual(mem[0x7fffffffdab3], '\xff')
        self.assertEqual(mem[0x7fffffffdab4], '\xff')
        self.assertEqual(mem[0x7fffffffdab5], '\x7f')
        self.assertEqual(mem[0x7fffffffdab6], '\x00')
        self.assertEqual(mem[0x7fffffffdab7], '\x00')
        self.assertEqual(mem[0x7fffffffdab8], 'm')
        self.assertEqual(mem[0x7fffffffdab9], '\x13')
        self.assertEqual(mem[0x7fffffffdaba], '@')
        self.assertEqual(mem[0x7fffffffdabb], '\x00')
        self.assertEqual(mem[0x7fffffffdabc], '\x00')
        self.assertEqual(mem[0x7fffffffdabd], '\x00')
        self.assertEqual(mem[0x7fffffffdabe], '\x00')
        self.assertEqual(mem[0x7fffffffdabf], '\x00')
        self.assertEqual(cpu.RSP, 140737488345792L)
        self.assertEqual(cpu.RIP, 4199277L)
        self.assertEqual(cpu.RBP, 140737488345808L)

    def test_RET_11(self):
        ''' Instruction RET_11 
            Groups: ret, mode64 
            0x41a85f:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041a000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdb20] = '\x00'
        mem[0x0041a85f] = '\xc3'
        mem[0x7fffffffdb10] = '\xe0'
        mem[0x7fffffffdb11] = '\xdb'
        mem[0x7fffffffdb12] = '\xff'
        mem[0x7fffffffdb13] = '\xff'
        mem[0x7fffffffdb14] = '\xff'
        mem[0x7fffffffdb15] = '\x7f'
        mem[0x7fffffffdb16] = '\x00'
        mem[0x7fffffffdb17] = '\x00'
        mem[0x7fffffffdb18] = '\x83'
        mem[0x7fffffffdb19] = '\x0c'
        mem[0x7fffffffdb1a] = '@'
        mem[0x7fffffffdb1b] = '\x00'
        mem[0x7fffffffdb1c] = '\x00'
        mem[0x7fffffffdb1d] = '\x00'
        mem[0x7fffffffdb1e] = '\x00'
        mem[0x7fffffffdb1f] = '\x00'
        cpu.RSP = 0x7fffffffdb18
        cpu.RIP = 0x41a85f
        cpu.RBP = 0x7fffffffdbe0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdb20], '\x00')
        self.assertEqual(mem[0x41a85f], '\xc3')
        self.assertEqual(mem[0x7fffffffdb10], '\xe0')
        self.assertEqual(mem[0x7fffffffdb11], '\xdb')
        self.assertEqual(mem[0x7fffffffdb12], '\xff')
        self.assertEqual(mem[0x7fffffffdb13], '\xff')
        self.assertEqual(mem[0x7fffffffdb14], '\xff')
        self.assertEqual(mem[0x7fffffffdb15], '\x7f')
        self.assertEqual(mem[0x7fffffffdb16], '\x00')
        self.assertEqual(mem[0x7fffffffdb17], '\x00')
        self.assertEqual(mem[0x7fffffffdb18], '\x83')
        self.assertEqual(mem[0x7fffffffdb19], '\x0c')
        self.assertEqual(mem[0x7fffffffdb1a], '@')
        self.assertEqual(mem[0x7fffffffdb1b], '\x00')
        self.assertEqual(mem[0x7fffffffdb1c], '\x00')
        self.assertEqual(mem[0x7fffffffdb1d], '\x00')
        self.assertEqual(mem[0x7fffffffdb1e], '\x00')
        self.assertEqual(mem[0x7fffffffdb1f], '\x00')
        self.assertEqual(cpu.RSP, 140737488345888L)
        self.assertEqual(cpu.RIP, 4197507L)
        self.assertEqual(cpu.RBP, 140737488346080L)

    def test_RET_12(self):
        ''' Instruction RET_12 
            Groups: ret, mode64 
            0x415daa:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00415000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x7fffffffc940] = '\x00'
        mem[0x00415daa] = '\xc3'
        mem[0x7fffffffc930] = '\xa0'
        mem[0x7fffffffc931] = '\xc9'
        mem[0x7fffffffc932] = '\xff'
        mem[0x7fffffffc933] = '\xff'
        mem[0x7fffffffc934] = '\xff'
        mem[0x7fffffffc935] = '\x7f'
        mem[0x7fffffffc936] = '\x00'
        mem[0x7fffffffc937] = '\x00'
        mem[0x7fffffffc938] = '\xc7'
        mem[0x7fffffffc939] = '\x13'
        mem[0x7fffffffc93a] = 'A'
        mem[0x7fffffffc93b] = '\x00'
        mem[0x7fffffffc93c] = '\x00'
        mem[0x7fffffffc93d] = '\x00'
        mem[0x7fffffffc93e] = '\x00'
        mem[0x7fffffffc93f] = '\x00'
        cpu.RSP = 0x7fffffffc938
        cpu.RIP = 0x415daa
        cpu.RBP = 0x7fffffffc9a0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffc940], '\x00')
        self.assertEqual(mem[0x415daa], '\xc3')
        self.assertEqual(mem[0x7fffffffc930], '\xa0')
        self.assertEqual(mem[0x7fffffffc931], '\xc9')
        self.assertEqual(mem[0x7fffffffc932], '\xff')
        self.assertEqual(mem[0x7fffffffc933], '\xff')
        self.assertEqual(mem[0x7fffffffc934], '\xff')
        self.assertEqual(mem[0x7fffffffc935], '\x7f')
        self.assertEqual(mem[0x7fffffffc936], '\x00')
        self.assertEqual(mem[0x7fffffffc937], '\x00')
        self.assertEqual(mem[0x7fffffffc938], '\xc7')
        self.assertEqual(mem[0x7fffffffc939], '\x13')
        self.assertEqual(mem[0x7fffffffc93a], 'A')
        self.assertEqual(mem[0x7fffffffc93b], '\x00')
        self.assertEqual(mem[0x7fffffffc93c], '\x00')
        self.assertEqual(mem[0x7fffffffc93d], '\x00')
        self.assertEqual(mem[0x7fffffffc93e], '\x00')
        self.assertEqual(mem[0x7fffffffc93f], '\x00')
        self.assertEqual(cpu.RSP, 140737488341312L)
        self.assertEqual(cpu.RIP, 4264903L)
        self.assertEqual(cpu.RBP, 140737488341408L)

    def test_RET_13(self):
        ''' Instruction RET_13 
            Groups: ret, mode64 
            0x40dc9a:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdae0] = '\xd8'
        mem[0x7fffffffdada] = '@'
        mem[0x7fffffffdad0] = '\x00'
        mem[0x7fffffffdad1] = '\xdb'
        mem[0x7fffffffdad2] = '\xff'
        mem[0x7fffffffdad3] = '\xff'
        mem[0x7fffffffdad4] = '\xff'
        mem[0x7fffffffdad5] = '\x7f'
        mem[0x7fffffffdad6] = '\x00'
        mem[0x7fffffffdad7] = '\x00'
        mem[0x7fffffffdad8] = 'o'
        mem[0x7fffffffdad9] = 'o'
        mem[0x0040dc9a] = '\xc3'
        mem[0x7fffffffdadb] = '\x00'
        mem[0x7fffffffdadc] = '\x00'
        mem[0x7fffffffdadd] = '\x00'
        mem[0x7fffffffdade] = '\x00'
        mem[0x7fffffffdadf] = '\x00'
        cpu.RSP = 0x7fffffffdad8
        cpu.RIP = 0x40dc9a
        cpu.RBP = 0x7fffffffdb00
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdae0], '\xd8')
        self.assertEqual(mem[0x7fffffffdada], '@')
        self.assertEqual(mem[0x7fffffffdad0], '\x00')
        self.assertEqual(mem[0x7fffffffdad1], '\xdb')
        self.assertEqual(mem[0x7fffffffdad2], '\xff')
        self.assertEqual(mem[0x7fffffffdad3], '\xff')
        self.assertEqual(mem[0x7fffffffdad4], '\xff')
        self.assertEqual(mem[0x7fffffffdad5], '\x7f')
        self.assertEqual(mem[0x7fffffffdad6], '\x00')
        self.assertEqual(mem[0x7fffffffdad7], '\x00')
        self.assertEqual(mem[0x7fffffffdad8], 'o')
        self.assertEqual(mem[0x7fffffffdad9], 'o')
        self.assertEqual(mem[0x40dc9a], '\xc3')
        self.assertEqual(mem[0x7fffffffdadb], '\x00')
        self.assertEqual(mem[0x7fffffffdadc], '\x00')
        self.assertEqual(mem[0x7fffffffdadd], '\x00')
        self.assertEqual(mem[0x7fffffffdade], '\x00')
        self.assertEqual(mem[0x7fffffffdadf], '\x00')
        self.assertEqual(cpu.RSP, 140737488345824L)
        self.assertEqual(cpu.RIP, 4222831L)
        self.assertEqual(cpu.RBP, 140737488345856L)

    def test_RET_14(self):
        ''' Instruction RET_14 
            Groups: ret, mode64 
            0x442691:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00442000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdb20] = '\x00'
        mem[0x00442691] = '\xc3'
        mem[0x7fffffffdb10] = '\xe0'
        mem[0x7fffffffdb11] = '\xdb'
        mem[0x7fffffffdb12] = '\xff'
        mem[0x7fffffffdb13] = '\xff'
        mem[0x7fffffffdb14] = '\xff'
        mem[0x7fffffffdb15] = '\x7f'
        mem[0x7fffffffdb16] = '\x00'
        mem[0x7fffffffdb17] = '\x00'
        mem[0x7fffffffdb18] = '\x95'
        mem[0x7fffffffdb19] = '\r'
        mem[0x7fffffffdb1a] = '@'
        mem[0x7fffffffdb1b] = '\x00'
        mem[0x7fffffffdb1c] = '\x00'
        mem[0x7fffffffdb1d] = '\x00'
        mem[0x7fffffffdb1e] = '\x00'
        mem[0x7fffffffdb1f] = '\x00'
        cpu.RSP = 0x7fffffffdb18
        cpu.RIP = 0x442691
        cpu.RBP = 0x7fffffffdbe0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdb20], '\x00')
        self.assertEqual(mem[0x442691], '\xc3')
        self.assertEqual(mem[0x7fffffffdb10], '\xe0')
        self.assertEqual(mem[0x7fffffffdb11], '\xdb')
        self.assertEqual(mem[0x7fffffffdb12], '\xff')
        self.assertEqual(mem[0x7fffffffdb13], '\xff')
        self.assertEqual(mem[0x7fffffffdb14], '\xff')
        self.assertEqual(mem[0x7fffffffdb15], '\x7f')
        self.assertEqual(mem[0x7fffffffdb16], '\x00')
        self.assertEqual(mem[0x7fffffffdb17], '\x00')
        self.assertEqual(mem[0x7fffffffdb18], '\x95')
        self.assertEqual(mem[0x7fffffffdb19], '\r')
        self.assertEqual(mem[0x7fffffffdb1a], '@')
        self.assertEqual(mem[0x7fffffffdb1b], '\x00')
        self.assertEqual(mem[0x7fffffffdb1c], '\x00')
        self.assertEqual(mem[0x7fffffffdb1d], '\x00')
        self.assertEqual(mem[0x7fffffffdb1e], '\x00')
        self.assertEqual(mem[0x7fffffffdb1f], '\x00')
        self.assertEqual(cpu.RSP, 140737488345888L)
        self.assertEqual(cpu.RIP, 4197781L)
        self.assertEqual(cpu.RBP, 140737488346080L)

    def test_RET_15(self):
        ''' Instruction RET_15 
            Groups: ret, mode64 
            0x4322df:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda40] = '`'
        mem[0x004322df] = '\xc3'
        mem[0x7fffffffda30] = '\x90'
        mem[0x7fffffffda31] = '\xda'
        mem[0x7fffffffda32] = '\xff'
        mem[0x7fffffffda33] = '\xff'
        mem[0x7fffffffda34] = '\xff'
        mem[0x7fffffffda35] = '\x7f'
        mem[0x7fffffffda36] = '\x00'
        mem[0x7fffffffda37] = '\x00'
        mem[0x7fffffffda38] = 'I'
        mem[0x7fffffffda39] = '%'
        mem[0x7fffffffda3a] = 'C'
        mem[0x7fffffffda3b] = '\x00'
        mem[0x7fffffffda3c] = '\x00'
        mem[0x7fffffffda3d] = '\x00'
        mem[0x7fffffffda3e] = '\x00'
        mem[0x7fffffffda3f] = '\x00'
        cpu.RSP = 0x7fffffffda38
        cpu.RIP = 0x4322df
        cpu.RBP = 0x7fffffffda90
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda40], '`')
        self.assertEqual(mem[0x7fffffffda3f], '\x00')
        self.assertEqual(mem[0x7fffffffda30], '\x90')
        self.assertEqual(mem[0x7fffffffda31], '\xda')
        self.assertEqual(mem[0x7fffffffda32], '\xff')
        self.assertEqual(mem[0x7fffffffda33], '\xff')
        self.assertEqual(mem[0x7fffffffda34], '\xff')
        self.assertEqual(mem[0x7fffffffda35], '\x7f')
        self.assertEqual(mem[0x7fffffffda36], '\x00')
        self.assertEqual(mem[0x7fffffffda37], '\x00')
        self.assertEqual(mem[0x7fffffffda38], 'I')
        self.assertEqual(mem[0x7fffffffda39], '%')
        self.assertEqual(mem[0x7fffffffda3a], 'C')
        self.assertEqual(mem[0x7fffffffda3b], '\x00')
        self.assertEqual(mem[0x7fffffffda3c], '\x00')
        self.assertEqual(mem[0x7fffffffda3d], '\x00')
        self.assertEqual(mem[0x7fffffffda3e], '\x00')
        self.assertEqual(mem[0x4322df], '\xc3')
        self.assertEqual(cpu.RSP, 140737488345664L)
        self.assertEqual(cpu.RIP, 4400457L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_RET_16(self):
        ''' Instruction RET_16 
            Groups: ret, mode64 
            0x4072e5:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00407000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdb20] = '\x00'
        mem[0x004072e5] = '\xc3'
        mem[0x7fffffffdb10] = '\xe0'
        mem[0x7fffffffdb11] = '\xdb'
        mem[0x7fffffffdb12] = '\xff'
        mem[0x7fffffffdb13] = '\xff'
        mem[0x7fffffffdb14] = '\xff'
        mem[0x7fffffffdb15] = '\x7f'
        mem[0x7fffffffdb16] = '\x00'
        mem[0x7fffffffdb17] = '\x00'
        mem[0x7fffffffdb18] = 'Q'
        mem[0x7fffffffdb19] = '\r'
        mem[0x7fffffffdb1a] = '@'
        mem[0x7fffffffdb1b] = '\x00'
        mem[0x7fffffffdb1c] = '\x00'
        mem[0x7fffffffdb1d] = '\x00'
        mem[0x7fffffffdb1e] = '\x00'
        mem[0x7fffffffdb1f] = '\x00'
        cpu.RSP = 0x7fffffffdb18
        cpu.RIP = 0x4072e5
        cpu.RBP = 0x7fffffffdbe0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdb20], '\x00')
        self.assertEqual(mem[0x4072e5], '\xc3')
        self.assertEqual(mem[0x7fffffffdb10], '\xe0')
        self.assertEqual(mem[0x7fffffffdb11], '\xdb')
        self.assertEqual(mem[0x7fffffffdb12], '\xff')
        self.assertEqual(mem[0x7fffffffdb13], '\xff')
        self.assertEqual(mem[0x7fffffffdb14], '\xff')
        self.assertEqual(mem[0x7fffffffdb15], '\x7f')
        self.assertEqual(mem[0x7fffffffdb16], '\x00')
        self.assertEqual(mem[0x7fffffffdb17], '\x00')
        self.assertEqual(mem[0x7fffffffdb18], 'Q')
        self.assertEqual(mem[0x7fffffffdb19], '\r')
        self.assertEqual(mem[0x7fffffffdb1a], '@')
        self.assertEqual(mem[0x7fffffffdb1b], '\x00')
        self.assertEqual(mem[0x7fffffffdb1c], '\x00')
        self.assertEqual(mem[0x7fffffffdb1d], '\x00')
        self.assertEqual(mem[0x7fffffffdb1e], '\x00')
        self.assertEqual(mem[0x7fffffffdb1f], '\x00')
        self.assertEqual(cpu.RSP, 140737488345888L)
        self.assertEqual(cpu.RIP, 4197713L)
        self.assertEqual(cpu.RBP, 140737488346080L)

    def test_RET_17(self):
        ''' Instruction RET_17 
            Groups: ret, mode64 
            0x410f1e:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x7fffffffc9a0] = '@'
        mem[0x7fffffffc9a1] = '\xca'
        mem[0x7fffffffc9a2] = '\xff'
        mem[0x7fffffffc9a3] = '\xff'
        mem[0x7fffffffc9a4] = '\xff'
        mem[0x7fffffffc9a5] = '\x7f'
        mem[0x7fffffffc9a6] = '\x00'
        mem[0x7fffffffc9a7] = '\x00'
        mem[0x7fffffffc9a8] = '\xb4'
        mem[0x7fffffffc9a9] = '\x1f'
        mem[0x7fffffffc9aa] = 'A'
        mem[0x7fffffffc9ab] = '\x00'
        mem[0x7fffffffc9ac] = '\x00'
        mem[0x7fffffffc9ad] = '\x00'
        mem[0x7fffffffc9ae] = '\x00'
        mem[0x7fffffffc9af] = '\x00'
        mem[0x7fffffffc9b0] = '\x00'
        mem[0x00410f1e] = '\xc3'
        cpu.RSP = 0x7fffffffc9a8
        cpu.RIP = 0x410f1e
        cpu.RBP = 0x7fffffffca40
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffc9a0], '@')
        self.assertEqual(mem[0x7fffffffc9a1], '\xca')
        self.assertEqual(mem[0x7fffffffc9a2], '\xff')
        self.assertEqual(mem[0x7fffffffc9a3], '\xff')
        self.assertEqual(mem[0x7fffffffc9a4], '\xff')
        self.assertEqual(mem[0x7fffffffc9a5], '\x7f')
        self.assertEqual(mem[0x7fffffffc9a6], '\x00')
        self.assertEqual(mem[0x7fffffffc9a7], '\x00')
        self.assertEqual(mem[0x7fffffffc9a8], '\xb4')
        self.assertEqual(mem[0x7fffffffc9a9], '\x1f')
        self.assertEqual(mem[0x7fffffffc9aa], 'A')
        self.assertEqual(mem[0x7fffffffc9ab], '\x00')
        self.assertEqual(mem[0x7fffffffc9ac], '\x00')
        self.assertEqual(mem[0x7fffffffc9ad], '\x00')
        self.assertEqual(mem[0x7fffffffc9ae], '\x00')
        self.assertEqual(mem[0x7fffffffc9af], '\x00')
        self.assertEqual(mem[0x7fffffffc9b0], '\x00')
        self.assertEqual(mem[0x410f1e], '\xc3')
        self.assertEqual(cpu.RSP, 140737488341424L)
        self.assertEqual(cpu.RIP, 4267956L)
        self.assertEqual(cpu.RBP, 140737488341568L)

    def test_RET_18(self):
        ''' Instruction RET_18 
            Groups: ret, mode64 
            0x401324:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdb20] = '\x00'
        mem[0x00401324] = '\xc3'
        mem[0x7fffffffdb10] = '\xe0'
        mem[0x7fffffffdb11] = '\xdb'
        mem[0x7fffffffdb12] = '\xff'
        mem[0x7fffffffdb13] = '\xff'
        mem[0x7fffffffdb14] = '\xff'
        mem[0x7fffffffdb15] = '\x7f'
        mem[0x7fffffffdb16] = '\x00'
        mem[0x7fffffffdb17] = '\x00'
        mem[0x7fffffffdb18] = '\x80'
        mem[0x7fffffffdb19] = '\r'
        mem[0x7fffffffdb1a] = '@'
        mem[0x7fffffffdb1b] = '\x00'
        mem[0x7fffffffdb1c] = '\x00'
        mem[0x7fffffffdb1d] = '\x00'
        mem[0x7fffffffdb1e] = '\x00'
        mem[0x7fffffffdb1f] = '\x00'
        cpu.RSP = 0x7fffffffdb18
        cpu.RIP = 0x401324
        cpu.RBP = 0x7fffffffdbe0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdb20], '\x00')
        self.assertEqual(mem[0x401324], '\xc3')
        self.assertEqual(mem[0x7fffffffdb10], '\xe0')
        self.assertEqual(mem[0x7fffffffdb11], '\xdb')
        self.assertEqual(mem[0x7fffffffdb12], '\xff')
        self.assertEqual(mem[0x7fffffffdb13], '\xff')
        self.assertEqual(mem[0x7fffffffdb14], '\xff')
        self.assertEqual(mem[0x7fffffffdb15], '\x7f')
        self.assertEqual(mem[0x7fffffffdb16], '\x00')
        self.assertEqual(mem[0x7fffffffdb17], '\x00')
        self.assertEqual(mem[0x7fffffffdb18], '\x80')
        self.assertEqual(mem[0x7fffffffdb19], '\r')
        self.assertEqual(mem[0x7fffffffdb1a], '@')
        self.assertEqual(mem[0x7fffffffdb1b], '\x00')
        self.assertEqual(mem[0x7fffffffdb1c], '\x00')
        self.assertEqual(mem[0x7fffffffdb1d], '\x00')
        self.assertEqual(mem[0x7fffffffdb1e], '\x00')
        self.assertEqual(mem[0x7fffffffdb1f], '\x00')
        self.assertEqual(cpu.RSP, 140737488345888L)
        self.assertEqual(cpu.RIP, 4197760L)
        self.assertEqual(cpu.RBP, 140737488346080L)

    def test_RET_19(self):
        ''' Instruction RET_19 
            Groups: ret, mode64 
            0x420eab:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00420000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdaa0] = '@'
        mem[0x00420eab] = '\xf3'
        mem[0x00420eac] = '\xc3'
        mem[0x7fffffffda90] = '\xe0'
        mem[0x7fffffffda91] = '\xda'
        mem[0x7fffffffda92] = '\xff'
        mem[0x7fffffffda93] = '\xff'
        mem[0x7fffffffda94] = '\xff'
        mem[0x7fffffffda95] = '\x7f'
        mem[0x7fffffffda96] = '\x00'
        mem[0x7fffffffda97] = '\x00'
        mem[0x7fffffffda98] = 'p'
        mem[0x7fffffffda99] = 'n'
        mem[0x7fffffffda9a] = 'C'
        mem[0x7fffffffda9b] = '\x00'
        mem[0x7fffffffda9c] = '\x00'
        mem[0x7fffffffda9d] = '\x00'
        mem[0x7fffffffda9e] = '\x00'
        mem[0x7fffffffda9f] = '\x00'
        cpu.RSP = 0x7fffffffda98
        cpu.RIP = 0x420eab
        cpu.RBP = 0x7fffffffdae0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdaa0], '@')
        self.assertEqual(mem[0x420eab], '\xf3')
        self.assertEqual(mem[0x420eac], '\xc3')
        self.assertEqual(mem[0x7fffffffda90], '\xe0')
        self.assertEqual(mem[0x7fffffffda91], '\xda')
        self.assertEqual(mem[0x7fffffffda92], '\xff')
        self.assertEqual(mem[0x7fffffffda93], '\xff')
        self.assertEqual(mem[0x7fffffffda94], '\xff')
        self.assertEqual(mem[0x7fffffffda95], '\x7f')
        self.assertEqual(mem[0x7fffffffda96], '\x00')
        self.assertEqual(mem[0x7fffffffda97], '\x00')
        self.assertEqual(mem[0x7fffffffda98], 'p')
        self.assertEqual(mem[0x7fffffffda99], 'n')
        self.assertEqual(mem[0x7fffffffda9a], 'C')
        self.assertEqual(mem[0x7fffffffda9b], '\x00')
        self.assertEqual(mem[0x7fffffffda9c], '\x00')
        self.assertEqual(mem[0x7fffffffda9d], '\x00')
        self.assertEqual(mem[0x7fffffffda9e], '\x00')
        self.assertEqual(mem[0x7fffffffda9f], '\x00')
        self.assertEqual(cpu.RSP, 140737488345760L)
        self.assertEqual(cpu.RIP, 4419184L)
        self.assertEqual(cpu.RBP, 140737488345824L)

    def test_RET_2(self):
        ''' Instruction RET_2 
            Groups: ret, mode64 
            0x4322df:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda40] = '`'
        mem[0x004322df] = '\xc3'
        mem[0x7fffffffda30] = '\x90'
        mem[0x7fffffffda31] = '\xda'
        mem[0x7fffffffda32] = '\xff'
        mem[0x7fffffffda33] = '\xff'
        mem[0x7fffffffda34] = '\xff'
        mem[0x7fffffffda35] = '\x7f'
        mem[0x7fffffffda36] = '\x00'
        mem[0x7fffffffda37] = '\x00'
        mem[0x7fffffffda38] = '0'
        mem[0x7fffffffda39] = '%'
        mem[0x7fffffffda3a] = 'C'
        mem[0x7fffffffda3b] = '\x00'
        mem[0x7fffffffda3c] = '\x00'
        mem[0x7fffffffda3d] = '\x00'
        mem[0x7fffffffda3e] = '\x00'
        mem[0x7fffffffda3f] = '\x00'
        cpu.RSP = 0x7fffffffda38
        cpu.RIP = 0x4322df
        cpu.RBP = 0x7fffffffda90
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda40], '`')
        self.assertEqual(mem[0x7fffffffda3f], '\x00')
        self.assertEqual(mem[0x7fffffffda30], '\x90')
        self.assertEqual(mem[0x7fffffffda31], '\xda')
        self.assertEqual(mem[0x7fffffffda32], '\xff')
        self.assertEqual(mem[0x7fffffffda33], '\xff')
        self.assertEqual(mem[0x7fffffffda34], '\xff')
        self.assertEqual(mem[0x7fffffffda35], '\x7f')
        self.assertEqual(mem[0x7fffffffda36], '\x00')
        self.assertEqual(mem[0x7fffffffda37], '\x00')
        self.assertEqual(mem[0x7fffffffda38], '0')
        self.assertEqual(mem[0x7fffffffda39], '%')
        self.assertEqual(mem[0x7fffffffda3a], 'C')
        self.assertEqual(mem[0x7fffffffda3b], '\x00')
        self.assertEqual(mem[0x7fffffffda3c], '\x00')
        self.assertEqual(mem[0x7fffffffda3d], '\x00')
        self.assertEqual(mem[0x7fffffffda3e], '\x00')
        self.assertEqual(mem[0x4322df], '\xc3')
        self.assertEqual(cpu.RSP, 140737488345664L)
        self.assertEqual(cpu.RIP, 4400432L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_RET_20(self):
        ''' Instruction RET_20 
            Groups: ret, mode64 
            0x45c5ba:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045c000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x7fffffffc900] = '\x00'
        mem[0x7fffffffc8fa] = 'C'
        mem[0x7fffffffc8f0] = ' '
        mem[0x7fffffffc8f1] = '\xc9'
        mem[0x7fffffffc8f2] = '\xff'
        mem[0x7fffffffc8f3] = '\xff'
        mem[0x7fffffffc8f4] = '\xff'
        mem[0x7fffffffc8f5] = '\x7f'
        mem[0x7fffffffc8f6] = '\x00'
        mem[0x7fffffffc8f7] = '\x00'
        mem[0x7fffffffc8f8] = 'I'
        mem[0x7fffffffc8f9] = 'B'
        mem[0x0045c5ba] = '\xc3'
        mem[0x7fffffffc8fb] = '\x00'
        mem[0x7fffffffc8fc] = '\x00'
        mem[0x7fffffffc8fd] = '\x00'
        mem[0x7fffffffc8fe] = '\x00'
        mem[0x7fffffffc8ff] = '\x00'
        cpu.RSP = 0x7fffffffc8f8
        cpu.RIP = 0x45c5ba
        cpu.RBP = 0x7fffffffc920
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffc900], '\x00')
        self.assertEqual(mem[0x7fffffffc8fd], '\x00')
        self.assertEqual(mem[0x7fffffffc8f0], ' ')
        self.assertEqual(mem[0x7fffffffc8f1], '\xc9')
        self.assertEqual(mem[0x7fffffffc8f2], '\xff')
        self.assertEqual(mem[0x7fffffffc8f3], '\xff')
        self.assertEqual(mem[0x7fffffffc8f4], '\xff')
        self.assertEqual(mem[0x7fffffffc8f5], '\x7f')
        self.assertEqual(mem[0x7fffffffc8f6], '\x00')
        self.assertEqual(mem[0x7fffffffc8f7], '\x00')
        self.assertEqual(mem[0x7fffffffc8f8], 'I')
        self.assertEqual(mem[0x7fffffffc8f9], 'B')
        self.assertEqual(mem[0x7fffffffc8fa], 'C')
        self.assertEqual(mem[0x7fffffffc8fb], '\x00')
        self.assertEqual(mem[0x7fffffffc8fc], '\x00')
        self.assertEqual(mem[0x45c5ba], '\xc3')
        self.assertEqual(mem[0x7fffffffc8fe], '\x00')
        self.assertEqual(mem[0x7fffffffc8ff], '\x00')
        self.assertEqual(cpu.RSP, 140737488341248L)
        self.assertEqual(cpu.RIP, 4407881L)
        self.assertEqual(cpu.RBP, 140737488341280L)

    def test_RET_21(self):
        ''' Instruction RET_21 
            Groups: ret, mode64 
            0x406e57:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdaa0] = '@'
        mem[0x00406e57] = '\xc3'
        mem[0x7fffffffda90] = '\xe0'
        mem[0x7fffffffda91] = '\xda'
        mem[0x7fffffffda92] = '\xff'
        mem[0x7fffffffda93] = '\xff'
        mem[0x7fffffffda94] = '\xff'
        mem[0x7fffffffda95] = '\x7f'
        mem[0x7fffffffda96] = '\x00'
        mem[0x7fffffffda97] = '\x00'
        mem[0x7fffffffda98] = '\xf6'
        mem[0x7fffffffda99] = 'n'
        mem[0x7fffffffda9a] = 'C'
        mem[0x7fffffffda9b] = '\x00'
        mem[0x7fffffffda9c] = '\x00'
        mem[0x7fffffffda9d] = '\x00'
        mem[0x7fffffffda9e] = '\x00'
        mem[0x7fffffffda9f] = '\x00'
        cpu.RSP = 0x7fffffffda98
        cpu.RIP = 0x406e57
        cpu.RBP = 0x7fffffffdae0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdaa0], '@')
        self.assertEqual(mem[0x7fffffffda97], '\x00')
        self.assertEqual(mem[0x7fffffffda90], '\xe0')
        self.assertEqual(mem[0x7fffffffda91], '\xda')
        self.assertEqual(mem[0x7fffffffda92], '\xff')
        self.assertEqual(mem[0x7fffffffda93], '\xff')
        self.assertEqual(mem[0x7fffffffda94], '\xff')
        self.assertEqual(mem[0x7fffffffda95], '\x7f')
        self.assertEqual(mem[0x7fffffffda96], '\x00')
        self.assertEqual(mem[0x406e57], '\xc3')
        self.assertEqual(mem[0x7fffffffda98], '\xf6')
        self.assertEqual(mem[0x7fffffffda99], 'n')
        self.assertEqual(mem[0x7fffffffda9a], 'C')
        self.assertEqual(mem[0x7fffffffda9b], '\x00')
        self.assertEqual(mem[0x7fffffffda9c], '\x00')
        self.assertEqual(mem[0x7fffffffda9d], '\x00')
        self.assertEqual(mem[0x7fffffffda9e], '\x00')
        self.assertEqual(mem[0x7fffffffda9f], '\x00')
        self.assertEqual(cpu.RSP, 140737488345760L)
        self.assertEqual(cpu.RIP, 4419318L)
        self.assertEqual(cpu.RBP, 140737488345824L)

    def test_RET_3(self):
        ''' Instruction RET_3 
            Groups: ret, mode64 
            0x4325de:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdaa0] = '\x03'
        mem[0x004325de] = '\xc3'
        mem[0x7fffffffda90] = '\xc0'
        mem[0x7fffffffda91] = '\xda'
        mem[0x7fffffffda92] = '\xff'
        mem[0x7fffffffda93] = '\xff'
        mem[0x7fffffffda94] = '\xff'
        mem[0x7fffffffda95] = '\x7f'
        mem[0x7fffffffda96] = '\x00'
        mem[0x7fffffffda97] = '\x00'
        mem[0x7fffffffda98] = 'X'
        mem[0x7fffffffda99] = '\x06'
        mem[0x7fffffffda9a] = '@'
        mem[0x7fffffffda9b] = '\x00'
        mem[0x7fffffffda9c] = '\x00'
        mem[0x7fffffffda9d] = '\x00'
        mem[0x7fffffffda9e] = '\x00'
        mem[0x7fffffffda9f] = '\x00'
        cpu.RSP = 0x7fffffffda98
        cpu.RIP = 0x4325de
        cpu.RBP = 0x7fffffffdac0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdaa0], '\x03')
        self.assertEqual(mem[0x4325de], '\xc3')
        self.assertEqual(mem[0x7fffffffda90], '\xc0')
        self.assertEqual(mem[0x7fffffffda91], '\xda')
        self.assertEqual(mem[0x7fffffffda92], '\xff')
        self.assertEqual(mem[0x7fffffffda93], '\xff')
        self.assertEqual(mem[0x7fffffffda94], '\xff')
        self.assertEqual(mem[0x7fffffffda95], '\x7f')
        self.assertEqual(mem[0x7fffffffda96], '\x00')
        self.assertEqual(mem[0x7fffffffda97], '\x00')
        self.assertEqual(mem[0x7fffffffda98], 'X')
        self.assertEqual(mem[0x7fffffffda99], '\x06')
        self.assertEqual(mem[0x7fffffffda9a], '@')
        self.assertEqual(mem[0x7fffffffda9b], '\x00')
        self.assertEqual(mem[0x7fffffffda9c], '\x00')
        self.assertEqual(mem[0x7fffffffda9d], '\x00')
        self.assertEqual(mem[0x7fffffffda9e], '\x00')
        self.assertEqual(mem[0x7fffffffda9f], '\x00')
        self.assertEqual(cpu.RSP, 140737488345760L)
        self.assertEqual(cpu.RIP, 4195928L)
        self.assertEqual(cpu.RBP, 140737488345792L)

    def test_RET_4(self):
        ''' Instruction RET_4 
            Groups: ret, mode64 
            0x4183e0:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x004183e0] = '\xc3'
        mem[0x7fffffffdaa0] = '@'
        mem[0x7fffffffda90] = '\xe0'
        mem[0x7fffffffda91] = '\xda'
        mem[0x7fffffffda92] = '\xff'
        mem[0x7fffffffda93] = '\xff'
        mem[0x7fffffffda94] = '\xff'
        mem[0x7fffffffda95] = '\x7f'
        mem[0x7fffffffda96] = '\x00'
        mem[0x7fffffffda97] = '\x00'
        mem[0x7fffffffda98] = 'I'
        mem[0x7fffffffda99] = 'n'
        mem[0x7fffffffda9a] = 'C'
        mem[0x7fffffffda9b] = '\x00'
        mem[0x7fffffffda9c] = '\x00'
        mem[0x7fffffffda9d] = '\x00'
        mem[0x7fffffffda9e] = '\x00'
        mem[0x7fffffffda9f] = '\x00'
        cpu.RSP = 0x7fffffffda98
        cpu.RIP = 0x4183e0
        cpu.RBP = 0x7fffffffdae0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdaa0], '@')
        self.assertEqual(mem[0x4183e0], '\xc3')
        self.assertEqual(mem[0x7fffffffda90], '\xe0')
        self.assertEqual(mem[0x7fffffffda91], '\xda')
        self.assertEqual(mem[0x7fffffffda92], '\xff')
        self.assertEqual(mem[0x7fffffffda93], '\xff')
        self.assertEqual(mem[0x7fffffffda94], '\xff')
        self.assertEqual(mem[0x7fffffffda95], '\x7f')
        self.assertEqual(mem[0x7fffffffda96], '\x00')
        self.assertEqual(mem[0x7fffffffda97], '\x00')
        self.assertEqual(mem[0x7fffffffda98], 'I')
        self.assertEqual(mem[0x7fffffffda99], 'n')
        self.assertEqual(mem[0x7fffffffda9a], 'C')
        self.assertEqual(mem[0x7fffffffda9b], '\x00')
        self.assertEqual(mem[0x7fffffffda9c], '\x00')
        self.assertEqual(mem[0x7fffffffda9d], '\x00')
        self.assertEqual(mem[0x7fffffffda9e], '\x00')
        self.assertEqual(mem[0x7fffffffda9f], '\x00')
        self.assertEqual(cpu.RSP, 140737488345760L)
        self.assertEqual(cpu.RIP, 4419145L)
        self.assertEqual(cpu.RBP, 140737488345824L)

    def test_RET_5(self):
        ''' Instruction RET_5 
            Groups: ret, mode64 
            0x48fe78:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0048f000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdaa0] = '\xe8'
        mem[0x7fffffffdaa1] = ']'
        mem[0x7fffffffdaa2] = 'k'
        mem[0x7fffffffdaa3] = '\x00'
        mem[0x7fffffffdaa4] = '\x00'
        mem[0x7fffffffdaa5] = '\x00'
        mem[0x7fffffffdaa6] = '\x00'
        mem[0x7fffffffdaa7] = '\x00'
        mem[0x7fffffffdaa8] = '\xee'
        mem[0x7fffffffdaa9] = '\t'
        mem[0x7fffffffdaaa] = '@'
        mem[0x7fffffffdaab] = '\x00'
        mem[0x7fffffffdaac] = '\x00'
        mem[0x7fffffffdaad] = '\x00'
        mem[0x7fffffffdaae] = '\x00'
        mem[0x7fffffffdaaf] = '\x00'
        mem[0x7fffffffdab0] = '\xd0'
        mem[0x0048fe78] = '\xc3'
        cpu.RSP = 0x7fffffffdaa8
        cpu.RIP = 0x48fe78
        cpu.RBP = 0x7fffffffdab0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdaa0], '\xe8')
        self.assertEqual(mem[0x7fffffffdaa1], ']')
        self.assertEqual(mem[0x7fffffffdaa2], 'k')
        self.assertEqual(mem[0x7fffffffdaa3], '\x00')
        self.assertEqual(mem[0x7fffffffdaa4], '\x00')
        self.assertEqual(mem[0x7fffffffdaa5], '\x00')
        self.assertEqual(mem[0x7fffffffdaa6], '\x00')
        self.assertEqual(mem[0x7fffffffdaa7], '\x00')
        self.assertEqual(mem[0x7fffffffdaa8], '\xee')
        self.assertEqual(mem[0x7fffffffdaa9], '\t')
        self.assertEqual(mem[0x7fffffffdaaa], '@')
        self.assertEqual(mem[0x7fffffffdaab], '\x00')
        self.assertEqual(mem[0x7fffffffdaac], '\x00')
        self.assertEqual(mem[0x7fffffffdaad], '\x00')
        self.assertEqual(mem[0x7fffffffdaae], '\x00')
        self.assertEqual(mem[0x7fffffffdaaf], '\x00')
        self.assertEqual(mem[0x7fffffffdab0], '\xd0')
        self.assertEqual(mem[0x48fe78], '\xc3')
        self.assertEqual(cpu.RSP, 140737488345776L)
        self.assertEqual(cpu.RIP, 4196846L)
        self.assertEqual(cpu.RBP, 140737488345776L)

    def test_RET_6(self):
        ''' Instruction RET_6 
            Groups: ret, mode64 
            0x41357b:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda60] = '\x90'
        mem[0x7fffffffda61] = '\xda'
        mem[0x7fffffffda62] = '\xff'
        mem[0x7fffffffda63] = '\xff'
        mem[0x7fffffffda64] = '\xff'
        mem[0x7fffffffda65] = '\x7f'
        mem[0x7fffffffda66] = '\x00'
        mem[0x7fffffffda67] = '\x00'
        mem[0x7fffffffda68] = 'm'
        mem[0x7fffffffda69] = '\xf8'
        mem[0x7fffffffda6a] = 'E'
        mem[0x7fffffffda6b] = '\x00'
        mem[0x7fffffffda6c] = '\x00'
        mem[0x7fffffffda6d] = '\x00'
        mem[0x7fffffffda6e] = '\x00'
        mem[0x7fffffffda6f] = '\x00'
        mem[0x7fffffffda70] = '\x01'
        mem[0x0041357b] = '\xc3'
        cpu.RSP = 0x7fffffffda68
        cpu.RIP = 0x41357b
        cpu.RBP = 0x7fffffffda90
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda60], '\x90')
        self.assertEqual(mem[0x7fffffffda61], '\xda')
        self.assertEqual(mem[0x7fffffffda62], '\xff')
        self.assertEqual(mem[0x7fffffffda63], '\xff')
        self.assertEqual(mem[0x7fffffffda64], '\xff')
        self.assertEqual(mem[0x7fffffffda65], '\x7f')
        self.assertEqual(mem[0x7fffffffda66], '\x00')
        self.assertEqual(mem[0x7fffffffda67], '\x00')
        self.assertEqual(mem[0x7fffffffda68], 'm')
        self.assertEqual(mem[0x7fffffffda69], '\xf8')
        self.assertEqual(mem[0x7fffffffda6a], 'E')
        self.assertEqual(mem[0x7fffffffda6b], '\x00')
        self.assertEqual(mem[0x7fffffffda6c], '\x00')
        self.assertEqual(mem[0x7fffffffda6d], '\x00')
        self.assertEqual(mem[0x7fffffffda6e], '\x00')
        self.assertEqual(mem[0x7fffffffda6f], '\x00')
        self.assertEqual(mem[0x7fffffffda70], '\x01')
        self.assertEqual(mem[0x41357b], '\xc3')
        self.assertEqual(cpu.RSP, 140737488345712L)
        self.assertEqual(cpu.RIP, 4585581L)
        self.assertEqual(cpu.RBP, 140737488345744L)

    def test_RET_7(self):
        ''' Instruction RET_7 
            Groups: ret, mode64 
            0x406e57:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdaa0] = '@'
        mem[0x00406e57] = '\xc3'
        mem[0x7fffffffda90] = '\xe0'
        mem[0x7fffffffda91] = '\xda'
        mem[0x7fffffffda92] = '\xff'
        mem[0x7fffffffda93] = '\xff'
        mem[0x7fffffffda94] = '\xff'
        mem[0x7fffffffda95] = '\x7f'
        mem[0x7fffffffda96] = '\x00'
        mem[0x7fffffffda97] = '\x00'
        mem[0x7fffffffda98] = '\xe5'
        mem[0x7fffffffda99] = 'o'
        mem[0x7fffffffda9a] = 'C'
        mem[0x7fffffffda9b] = '\x00'
        mem[0x7fffffffda9c] = '\x00'
        mem[0x7fffffffda9d] = '\x00'
        mem[0x7fffffffda9e] = '\x00'
        mem[0x7fffffffda9f] = '\x00'
        cpu.RSP = 0x7fffffffda98
        cpu.RIP = 0x406e57
        cpu.RBP = 0x7fffffffdae0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdaa0], '@')
        self.assertEqual(mem[0x7fffffffda97], '\x00')
        self.assertEqual(mem[0x7fffffffda90], '\xe0')
        self.assertEqual(mem[0x7fffffffda91], '\xda')
        self.assertEqual(mem[0x7fffffffda92], '\xff')
        self.assertEqual(mem[0x7fffffffda93], '\xff')
        self.assertEqual(mem[0x7fffffffda94], '\xff')
        self.assertEqual(mem[0x7fffffffda95], '\x7f')
        self.assertEqual(mem[0x7fffffffda96], '\x00')
        self.assertEqual(mem[0x406e57], '\xc3')
        self.assertEqual(mem[0x7fffffffda98], '\xe5')
        self.assertEqual(mem[0x7fffffffda99], 'o')
        self.assertEqual(mem[0x7fffffffda9a], 'C')
        self.assertEqual(mem[0x7fffffffda9b], '\x00')
        self.assertEqual(mem[0x7fffffffda9c], '\x00')
        self.assertEqual(mem[0x7fffffffda9d], '\x00')
        self.assertEqual(mem[0x7fffffffda9e], '\x00')
        self.assertEqual(mem[0x7fffffffda9f], '\x00')
        self.assertEqual(cpu.RSP, 140737488345760L)
        self.assertEqual(cpu.RIP, 4419557L)
        self.assertEqual(cpu.RBP, 140737488345824L)

    def test_RET_8(self):
        ''' Instruction RET_8 
            Groups: ret, mode64 
            0x4579bc:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdac0] = '\x08'
        mem[0x7fffffffdac1] = '\xdc'
        mem[0x7fffffffdac2] = '\xff'
        mem[0x7fffffffdac3] = '\xff'
        mem[0x7fffffffdac4] = '\xff'
        mem[0x7fffffffdac5] = '\x7f'
        mem[0x7fffffffdac6] = '\x00'
        mem[0x7fffffffdac7] = '\x00'
        mem[0x7fffffffdac8] = 'W'
        mem[0x7fffffffdac9] = 'U'
        mem[0x7fffffffdaca] = 'C'
        mem[0x7fffffffdacb] = '\x00'
        mem[0x7fffffffdacc] = '\x00'
        mem[0x7fffffffdacd] = '\x00'
        mem[0x7fffffffdace] = '\x00'
        mem[0x7fffffffdacf] = '\x00'
        mem[0x7fffffffdad0] = '\x03'
        mem[0x004579bc] = '\xc3'
        cpu.RSP = 0x7fffffffdac8
        cpu.RIP = 0x4579bc
        cpu.RBP = 0x7fffffffdae0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdac0], '\x08')
        self.assertEqual(mem[0x7fffffffdac1], '\xdc')
        self.assertEqual(mem[0x7fffffffdac2], '\xff')
        self.assertEqual(mem[0x7fffffffdac3], '\xff')
        self.assertEqual(mem[0x7fffffffdac4], '\xff')
        self.assertEqual(mem[0x7fffffffdac5], '\x7f')
        self.assertEqual(mem[0x7fffffffdac6], '\x00')
        self.assertEqual(mem[0x7fffffffdac7], '\x00')
        self.assertEqual(mem[0x7fffffffdac8], 'W')
        self.assertEqual(mem[0x7fffffffdac9], 'U')
        self.assertEqual(mem[0x7fffffffdaca], 'C')
        self.assertEqual(mem[0x7fffffffdacb], '\x00')
        self.assertEqual(mem[0x7fffffffdacc], '\x00')
        self.assertEqual(mem[0x7fffffffdacd], '\x00')
        self.assertEqual(mem[0x7fffffffdace], '\x00')
        self.assertEqual(mem[0x7fffffffdacf], '\x00')
        self.assertEqual(mem[0x7fffffffdad0], '\x03')
        self.assertEqual(mem[0x4579bc], '\xc3')
        self.assertEqual(cpu.RSP, 140737488345808L)
        self.assertEqual(cpu.RIP, 4412759L)
        self.assertEqual(cpu.RBP, 140737488345824L)

    def test_RET_9(self):
        ''' Instruction RET_9 
            Groups: ret, mode64 
            0x400951:	ret	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdaa0] = '\xb0'
        mem[0x7fffffffdaa1] = '\xda'
        mem[0x7fffffffdaa2] = '\xff'
        mem[0x7fffffffdaa3] = '\xff'
        mem[0x7fffffffdaa4] = '\xff'
        mem[0x7fffffffdaa5] = '\x7f'
        mem[0x7fffffffdaa6] = '\x00'
        mem[0x7fffffffdaa7] = '\x00'
        mem[0x7fffffffdaa8] = '\xd8'
        mem[0x7fffffffdaa9] = '\t'
        mem[0x7fffffffdaaa] = '@'
        mem[0x7fffffffdaab] = '\x00'
        mem[0x7fffffffdaac] = '\x00'
        mem[0x7fffffffdaad] = '\x00'
        mem[0x7fffffffdaae] = '\x00'
        mem[0x7fffffffdaaf] = '\x00'
        mem[0x7fffffffdab0] = '\xd0'
        mem[0x00400951] = '\xc3'
        cpu.RSP = 0x7fffffffdaa8
        cpu.RIP = 0x400951
        cpu.RBP = 0x7fffffffdab0
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdaa0], '\xb0')
        self.assertEqual(mem[0x7fffffffdaa1], '\xda')
        self.assertEqual(mem[0x7fffffffdaa2], '\xff')
        self.assertEqual(mem[0x7fffffffdaa3], '\xff')
        self.assertEqual(mem[0x7fffffffdaa4], '\xff')
        self.assertEqual(mem[0x7fffffffdaa5], '\x7f')
        self.assertEqual(mem[0x7fffffffdaa6], '\x00')
        self.assertEqual(mem[0x7fffffffdaa7], '\x00')
        self.assertEqual(mem[0x7fffffffdaa8], '\xd8')
        self.assertEqual(mem[0x7fffffffdaa9], '\t')
        self.assertEqual(mem[0x7fffffffdaaa], '@')
        self.assertEqual(mem[0x7fffffffdaab], '\x00')
        self.assertEqual(mem[0x7fffffffdaac], '\x00')
        self.assertEqual(mem[0x7fffffffdaad], '\x00')
        self.assertEqual(mem[0x7fffffffdaae], '\x00')
        self.assertEqual(mem[0x7fffffffdaaf], '\x00')
        self.assertEqual(mem[0x7fffffffdab0], '\xd0')
        self.assertEqual(mem[0x400951], '\xc3')
        self.assertEqual(cpu.RSP, 140737488345776L)
        self.assertEqual(cpu.RIP, 4196824L)
        self.assertEqual(cpu.RBP, 140737488345776L)

    def test_ROL_1(self):
        ''' Instruction ROL_1 
            Groups:  
            0x4072ca:	rol	rdi, 0x11
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00407000, 0x1000, 'rwx')
        mem[0x004072ca] = 'H'
        mem[0x004072cb] = '\xc1'
        mem[0x004072cc] = '\xc7'
        mem[0x004072cd] = '\x11'
        cpu.OF = False
        cpu.RDI = 0xa53abb12c2478cae
        cpu.CF = False
        cpu.RIP = 0x4072ca
        cpu.execute()
    
        self.assertEqual(mem[0x4072ca], 'H')
        self.assertEqual(mem[0x4072cb], '\xc1')
        self.assertEqual(mem[0x4072cc], '\xc7')
        self.assertEqual(mem[0x4072cd], '\x11')
        self.assertEqual(cpu.RDI, 8513356420754524789L)
        self.assertEqual(cpu.RIP, 4223694L)

    def test_ROL_2(self):
        ''' Instruction ROL_2 
            Groups:  
            0x44263a:	rol	rax, 0x11
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00442000, 0x1000, 'rwx')
        mem[0x0044263a] = 'H'
        mem[0x0044263b] = '\xc1'
        mem[0x0044263c] = '\xc0'
        mem[0x0044263d] = '\x11'
        cpu.OF = False
        cpu.RIP = 0x44263a
        cpu.CF = False
        cpu.RAX = 0xa53abb12c247920b
        cpu.execute()
    
        self.assertEqual(mem[0x44263a], 'H')
        self.assertEqual(mem[0x44263b], '\xc1')
        self.assertEqual(mem[0x44263c], '\xc0')
        self.assertEqual(mem[0x44263d], '\x11')
        self.assertEqual(cpu.RAX, 8513356420934486645L)
        self.assertEqual(cpu.RIP, 4466238L)

    def test_ROL_3(self):
        ''' Instruction ROL_3 
            Groups:  
            0x442625:	rol	rdx, 0x11
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00442000, 0x1000, 'rwx')
        mem[0x00442628] = '\x11'
        mem[0x00442625] = 'H'
        mem[0x00442626] = '\xc1'
        mem[0x00442627] = '\xc2'
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 0x442625
        cpu.RDX = 0xa53ac4ed3df844be
        cpu.execute()
    
        self.assertEqual(mem[0x442628], '\x11')
        self.assertEqual(mem[0x442625], 'H')
        self.assertEqual(mem[0x442626], '\xc1')
        self.assertEqual(mem[0x442627], '\xc2')
        self.assertEqual(cpu.RDX, 9933388201148107381L)
        self.assertEqual(cpu.RIP, 4466217L)

    def test_ROL_4(self):
        ''' Instruction ROL_4 
            Groups:  
            0x4425ff:	rol	rax, 0x11
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00442000, 0x1000, 'rwx')
        mem[0x00442600] = '\xc1'
        mem[0x00442601] = '\xc0'
        mem[0x00442602] = '\x11'
        mem[0x004425ff] = 'H'
        cpu.OF = False
        cpu.RIP = 0x4425ff
        cpu.CF = False
        cpu.RAX = 0xa53ac4ed3df8447e
        cpu.execute()
    
        self.assertEqual(mem[0x442600], '\xc1')
        self.assertEqual(mem[0x442601], '\xc0')
        self.assertEqual(mem[0x442602], '\x11')
        self.assertEqual(mem[0x4425ff], 'H')
        self.assertEqual(cpu.RAX, 9933388201139718773L)
        self.assertEqual(cpu.RIP, 4466179L)

    def test_ROR_1(self):
        ''' Instruction ROR_1 
            Groups:  
            0x406fc3:	ror	rax, 0x11
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406fc3] = 'H'
        mem[0x00406fc4] = '\xc1'
        mem[0x00406fc5] = '\xc8'
        mem[0x00406fc6] = '\x11'
        cpu.OF = False
        cpu.RIP = 0x406fc3
        cpu.CF = False
        cpu.RAX = 0x7625848f195d4a75
        cpu.execute()
    
        self.assertEqual(mem[0x406fc3], 'H')
        self.assertEqual(mem[0x406fc4], '\xc1')
        self.assertEqual(mem[0x406fc5], '\xc8')
        self.assertEqual(mem[0x406fc6], '\x11')
        self.assertEqual(cpu.RAX, 11906034254150601902L)
        self.assertEqual(cpu.RIP, 4222919L)

    def test_SAR_1(self):
        ''' Instruction SAR_1 
            Groups:  
            0x432218:	sar	r8d, 0x1f
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432218] = 'A'
        mem[0x00432219] = '\xc1'
        mem[0x0043221a] = '\xf8'
        mem[0x0043221b] = '\x1f'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x432218
        cpu.R8D = 0x9
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x432218], 'A')
        self.assertEqual(mem[0x432219], '\xc1')
        self.assertEqual(mem[0x43221a], '\xf8')
        self.assertEqual(mem[0x43221b], '\x1f')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4399644L)
        self.assertEqual(cpu.R8D, 0L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SAR_10(self):
        ''' Instruction SAR_10 
            Groups:  
            0x40135b:	sar	rbx, 3
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x0040135b] = 'H'
        mem[0x0040135c] = '\xc1'
        mem[0x0040135d] = '\xfb'
        mem[0x0040135e] = '\x03'
        cpu.RBX = 0x10
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x40135b
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40135b], 'H')
        self.assertEqual(mem[0x40135c], '\xc1')
        self.assertEqual(mem[0x40135d], '\xfb')
        self.assertEqual(mem[0x40135e], '\x03')
        self.assertEqual(cpu.RBX, 2L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4199263L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAR_11(self):
        ''' Instruction SAR_11 
            Groups:  
            0x418422:	sar	rdx, cl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x00418422] = 'H'
        mem[0x00418423] = '\xd3'
        mem[0x00418424] = '\xfa'
        cpu.SF = False
        cpu.PF = False
        cpu.CL = 0xe
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x418422
        cpu.RDX = 0x2000800080000000
        cpu.execute()
    
        self.assertEqual(mem[0x418422], 'H')
        self.assertEqual(mem[0x418423], '\xd3')
        self.assertEqual(mem[0x418424], '\xfa')
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.CL, 14L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4293669L)
        self.assertEqual(cpu.RDX, 140746078420992L)

    def test_SAR_12(self):
        ''' Instruction SAR_12 
            Groups:  
            0x400983:	sar	rsi, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400983] = 'H'
        mem[0x00400984] = '\xd1'
        mem[0x00400985] = '\xfe'
        cpu.RSI = 0x0
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400983
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400983], 'H')
        self.assertEqual(mem[0x400984], '\xd1')
        self.assertEqual(mem[0x400985], '\xfe')
        self.assertEqual(cpu.RSI, 0L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196742L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SAR_13(self):
        ''' Instruction SAR_13 
            Groups:  
            0x4012ec:	sar	r14, 3
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x004012ec] = 'I'
        mem[0x004012ed] = '\xc1'
        mem[0x004012ee] = '\xfe'
        mem[0x004012ef] = '\x03'
        cpu.R14 = 0x10
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4012ec
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4012ec], 'I')
        self.assertEqual(mem[0x4012ed], '\xc1')
        self.assertEqual(mem[0x4012ee], '\xfe')
        self.assertEqual(mem[0x4012ef], '\x03')
        self.assertEqual(cpu.R14, 2L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4199152L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAR_14(self):
        ''' Instruction SAR_14 
            Groups:  
            0x400724:	sar	rax, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400724] = 'H'
        mem[0x00400725] = '\xd1'
        mem[0x00400726] = '\xf8'
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400724
        cpu.PF = True
        cpu.SF = False
        cpu.RAX = 0xc0000
        cpu.execute()
    
        self.assertEqual(mem[0x400724], 'H')
        self.assertEqual(mem[0x400725], '\xd1')
        self.assertEqual(mem[0x400726], '\xf8')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196135L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 393216L)

    def test_SAR_15(self):
        ''' Instruction SAR_15 
            Groups:  
            0x432218:	sar	r8d, 0x1f
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432218] = 'A'
        mem[0x00432219] = '\xc1'
        mem[0x0043221a] = '\xf8'
        mem[0x0043221b] = '\x1f'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x432218
        cpu.R8D = 0x9
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x432218], 'A')
        self.assertEqual(mem[0x432219], '\xc1')
        self.assertEqual(mem[0x43221a], '\xf8')
        self.assertEqual(mem[0x43221b], '\x1f')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4399644L)
        self.assertEqual(cpu.R8D, 0L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SAR_16(self):
        ''' Instruction SAR_16 
            Groups:  
            0x4006ef:	sar	rax, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006f0] = '\xd1'
        mem[0x004006f1] = '\xf8'
        mem[0x004006ef] = 'H'
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4006ef
        cpu.PF = True
        cpu.SF = False
        cpu.RAX = 0x8000
        cpu.execute()
    
        self.assertEqual(mem[0x4006f0], '\xd1')
        self.assertEqual(mem[0x4006f1], '\xf8')
        self.assertEqual(mem[0x4006ef], 'H')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196082L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 16384L)

    def test_SAR_2(self):
        ''' Instruction SAR_2 
            Groups:  
            0x43714b:	sar	ecx, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x0043714b] = '\xd1'
        mem[0x0043714c] = '\xf9'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x43714b
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 0xdffffdea
        cpu.execute()
    
        self.assertEqual(mem[0x43714b], '\xd1')
        self.assertEqual(mem[0x43714c], '\xf9')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4419917L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 4026531573L)

    def test_SAR_3(self):
        ''' Instruction SAR_3 
            Groups:  
            0x400703:	sar	rax, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400703] = 'H'
        mem[0x00400704] = '\xd1'
        mem[0x00400705] = '\xf8'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x400703
        cpu.PF = True
        cpu.SF = False
        cpu.RAX = 0x8000
        cpu.execute()
    
        self.assertEqual(mem[0x400703], 'H')
        self.assertEqual(mem[0x400704], '\xd1')
        self.assertEqual(mem[0x400705], '\xf8')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196102L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 16384L)

    def test_SAR_4(self):
        ''' Instruction SAR_4 
            Groups:  
            0x400738:	sar	rax, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400738] = 'H'
        mem[0x00400739] = '\xd1'
        mem[0x0040073a] = '\xf8'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x400738
        cpu.PF = True
        cpu.SF = False
        cpu.RAX = 0xc0000
        cpu.execute()
    
        self.assertEqual(mem[0x400738], 'H')
        self.assertEqual(mem[0x400739], '\xd1')
        self.assertEqual(mem[0x40073a], '\xf8')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196155L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 393216L)

    def test_SAR_5(self):
        ''' Instruction SAR_5 
            Groups:  
            0x432218:	sar	r8d, 0x1f
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432218] = 'A'
        mem[0x00432219] = '\xc1'
        mem[0x0043221a] = '\xf8'
        mem[0x0043221b] = '\x1f'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x432218
        cpu.R8D = 0x3
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x432218], 'A')
        self.assertEqual(mem[0x432219], '\xc1')
        self.assertEqual(mem[0x43221a], '\xf8')
        self.assertEqual(mem[0x43221b], '\x1f')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4399644L)
        self.assertEqual(cpu.R8D, 0L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SAR_6(self):
        ''' Instruction SAR_6 
            Groups:  
            0x400975:	sar	rsi, 3
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400978] = '\x03'
        mem[0x00400975] = 'H'
        mem[0x00400976] = '\xc1'
        mem[0x00400977] = '\xfe'
        cpu.RSI = 0x0
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400975
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400978], '\x03')
        self.assertEqual(mem[0x400975], 'H')
        self.assertEqual(mem[0x400976], '\xc1')
        self.assertEqual(mem[0x400977], '\xfe')
        self.assertEqual(cpu.RSI, 0L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196729L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SAR_7(self):
        ''' Instruction SAR_7 
            Groups:  
            0x432218:	sar	r8d, 0x1f
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432218] = 'A'
        mem[0x00432219] = '\xc1'
        mem[0x0043221a] = '\xf8'
        mem[0x0043221b] = '\x1f'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x432218
        cpu.R8D = 0x3
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x432218], 'A')
        self.assertEqual(mem[0x432219], '\xc1')
        self.assertEqual(mem[0x43221a], '\xf8')
        self.assertEqual(mem[0x43221b], '\x1f')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4399644L)
        self.assertEqual(cpu.R8D, 0L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SAR_8(self):
        ''' Instruction SAR_8 
            Groups:  
            0x4012a9:	sar	r14, 3
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x004012a9] = 'I'
        mem[0x004012aa] = '\xc1'
        mem[0x004012ab] = '\xfe'
        mem[0x004012ac] = '\x03'
        cpu.R14 = 0x0
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4012a9
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4012a9], 'I')
        self.assertEqual(mem[0x4012aa], '\xc1')
        self.assertEqual(mem[0x4012ab], '\xfe')
        self.assertEqual(mem[0x4012ac], '\x03')
        self.assertEqual(cpu.R14, 0L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4199085L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SAR_9(self):
        ''' Instruction SAR_9 
            Groups:  
            0x418422:	sar	rdx, cl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x00418422] = 'H'
        mem[0x00418423] = '\xd3'
        mem[0x00418424] = '\xfa'
        cpu.SF = False
        cpu.PF = True
        cpu.CL = 0xe
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x418422
        cpu.RDX = 0xfe0040000000
        cpu.execute()
    
        self.assertEqual(mem[0x418422], 'H')
        self.assertEqual(mem[0x418423], '\xd3')
        self.assertEqual(mem[0x418424], '\xfa')
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.CL, 14L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4293669L)
        self.assertEqual(cpu.RDX, 17045716992L)

    def test_SETB_1(self):
        ''' Instruction SETB_1 
            Groups:  
            0x4341fa:	setb	al
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x004341fa] = '\x0f'
        mem[0x004341fb] = '\x92'
        mem[0x004341fc] = '\xc0'
        cpu.CF = False
        cpu.RIP = 0x4341fa
        cpu.AL = 0xc0
        cpu.execute()
    
        self.assertEqual(mem[0x4341fa], '\x0f')
        self.assertEqual(mem[0x4341fb], '\x92')
        self.assertEqual(mem[0x4341fc], '\xc0')
        self.assertEqual(cpu.AL, 0L)
        self.assertEqual(cpu.RIP, 4407805L)

    def test_SETB_2(self):
        ''' Instruction SETB_2 
            Groups:  
            0x4341fa:	setb	al
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x004341fa] = '\x0f'
        mem[0x004341fb] = '\x92'
        mem[0x004341fc] = '\xc0'
        cpu.CF = False
        cpu.RIP = 0x4341fa
        cpu.AL = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x4341fa], '\x0f')
        self.assertEqual(mem[0x4341fb], '\x92')
        self.assertEqual(mem[0x4341fc], '\xc0')
        self.assertEqual(cpu.AL, 0L)
        self.assertEqual(cpu.RIP, 4407805L)

    def test_SETB_3(self):
        ''' Instruction SETB_3 
            Groups:  
            0x4341fa:	setb	al
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x004341fa] = '\x0f'
        mem[0x004341fb] = '\x92'
        mem[0x004341fc] = '\xc0'
        cpu.CF = False
        cpu.RIP = 0x4341fa
        cpu.AL = 0xc0
        cpu.execute()
    
        self.assertEqual(mem[0x4341fa], '\x0f')
        self.assertEqual(mem[0x4341fb], '\x92')
        self.assertEqual(mem[0x4341fc], '\xc0')
        self.assertEqual(cpu.AL, 0L)
        self.assertEqual(cpu.RIP, 4407805L)

    def test_SETE_1(self):
        ''' Instruction SETE_1 
            Groups:  
            0x400866:	sete	dl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400868] = '\xc2'
        mem[0x00400866] = '\x0f'
        mem[0x00400867] = '\x94'
        cpu.ZF = False
        cpu.DL = 0x2
        cpu.RIP = 0x400866
        cpu.execute()
    
        self.assertEqual(mem[0x400868], '\xc2')
        self.assertEqual(mem[0x400866], '\x0f')
        self.assertEqual(mem[0x400867], '\x94')
        self.assertEqual(cpu.DL, 0L)
        self.assertEqual(cpu.RIP, 4196457L)

    def test_SETE_10(self):
        ''' Instruction SETE_10 
            Groups:  
            0x4323de:	sete	r13b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004323e0] = '\x94'
        mem[0x004323e1] = '\xc5'
        mem[0x004323de] = 'A'
        mem[0x004323df] = '\x0f'
        cpu.ZF = False
        cpu.R13B = 0x0
        cpu.RIP = 0x4323de
        cpu.execute()
    
        self.assertEqual(mem[0x4323e0], '\x94')
        self.assertEqual(mem[0x4323e1], '\xc5')
        self.assertEqual(mem[0x4323de], 'A')
        self.assertEqual(mem[0x4323df], '\x0f')
        self.assertEqual(cpu.R13B, 0L)
        self.assertEqual(cpu.RIP, 4400098L)

    def test_SETE_11(self):
        ''' Instruction SETE_11 
            Groups:  
            0x4323de:	sete	r13b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004323e0] = '\x94'
        mem[0x004323e1] = '\xc5'
        mem[0x004323de] = 'A'
        mem[0x004323df] = '\x0f'
        cpu.ZF = False
        cpu.R13B = 0x1
        cpu.RIP = 0x4323de
        cpu.execute()
    
        self.assertEqual(mem[0x4323e0], '\x94')
        self.assertEqual(mem[0x4323e1], '\xc5')
        self.assertEqual(mem[0x4323de], 'A')
        self.assertEqual(mem[0x4323df], '\x0f')
        self.assertEqual(cpu.R13B, 0L)
        self.assertEqual(cpu.RIP, 4400098L)

    def test_SETE_12(self):
        ''' Instruction SETE_12 
            Groups:  
            0x432356:	sete	dl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432358] = '\xc2'
        mem[0x00432356] = '\x0f'
        mem[0x00432357] = '\x94'
        cpu.ZF = True
        cpu.DL = 0x0
        cpu.RIP = 0x432356
        cpu.execute()
    
        self.assertEqual(mem[0x432358], '\xc2')
        self.assertEqual(mem[0x432356], '\x0f')
        self.assertEqual(mem[0x432357], '\x94')
        self.assertEqual(cpu.DL, 1L)
        self.assertEqual(cpu.RIP, 4399961L)

    def test_SETE_13(self):
        ''' Instruction SETE_13 
            Groups:  
            0x432356:	sete	dl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432358] = '\xc2'
        mem[0x00432356] = '\x0f'
        mem[0x00432357] = '\x94'
        cpu.ZF = True
        cpu.DL = 0x0
        cpu.RIP = 0x432356
        cpu.execute()
    
        self.assertEqual(mem[0x432358], '\xc2')
        self.assertEqual(mem[0x432356], '\x0f')
        self.assertEqual(mem[0x432357], '\x94')
        self.assertEqual(cpu.DL, 1L)
        self.assertEqual(cpu.RIP, 4399961L)

    def test_SETE_14(self):
        ''' Instruction SETE_14 
            Groups:  
            0x437899:	sete	dil
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x00437899] = '@'
        mem[0x0043789a] = '\x0f'
        mem[0x0043789b] = '\x94'
        mem[0x0043789c] = '\xc7'
        cpu.DIL = 0xe8
        cpu.ZF = True
        cpu.RIP = 0x437899
        cpu.execute()
    
        self.assertEqual(mem[0x437899], '@')
        self.assertEqual(mem[0x43789a], '\x0f')
        self.assertEqual(mem[0x43789b], '\x94')
        self.assertEqual(mem[0x43789c], '\xc7')
        self.assertEqual(cpu.DIL, 1L)
        self.assertEqual(cpu.RIP, 4421789L)

    def test_SETE_15(self):
        ''' Instruction SETE_15 
            Groups:  
            0x4323e5:	sete	r14b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004323e8] = '\xc6'
        mem[0x004323e5] = 'A'
        mem[0x004323e6] = '\x0f'
        mem[0x004323e7] = '\x94'
        cpu.ZF = False
        cpu.R14B = 0x5e
        cpu.RIP = 0x4323e5
        cpu.execute()
    
        self.assertEqual(mem[0x4323e8], '\xc6')
        self.assertEqual(mem[0x4323e5], 'A')
        self.assertEqual(mem[0x4323e6], '\x0f')
        self.assertEqual(mem[0x4323e7], '\x94')
        self.assertEqual(cpu.R14B, 0L)
        self.assertEqual(cpu.RIP, 4400105L)

    def test_SETE_16(self):
        ''' Instruction SETE_16 
            Groups:  
            0x4323e5:	sete	r14b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004323e8] = '\xc6'
        mem[0x004323e5] = 'A'
        mem[0x004323e6] = '\x0f'
        mem[0x004323e7] = '\x94'
        cpu.ZF = False
        cpu.R14B = 0x0
        cpu.RIP = 0x4323e5
        cpu.execute()
    
        self.assertEqual(mem[0x4323e8], '\xc6')
        self.assertEqual(mem[0x4323e5], 'A')
        self.assertEqual(mem[0x4323e6], '\x0f')
        self.assertEqual(mem[0x4323e7], '\x94')
        self.assertEqual(cpu.R14B, 0L)
        self.assertEqual(cpu.RIP, 4400105L)

    def test_SETE_17(self):
        ''' Instruction SETE_17 
            Groups:  
            0x4323f6:	sete	dl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004323f8] = '\xc2'
        mem[0x004323f6] = '\x0f'
        mem[0x004323f7] = '\x94'
        cpu.ZF = True
        cpu.DL = 0x2
        cpu.RIP = 0x4323f6
        cpu.execute()
    
        self.assertEqual(mem[0x4323f8], '\xc2')
        self.assertEqual(mem[0x4323f6], '\x0f')
        self.assertEqual(mem[0x4323f7], '\x94')
        self.assertEqual(cpu.DL, 1L)
        self.assertEqual(cpu.RIP, 4400121L)

    def test_SETE_18(self):
        ''' Instruction SETE_18 
            Groups:  
            0x436f34:	sete	dl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436f34] = '\x0f'
        mem[0x00436f35] = '\x94'
        mem[0x00436f36] = '\xc2'
        cpu.ZF = True
        cpu.DL = 0x0
        cpu.RIP = 0x436f34
        cpu.execute()
    
        self.assertEqual(mem[0x436f34], '\x0f')
        self.assertEqual(mem[0x436f35], '\x94')
        self.assertEqual(mem[0x436f36], '\xc2')
        self.assertEqual(cpu.DL, 1L)
        self.assertEqual(cpu.RIP, 4419383L)

    def test_SETE_19(self):
        ''' Instruction SETE_19 
            Groups:  
            0x43235d:	sete	r10b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432360] = '\xc2'
        mem[0x0043235d] = 'A'
        mem[0x0043235e] = '\x0f'
        mem[0x0043235f] = '\x94'
        cpu.R10B = 0xff
        cpu.ZF = False
        cpu.RIP = 0x43235d
        cpu.execute()
    
        self.assertEqual(mem[0x432360], '\xc2')
        self.assertEqual(mem[0x43235d], 'A')
        self.assertEqual(mem[0x43235e], '\x0f')
        self.assertEqual(mem[0x43235f], '\x94')
        self.assertEqual(cpu.R10B, 0L)
        self.assertEqual(cpu.RIP, 4399969L)

    def test_SETE_2(self):
        ''' Instruction SETE_2 
            Groups:  
            0x400872:	sete	al
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400872] = '\x0f'
        mem[0x00400873] = '\x94'
        mem[0x00400874] = '\xc0'
        cpu.ZF = True
        cpu.AL = 0x6
        cpu.RIP = 0x400872
        cpu.execute()
    
        self.assertEqual(mem[0x400872], '\x0f')
        self.assertEqual(mem[0x400873], '\x94')
        self.assertEqual(mem[0x400874], '\xc0')
        self.assertEqual(cpu.AL, 1L)
        self.assertEqual(cpu.RIP, 4196469L)

    def test_SETE_20(self):
        ''' Instruction SETE_20 
            Groups:  
            0x43235d:	sete	r10b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432360] = '\xc2'
        mem[0x0043235d] = 'A'
        mem[0x0043235e] = '\x0f'
        mem[0x0043235f] = '\x94'
        cpu.R10B = 0xff
        cpu.ZF = True
        cpu.RIP = 0x43235d
        cpu.execute()
    
        self.assertEqual(mem[0x432360], '\xc2')
        self.assertEqual(mem[0x43235d], 'A')
        self.assertEqual(mem[0x43235e], '\x0f')
        self.assertEqual(mem[0x43235f], '\x94')
        self.assertEqual(cpu.R10B, 1L)
        self.assertEqual(cpu.RIP, 4399969L)

    def test_SETE_21(self):
        ''' Instruction SETE_21 
            Groups:  
            0x4323e5:	sete	r14b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004323e8] = '\xc6'
        mem[0x004323e5] = 'A'
        mem[0x004323e6] = '\x0f'
        mem[0x004323e7] = '\x94'
        cpu.ZF = False
        cpu.R14B = 0x0
        cpu.RIP = 0x4323e5
        cpu.execute()
    
        self.assertEqual(mem[0x4323e8], '\xc6')
        self.assertEqual(mem[0x4323e5], 'A')
        self.assertEqual(mem[0x4323e6], '\x0f')
        self.assertEqual(mem[0x4323e7], '\x94')
        self.assertEqual(cpu.R14B, 0L)
        self.assertEqual(cpu.RIP, 4400105L)

    def test_SETE_3(self):
        ''' Instruction SETE_3 
            Groups:  
            0x43237f:	sete	sil
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432380] = '\x0f'
        mem[0x00432381] = '\x94'
        mem[0x00432382] = '\xc6'
        mem[0x0043237f] = '@'
        cpu.ZF = False
        cpu.RIP = 0x43237f
        cpu.SIL = 0x1
        cpu.execute()
    
        self.assertEqual(mem[0x432380], '\x0f')
        self.assertEqual(mem[0x432381], '\x94')
        self.assertEqual(mem[0x432382], '\xc6')
        self.assertEqual(mem[0x43237f], '@')
        self.assertEqual(cpu.RIP, 4400003L)
        self.assertEqual(cpu.SIL, 0L)

    def test_SETE_4(self):
        ''' Instruction SETE_4 
            Groups:  
            0x432364:	sete	r8b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432364] = 'A'
        mem[0x00432365] = '\x0f'
        mem[0x00432366] = '\x94'
        mem[0x00432367] = '\xc0'
        cpu.ZF = True
        cpu.R8B = 0x0
        cpu.RIP = 0x432364
        cpu.execute()
    
        self.assertEqual(mem[0x432364], 'A')
        self.assertEqual(mem[0x432365], '\x0f')
        self.assertEqual(mem[0x432366], '\x94')
        self.assertEqual(mem[0x432367], '\xc0')
        self.assertEqual(cpu.R8B, 1L)
        self.assertEqual(cpu.RIP, 4399976L)

    def test_SETE_5(self):
        ''' Instruction SETE_5 
            Groups:  
            0x432364:	sete	r8b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432364] = 'A'
        mem[0x00432365] = '\x0f'
        mem[0x00432366] = '\x94'
        mem[0x00432367] = '\xc0'
        cpu.ZF = True
        cpu.R8B = 0x0
        cpu.RIP = 0x432364
        cpu.execute()
    
        self.assertEqual(mem[0x432364], 'A')
        self.assertEqual(mem[0x432365], '\x0f')
        self.assertEqual(mem[0x432366], '\x94')
        self.assertEqual(mem[0x432367], '\xc0')
        self.assertEqual(cpu.R8B, 1L)
        self.assertEqual(cpu.RIP, 4399976L)

    def test_SETE_6(self):
        ''' Instruction SETE_6 
            Groups:  
            0x432396:	sete	r12b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432398] = '\x94'
        mem[0x00432399] = '\xc4'
        mem[0x00432396] = 'A'
        mem[0x00432397] = '\x0f'
        cpu.ZF = False
        cpu.R12B = 0xc2
        cpu.RIP = 0x432396
        cpu.execute()
    
        self.assertEqual(mem[0x432398], '\x94')
        self.assertEqual(mem[0x432399], '\xc4')
        self.assertEqual(mem[0x432396], 'A')
        self.assertEqual(mem[0x432397], '\x0f')
        self.assertEqual(cpu.R12B, 0L)
        self.assertEqual(cpu.RIP, 4400026L)

    def test_SETE_7(self):
        ''' Instruction SETE_7 
            Groups:  
            0x436eec:	sete	dl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436eec] = '\x0f'
        mem[0x00436eed] = '\x94'
        mem[0x00436eee] = '\xc2'
        cpu.ZF = True
        cpu.DL = 0x0
        cpu.RIP = 0x436eec
        cpu.execute()
    
        self.assertEqual(mem[0x436eec], '\x0f')
        self.assertEqual(mem[0x436eed], '\x94')
        self.assertEqual(mem[0x436eee], '\xc2')
        self.assertEqual(cpu.DL, 1L)
        self.assertEqual(cpu.RIP, 4419311L)

    def test_SETE_8(self):
        ''' Instruction SETE_8 
            Groups:  
            0x4323f6:	sete	dl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004323f8] = '\xc2'
        mem[0x004323f6] = '\x0f'
        mem[0x004323f7] = '\x94'
        cpu.ZF = False
        cpu.DL = 0x3
        cpu.RIP = 0x4323f6
        cpu.execute()
    
        self.assertEqual(mem[0x4323f8], '\xc2')
        self.assertEqual(mem[0x4323f6], '\x0f')
        self.assertEqual(mem[0x4323f7], '\x94')
        self.assertEqual(cpu.DL, 0L)
        self.assertEqual(cpu.RIP, 4400121L)

    def test_SETE_9(self):
        ''' Instruction SETE_9 
            Groups:  
            0x4323de:	sete	r13b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004323e0] = '\x94'
        mem[0x004323e1] = '\xc5'
        mem[0x004323de] = 'A'
        mem[0x004323df] = '\x0f'
        cpu.ZF = True
        cpu.R13B = 0x5f
        cpu.RIP = 0x4323de
        cpu.execute()
    
        self.assertEqual(mem[0x4323e0], '\x94')
        self.assertEqual(mem[0x4323e1], '\xc5')
        self.assertEqual(mem[0x4323de], 'A')
        self.assertEqual(mem[0x4323df], '\x0f')
        self.assertEqual(cpu.R13B, 1L)
        self.assertEqual(cpu.RIP, 4400098L)

    def test_SETNE_1(self):
        ''' Instruction SETNE_1 
            Groups:  
            0x412009:	setne	cl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x00412009] = '\x0f'
        mem[0x0041200a] = '\x95'
        mem[0x0041200b] = '\xc1'
        cpu.ZF = True
        cpu.RIP = 0x412009
        cpu.CL = 0x40
        cpu.execute()
    
        self.assertEqual(mem[0x412009], '\x0f')
        self.assertEqual(mem[0x41200a], '\x95')
        self.assertEqual(mem[0x41200b], '\xc1')
        self.assertEqual(cpu.RIP, 4268044L)
        self.assertEqual(cpu.CL, 0L)

    def test_SETNE_10(self):
        ''' Instruction SETNE_10 
            Groups:  
            0x412009:	setne	cl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x00412009] = '\x0f'
        mem[0x0041200a] = '\x95'
        mem[0x0041200b] = '\xc1'
        cpu.ZF = True
        cpu.RIP = 0x412009
        cpu.CL = 0x40
        cpu.execute()
    
        self.assertEqual(mem[0x412009], '\x0f')
        self.assertEqual(mem[0x41200a], '\x95')
        self.assertEqual(mem[0x41200b], '\xc1')
        self.assertEqual(cpu.RIP, 4268044L)
        self.assertEqual(cpu.CL, 0L)

    def test_SETNE_2(self):
        ''' Instruction SETNE_2 
            Groups:  
            0x436a20:	setne	dl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436a20] = '\x0f'
        mem[0x00436a21] = '\x95'
        mem[0x00436a22] = '\xc2'
        cpu.ZF = True
        cpu.DL = 0x0
        cpu.RIP = 0x436a20
        cpu.execute()
    
        self.assertEqual(mem[0x436a20], '\x0f')
        self.assertEqual(mem[0x436a21], '\x95')
        self.assertEqual(mem[0x436a22], '\xc2')
        self.assertEqual(cpu.DL, 0L)
        self.assertEqual(cpu.RIP, 4418083L)

    def test_SETNE_3(self):
        ''' Instruction SETNE_3 
            Groups:  
            0x412009:	setne	cl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x00412009] = '\x0f'
        mem[0x0041200a] = '\x95'
        mem[0x0041200b] = '\xc1'
        cpu.ZF = True
        cpu.RIP = 0x412009
        cpu.CL = 0x40
        cpu.execute()
    
        self.assertEqual(mem[0x412009], '\x0f')
        self.assertEqual(mem[0x41200a], '\x95')
        self.assertEqual(mem[0x41200b], '\xc1')
        self.assertEqual(cpu.RIP, 4268044L)
        self.assertEqual(cpu.CL, 0L)

    def test_SETNE_4(self):
        ''' Instruction SETNE_4 
            Groups:  
            0x410df5:	setne	cl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, 'rwx')
        mem[0x00410df5] = '\x0f'
        mem[0x00410df6] = '\x95'
        mem[0x00410df7] = '\xc1'
        cpu.ZF = True
        cpu.RIP = 0x410df5
        cpu.CL = 0x5
        cpu.execute()
    
        self.assertEqual(mem[0x410df5], '\x0f')
        self.assertEqual(mem[0x410df6], '\x95')
        self.assertEqual(mem[0x410df7], '\xc1')
        self.assertEqual(cpu.RIP, 4263416L)
        self.assertEqual(cpu.CL, 0L)

    def test_SETNE_5(self):
        ''' Instruction SETNE_5 
            Groups:  
            0x412009:	setne	cl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x00412009] = '\x0f'
        mem[0x0041200a] = '\x95'
        mem[0x0041200b] = '\xc1'
        cpu.ZF = True
        cpu.RIP = 0x412009
        cpu.CL = 0x40
        cpu.execute()
    
        self.assertEqual(mem[0x412009], '\x0f')
        self.assertEqual(mem[0x41200a], '\x95')
        self.assertEqual(mem[0x41200b], '\xc1')
        self.assertEqual(cpu.RIP, 4268044L)
        self.assertEqual(cpu.CL, 0L)

    def test_SETNE_6(self):
        ''' Instruction SETNE_6 
            Groups:  
            0x410eeb:	setne	cl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, 'rwx')
        mem[0x00410eeb] = '\x0f'
        mem[0x00410eec] = '\x95'
        mem[0x00410eed] = '\xc1'
        cpu.ZF = True
        cpu.RIP = 0x410eeb
        cpu.CL = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x410eeb], '\x0f')
        self.assertEqual(mem[0x410eec], '\x95')
        self.assertEqual(mem[0x410eed], '\xc1')
        self.assertEqual(cpu.RIP, 4263662L)
        self.assertEqual(cpu.CL, 0L)

    def test_SETNE_7(self):
        ''' Instruction SETNE_7 
            Groups:  
            0x436f10:	setne	dl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436f10] = '\x0f'
        mem[0x00436f11] = '\x95'
        mem[0x00436f12] = '\xc2'
        cpu.ZF = True
        cpu.DL = 0x0
        cpu.RIP = 0x436f10
        cpu.execute()
    
        self.assertEqual(mem[0x436f10], '\x0f')
        self.assertEqual(mem[0x436f11], '\x95')
        self.assertEqual(mem[0x436f12], '\xc2')
        self.assertEqual(cpu.DL, 0L)
        self.assertEqual(cpu.RIP, 4419347L)

    def test_SETNE_8(self):
        ''' Instruction SETNE_8 
            Groups:  
            0x412009:	setne	cl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x00412009] = '\x0f'
        mem[0x0041200a] = '\x95'
        mem[0x0041200b] = '\xc1'
        cpu.ZF = True
        cpu.RIP = 0x412009
        cpu.CL = 0x40
        cpu.execute()
    
        self.assertEqual(mem[0x412009], '\x0f')
        self.assertEqual(mem[0x41200a], '\x95')
        self.assertEqual(mem[0x41200b], '\xc1')
        self.assertEqual(cpu.RIP, 4268044L)
        self.assertEqual(cpu.CL, 0L)

    def test_SETNE_9(self):
        ''' Instruction SETNE_9 
            Groups:  
            0x463ed2:	setne	byte ptr [rbp - 0x48]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00463000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffda18] = '0'
        mem[0x00463ed2] = '\x0f'
        mem[0x00463ed3] = '\x95'
        mem[0x00463ed4] = 'E'
        mem[0x00463ed5] = '\xb8'
        cpu.ZF = True
        cpu.RIP = 0x463ed2
        cpu.RBP = 0x7fffffffda60
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffda18], '\x00')
        self.assertEqual(mem[0x463ed2], '\x0f')
        self.assertEqual(mem[0x463ed3], '\x95')
        self.assertEqual(mem[0x463ed4], 'E')
        self.assertEqual(mem[0x463ed5], '\xb8')
        self.assertEqual(cpu.RIP, 4603606L)
        self.assertEqual(cpu.RBP, 140737488345696L)

    def test_SHL_1(self):
        ''' Instruction SHL_1 
            Groups:  
            0x4376f7:	shl	eax, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x004376f8] = '\xe0'
        mem[0x004376f9] = '\x08'
        mem[0x004376f7] = '\xc1'
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4376f7
        cpu.EAX = 0x404
        cpu.PF = False
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4376f8], '\xe0')
        self.assertEqual(mem[0x4376f9], '\x08')
        self.assertEqual(mem[0x4376f7], '\xc1')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4421370L)
        self.assertEqual(cpu.EAX, 263168L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHL_10(self):
        ''' Instruction SHL_10 
            Groups:  
            0x418406:	shl	rdx, 0x10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x00418408] = '\xe2'
        mem[0x00418409] = '\x10'
        mem[0x00418406] = 'H'
        mem[0x00418407] = '\xc1'
        cpu.ZF = False
        cpu.RDX = 0x8000
        cpu.RIP = 0x418406
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x418408], '\xe2')
        self.assertEqual(mem[0x418409], '\x10')
        self.assertEqual(mem[0x418406], 'H')
        self.assertEqual(mem[0x418407], '\xc1')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4293642L)
        self.assertEqual(cpu.RDX, 2147483648L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHL_11(self):
        ''' Instruction SHL_11 
            Groups:  
            0x462426:	shl	rax, 3
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, 'rwx')
        mem[0x00462428] = '\xe0'
        mem[0x00462429] = '\x03'
        mem[0x00462426] = 'H'
        mem[0x00462427] = '\xc1'
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x462426
        cpu.PF = True
        cpu.SF = False
        cpu.RAX = 0x1
        cpu.execute()
    
        self.assertEqual(mem[0x462428], '\xe0')
        self.assertEqual(mem[0x462429], '\x03')
        self.assertEqual(mem[0x462426], 'H')
        self.assertEqual(mem[0x462427], '\xc1')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4596778L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 8L)

    def test_SHL_12(self):
        ''' Instruction SHL_12 
            Groups:  
            0x418406:	shl	rdx, 0x10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x00418408] = '\xe2'
        mem[0x00418409] = '\x10'
        mem[0x00418406] = 'H'
        mem[0x00418407] = '\xc1'
        cpu.ZF = False
        cpu.RDX = 0x4000
        cpu.RIP = 0x418406
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x418408], '\xe2')
        self.assertEqual(mem[0x418409], '\x10')
        self.assertEqual(mem[0x418406], 'H')
        self.assertEqual(mem[0x418407], '\xc1')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4293642L)
        self.assertEqual(cpu.RDX, 1073741824L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHL_13(self):
        ''' Instruction SHL_13 
            Groups:  
            0x41840a:	shl	rcx, 0x10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x0041840a] = 'H'
        mem[0x0041840b] = '\xc1'
        mem[0x0041840c] = '\xe1'
        mem[0x0041840d] = '\x10'
        cpu.RCX = 0x2000
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x41840a
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x41840a], 'H')
        self.assertEqual(mem[0x41840b], '\xc1')
        self.assertEqual(mem[0x41840c], '\xe1')
        self.assertEqual(mem[0x41840d], '\x10')
        self.assertEqual(cpu.RCX, 536870912L)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4293646L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHL_14(self):
        ''' Instruction SHL_14 
            Groups:  
            0x41201b:	shl	rcx, 2
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x0041201b] = 'H'
        mem[0x0041201c] = '\xc1'
        mem[0x0041201d] = '\xe1'
        mem[0x0041201e] = '\x02'
        cpu.RCX = 0x0
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x41201b
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x41201b], 'H')
        self.assertEqual(mem[0x41201c], '\xc1')
        self.assertEqual(mem[0x41201d], '\xe1')
        self.assertEqual(mem[0x41201e], '\x02')
        self.assertEqual(cpu.RCX, 0L)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4268063L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHL_15(self):
        ''' Instruction SHL_15 
            Groups:  
            0x411b78:	shl	eax, cl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411b78] = '\xd3'
        mem[0x00411b79] = '\xe0'
        cpu.CL = 0x5
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x411b78
        cpu.EAX = 0x1
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x411b78], '\xd3')
        self.assertEqual(mem[0x411b79], '\xe0')
        self.assertEqual(cpu.CL, 5L)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4266874L)
        self.assertEqual(cpu.EAX, 32L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHL_16(self):
        ''' Instruction SHL_16 
            Groups:  
            0x45795f:	shl	rdx, 0x10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x00457960] = '\xc1'
        mem[0x00457961] = '\xe2'
        mem[0x00457962] = '\x10'
        mem[0x0045795f] = 'H'
        cpu.ZF = True
        cpu.RDX = 0x0
        cpu.RIP = 0x45795f
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x457960], '\xc1')
        self.assertEqual(mem[0x457961], '\xe2')
        self.assertEqual(mem[0x457962], '\x10')
        self.assertEqual(mem[0x45795f], 'H')
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4553059L)
        self.assertEqual(cpu.RDX, 0L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHL_17(self):
        ''' Instruction SHL_17 
            Groups:  
            0x41201b:	shl	rcx, 2
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x0041201b] = 'H'
        mem[0x0041201c] = '\xc1'
        mem[0x0041201d] = '\xe1'
        mem[0x0041201e] = '\x02'
        cpu.RCX = 0x0
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x41201b
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x41201b], 'H')
        self.assertEqual(mem[0x41201c], '\xc1')
        self.assertEqual(mem[0x41201d], '\xe1')
        self.assertEqual(mem[0x41201e], '\x02')
        self.assertEqual(cpu.RCX, 0L)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4268063L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHL_18(self):
        ''' Instruction SHL_18 
            Groups:  
            0x411b78:	shl	eax, cl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411b78] = '\xd3'
        mem[0x00411b79] = '\xe0'
        cpu.CL = 0x3
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x411b78
        cpu.EAX = 0x1
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x411b78], '\xd3')
        self.assertEqual(mem[0x411b79], '\xe0')
        self.assertEqual(cpu.CL, 3L)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4266874L)
        self.assertEqual(cpu.EAX, 8L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHL_19(self):
        ''' Instruction SHL_19 
            Groups:  
            0x418411:	shl	rcx, 0x20
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x00418411] = 'H'
        mem[0x00418412] = '\xc1'
        mem[0x00418413] = '\xe1'
        mem[0x00418414] = ' '
        cpu.RCX = 0x20008000
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x418411
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x418411], 'H')
        self.assertEqual(mem[0x418412], '\xc1')
        self.assertEqual(mem[0x418413], '\xe1')
        self.assertEqual(mem[0x418414], ' ')
        self.assertEqual(cpu.RCX, 2305983746702049280L)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4293653L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHL_2(self):
        ''' Instruction SHL_2 
            Groups:  
            0x45798a:	shl	rsi, 0x10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x0045798a] = 'H'
        mem[0x0045798b] = '\xc1'
        mem[0x0045798c] = '\xe6'
        mem[0x0045798d] = '\x10'
        cpu.RSI = 0x8020
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x45798a
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x45798a], 'H')
        self.assertEqual(mem[0x45798b], '\xc1')
        self.assertEqual(mem[0x45798c], '\xe6')
        self.assertEqual(mem[0x45798d], '\x10')
        self.assertEqual(cpu.RSI, 2149580800L)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4553102L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHL_20(self):
        ''' Instruction SHL_20 
            Groups:  
            0x457970:	shl	r8, 0x20
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x00457970] = 'I'
        mem[0x00457971] = '\xc1'
        mem[0x00457972] = '\xe0'
        mem[0x00457973] = ' '
        cpu.ZF = True
        cpu.R8 = 0x420
        cpu.CF = False
        cpu.RIP = 0x457970
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x457970], 'I')
        self.assertEqual(mem[0x457971], '\xc1')
        self.assertEqual(mem[0x457972], '\xe0')
        self.assertEqual(mem[0x457973], ' ')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.R8, 4535485464576L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4553076L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHL_21(self):
        ''' Instruction SHL_21 
            Groups:  
            0x436d28:	shl	rax, 4
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436d28] = 'H'
        mem[0x00436d29] = '\xc1'
        mem[0x00436d2a] = '\xe0'
        mem[0x00436d2b] = '\x04'
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x436d28
        cpu.PF = True
        cpu.SF = False
        cpu.RAX = 0x4
        cpu.execute()
    
        self.assertEqual(mem[0x436d28], 'H')
        self.assertEqual(mem[0x436d29], '\xc1')
        self.assertEqual(mem[0x436d2a], '\xe0')
        self.assertEqual(mem[0x436d2b], '\x04')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4418860L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 64L)

    def test_SHL_3(self):
        ''' Instruction SHL_3 
            Groups:  
            0x436c09:	shl	rdx, 4
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436c09] = 'H'
        mem[0x00436c0a] = '\xc1'
        mem[0x00436c0b] = '\xe2'
        mem[0x00436c0c] = '\x04'
        cpu.ZF = False
        cpu.RDX = 0x1
        cpu.RIP = 0x436c09
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x436c09], 'H')
        self.assertEqual(mem[0x436c0a], '\xc1')
        self.assertEqual(mem[0x436c0b], '\xe2')
        self.assertEqual(mem[0x436c0c], '\x04')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4418573L)
        self.assertEqual(cpu.RDX, 16L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHL_4(self):
        ''' Instruction SHL_4 
            Groups:  
            0x406f07:	shl	rdx, 5
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406f08] = '\xc1'
        mem[0x00406f09] = '\xe2'
        mem[0x00406f0a] = '\x05'
        mem[0x00406f07] = 'H'
        cpu.ZF = False
        cpu.RDX = 0x0
        cpu.RIP = 0x406f07
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406f08], '\xc1')
        self.assertEqual(mem[0x406f09], '\xe2')
        self.assertEqual(mem[0x406f0a], '\x05')
        self.assertEqual(mem[0x406f07], 'H')
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222731L)
        self.assertEqual(cpu.RDX, 0L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHL_5(self):
        ''' Instruction SHL_5 
            Groups:  
            0x411b78:	shl	eax, cl
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411b78] = '\xd3'
        mem[0x00411b79] = '\xe0'
        cpu.CL = 0x43
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x411b78
        cpu.EAX = 0x1
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x411b78], '\xd3')
        self.assertEqual(mem[0x411b79], '\xe0')
        self.assertEqual(cpu.CL, 67L)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4266874L)
        self.assertEqual(cpu.EAX, 8L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHL_6(self):
        ''' Instruction SHL_6 
            Groups:  
            0x400aa3:	shl	eax, 3
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400aa3] = '\xc1'
        mem[0x00400aa4] = '\xe0'
        mem[0x00400aa5] = '\x03'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x400aa3
        cpu.EAX = 0xf
        cpu.PF = False
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400aa3], '\xc1')
        self.assertEqual(mem[0x400aa4], '\xe0')
        self.assertEqual(mem[0x400aa5], '\x03')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4197030L)
        self.assertEqual(cpu.EAX, 120L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHL_7(self):
        ''' Instruction SHL_7 
            Groups:  
            0x400aa3:	shl	eax, 3
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400aa3] = '\xc1'
        mem[0x00400aa4] = '\xe0'
        mem[0x00400aa5] = '\x03'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x400aa3
        cpu.EAX = 0x53
        cpu.PF = False
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400aa3], '\xc1')
        self.assertEqual(mem[0x400aa4], '\xe0')
        self.assertEqual(mem[0x400aa5], '\x03')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4197030L)
        self.assertEqual(cpu.EAX, 664L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHL_8(self):
        ''' Instruction SHL_8 
            Groups:  
            0x400aa3:	shl	eax, 3
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400aa3] = '\xc1'
        mem[0x00400aa4] = '\xe0'
        mem[0x00400aa5] = '\x03'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x400aa3
        cpu.EAX = 0xc8
        cpu.PF = False
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400aa3], '\xc1')
        self.assertEqual(mem[0x400aa4], '\xe0')
        self.assertEqual(mem[0x400aa5], '\x03')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4197030L)
        self.assertEqual(cpu.EAX, 1600L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHL_9(self):
        ''' Instruction SHL_9 
            Groups:  
            0x410ef6:	shl	rcx, 2
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, 'rwx')
        mem[0x00410ef8] = '\xe1'
        mem[0x00410ef9] = '\x02'
        mem[0x00410ef6] = 'H'
        mem[0x00410ef7] = '\xc1'
        cpu.RCX = 0x0
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x410ef6
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x410ef8], '\xe1')
        self.assertEqual(mem[0x410ef9], '\x02')
        self.assertEqual(mem[0x410ef6], 'H')
        self.assertEqual(mem[0x410ef7], '\xc1')
        self.assertEqual(cpu.RCX, 0L)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4263674L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHR_1(self):
        ''' Instruction SHR_1 
            Groups:  
            0x4117d4:	shr	eax, 4
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x004117d4] = '\xc1'
        mem[0x004117d5] = '\xe8'
        mem[0x004117d6] = '\x04'
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4117d4
        cpu.EAX = 0x30
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4117d4], '\xc1')
        self.assertEqual(mem[0x4117d5], '\xe8')
        self.assertEqual(mem[0x4117d6], '\x04')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4265943L)
        self.assertEqual(cpu.EAX, 3L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHR_10(self):
        ''' Instruction SHR_10 
            Groups:  
            0x4117ef:	shr	rsi, 0xf
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x004117f0] = '\xc1'
        mem[0x004117f1] = '\xee'
        mem[0x004117f2] = '\x0f'
        mem[0x004117ef] = 'H'
        cpu.RSI = 0x40
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4117ef
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4117f0], '\xc1')
        self.assertEqual(mem[0x4117f1], '\xee')
        self.assertEqual(mem[0x4117f2], '\x0f')
        self.assertEqual(mem[0x4117ef], 'H')
        self.assertEqual(cpu.RSI, 0L)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4265971L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHR_11(self):
        ''' Instruction SHR_11 
            Groups:  
            0x432294:	shr	rax, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432294] = 'H'
        mem[0x00432295] = '\xd1'
        mem[0x00432296] = '\xe8'
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x432294
        cpu.PF = True
        cpu.SF = False
        cpu.RAX = 0x44
        cpu.execute()
    
        self.assertEqual(mem[0x432294], 'H')
        self.assertEqual(mem[0x432295], '\xd1')
        self.assertEqual(mem[0x432296], '\xe8')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4399767L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 34L)

    def test_SHR_12(self):
        ''' Instruction SHR_12 
            Groups:  
            0x4322ad:	shr	rax, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322ad] = 'H'
        mem[0x004322ae] = '\xd1'
        mem[0x004322af] = '\xe8'
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4322ad
        cpu.PF = False
        cpu.SF = False
        cpu.RAX = 0x2
        cpu.execute()
    
        self.assertEqual(mem[0x4322ad], 'H')
        self.assertEqual(mem[0x4322ae], '\xd1')
        self.assertEqual(mem[0x4322af], '\xe8')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4399792L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 1L)

    def test_SHR_13(self):
        ''' Instruction SHR_13 
            Groups:  
            0x4322ad:	shr	rax, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322ad] = 'H'
        mem[0x004322ae] = '\xd1'
        mem[0x004322af] = '\xe8'
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4322ad
        cpu.PF = True
        cpu.SF = False
        cpu.RAX = 0x47
        cpu.execute()
    
        self.assertEqual(mem[0x4322ad], 'H')
        self.assertEqual(mem[0x4322ae], '\xd1')
        self.assertEqual(mem[0x4322af], '\xe8')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4399792L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 35L)

    def test_SHR_14(self):
        ''' Instruction SHR_14 
            Groups:  
            0x45f858:	shr	rdx, 5
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045f000, 0x1000, 'rwx')
        mem[0x0045f858] = 'H'
        mem[0x0045f859] = '\xc1'
        mem[0x0045f85a] = '\xea'
        mem[0x0045f85b] = '\x05'
        cpu.ZF = False
        cpu.RDX = 0x45
        cpu.RIP = 0x45f858
        cpu.CF = True
        cpu.PF = False
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x45f858], 'H')
        self.assertEqual(mem[0x45f859], '\xc1')
        self.assertEqual(mem[0x45f85a], '\xea')
        self.assertEqual(mem[0x45f85b], '\x05')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4585564L)
        self.assertEqual(cpu.RDX, 2L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHR_15(self):
        ''' Instruction SHR_15 
            Groups:  
            0x4117eb:	shr	rcx, 0xc
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x004117eb] = 'H'
        mem[0x004117ec] = '\xc1'
        mem[0x004117ed] = '\xe9'
        mem[0x004117ee] = '\x0c'
        cpu.RCX = 0x30
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4117eb
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4117eb], 'H')
        self.assertEqual(mem[0x4117ec], '\xc1')
        self.assertEqual(mem[0x4117ed], '\xe9')
        self.assertEqual(mem[0x4117ee], '\x0c')
        self.assertEqual(cpu.RCX, 0L)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4265967L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHR_16(self):
        ''' Instruction SHR_16 
            Groups:  
            0x432448:	shr	ebx, 0xc
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432448] = '\xc1'
        mem[0x00432449] = '\xeb'
        mem[0x0043244a] = '\x0c'
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x432448
        cpu.PF = False
        cpu.EBX = 0x1c0003f
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x432448], '\xc1')
        self.assertEqual(mem[0x432449], '\xeb')
        self.assertEqual(mem[0x43244a], '\x0c')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4400203L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EBX, 7168L)
        self.assertEqual(cpu.SF, False)

    def test_SHR_17(self):
        ''' Instruction SHR_17 
            Groups:  
            0x432294:	shr	rax, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432294] = 'H'
        mem[0x00432295] = '\xd1'
        mem[0x00432296] = '\xe8'
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x432294
        cpu.PF = False
        cpu.SF = True
        cpu.RAX = 0x67
        cpu.execute()
    
        self.assertEqual(mem[0x432294], 'H')
        self.assertEqual(mem[0x432295], '\xd1')
        self.assertEqual(mem[0x432296], '\xe8')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4399767L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 51L)

    def test_SHR_18(self):
        ''' Instruction SHR_18 
            Groups:  
            0x4322ad:	shr	rax, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322ad] = 'H'
        mem[0x004322ae] = '\xd1'
        mem[0x004322af] = '\xe8'
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4322ad
        cpu.PF = False
        cpu.SF = False
        cpu.RAX = 0x2
        cpu.execute()
    
        self.assertEqual(mem[0x4322ad], 'H')
        self.assertEqual(mem[0x4322ae], '\xd1')
        self.assertEqual(mem[0x4322af], '\xe8')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4399792L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 1L)

    def test_SHR_19(self):
        ''' Instruction SHR_19 
            Groups:  
            0x4322ad:	shr	rax, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322ad] = 'H'
        mem[0x004322ae] = '\xd1'
        mem[0x004322af] = '\xe8'
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4322ad
        cpu.PF = False
        cpu.SF = False
        cpu.RAX = 0x1
        cpu.execute()
    
        self.assertEqual(mem[0x4322ad], 'H')
        self.assertEqual(mem[0x4322ae], '\xd1')
        self.assertEqual(mem[0x4322af], '\xe8')
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4399792L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 0L)

    def test_SHR_2(self):
        ''' Instruction SHR_2 
            Groups:  
            0x4006a0:	shr	eax, 5
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006a0] = '\xc1'
        mem[0x004006a1] = '\xe8'
        mem[0x004006a2] = '\x05'
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4006a0
        cpu.EAX = 0x1c03c163
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006a0], '\xc1')
        self.assertEqual(mem[0x4006a1], '\xe8')
        self.assertEqual(mem[0x4006a2], '\x05')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196003L)
        self.assertEqual(cpu.EAX, 14687755L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHR_20(self):
        ''' Instruction SHR_20 
            Groups:  
            0x4322ad:	shr	rax, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004322ad] = 'H'
        mem[0x004322ae] = '\xd1'
        mem[0x004322af] = '\xe8'
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4322ad
        cpu.PF = True
        cpu.SF = False
        cpu.RAX = 0x56
        cpu.execute()
    
        self.assertEqual(mem[0x4322ad], 'H')
        self.assertEqual(mem[0x4322ae], '\xd1')
        self.assertEqual(mem[0x4322af], '\xe8')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4399792L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 43L)

    def test_SHR_21(self):
        ''' Instruction SHR_21 
            Groups:  
            0x432294:	shr	rax, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432294] = 'H'
        mem[0x00432295] = '\xd1'
        mem[0x00432296] = '\xe8'
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x432294
        cpu.PF = True
        cpu.SF = False
        cpu.RAX = 0x44
        cpu.execute()
    
        self.assertEqual(mem[0x432294], 'H')
        self.assertEqual(mem[0x432295], '\xd1')
        self.assertEqual(mem[0x432296], '\xe8')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4399767L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 34L)

    def test_SHR_3(self):
        ''' Instruction SHR_3 
            Groups:  
            0x4117e7:	shr	rax, 6
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x004117e8] = '\xc1'
        mem[0x004117e9] = '\xe8'
        mem[0x004117ea] = '\x06'
        mem[0x004117e7] = 'H'
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4117e7
        cpu.PF = True
        cpu.SF = False
        cpu.RAX = 0x650
        cpu.execute()
    
        self.assertEqual(mem[0x4117e8], '\xc1')
        self.assertEqual(mem[0x4117e9], '\xe8')
        self.assertEqual(mem[0x4117ea], '\x06')
        self.assertEqual(mem[0x4117e7], 'H')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4265963L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 25L)

    def test_SHR_4(self):
        ''' Instruction SHR_4 
            Groups:  
            0x4323d5:	shr	eax, 5
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004323d5] = '\xc1'
        mem[0x004323d6] = '\xe8'
        mem[0x004323d7] = '\x05'
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4323d5
        cpu.EAX = 0x1c03c163
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4323d5], '\xc1')
        self.assertEqual(mem[0x4323d6], '\xe8')
        self.assertEqual(mem[0x4323d7], '\x05')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4400088L)
        self.assertEqual(cpu.EAX, 14687755L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHR_5(self):
        ''' Instruction SHR_5 
            Groups:  
            0x4117eb:	shr	rcx, 0xc
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x004117eb] = 'H'
        mem[0x004117ec] = '\xc1'
        mem[0x004117ed] = '\xe9'
        mem[0x004117ee] = '\x0c'
        cpu.RCX = 0x4a0
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x4117eb
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4117eb], 'H')
        self.assertEqual(mem[0x4117ec], '\xc1')
        self.assertEqual(mem[0x4117ed], '\xe9')
        self.assertEqual(mem[0x4117ee], '\x0c')
        self.assertEqual(cpu.RCX, 0L)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4265967L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHR_6(self):
        ''' Instruction SHR_6 
            Groups:  
            0x411795:	shr	r12, 6
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411798] = '\x06'
        mem[0x00411795] = 'I'
        mem[0x00411796] = '\xc1'
        mem[0x00411797] = '\xec'
        cpu.R12 = 0x4a0
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x411795
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x411798], '\x06')
        self.assertEqual(mem[0x411795], 'I')
        self.assertEqual(mem[0x411796], '\xc1')
        self.assertEqual(mem[0x411797], '\xec')
        self.assertEqual(cpu.R12, 18L)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4265881L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHR_7(self):
        ''' Instruction SHR_7 
            Groups:  
            0x4117fa:	shr	rdx, 0x12
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x004117fa] = 'H'
        mem[0x004117fb] = '\xc1'
        mem[0x004117fc] = '\xea'
        mem[0x004117fd] = '\x12'
        cpu.ZF = False
        cpu.RDX = 0x20
        cpu.RIP = 0x4117fa
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4117fa], 'H')
        self.assertEqual(mem[0x4117fb], '\xc1')
        self.assertEqual(mem[0x4117fc], '\xea')
        self.assertEqual(mem[0x4117fd], '\x12')
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4265982L)
        self.assertEqual(cpu.RDX, 0L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHR_8(self):
        ''' Instruction SHR_8 
            Groups:  
            0x43234d:	shr	eax, 5
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x0043234d] = '\xc1'
        mem[0x0043234e] = '\xe8'
        mem[0x0043234f] = '\x05'
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x43234d
        cpu.EAX = 0x1c004121
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x43234d], '\xc1')
        self.assertEqual(mem[0x43234e], '\xe8')
        self.assertEqual(mem[0x43234f], '\x05')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4399952L)
        self.assertEqual(cpu.EAX, 14680585L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHR_9(self):
        ''' Instruction SHR_9 
            Groups:  
            0x4117d4:	shr	eax, 4
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x004117d4] = '\xc1'
        mem[0x004117d5] = '\xe8'
        mem[0x004117d6] = '\x04'
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4117d4
        cpu.EAX = 0x20
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4117d4], '\xc1')
        self.assertEqual(mem[0x4117d5], '\xe8')
        self.assertEqual(mem[0x4117d6], '\x04')
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4265943L)
        self.assertEqual(cpu.EAX, 2L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SUB_1(self):
        ''' Instruction SUB_1 
            Groups:  
            0x436b53:	sub	rcx, rax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436b53] = 'H'
        mem[0x00436b54] = ')'
        mem[0x00436b55] = '\xc1'
        cpu.PF = True
        cpu.RCX = 0x70000021
        cpu.RAX = 0x6ffffffd
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x436b53
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x436b53], 'H')
        self.assertEqual(mem[0x436b54], ')')
        self.assertEqual(mem[0x436b55], '\xc1')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RCX, 36L)
        self.assertEqual(cpu.RAX, 1879048189L)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4418390L)
        self.assertEqual(cpu.SF, False)

    def test_SUB_10(self):
        ''' Instruction SUB_10 
            Groups:  
            0x4377b9:	sub	rsp, 0x1028
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x004377b9] = 'H'
        mem[0x004377ba] = '\x81'
        mem[0x004377bb] = '\xec'
        mem[0x004377bc] = '('
        mem[0x004377bd] = '\x10'
        mem[0x004377be] = '\x00'
        mem[0x004377bf] = '\x00'
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RSP = 0x7fffffffdaf8
        cpu.CF = False
        cpu.RIP = 0x4377b9
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4377b9], 'H')
        self.assertEqual(mem[0x4377ba], '\x81')
        self.assertEqual(mem[0x4377bb], '\xec')
        self.assertEqual(mem[0x4377bc], '(')
        self.assertEqual(mem[0x4377bd], '\x10')
        self.assertEqual(mem[0x4377be], '\x00')
        self.assertEqual(mem[0x4377bf], '\x00')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488341712L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4421568L)
        self.assertEqual(cpu.SF, False)

    def test_SUB_11(self):
        ''' Instruction SUB_11 
            Groups:  
            0x432196:	sub	rdi, -0x80
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432198] = '\xef'
        mem[0x00432199] = '\x80'
        mem[0x00432196] = 'H'
        mem[0x00432197] = '\x83'
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RDI = 0x6bf3a0
        cpu.CF = True
        cpu.RIP = 0x432196
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x432198], '\xef')
        self.assertEqual(mem[0x432199], '\x80')
        self.assertEqual(mem[0x432196], 'H')
        self.assertEqual(mem[0x432197], '\x83')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RDI, 7074848L)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4399514L)
        self.assertEqual(cpu.SF, False)

    def test_SUB_12(self):
        ''' Instruction SUB_12 
            Groups:  
            0x436808:	sub	rax, 3
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436808] = 'H'
        mem[0x00436809] = '\x83'
        mem[0x0043680a] = '\xe8'
        mem[0x0043680b] = '\x03'
        cpu.PF = True
        cpu.RAX = 0xc
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x436808
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x436808], 'H')
        self.assertEqual(mem[0x436809], '\x83')
        self.assertEqual(mem[0x43680a], '\xe8')
        self.assertEqual(mem[0x43680b], '\x03')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 9L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4417548L)
        self.assertEqual(cpu.SF, False)

    def test_SUB_13(self):
        ''' Instruction SUB_13 
            Groups:  
            0x4321f3:	sub	rsp, 0x1020
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004321f3] = 'H'
        mem[0x004321f4] = '\x81'
        mem[0x004321f5] = '\xec'
        mem[0x004321f6] = ' '
        mem[0x004321f7] = '\x10'
        mem[0x004321f8] = '\x00'
        mem[0x004321f9] = '\x00'
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RSP = 0x7fffffffda10
        cpu.CF = False
        cpu.RIP = 0x4321f3
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4321f3], 'H')
        self.assertEqual(mem[0x4321f4], '\x81')
        self.assertEqual(mem[0x4321f5], '\xec')
        self.assertEqual(mem[0x4321f6], ' ')
        self.assertEqual(mem[0x4321f7], '\x10')
        self.assertEqual(mem[0x4321f8], '\x00')
        self.assertEqual(mem[0x4321f9], '\x00')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488341488L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4399610L)
        self.assertEqual(cpu.SF, False)

    def test_SUB_14(self):
        ''' Instruction SUB_14 
            Groups:  
            0x432409:	sub	eax, r11d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432409] = 'D'
        mem[0x0043240a] = ')'
        mem[0x0043240b] = '\xd8'
        cpu.EAX = 0x3
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.R11D = 0x3
        cpu.CF = False
        cpu.RIP = 0x432409
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x432409], 'D')
        self.assertEqual(mem[0x43240a], ')')
        self.assertEqual(mem[0x43240b], '\xd8')
        self.assertEqual(cpu.EAX, 0L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.R11D, 3L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4400140L)
        self.assertEqual(cpu.SF, False)

    def test_SUB_15(self):
        ''' Instruction SUB_15 
            Groups:  
            0x4012e9:	sub	r14, r15
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x004012e9] = 'M'
        mem[0x004012ea] = ')'
        mem[0x004012eb] = '\xfe'
        cpu.R14 = 0x6b5de8
        cpu.R15 = 0x6b5dd8
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4012e9
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4012e9], 'M')
        self.assertEqual(mem[0x4012ea], ')')
        self.assertEqual(mem[0x4012eb], '\xfe')
        self.assertEqual(cpu.R14, 16L)
        self.assertEqual(cpu.R15, 7036376L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4199148L)
        self.assertEqual(cpu.SF, False)

    def test_SUB_16(self):
        ''' Instruction SUB_16 
            Groups:  
            0x40060b:	sub	rsp, 0x1020
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040060b] = 'H'
        mem[0x0040060c] = '\x81'
        mem[0x0040060d] = '\xec'
        mem[0x0040060e] = ' '
        mem[0x0040060f] = '\x10'
        mem[0x00400610] = '\x00'
        mem[0x00400611] = '\x00'
        cpu.PF = True
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.RSP = 0x7fffffffdaa0
        cpu.CF = True
        cpu.RIP = 0x40060b
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x40060b], 'H')
        self.assertEqual(mem[0x40060c], '\x81')
        self.assertEqual(mem[0x40060d], '\xec')
        self.assertEqual(mem[0x40060e], ' ')
        self.assertEqual(mem[0x40060f], '\x10')
        self.assertEqual(mem[0x400610], '\x00')
        self.assertEqual(mem[0x400611], '\x00')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488341632L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195858L)
        self.assertEqual(cpu.SF, False)

    def test_SUB_17(self):
        ''' Instruction SUB_17 
            Groups:  
            0x406ddd:	sub	rsp, 0x1038
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406de0] = '8'
        mem[0x00406de1] = '\x10'
        mem[0x00406de2] = '\x00'
        mem[0x00406de3] = '\x00'
        mem[0x00406ddd] = 'H'
        mem[0x00406dde] = '\x81'
        mem[0x00406ddf] = '\xec'
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RSP = 0x7fffffffda68
        cpu.CF = False
        cpu.RIP = 0x406ddd
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406de0], '8')
        self.assertEqual(mem[0x406de1], '\x10')
        self.assertEqual(mem[0x406de2], '\x00')
        self.assertEqual(mem[0x406de3], '\x00')
        self.assertEqual(mem[0x406ddd], 'H')
        self.assertEqual(mem[0x406dde], '\x81')
        self.assertEqual(mem[0x406ddf], '\xec')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488341552L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222436L)
        self.assertEqual(cpu.SF, False)

    def test_SUB_18(self):
        ''' Instruction SUB_18 
            Groups:  
            0x4324dd:	sub	rsp, 0x1048
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004324e0] = 'H'
        mem[0x004324e1] = '\x10'
        mem[0x004324e2] = '\x00'
        mem[0x004324e3] = '\x00'
        mem[0x004324dd] = 'H'
        mem[0x004324de] = '\x81'
        mem[0x004324df] = '\xec'
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RSP = 0x7fffffffda68
        cpu.CF = False
        cpu.RIP = 0x4324dd
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4324e0], 'H')
        self.assertEqual(mem[0x4324e1], '\x10')
        self.assertEqual(mem[0x4324e2], '\x00')
        self.assertEqual(mem[0x4324e3], '\x00')
        self.assertEqual(mem[0x4324dd], 'H')
        self.assertEqual(mem[0x4324de], '\x81')
        self.assertEqual(mem[0x4324df], '\xec')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488341536L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4400356L)
        self.assertEqual(cpu.SF, False)

    def test_SUB_19(self):
        ''' Instruction SUB_19 
            Groups:  
            0x432172:	sub	rax, rdi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432172] = 'H'
        mem[0x00432173] = ')'
        mem[0x00432174] = '\xf8'
        cpu.PF = False
        cpu.RAX = 0x6bf210
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RDI = 0x6bf220
        cpu.CF = False
        cpu.RIP = 0x432172
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x432172], 'H')
        self.assertEqual(mem[0x432173], ')')
        self.assertEqual(mem[0x432174], '\xf8')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 18446744073709551600L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RDI, 7074336L)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4399477L)
        self.assertEqual(cpu.SF, True)

    def test_SUB_2(self):
        ''' Instruction SUB_2 
            Groups:  
            0x40db5b:	sub	rsp, 0x1020
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem[0x0040db60] = '\x00'
        mem[0x0040db61] = '\x00'
        mem[0x0040db5b] = 'H'
        mem[0x0040db5c] = '\x81'
        mem[0x0040db5d] = '\xec'
        mem[0x0040db5e] = ' '
        mem[0x0040db5f] = '\x10'
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RSP = 0x7fffffffdab0
        cpu.CF = True
        cpu.RIP = 0x40db5b
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x40db60], '\x00')
        self.assertEqual(mem[0x40db61], '\x00')
        self.assertEqual(mem[0x40db5b], 'H')
        self.assertEqual(mem[0x40db5c], '\x81')
        self.assertEqual(mem[0x40db5d], '\xec')
        self.assertEqual(mem[0x40db5e], ' ')
        self.assertEqual(mem[0x40db5f], '\x10')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488341648L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4250466L)
        self.assertEqual(cpu.SF, False)

    def test_SUB_20(self):
        ''' Instruction SUB_20 
            Groups:  
            0x432196:	sub	rdi, -0x80
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432198] = '\xef'
        mem[0x00432199] = '\x80'
        mem[0x00432196] = 'H'
        mem[0x00432197] = '\x83'
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RDI = 0x6bf220
        cpu.CF = True
        cpu.RIP = 0x432196
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x432198], '\xef')
        self.assertEqual(mem[0x432199], '\x80')
        self.assertEqual(mem[0x432196], 'H')
        self.assertEqual(mem[0x432197], '\x83')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RDI, 7074464L)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4399514L)
        self.assertEqual(cpu.SF, False)

    def test_SUB_21(self):
        ''' Instruction SUB_21 
            Groups:  
            0x413487:	sub	rsp, 0x1020
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem[0x00413487] = 'H'
        mem[0x00413488] = '\x81'
        mem[0x00413489] = '\xec'
        mem[0x0041348a] = ' '
        mem[0x0041348b] = '\x10'
        mem[0x0041348c] = '\x00'
        mem[0x0041348d] = '\x00'
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RSP = 0x7fffffffda50
        cpu.CF = False
        cpu.RIP = 0x413487
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x413487], 'H')
        self.assertEqual(mem[0x413488], '\x81')
        self.assertEqual(mem[0x413489], '\xec')
        self.assertEqual(mem[0x41348a], ' ')
        self.assertEqual(mem[0x41348b], '\x10')
        self.assertEqual(mem[0x41348c], '\x00')
        self.assertEqual(mem[0x41348d], '\x00')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488341552L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4273294L)
        self.assertEqual(cpu.SF, False)

    def test_SUB_3(self):
        ''' Instruction SUB_3 
            Groups:  
            0x436808:	sub	rax, 3
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436808] = 'H'
        mem[0x00436809] = '\x83'
        mem[0x0043680a] = '\xe8'
        mem[0x0043680b] = '\x03'
        cpu.PF = True
        cpu.RAX = 0x9
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x436808
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x436808], 'H')
        self.assertEqual(mem[0x436809], '\x83')
        self.assertEqual(mem[0x43680a], '\xe8')
        self.assertEqual(mem[0x43680b], '\x03')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 6L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4417548L)
        self.assertEqual(cpu.SF, False)

    def test_SUB_4(self):
        ''' Instruction SUB_4 
            Groups:  
            0x400f7d:	sub	rsp, 0x1048
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400f80] = 'H'
        mem[0x00400f81] = '\x10'
        mem[0x00400f82] = '\x00'
        mem[0x00400f83] = '\x00'
        mem[0x00400f7d] = 'H'
        mem[0x00400f7e] = '\x81'
        mem[0x00400f7f] = '\xec'
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RSP = 0x7fffffffdae8
        cpu.CF = False
        cpu.RIP = 0x400f7d
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400f80], 'H')
        self.assertEqual(mem[0x400f81], '\x10')
        self.assertEqual(mem[0x400f82], '\x00')
        self.assertEqual(mem[0x400f83], '\x00')
        self.assertEqual(mem[0x400f7d], 'H')
        self.assertEqual(mem[0x400f7e], '\x81')
        self.assertEqual(mem[0x400f7f], '\xec')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488341664L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4198276L)
        self.assertEqual(cpu.SF, False)

    def test_SUB_5(self):
        ''' Instruction SUB_5 
            Groups:  
            0x411ffc:	sub	rax, r13
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411ffc] = 'L'
        mem[0x00411ffd] = ')'
        mem[0x00411ffe] = '\xe8'
        cpu.PF = False
        cpu.R13 = 0x4a0
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RAX = 0x21e00
        cpu.CF = False
        cpu.RIP = 0x411ffc
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x411ffc], 'L')
        self.assertEqual(mem[0x411ffd], ')')
        self.assertEqual(mem[0x411ffe], '\xe8')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.R13, 1184L)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RAX, 137568L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4268031L)
        self.assertEqual(cpu.SF, False)

    def test_SUB_6(self):
        ''' Instruction SUB_6 
            Groups:  
            0x4376d2:	sub	ecx, 0x30
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x004376d2] = '\x83'
        mem[0x004376d3] = '\xe9'
        mem[0x004376d4] = '0'
        cpu.PF = False
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x34
        cpu.CF = True
        cpu.RIP = 0x4376d2
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4376d2], '\x83')
        self.assertEqual(mem[0x4376d3], '\xe9')
        self.assertEqual(mem[0x4376d4], '0')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 4L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4421333L)
        self.assertEqual(cpu.SF, False)

    def test_SUB_7(self):
        ''' Instruction SUB_7 
            Groups:  
            0x411657:	sub	rsp, 0x1088
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411657] = 'H'
        mem[0x00411658] = '\x81'
        mem[0x00411659] = '\xec'
        mem[0x0041165a] = '\x88'
        mem[0x0041165b] = '\x10'
        mem[0x0041165c] = '\x00'
        mem[0x0041165d] = '\x00'
        cpu.PF = True
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.RSP = 0x7fffffffd9d8
        cpu.CF = True
        cpu.RIP = 0x411657
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x411657], 'H')
        self.assertEqual(mem[0x411658], '\x81')
        self.assertEqual(mem[0x411659], '\xec')
        self.assertEqual(mem[0x41165a], '\x88')
        self.assertEqual(mem[0x41165b], '\x10')
        self.assertEqual(mem[0x41165c], '\x00')
        self.assertEqual(mem[0x41165d], '\x00')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488341328L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4265566L)
        self.assertEqual(cpu.SF, False)

    def test_SUB_8(self):
        ''' Instruction SUB_8 
            Groups:  
            0x43552c:	sub	rsp, 0x1020
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00435000, 0x1000, 'rwx')
        mem[0x0043552c] = 'H'
        mem[0x0043552d] = '\x81'
        mem[0x0043552e] = '\xec'
        mem[0x0043552f] = ' '
        mem[0x00435530] = '\x10'
        mem[0x00435531] = '\x00'
        mem[0x00435532] = '\x00'
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RSP = 0x7fffffffdad0
        cpu.CF = False
        cpu.RIP = 0x43552c
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x43552c], 'H')
        self.assertEqual(mem[0x43552d], '\x81')
        self.assertEqual(mem[0x43552e], '\xec')
        self.assertEqual(mem[0x43552f], ' ')
        self.assertEqual(mem[0x435530], '\x10')
        self.assertEqual(mem[0x435531], '\x00')
        self.assertEqual(mem[0x435532], '\x00')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488341680L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4412723L)
        self.assertEqual(cpu.SF, False)

    def test_SUB_9(self):
        ''' Instruction SUB_9 
            Groups:  
            0x415d84:	sub	rsp, 0x1020
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00415000, 0x1000, 'rwx')
        mem[0x00415d84] = 'H'
        mem[0x00415d85] = '\x81'
        mem[0x00415d86] = '\xec'
        mem[0x00415d87] = ' '
        mem[0x00415d88] = '\x10'
        mem[0x00415d89] = '\x00'
        mem[0x00415d8a] = '\x00'
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RSP = 0x7fffffffc930
        cpu.CF = False
        cpu.RIP = 0x415d84
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x415d84], 'H')
        self.assertEqual(mem[0x415d85], '\x81')
        self.assertEqual(mem[0x415d86], '\xec')
        self.assertEqual(mem[0x415d87], ' ')
        self.assertEqual(mem[0x415d88], '\x10')
        self.assertEqual(mem[0x415d89], '\x00')
        self.assertEqual(mem[0x415d8a], '\x00')
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488337168L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4283787L)
        self.assertEqual(cpu.SF, False)

    def test_TEST_1(self):
        ''' Instruction TEST_1 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e88] = 'H'
        mem[0x00406e89] = '\x85'
        mem[0x00406e8a] = '\xdb'
        cpu.RBX = 0x7fffffffe0f8
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406e88
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406e88], 'H')
        self.assertEqual(mem[0x406e89], '\x85')
        self.assertEqual(mem[0x406e8a], '\xdb')
        self.assertEqual(cpu.RBX, 140737488347384L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222603L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_TEST_10(self):
        ''' Instruction TEST_10 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e88] = 'H'
        mem[0x00406e89] = '\x85'
        mem[0x00406e8a] = '\xdb'
        cpu.RBX = 0x7fffffffe152
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406e88
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406e88], 'H')
        self.assertEqual(mem[0x406e89], '\x85')
        self.assertEqual(mem[0x406e8a], '\xdb')
        self.assertEqual(cpu.RBX, 140737488347474L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222603L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_TEST_11(self):
        ''' Instruction TEST_11 
            Groups:  
            0x411bdb:	test	esi, esi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x00411bdb] = '\x85'
        mem[0x00411bdc] = '\xf6'
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x411bdb
        cpu.PF = True
        cpu.SF = False
        cpu.ESI = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x411bdb], '\x85')
        self.assertEqual(mem[0x411bdc], '\xf6')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4266973L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ESI, 0L)

    def test_TEST_12(self):
        ''' Instruction TEST_12 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e88] = 'H'
        mem[0x00406e89] = '\x85'
        mem[0x00406e8a] = '\xdb'
        cpu.RBX = 0x7fffffffecf7
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406e88
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406e88], 'H')
        self.assertEqual(mem[0x406e89], '\x85')
        self.assertEqual(mem[0x406e8a], '\xdb')
        self.assertEqual(cpu.RBX, 140737488350455L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222603L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_TEST_13(self):
        ''' Instruction TEST_13 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e88] = 'H'
        mem[0x00406e89] = '\x85'
        mem[0x00406e8a] = '\xdb'
        cpu.RBX = 0x7fffffffec9d
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406e88
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406e88], 'H')
        self.assertEqual(mem[0x406e89], '\x85')
        self.assertEqual(mem[0x406e8a], '\xdb')
        self.assertEqual(cpu.RBX, 140737488350365L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222603L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_TEST_14(self):
        ''' Instruction TEST_14 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e88] = 'H'
        mem[0x00406e89] = '\x85'
        mem[0x00406e8a] = '\xdb'
        cpu.RBX = 0x7fffffffebae
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406e88
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406e88], 'H')
        self.assertEqual(mem[0x406e89], '\x85')
        self.assertEqual(mem[0x406e8a], '\xdb')
        self.assertEqual(cpu.RBX, 140737488350126L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222603L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_TEST_15(self):
        ''' Instruction TEST_15 
            Groups:  
            0x406e05:	test	r12, r12
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e05] = 'M'
        mem[0x00406e06] = '\x85'
        mem[0x00406e07] = '\xe4'
        cpu.R12 = 0x7fffffffdc28
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406e05
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406e05], 'M')
        self.assertEqual(mem[0x406e06], '\x85')
        self.assertEqual(mem[0x406e07], '\xe4')
        self.assertEqual(cpu.R12, 140737488346152L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222472L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_16(self):
        ''' Instruction TEST_16 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e88] = 'H'
        mem[0x00406e89] = '\x85'
        mem[0x00406e8a] = '\xdb'
        cpu.RBX = 0x7fffffffeaf6
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406e88
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406e88], 'H')
        self.assertEqual(mem[0x406e89], '\x85')
        self.assertEqual(mem[0x406e8a], '\xdb')
        self.assertEqual(cpu.RBX, 140737488349942L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222603L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_17(self):
        ''' Instruction TEST_17 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e88] = 'H'
        mem[0x00406e89] = '\x85'
        mem[0x00406e8a] = '\xdb'
        cpu.RBX = 0x7fffffffe206
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406e88
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406e88], 'H')
        self.assertEqual(mem[0x406e89], '\x85')
        self.assertEqual(mem[0x406e8a], '\xdb')
        self.assertEqual(cpu.RBX, 140737488347654L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222603L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_18(self):
        ''' Instruction TEST_18 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e88] = 'H'
        mem[0x00406e89] = '\x85'
        mem[0x00406e8a] = '\xdb'
        cpu.RBX = 0x7fffffffedcc
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406e88
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406e88], 'H')
        self.assertEqual(mem[0x406e89], '\x85')
        self.assertEqual(mem[0x406e8a], '\xdb')
        self.assertEqual(cpu.RBX, 140737488350668L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222603L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_19(self):
        ''' Instruction TEST_19 
            Groups:  
            0x414710:	test	rbx, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x00414710] = 'H'
        mem[0x00414711] = '\x85'
        mem[0x00414712] = '\xdb'
        cpu.RBX = 0x7fffffffe0f8
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x414710
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x414710], 'H')
        self.assertEqual(mem[0x414711], '\x85')
        self.assertEqual(mem[0x414712], '\xdb')
        self.assertEqual(cpu.RBX, 140737488347384L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4278035L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_TEST_2(self):
        ''' Instruction TEST_2 
            Groups:  
            0x414710:	test	rbx, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x00414710] = 'H'
        mem[0x00414711] = '\x85'
        mem[0x00414712] = '\xdb'
        cpu.RBX = 0x7fffffffe152
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x414710
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x414710], 'H')
        self.assertEqual(mem[0x414711], '\x85')
        self.assertEqual(mem[0x414712], '\xdb')
        self.assertEqual(cpu.RBX, 140737488347474L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4278035L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_TEST_20(self):
        ''' Instruction TEST_20 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e88] = 'H'
        mem[0x00406e89] = '\x85'
        mem[0x00406e8a] = '\xdb'
        cpu.RBX = 0x7fffffffeaa4
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406e88
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406e88], 'H')
        self.assertEqual(mem[0x406e89], '\x85')
        self.assertEqual(mem[0x406e8a], '\xdb')
        self.assertEqual(cpu.RBX, 140737488349860L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222603L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_TEST_21(self):
        ''' Instruction TEST_21 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e88] = 'H'
        mem[0x00406e89] = '\x85'
        mem[0x00406e8a] = '\xdb'
        cpu.RBX = 0x7fffffffeaa4
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406e88
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406e88], 'H')
        self.assertEqual(mem[0x406e89], '\x85')
        self.assertEqual(mem[0x406e8a], '\xdb')
        self.assertEqual(cpu.RBX, 140737488349860L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222603L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_TEST_3(self):
        ''' Instruction TEST_3 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e88] = 'H'
        mem[0x00406e89] = '\x85'
        mem[0x00406e8a] = '\xdb'
        cpu.RBX = 0x7fffffffef18
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406e88
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406e88], 'H')
        self.assertEqual(mem[0x406e89], '\x85')
        self.assertEqual(mem[0x406e8a], '\xdb')
        self.assertEqual(cpu.RBX, 140737488351000L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222603L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_4(self):
        ''' Instruction TEST_4 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e88] = 'H'
        mem[0x00406e89] = '\x85'
        mem[0x00406e8a] = '\xdb'
        cpu.RBX = 0x7fffffffee51
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406e88
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406e88], 'H')
        self.assertEqual(mem[0x406e89], '\x85')
        self.assertEqual(mem[0x406e8a], '\xdb')
        self.assertEqual(cpu.RBX, 140737488350801L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222603L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_TEST_5(self):
        ''' Instruction TEST_5 
            Groups:  
            0x475241:	test	rdi, rdi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00475000, 0x1000, 'rwx')
        mem[0x00475241] = 'H'
        mem[0x00475242] = '\x85'
        mem[0x00475243] = '\xff'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x475241
        cpu.PF = False
        cpu.RDI = 0x0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x475241], 'H')
        self.assertEqual(mem[0x475242], '\x85')
        self.assertEqual(mem[0x475243], '\xff')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4674116L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RDI, 0L)
        self.assertEqual(cpu.SF, False)

    def test_TEST_6(self):
        ''' Instruction TEST_6 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e88] = 'H'
        mem[0x00406e89] = '\x85'
        mem[0x00406e8a] = '\xdb'
        cpu.RBX = 0x7fffffffe16a
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406e88
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406e88], 'H')
        self.assertEqual(mem[0x406e89], '\x85')
        self.assertEqual(mem[0x406e8a], '\xdb')
        self.assertEqual(cpu.RBX, 140737488347498L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222603L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_7(self):
        ''' Instruction TEST_7 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406e88] = 'H'
        mem[0x00406e89] = '\x85'
        mem[0x00406e8a] = '\xdb'
        cpu.RBX = 0x7fffffffec47
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406e88
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x406e88], 'H')
        self.assertEqual(mem[0x406e89], '\x85')
        self.assertEqual(mem[0x406e8a], '\xdb')
        self.assertEqual(cpu.RBX, 140737488350279L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222603L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_8(self):
        ''' Instruction TEST_8 
            Groups:  
            0x436d8b:	test	al, 2
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436d8b] = '\xa8'
        mem[0x00436d8c] = '\x02'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x436d8b
        cpu.AL = 0xa
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x436d8b], '\xa8')
        self.assertEqual(mem[0x436d8c], '\x02')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4418957L)
        self.assertEqual(cpu.AL, 10L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_TEST_9(self):
        ''' Instruction TEST_9 
            Groups:  
            0x40dbaa:	test	eax, eax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem[0x0040dbaa] = '\x85'
        mem[0x0040dbab] = '\xc0'
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40dbaa
        cpu.EAX = 0x0
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40dbaa], '\x85')
        self.assertEqual(mem[0x40dbab], '\xc0')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4250540L)
        self.assertEqual(cpu.EAX, 0L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_VMOVD_1(self):
        ''' Instruction VMOVD_1 
            Groups: avx 
            0x432044:	vmovd	xmm1, esi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432044] = '\xc5'
        mem[0x00432045] = '\xf9'
        mem[0x00432046] = 'n'
        mem[0x00432047] = '\xce'
        cpu.XMM1 = 0x0
        cpu.RIP = 0x432044
        cpu.ESI = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x432044], '\xc5')
        self.assertEqual(mem[0x432045], '\xf9')
        self.assertEqual(mem[0x432046], 'n')
        self.assertEqual(mem[0x432047], '\xce')
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.ESI, 0L)
        self.assertEqual(cpu.RIP, 4399176L)

    def test_VPSHUFB_1(self):
        ''' Instruction VPSHUFB_1 
            Groups: avx 
            0x43204f:	vpshufb	xmm0, xmm1, xmm0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432050] = '\xe2'
        mem[0x00432051] = 'q'
        mem[0x00432052] = '\x00'
        mem[0x00432053] = '\xc0'
        mem[0x0043204f] = '\xc4'
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.RIP = 0x43204f
        cpu.execute()
    
        self.assertEqual(mem[0x432050], '\xe2')
        self.assertEqual(mem[0x432051], 'q')
        self.assertEqual(mem[0x432052], '\x00')
        self.assertEqual(mem[0x432053], '\xc0')
        self.assertEqual(mem[0x43204f], '\xc4')
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.RIP, 4399188L)

    def test_VPXOR_1(self):
        ''' Instruction VPXOR_1 
            Groups: avx, novlx 
            0x432040:	vpxor	xmm0, xmm0, xmm0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432040] = '\xc5'
        mem[0x00432041] = '\xf9'
        mem[0x00432042] = '\xef'
        mem[0x00432043] = '\xc0'
        cpu.XMM0 = 0x0
        cpu.RIP = 0x432040
        cpu.execute()
    
        self.assertEqual(mem[0x432040], '\xc5')
        self.assertEqual(mem[0x432041], '\xf9')
        self.assertEqual(mem[0x432042], '\xef')
        self.assertEqual(mem[0x432043], '\xc0')
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.RIP, 4399172L)

    def test_VZEROUPPER_1(self):
        ''' Instruction VZEROUPPER_1 
            Groups: avx 
            0x4321b9:	vzeroupper	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x004321b9] = '\xc5'
        mem[0x004321ba] = '\xf8'
        mem[0x004321bb] = 'w'
        cpu.RIP = 0x4321b9
        cpu.execute()
    
        self.assertEqual(mem[0x4321b9], '\xc5')
        self.assertEqual(mem[0x4321ba], '\xf8')
        self.assertEqual(mem[0x4321bb], 'w')
        self.assertEqual(cpu.RIP, 4399548L)

    def test_XGETBV_1(self):
        ''' Instruction XGETBV_1 
            Groups:  
            0x43790e:	xgetbv	
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x00437910] = '\xd0'
        mem[0x0043790e] = '\x0f'
        mem[0x0043790f] = '\x01'
        cpu.EAX = 0x0
        cpu.EDX = 0x0
        cpu.RIP = 0x43790e
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x437910], '\xd0')
        self.assertEqual(mem[0x43790e], '\x0f')
        self.assertEqual(mem[0x43790f], '\x01')
        self.assertEqual(cpu.EAX, 7L)
        self.assertEqual(cpu.EDX, 0L)
        self.assertEqual(cpu.RIP, 4421905L)
        self.assertEqual(cpu.ECX, 0L)

    def test_XOR_1(self):
        ''' Instruction XOR_1 
            Groups:  
            0x400a6e:	xor	eax, eax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a6e] = '1'
        mem[0x00400a6f] = '\xc0'
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400a6e
        cpu.EAX = 0x46b9f700
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400a6e], '1')
        self.assertEqual(mem[0x400a6f], '\xc0')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196976L)
        self.assertEqual(cpu.EAX, 0L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_10(self):
        ''' Instruction XOR_10 
            Groups:  
            0x400ade:	xor	edx, eax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400ade] = '1'
        mem[0x00400adf] = '\xc2'
        cpu.EAX = 0xc8
        cpu.EDX = 0x53
        cpu.PF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x400ade
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400ade], '1')
        self.assertEqual(mem[0x400adf], '\xc2')
        self.assertEqual(cpu.EAX, 200L)
        self.assertEqual(cpu.EDX, 155L)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4197088L)
        self.assertEqual(cpu.SF, False)

    def test_XOR_11(self):
        ''' Instruction XOR_11 
            Groups:  
            0x400d82:	xor	esi, esi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400d82] = '1'
        mem[0x00400d83] = '\xf6'
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400d82
        cpu.PF = True
        cpu.SF = False
        cpu.ESI = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400d82], '1')
        self.assertEqual(mem[0x400d83], '\xf6')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4197764L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ESI, 0L)

    def test_XOR_12(self):
        ''' Instruction XOR_12 
            Groups:  
            0x406400:	xor	esi, esi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x00406400] = '1'
        mem[0x00406401] = '\xf6'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406400
        cpu.PF = False
        cpu.SF = False
        cpu.ESI = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x406400], '1')
        self.assertEqual(mem[0x406401], '\xf6')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4219906L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ESI, 0L)

    def test_XOR_13(self):
        ''' Instruction XOR_13 
            Groups:  
            0x45c5b2:	xor	eax, eax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045c000, 0x1000, 'rwx')
        mem[0x0045c5b2] = '1'
        mem[0x0045c5b3] = '\xc0'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x45c5b2
        cpu.EAX = 0x6be000
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x45c5b2], '1')
        self.assertEqual(mem[0x45c5b3], '\xc0')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4572596L)
        self.assertEqual(cpu.EAX, 0L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_14(self):
        ''' Instruction XOR_14 
            Groups:  
            0x410ee2:	xor	ecx, ecx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, 'rwx')
        mem[0x00410ee2] = '1'
        mem[0x00410ee3] = '\xc9'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x410ee2
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 0x21e41
        cpu.execute()
    
        self.assertEqual(mem[0x410ee2], '1')
        self.assertEqual(mem[0x410ee3], '\xc9')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4263652L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 0L)

    def test_XOR_15(self):
        ''' Instruction XOR_15 
            Groups:  
            0x46407b:	xor	esi, esi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00464000, 0x1000, 'rwx')
        mem[0x0046407b] = '1'
        mem[0x0046407c] = '\xf6'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x46407b
        cpu.PF = True
        cpu.SF = False
        cpu.ESI = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x46407b], '1')
        self.assertEqual(mem[0x46407c], '\xf6')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4604029L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ESI, 0L)

    def test_XOR_16(self):
        ''' Instruction XOR_16 
            Groups:  
            0x434228:	xor	edi, edi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x00434228] = '1'
        mem[0x00434229] = '\xff'
        cpu.OF = False
        cpu.ZF = True
        cpu.EDI = 0x11c0
        cpu.CF = False
        cpu.RIP = 0x434228
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x434228], '1')
        self.assertEqual(mem[0x434229], '\xff')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.EDI, 0L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4407850L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_17(self):
        ''' Instruction XOR_17 
            Groups:  
            0x400ade:	xor	edx, eax
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400ade] = '1'
        mem[0x00400adf] = '\xc2'
        cpu.EAX = 0xfb
        cpu.EDX = 0x23
        cpu.PF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x400ade
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400ade], '1')
        self.assertEqual(mem[0x400adf], '\xc2')
        self.assertEqual(cpu.EAX, 251L)
        self.assertEqual(cpu.EDX, 216L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4197088L)
        self.assertEqual(cpu.SF, False)

    def test_XOR_18(self):
        ''' Instruction XOR_18 
            Groups:  
            0x400d47:	xor	esi, esi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400d48] = '\xf6'
        mem[0x00400d47] = '1'
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400d47
        cpu.PF = True
        cpu.SF = False
        cpu.ESI = 0x2a
        cpu.execute()
    
        self.assertEqual(mem[0x400d48], '\xf6')
        self.assertEqual(mem[0x400d47], '1')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4197705L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ESI, 0L)

    def test_XOR_19(self):
        ''' Instruction XOR_19 
            Groups:  
            0x436890:	xor	esi, dword ptr [rdi + 8]
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x7fffffffdee8] = '\xe8'
        mem[0x7fffffffdee9] = '\x03'
        mem[0x7fffffffdeea] = '\x00'
        mem[0x7fffffffdeeb] = '\x00'
        mem[0x00436890] = '3'
        mem[0x00436891] = 'w'
        mem[0x00436892] = '\x08'
        cpu.PF = True
        cpu.ESI = 0x0
        cpu.OF = False
        cpu.ZF = False
        cpu.RDI = 0x7fffffffdee0
        cpu.CF = True
        cpu.RIP = 0x436890
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x7fffffffdee8], '\xe8')
        self.assertEqual(mem[0x7fffffffdee9], '\x03')
        self.assertEqual(mem[0x7fffffffdeea], '\x00')
        self.assertEqual(mem[0x7fffffffdeeb], '\x00')
        self.assertEqual(mem[0x436890], '3')
        self.assertEqual(mem[0x436891], 'w')
        self.assertEqual(mem[0x436892], '\x08')
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.ESI, 1000L)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RDI, 140737488346848L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4417683L)
        self.assertEqual(cpu.SF, False)

    def test_XOR_2(self):
        ''' Instruction XOR_2 
            Groups:  
            0x432280:	xor	r8d, r8d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432280] = 'E'
        mem[0x00432281] = '1'
        mem[0x00432282] = '\xc0'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x432280
        cpu.R8D = 0x0
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x432280], 'E')
        self.assertEqual(mem[0x432281], '1')
        self.assertEqual(mem[0x432282], '\xc0')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4399747L)
        self.assertEqual(cpu.R8D, 0L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_20(self):
        ''' Instruction XOR_20 
            Groups:  
            0x432280:	xor	r8d, r8d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432280] = 'E'
        mem[0x00432281] = '1'
        mem[0x00432282] = '\xc0'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x432280
        cpu.R8D = 0x0
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x432280], 'E')
        self.assertEqual(mem[0x432281], '1')
        self.assertEqual(mem[0x432282], '\xc0')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4399747L)
        self.assertEqual(cpu.R8D, 0L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_21(self):
        ''' Instruction XOR_21 
            Groups:  
            0x41426b:	xor	esi, esi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x0041426b] = '1'
        mem[0x0041426c] = '\xf6'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x41426b
        cpu.PF = False
        cpu.SF = False
        cpu.ESI = 0x6bf6a0
        cpu.execute()
    
        self.assertEqual(mem[0x41426b], '1')
        self.assertEqual(mem[0x41426c], '\xf6')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4276845L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ESI, 0L)

    def test_XOR_3(self):
        ''' Instruction XOR_3 
            Groups:  
            0x463f65:	xor	r10d, r10d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00463000, 0x1000, 'rwx')
        mem[0x00463f65] = 'E'
        mem[0x00463f66] = '1'
        mem[0x00463f67] = '\xd2'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x463f65
        cpu.R10D = 0x21
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x463f65], 'E')
        self.assertEqual(mem[0x463f66], '1')
        self.assertEqual(mem[0x463f67], '\xd2')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4603752L)
        self.assertEqual(cpu.R10D, 0L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_4(self):
        ''' Instruction XOR_4 
            Groups:  
            0x400d80:	xor	edi, edi
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400d80] = '1'
        mem[0x00400d81] = '\xff'
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0x2
        cpu.CF = False
        cpu.RIP = 0x400d80
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400d80], '1')
        self.assertEqual(mem[0x400d81], '\xff')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.EDI, 0L)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4197762L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_5(self):
        ''' Instruction XOR_5 
            Groups:  
            0x436a30:	xor	r9d, r9d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436a30] = 'E'
        mem[0x00436a31] = '1'
        mem[0x00436a32] = '\xc9'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x436a30
        cpu.SF = False
        cpu.PF = True
        cpu.R9D = 0x7463656a
        cpu.execute()
    
        self.assertEqual(mem[0x436a30], 'E')
        self.assertEqual(mem[0x436a31], '1')
        self.assertEqual(mem[0x436a32], '\xc9')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4418099L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.R9D, 0L)
        self.assertEqual(cpu.SF, False)

    def test_XOR_6(self):
        ''' Instruction XOR_6 
            Groups:  
            0x40dba7:	xor	r12d, r12d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem[0x0040dba8] = '1'
        mem[0x0040dba9] = '\xe4'
        mem[0x0040dba7] = 'E'
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40dba7
        cpu.PF = True
        cpu.R12D = 0x0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40dba8], '1')
        self.assertEqual(mem[0x40dba9], '\xe4')
        self.assertEqual(mem[0x40dba7], 'E')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4250538L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.R12D, 0L)
        self.assertEqual(cpu.SF, False)

    def test_XOR_7(self):
        ''' Instruction XOR_7 
            Groups:  
            0x432280:	xor	r8d, r8d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x00432280] = 'E'
        mem[0x00432281] = '1'
        mem[0x00432282] = '\xc0'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x432280
        cpu.R8D = 0x0
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x432280], 'E')
        self.assertEqual(mem[0x432281], '1')
        self.assertEqual(mem[0x432282], '\xc0')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4399747L)
        self.assertEqual(cpu.R8D, 0L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_8(self):
        ''' Instruction XOR_8 
            Groups:  
            0x436a36:	xor	ecx, ecx
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x00436a36] = '1'
        mem[0x00436a37] = '\xc9'
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x436a36
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 0xd05
        cpu.execute()
    
        self.assertEqual(mem[0x436a36], '1')
        self.assertEqual(mem[0x436a37], '\xc9')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4418104L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 0L)

    def test_XOR_9(self):
        ''' Instruction XOR_9 
            Groups:  
            0x400cfb:	xor	al, al
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400cfb] = '0'
        mem[0x00400cfc] = '\xc0'
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x400cfb
        cpu.AL = 0xf
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400cfb], '0')
        self.assertEqual(mem[0x400cfc], '\xc0')
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4197629L)
        self.assertEqual(cpu.AL, 0L)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_ADD_1_symbolic(self):
        ''' Instruction ADD_1 
            Groups:  
            0x411be3:	add	edi, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411be3] = '\x83'
        mem[0x411be4] = '\xc7'
        mem[0x411be5] = '\x01'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411be3
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411be3, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x411be4, 8)== ord('\xc7'))
        condition = Operators.AND(condition, cpu.read_int(0x411be5, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x1)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x411be6)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_10_symbolic(self):
        ''' Instruction ADD_10 
            Groups:  
            0x4002ed:	add	rsp, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4002f0] = '\x08'
        mem[0x4002ed] = 'H'
        mem[0x4002ee] = '\x83'
        mem[0x4002ef] = '\xc4'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdac0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4002ed
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4002f0, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(0x4002ed, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4002ee, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x4002ef, 8)== ord('\xc4'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdac8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4002f1)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_11_symbolic(self):
        ''' Instruction ADD_11 
            Groups:  
            0x40ec80:	add	rax, 0x10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040e000, 0x1000, 'rwx')
        mem[0x40ec80] = 'H'
        mem[0x40ec81] = '\x83'
        mem[0x40ec82] = '\xc0'
        mem[0x40ec83] = '\x10'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x6b9dd8)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40ec80
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40ec80, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x40ec81, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x40ec82, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.read_int(0x40ec83, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x6b9de8)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40ec84)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_12_symbolic(self):
        ''' Instruction ADD_12 
            Groups:  
            0x406e80:	add	r12, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e80] = 'I'
        mem[0x406e81] = '\x83'
        mem[0x406e82] = '\xc4'
        mem[0x406e83] = '\x08'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x7fffffffdc48)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x406e80
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e80, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x406e81, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x406e82, 8)== ord('\xc4'))
        condition = Operators.AND(condition, cpu.read_int(0x406e83, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.R12 == 0x7fffffffdc50)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e84)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_13_symbolic(self):
        ''' Instruction ADD_13 
            Groups:  
            0x414a50:	add	rsp, 0x1020
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x414a50] = 'H'
        mem[0x414a51] = '\x81'
        mem[0x414a52] = '\xc4'
        mem[0x414a53] = ' '
        mem[0x414a54] = '\x10'
        mem[0x414a55] = '\x00'
        mem[0x414a56] = '\x00'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffba30)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x414a50
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x414a50, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x414a51, 8)== ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(0x414a52, 8)== ord('\xc4'))
        condition = Operators.AND(condition, cpu.read_int(0x414a53, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x414a54, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x414a55, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x414a56, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffca50)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x414a57)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_14_symbolic(self):
        ''' Instruction ADD_14 
            Groups:  
            0x406e80:	add	r12, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e80] = 'I'
        mem[0x406e81] = '\x83'
        mem[0x406e82] = '\xc4'
        mem[0x406e83] = '\x08'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x7fffffffdd70)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x406e80
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e80, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x406e81, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x406e82, 8)== ord('\xc4'))
        condition = Operators.AND(condition, cpu.read_int(0x406e83, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.R12 == 0x7fffffffdd78)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e84)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_15_symbolic(self):
        ''' Instruction ADD_15 
            Groups:  
            0x406e80:	add	r12, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e80] = 'I'
        mem[0x406e81] = '\x83'
        mem[0x406e82] = '\xc4'
        mem[0x406e83] = '\x08'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x7fffffffdd78)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e80
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e80, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x406e81, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x406e82, 8)== ord('\xc4'))
        condition = Operators.AND(condition, cpu.read_int(0x406e83, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.R12 == 0x7fffffffdd80)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e84)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_16_symbolic(self):
        ''' Instruction ADD_16 
            Groups:  
            0x406e80:	add	r12, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e80] = 'I'
        mem[0x406e81] = '\x83'
        mem[0x406e82] = '\xc4'
        mem[0x406e83] = '\x08'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x7fffffffdd90)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x406e80
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e80, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x406e81, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x406e82, 8)== ord('\xc4'))
        condition = Operators.AND(condition, cpu.read_int(0x406e83, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.R12 == 0x7fffffffdd98)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e84)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_17_symbolic(self):
        ''' Instruction ADD_17 
            Groups:  
            0x406e80:	add	r12, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e80] = 'I'
        mem[0x406e81] = '\x83'
        mem[0x406e82] = '\xc4'
        mem[0x406e83] = '\x08'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x7fffffffdc58)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x406e80
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e80, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x406e81, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x406e82, 8)== ord('\xc4'))
        condition = Operators.AND(condition, cpu.read_int(0x406e83, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.R12 == 0x7fffffffdc60)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e84)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_18_symbolic(self):
        ''' Instruction ADD_18 
            Groups:  
            0x4322aa:	add	rax, r8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322aa] = 'L'
        mem[0x4322ab] = '\x01'
        mem[0x4322ac] = '\xc0'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x2)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322aa
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322aa, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x4322ab, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x4322ac, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x2)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.R8 == 0x0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4322ad)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_19_symbolic(self):
        ''' Instruction ADD_19 
            Groups:  
            0x414708:	add	r12, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x414708] = 'I'
        mem[0x414709] = '\x83'
        mem[0x41470a] = '\xc4'
        mem[0x41470b] = '\x08'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x7fffffffdca0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x414708
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x414708, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x414709, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x41470a, 8)== ord('\xc4'))
        condition = Operators.AND(condition, cpu.read_int(0x41470b, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.R12 == 0x7fffffffdca8)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41470c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_2_symbolic(self):
        ''' Instruction ADD_2 
            Groups:  
            0x400bf0:	add	rdi, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400bf0] = 'H'
        mem[0x400bf1] = '\x83'
        mem[0x400bf2] = '\xc7'
        mem[0x400bf3] = '\x08'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7fffffffdcd8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400bf0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bf0, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf1, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf2, 8)== ord('\xc7'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf3, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RDI == 0x7fffffffdce0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400bf4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_20_symbolic(self):
        ''' Instruction ADD_20 
            Groups:  
            0x414708:	add	r12, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x414708] = 'I'
        mem[0x414709] = '\x83'
        mem[0x41470a] = '\xc4'
        mem[0x41470b] = '\x08'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x7fffffffdd80)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x414708
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x414708, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x414709, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x41470a, 8)== ord('\xc4'))
        condition = Operators.AND(condition, cpu.read_int(0x41470b, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.R12 == 0x7fffffffdd88)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41470c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_21_symbolic(self):
        ''' Instruction ADD_21 
            Groups:  
            0x463f80:	add	r14, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00463000, 0x1000, 'rwx')
        mem[0x463f80] = 'I'
        mem[0x463f81] = '\x83'
        mem[0x463f82] = '\xc6'
        mem[0x463f83] = '\x01'
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x2)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x463f80
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x463f80, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x463f81, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x463f82, 8)== ord('\xc6'))
        condition = Operators.AND(condition, cpu.read_int(0x463f83, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.R14 == 0x3)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x463f84)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_3_symbolic(self):
        ''' Instruction ADD_3 
            Groups:  
            0x407051:	add	rsp, 0x1020
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00407000, 0x1000, 'rwx')
        mem[0x407051] = 'H'
        mem[0x407052] = '\x81'
        mem[0x407053] = '\xc4'
        mem[0x407054] = ' '
        mem[0x407055] = '\x10'
        mem[0x407056] = '\x00'
        mem[0x407057] = '\x00'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffcab0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x407051
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x407051, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x407052, 8)== ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(0x407053, 8)== ord('\xc4'))
        condition = Operators.AND(condition, cpu.read_int(0x407054, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x407055, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x407056, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x407057, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdad0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x407058)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_4_symbolic(self):
        ''' Instruction ADD_4 
            Groups:  
            0x40ec80:	add	rax, 0x10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040e000, 0x1000, 'rwx')
        mem[0x40ec80] = 'H'
        mem[0x40ec81] = '\x83'
        mem[0x40ec82] = '\xc0'
        mem[0x40ec83] = '\x10'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x6b9a68)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40ec80
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40ec80, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x40ec81, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x40ec82, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.read_int(0x40ec83, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x6b9a78)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40ec84)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_5_symbolic(self):
        ''' Instruction ADD_5 
            Groups:  
            0x400fc8:	add	rcx, 0x38
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400fc8] = 'H'
        mem[0x400fc9] = '\x83'
        mem[0x400fca] = '\xc1'
        mem[0x400fcb] = '8'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x400040)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400fc8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400fc8, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x400fc9, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x400fca, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x400fcb, 8)== ord('8'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RCX == 0x400078)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400fcc)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_6_symbolic(self):
        ''' Instruction ADD_6 
            Groups:  
            0x406e80:	add	r12, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e80] = 'I'
        mem[0x406e81] = '\x83'
        mem[0x406e82] = '\xc4'
        mem[0x406e83] = '\x08'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x7fffffffdc60)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x406e80
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e80, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x406e81, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x406e82, 8)== ord('\xc4'))
        condition = Operators.AND(condition, cpu.read_int(0x406e83, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.R12 == 0x7fffffffdc68)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e84)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_7_symbolic(self):
        ''' Instruction ADD_7 
            Groups:  
            0x442689:	add	rsp, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00442000, 0x1000, 'rwx')
        mem[0x442689] = 'H'
        mem[0x44268a] = '\x83'
        mem[0x44268b] = '\xc4'
        mem[0x44268c] = '\x08'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdb00)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x442689
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x442689, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x44268a, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x44268b, 8)== ord('\xc4'))
        condition = Operators.AND(condition, cpu.read_int(0x44268c, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdb08)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x44268d)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_8_symbolic(self):
        ''' Instruction ADD_8 
            Groups:  
            0x406e80:	add	r12, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e80] = 'I'
        mem[0x406e81] = '\x83'
        mem[0x406e82] = '\xc4'
        mem[0x406e83] = '\x08'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x7fffffffdc80)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x406e80
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e80, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x406e81, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x406e82, 8)== ord('\xc4'))
        condition = Operators.AND(condition, cpu.read_int(0x406e83, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.R12 == 0x7fffffffdc88)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e84)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ADD_9_symbolic(self):
        ''' Instruction ADD_9 
            Groups:  
            0x410f0d:	add	rsp, 0x38
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, 'rwx')
        mem[0x410f10] = '8'
        mem[0x410f0d] = 'H'
        mem[0x410f0e] = '\x83'
        mem[0x410f0f] = '\xc4'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffc940)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x410f0d
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x410f10, 8)== ord('8'))
        condition = Operators.AND(condition, cpu.read_int(0x410f0d, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x410f0e, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x410f0f, 8)== ord('\xc4'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffc978)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x410f11)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_1_symbolic(self):
        ''' Instruction AND_1 
            Groups:  
            0x411bf3:	and	rax, 0xfffffffffffffff8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411bf3] = 'H'
        mem[0x411bf4] = '\x83'
        mem[0x411bf5] = '\xe0'
        mem[0x411bf6] = '\xf8'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411bf3
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x21e01)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411bf3, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x411bf4, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x411bf5, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x411bf6, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x411bf7)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x21e00)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_10_symbolic(self):
        ''' Instruction AND_10 
            Groups:  
            0x411bf3:	and	rax, 0xfffffffffffffff8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411bf3] = 'H'
        mem[0x411bf4] = '\x83'
        mem[0x411bf5] = '\xe0'
        mem[0x411bf6] = '\xf8'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411bf3
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x21961)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411bf3, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x411bf4, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x411bf5, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x411bf6, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x411bf7)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x21960)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_11_symbolic(self):
        ''' Instruction AND_11 
            Groups:  
            0x4134c7:	and	eax, 4
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem[0x4134c8] = '\xe0'
        mem[0x4134c9] = '\x04'
        mem[0x4134c7] = '\x83'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4134c7
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4134c8, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x4134c9, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(0x4134c7, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4134ca)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_12_symbolic(self):
        ''' Instruction AND_12 
            Groups:  
            0x411bf3:	and	rax, 0xfffffffffffffff8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411bf3] = 'H'
        mem[0x411bf4] = '\x83'
        mem[0x411bf5] = '\xe0'
        mem[0x411bf6] = '\xf8'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411bf3
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x21941)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411bf3, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x411bf4, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x411bf5, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x411bf6, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x411bf7)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x21940)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_13_symbolic(self):
        ''' Instruction AND_13 
            Groups:  
            0x4006a5:	and	eax, 7
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006a5] = '\x83'
        mem[0x4006a6] = '\xe0'
        mem[0x4006a7] = '\x07'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006a5
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xe00209)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006a5, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a6, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a7, 8)== ord('\x07'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006a8)
        condition = Operators.AND(condition, cpu.EAX == 0x1)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_14_symbolic(self):
        ''' Instruction AND_14 
            Groups:  
            0x410dd8:	and	rax, rdx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, 'rwx')
        mem[0x410dd8] = 'H'
        mem[0x410dd9] = '!'
        mem[0x410dda] = '\xd0'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x1047)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x410dd8
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0xfffffffffffff000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x410dd8, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x410dd9, 8)== ord('!'))
        condition = Operators.AND(condition, cpu.read_int(0x410dda, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x1000)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x410ddb)
        condition = Operators.AND(condition, cpu.RDX == 0xfffffffffffff000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_15_symbolic(self):
        ''' Instruction AND_15 
            Groups:  
            0x463f01:	and	r15, rcx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00463000, 0x1000, 'rwx')
        mem[0x463f01] = 'I'
        mem[0x463f02] = '!'
        mem[0x463f03] = '\xcf'
        cpu.R15 = cs.new_bitvec(64)
        cs.add(cpu.R15 == 0x0)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0xbfebfbff)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x463f01
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x463f01, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x463f02, 8)== ord('!'))
        condition = Operators.AND(condition, cpu.read_int(0x463f03, 8)== ord('\xcf'))
        condition = Operators.AND(condition, cpu.R15 == 0x0)
        condition = Operators.AND(condition, cpu.RCX == 0xbfebfbff)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x463f04)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_16_symbolic(self):
        ''' Instruction AND_16 
            Groups:  
            0x4183ba:	and	rcx, 0xfff
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183c0] = '\x00'
        mem[0x4183ba] = 'H'
        mem[0x4183bb] = '\x81'
        mem[0x4183bc] = '\xe1'
        mem[0x4183bd] = '\xff'
        mem[0x4183be] = '\x0f'
        mem[0x4183bf] = '\x00'
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x494d82)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4183ba
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183c0, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ba, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4183bb, 8)== ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(0x4183bc, 8)== ord('\xe1'))
        condition = Operators.AND(condition, cpu.read_int(0x4183bd, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x4183be, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183bf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RCX == 0xd82)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4183c1)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_17_symbolic(self):
        ''' Instruction AND_17 
            Groups:  
            0x436f6d:	and	eax, 9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436f6d] = '\x83'
        mem[0x436f6e] = '\xe0'
        mem[0x436f6f] = '\t'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x436f6d
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436f6d, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x436f6e, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x436f6f, 8)== ord('\t'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x436f70)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_18_symbolic(self):
        ''' Instruction AND_18 
            Groups:  
            0x420f60:	and	edx, 0x1f
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00420000, 0x1000, 'rwx')
        mem[0x420f60] = '\x83'
        mem[0x420f61] = '\xe2'
        mem[0x420f62] = '\x1f'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x420f60
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x20)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x420f60, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x420f61, 8)== ord('\xe2'))
        condition = Operators.AND(condition, cpu.read_int(0x420f62, 8)== ord('\x1f'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x420f63)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_19_symbolic(self):
        ''' Instruction AND_19 
            Groups:  
            0x41167b:	and	r10, 0xfffffffffffffff0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x41167b] = 'I'
        mem[0x41167c] = '\x83'
        mem[0x41167d] = '\xe2'
        mem[0x41167e] = '\xf0'
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 0x43)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x41167b
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41167b, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x41167c, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x41167d, 8)== ord('\xe2'))
        condition = Operators.AND(condition, cpu.read_int(0x41167e, 8)== ord('\xf0'))
        condition = Operators.AND(condition, cpu.R10 == 0x40)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41167f)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_2_symbolic(self):
        ''' Instruction AND_2 
            Groups:  
            0x4183ba:	and	rcx, 0xfff
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183c0] = '\x00'
        mem[0x4183ba] = 'H'
        mem[0x4183bb] = '\x81'
        mem[0x4183bc] = '\xe1'
        mem[0x4183bd] = '\xff'
        mem[0x4183be] = '\x0f'
        mem[0x4183bf] = '\x00'
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x494d66)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4183ba
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183c0, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ba, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4183bb, 8)== ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(0x4183bc, 8)== ord('\xe1'))
        condition = Operators.AND(condition, cpu.read_int(0x4183bd, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x4183be, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183bf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RCX == 0xd66)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4183c1)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            print temp_cs, translate_to_smtlib(condition==False)

            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_20_symbolic(self):
        ''' Instruction AND_20 
            Groups:  
            0x411bf3:	and	rax, 0xfffffffffffffff8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411bf3] = 'H'
        mem[0x411bf4] = '\x83'
        mem[0x411bf5] = '\xe0'
        mem[0x411bf6] = '\xf8'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411bf3
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x218f1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411bf3, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x411bf4, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x411bf5, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x411bf6, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x411bf7)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x218f0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_21_symbolic(self):
        ''' Instruction AND_21 
            Groups:  
            0x4183ba:	and	rcx, 0xfff
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183c0] = '\x00'
        mem[0x4183ba] = 'H'
        mem[0x4183bb] = '\x81'
        mem[0x4183bc] = '\xe1'
        mem[0x4183bd] = '\xff'
        mem[0x4183be] = '\x0f'
        mem[0x4183bf] = '\x00'
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x494dce)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4183ba
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183c0, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ba, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4183bb, 8)== ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(0x4183bc, 8)== ord('\xe1'))
        condition = Operators.AND(condition, cpu.read_int(0x4183bd, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x4183be, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183bf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RCX == 0xdce)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4183c1)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_3_symbolic(self):
        ''' Instruction AND_3 
            Groups:  
            0x411bf3:	and	rax, 0xfffffffffffffff8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411bf3] = 'H'
        mem[0x411bf4] = '\x83'
        mem[0x411bf5] = '\xe0'
        mem[0x411bf6] = '\xf8'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411bf3
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x21911)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411bf3, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x411bf4, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x411bf5, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x411bf6, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x411bf7)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x21910)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_4_symbolic(self):
        ''' Instruction AND_4 
            Groups:  
            0x4113a5:	and	rdx, qword ptr [rbp - 0x40]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc966)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc965)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc960)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc961)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc962)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc963)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc964)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        mem[0x4113a5] = 'H'
        mem[0x4113a6] = '#'
        mem[0x4113a7] = 'U'
        mem[0x4113a8] = '\xc0'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc967)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffc9a0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4113a5
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x6e11bf)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc966, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc965, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc960, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc961, 8)== ord('\xf0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc962, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc963, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc964, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x4113a5, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4113a6, 8)== ord('#'))
        condition = Operators.AND(condition, cpu.read_int(0x4113a7, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.read_int(0x4113a8, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc967, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffc9a0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4113a9)
        condition = Operators.AND(condition, cpu.RDX == 0x6e1000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_5_symbolic(self):
        ''' Instruction AND_5 
            Groups:  
            0x41137b:	and	eax, 0xf
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x41137b] = '\x83'
        mem[0x41137c] = '\xe0'
        mem[0x41137d] = '\x0f'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x41137b
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6bf1c0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41137b, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x41137c, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x41137d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41137e)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_6_symbolic(self):
        ''' Instruction AND_6 
            Groups:  
            0x4578d7:	and	eax, 0xfff
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x4578d8] = '\xff'
        mem[0x4578d9] = '\x0f'
        mem[0x4578da] = '\x00'
        mem[0x4578db] = '\x00'
        mem[0x4578d7] = '%'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4578d7
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xffffdf91)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4578d8, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x4578d9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4578da, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4578db, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4578d7, 8)== ord('%'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4578dc)
        condition = Operators.AND(condition, cpu.EAX == 0xf91)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_7_symbolic(self):
        ''' Instruction AND_7 
            Groups:  
            0x4379ab:	and	r8d, 0xf
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x4379ab] = 'A'
        mem[0x4379ac] = '\x83'
        mem[0x4379ad] = '\xe0'
        mem[0x4379ae] = '\x0f'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4379ab
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 0x306)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4379ab, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4379ac, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x4379ad, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x4379ae, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4379af)
        condition = Operators.AND(condition, cpu.R8D == 0x6)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_8_symbolic(self):
        ''' Instruction AND_8 
            Groups:  
            0x4183e1:	and	rax, 0xfffffffffffffff0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183e1] = 'H'
        mem[0x4183e2] = '\x83'
        mem[0x4183e3] = '\xe0'
        mem[0x4183e4] = '\xf0'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4183e1
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x494dce)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183e1, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4183e2, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x4183e3, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x4183e4, 8)== ord('\xf0'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4183e5)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x494dc0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_AND_9_symbolic(self):
        ''' Instruction AND_9 
            Groups:  
            0x41b4b0:	and	edx, 0x1f
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041b000, 0x1000, 'rwx')
        mem[0x41b4b0] = '\x83'
        mem[0x41b4b1] = '\xe2'
        mem[0x41b4b2] = '\x1f'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x41b4b0
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x2a)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41b4b0, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x41b4b1, 8)== ord('\xe2'))
        condition = Operators.AND(condition, cpu.read_int(0x41b4b2, 8)== ord('\x1f'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41b4b3)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0xa)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_BSF_1_symbolic(self):
        ''' Instruction BSF_1 
            Groups:  
            0x4183dd:	bsf	eax, edx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183dd] = '\x0f'
        mem[0x4183de] = '\xbc'
        mem[0x4183df] = '\xc2'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4a5301)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x5)
        cpu.RIP = 0x4183dd

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183dd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183de, 8)== ord('\xbc'))
        condition = Operators.AND(condition, cpu.read_int(0x4183df, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x5)
        condition = Operators.AND(condition, cpu.RIP == 0x4183e0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_BSF_2_symbolic(self):
        ''' Instruction BSF_2 
            Groups:  
            0x4183dd:	bsf	eax, edx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183dd] = '\x0f'
        mem[0x4183de] = '\xbc'
        mem[0x4183df] = '\xc2'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xf7ffd2f4)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x8000)
        cpu.RIP = 0x4183dd

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183dd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183de, 8)== ord('\xbc'))
        condition = Operators.AND(condition, cpu.read_int(0x4183df, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.EAX == 0xf)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x8000)
        condition = Operators.AND(condition, cpu.RIP == 0x4183e0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_BSF_3_symbolic(self):
        ''' Instruction BSF_3 
            Groups:  
            0x41842a:	bsf	rax, rdx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x41842a] = 'H'
        mem[0x41842b] = '\x0f'
        mem[0x41842c] = '\xbc'
        mem[0x41842d] = '\xc2'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x41842a
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x494dc0)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x3f8010000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41842a, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x41842b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x41842c, 8)== ord('\xbc'))
        condition = Operators.AND(condition, cpu.read_int(0x41842d, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x10)
        condition = Operators.AND(condition, cpu.RIP == 0x41842e)
        condition = Operators.AND(condition, cpu.RDX == 0x3f8010000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_BSF_4_symbolic(self):
        ''' Instruction BSF_4 
            Groups:  
            0x4183dd:	bsf	eax, edx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183dd] = '\x0f'
        mem[0x4183de] = '\xbc'
        mem[0x4183df] = '\xc2'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x494d8e)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x8000)
        cpu.RIP = 0x4183dd

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183dd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183de, 8)== ord('\xbc'))
        condition = Operators.AND(condition, cpu.read_int(0x4183df, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.EAX == 0xf)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x8000)
        condition = Operators.AND(condition, cpu.RIP == 0x4183e0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_BSF_5_symbolic(self):
        ''' Instruction BSF_5 
            Groups:  
            0x41842a:	bsf	rax, rdx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x41842a] = 'H'
        mem[0x41842b] = '\x0f'
        mem[0x41842c] = '\xbc'
        mem[0x41842d] = '\xc2'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x41842a
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x494d80)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x800200020000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41842a, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x41842b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x41842c, 8)== ord('\xbc'))
        condition = Operators.AND(condition, cpu.read_int(0x41842d, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x11)
        condition = Operators.AND(condition, cpu.RIP == 0x41842e)
        condition = Operators.AND(condition, cpu.RDX == 0x800200020000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_BSF_6_symbolic(self):
        ''' Instruction BSF_6 
            Groups:  
            0x4183dd:	bsf	eax, edx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183dd] = '\x0f'
        mem[0x4183de] = '\xbc'
        mem[0x4183df] = '\xc2'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x494d05)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x80)
        cpu.RIP = 0x4183dd

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183dd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183de, 8)== ord('\xbc'))
        condition = Operators.AND(condition, cpu.read_int(0x4183df, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.EAX == 0x7)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x80)
        condition = Operators.AND(condition, cpu.RIP == 0x4183e0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_BSF_7_symbolic(self):
        ''' Instruction BSF_7 
            Groups:  
            0x4183dd:	bsf	eax, edx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183dd] = '\x0f'
        mem[0x4183de] = '\xbc'
        mem[0x4183df] = '\xc2'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x494d82)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x800)
        cpu.RIP = 0x4183dd

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183dd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183de, 8)== ord('\xbc'))
        condition = Operators.AND(condition, cpu.read_int(0x4183df, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.EAX == 0xb)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x800)
        condition = Operators.AND(condition, cpu.RIP == 0x4183e0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_BSF_8_symbolic(self):
        ''' Instruction BSF_8 
            Groups:  
            0x4183dd:	bsf	eax, edx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183dd] = '\x0f'
        mem[0x4183de] = '\xbc'
        mem[0x4183df] = '\xc2'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x494d76)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x800)
        cpu.RIP = 0x4183dd

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183dd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183de, 8)== ord('\xbc'))
        condition = Operators.AND(condition, cpu.read_int(0x4183df, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.EAX == 0xb)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x800)
        condition = Operators.AND(condition, cpu.RIP == 0x4183e0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_BSF_9_symbolic(self):
        ''' Instruction BSF_9 
            Groups:  
            0x4183dd:	bsf	eax, edx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183dd] = '\x0f'
        mem[0x4183de] = '\xbc'
        mem[0x4183df] = '\xc2'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x494d66)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x8000)
        cpu.RIP = 0x4183dd

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183dd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183de, 8)== ord('\xbc'))
        condition = Operators.AND(condition, cpu.read_int(0x4183df, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.EAX == 0xf)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x8000)
        condition = Operators.AND(condition, cpu.RIP == 0x4183e0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_BSR_1_symbolic(self):
        ''' Instruction BSR_1 
            Groups:  
            0x4579b4:	bsr	rsi, rsi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x4579b4] = 'H'
        mem[0x4579b5] = '\x0f'
        mem[0x4579b6] = '\xbd'
        mem[0x4579b7] = '\xf6'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x42080201021)
        cpu.RIP = 0x4579b4

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4579b4, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4579b5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4579b6, 8)== ord('\xbd'))
        condition = Operators.AND(condition, cpu.read_int(0x4579b7, 8)== ord('\xf6'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSI == 0x2a)
        condition = Operators.AND(condition, cpu.RIP == 0x4579b8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_BSR_2_symbolic(self):
        ''' Instruction BSR_2 
            Groups:  
            0x400847:	bsr	esi, esi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400848] = '\xbd'
        mem[0x400849] = '\xf6'
        mem[0x400847] = '\x0f'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x400847
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xf)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400848, 8)== ord('\xbd'))
        condition = Operators.AND(condition, cpu.read_int(0x400849, 8)== ord('\xf6'))
        condition = Operators.AND(condition, cpu.read_int(0x400847, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x3)
        condition = Operators.AND(condition, cpu.RIP == 0x40084a)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_1_symbolic(self):
        ''' Instruction CALL_1 
            Groups: call, mode64 
            0x4117c6:	call	0x40f890
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9a8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9a9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9aa)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9ab)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9ac)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9ad)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9ae)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9af)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9b0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9b1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9b2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9b3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9b4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9b5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9b6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9b7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9b8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4117c6] = '\xe8'
        mem[0x4117c7] = '\xc5'
        mem[0x4117c8] = '\xe0'
        mem[0x4117c9] = '\xff'
        mem[0x4117ca] = '\xff'
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffc9b0)
        cpu.RIP = 0x4117c6
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffca40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9a8, 8)== ord('\xcb'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9a9, 8)== ord('\x17'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9aa, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9ab, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9ac, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9ad, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9ae, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9af, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9b0, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9b1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9b2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9b3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9b4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9b5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9b6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9b7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9b8, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4117c6, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x4117c7, 8)== ord('\xc5'))
        condition = Operators.AND(condition, cpu.read_int(0x4117c8, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x4117c9, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x4117ca, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffc9a8)
        condition = Operators.AND(condition, cpu.RIP == 0x40f890)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffca40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_10_symbolic(self):
        ''' Instruction CALL_10 
            Groups: call, mode64 
            0x436e6b:	call	0x420e30
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda98)
        value = cs.new_bitvec(8)
        cs.add(value == 0x55)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda99)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x50)
        mem[addr] = value
        mem[0x436e6b] = '\xe8'
        mem[0x436e6c] = '\xc0'
        mem[0x436e6d] = '\x9f'
        mem[0x436e6e] = '\xfe'
        mem[0x436e6f] = '\xff'
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdaa0)
        cpu.RIP = 0x436e6b
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdae0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda98, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda99, 8)== ord('n'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa0, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa8, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.read_int(0x436e6b, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x436e6c, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.read_int(0x436e6d, 8)== ord('\x9f'))
        condition = Operators.AND(condition, cpu.read_int(0x436e6e, 8)== ord('\xfe'))
        condition = Operators.AND(condition, cpu.read_int(0x436e6f, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda98)
        condition = Operators.AND(condition, cpu.RIP == 0x420e30)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdae0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_11_symbolic(self):
        ''' Instruction CALL_11 
            Groups: call, mode64 
            0x45f813:	call	0x463ea0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045f000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x45f813] = '\xe8'
        mem[0x45f814] = '\x88'
        mem[0x45f815] = 'F'
        mem[0x45f816] = '\x00'
        mem[0x45f817] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda68)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda69)
        value = cs.new_bitvec(8)
        cs.add(value == 0x53)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4a)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda70)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda71)
        value = cs.new_bitvec(8)
        cs.add(value == 0x53)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda72)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4a)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda73)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda74)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda75)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda76)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda77)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda78)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf4)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda70)
        cpu.RIP = 0x45f813
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x45f813, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x45f814, 8)== ord('\x88'))
        condition = Operators.AND(condition, cpu.read_int(0x45f815, 8)== ord('F'))
        condition = Operators.AND(condition, cpu.read_int(0x45f816, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x45f817, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda68, 8)== ord('\x18'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda69, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6a, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda70, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda71, 8)== ord('S'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda72, 8)== ord('J'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda73, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda74, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda75, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda76, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda77, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda78, 8)== ord('\xf4'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda68)
        condition = Operators.AND(condition, cpu.RIP == 0x463ea0)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_12_symbolic(self):
        ''' Instruction CALL_12 
            Groups: call, mode64 
            0x400d84:	call	0x436750
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x400d84] = '\xe8'
        mem[0x400d85] = '\xc7'
        mem[0x400d86] = 'Y'
        mem[0x400d87] = '\x03'
        mem[0x400d88] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb19)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb21)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb22)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb23)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb24)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb25)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb26)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb27)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb28)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdb20)
        cpu.RIP = 0x400d84
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdbe0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400d84, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x400d85, 8)== ord('\xc7'))
        condition = Operators.AND(condition, cpu.read_int(0x400d86, 8)== ord('Y'))
        condition = Operators.AND(condition, cpu.read_int(0x400d87, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(0x400d88, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb18, 8)== ord('\x89'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb19, 8)== ord('\r'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1a, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb20, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb21, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb22, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb23, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb24, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb25, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb26, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb27, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb28, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdb18)
        condition = Operators.AND(condition, cpu.RIP == 0x436750)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdbe0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_13_symbolic(self):
        ''' Instruction CALL_13 
            Groups: call, mode64 
            0x4012d6:	call	0x4002d8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x4012d6] = '\xe8'
        mem[0x4012d7] = '\xfd'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x57)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x55)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaca)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdacb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdacc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdacd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdace)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdacf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4012d8] = '\xef'
        mem[0x4012d9] = '\xff'
        mem[0x4012da] = '\xff'
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdad0)
        cpu.RIP = 0x4012d6
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdb10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4012d7, 8)== ord('\xfd'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad8, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac8, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac9, 8)== ord('\x12'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaca, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdacb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdacc, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdacd, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdace, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdacf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad0, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4012d6, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4012d8, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4012d9, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x4012da, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdac8)
        condition = Operators.AND(condition, cpu.RIP == 0x4002d8)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdb10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_14_symbolic(self):
        ''' Instruction CALL_14 
            Groups: call, mode64 
            0x400a1c:	call	0x48fbb0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x400a1c] = '\xe8'
        mem[0x400a1d] = '\x8f'
        mem[0x400a1e] = '\xf1'
        mem[0x400a1f] = '\x08'
        mem[0x400a20] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaba)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdabb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdabc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdabd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdabe)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdabf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdb)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xc)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdac0)
        cpu.RIP = 0x400a1c
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdac0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a1c, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x400a1d, 8)== ord('\x8f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a1e, 8)== ord('\xf1'))
        condition = Operators.AND(condition, cpu.read_int(0x400a1f, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(0x400a20, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab8, 8)== ord('!'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab9, 8)== ord('\n'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaba, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdabb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdabc, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdabd, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdabe, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdabf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac0, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac1, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac2, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac3, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac4, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac5, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac8, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdab8)
        condition = Operators.AND(condition, cpu.RIP == 0x48fbb0)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdac0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_15_symbolic(self):
        ''' Instruction CALL_15 
            Groups: call, mode64 
            0x43252b:	call	0x4321e0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x43252b] = '\xe8'
        mem[0x43252c] = '\xb0'
        mem[0x43252d] = '\xfc'
        mem[0x43252e] = '\xff'
        mem[0x43252f] = '\xff'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda38)
        value = cs.new_bitvec(8)
        cs.add(value == 0x49)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda39)
        value = cs.new_bitvec(8)
        cs.add(value == 0x25)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda3a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda3b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda3c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda3d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda3e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda3f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda40)
        value = cs.new_bitvec(8)
        cs.add(value == 0x60)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda41)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda42)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda43)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda44)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda45)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda46)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda47)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda48)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda40)
        cpu.RIP = 0x43252b
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43252b, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x43252c, 8)== ord('\xb0'))
        condition = Operators.AND(condition, cpu.read_int(0x43252d, 8)== ord('\xfc'))
        condition = Operators.AND(condition, cpu.read_int(0x43252e, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x43252f, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda38, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda39, 8)== ord('%'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda3a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda3b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda3c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda3d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda3e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda3f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda40, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda41, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda42, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda43, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda44, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda45, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda46, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda47, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda48, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda38)
        condition = Operators.AND(condition, cpu.RIP == 0x4321e0)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_16_symbolic(self):
        ''' Instruction CALL_16 
            Groups: call, mode64 
            0x407033:	call	0x406ec0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00407000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb08)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb09)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0a)
        value = cs.new_bitvec(8)
        cs.add(value == 0xb9)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x46)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x9d)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0d)
        value = cs.new_bitvec(8)
        cs.add(value == 0xa4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0e)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb10)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb11)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdb)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb12)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb13)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb14)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb15)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb16)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb17)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb18)
        value = cs.new_bitvec(8)
        cs.add(value == 0xea)
        mem[addr] = value
        mem[0x407033] = '\xe8'
        mem[0x407034] = '\x88'
        mem[0x407035] = '\xfe'
        mem[0x407036] = '\xff'
        mem[0x407037] = '\xff'
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdb10)
        cpu.RIP = 0x407033
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdb10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb08, 8)== ord('8'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb09, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0a, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb10, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb11, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb12, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb13, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb14, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb15, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb16, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb17, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb18, 8)== ord('\xea'))
        condition = Operators.AND(condition, cpu.read_int(0x407033, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x407034, 8)== ord('\x88'))
        condition = Operators.AND(condition, cpu.read_int(0x407035, 8)== ord('\xfe'))
        condition = Operators.AND(condition, cpu.read_int(0x407036, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x407037, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdb08)
        condition = Operators.AND(condition, cpu.RIP == 0x406ec0)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdb10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_17_symbolic(self):
        ''' Instruction CALL_17 
            Groups: call, mode64 
            0x43780d:	call	0x437610
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x43780d] = '\xe8'
        mem[0x43780e] = '\xfe'
        mem[0x43780f] = '\xfd'
        mem[0x437810] = '\xff'
        mem[0x437811] = '\xff'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdae8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdae9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaea)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaeb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaec)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaed)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaee)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaef)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x12)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd8)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdaf0)
        cpu.RIP = 0x43780d
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdb10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43780d, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x43780e, 8)== ord('\xfe'))
        condition = Operators.AND(condition, cpu.read_int(0x43780f, 8)== ord('\xfd'))
        condition = Operators.AND(condition, cpu.read_int(0x437810, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x437811, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdae8, 8)== ord('\x12'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdae9, 8)== ord('x'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaea, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaeb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaec, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaed, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaee, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaef, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf0, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf1, 8)== ord('\x12'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf2, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf8, 8)== ord('\xd8'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdae8)
        condition = Operators.AND(condition, cpu.RIP == 0x437610)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdb10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_18_symbolic(self):
        ''' Instruction CALL_18 
            Groups: call, mode64 
            0x4376a6:	call	0x45c2f0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd918)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd919)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd91a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd91b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd91c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd91d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd91e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd91f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd920)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd921)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd922)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd923)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd924)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd925)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4376a6] = '\xe8'
        mem[0x4376a7] = 'E'
        mem[0x4376a8] = 'L'
        mem[0x4376a9] = '\x02'
        mem[0x4376aa] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd926)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd927)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd928)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffd920)
        cpu.RIP = 0x4376a6
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdb10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd918, 8)== ord('\xab'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd919, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd91a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd91b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd91c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd91d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd91e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd91f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd920, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd921, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd922, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd923, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd924, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd925, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd926, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4376a7, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4376a8, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x4376a9, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(0x4376aa, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4376a6, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd927, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd928, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffd918)
        condition = Operators.AND(condition, cpu.RIP == 0x45c2f0)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdb10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_19_symbolic(self):
        ''' Instruction CALL_19 
            Groups: call, mode64 
            0x400c80:	call	qword ptr [rbx + 0x10]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x400c80] = '\xff'
        mem[0x400c81] = 'S'
        mem[0x400c82] = '\x10'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x83)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb19)
        value = cs.new_bitvec(8)
        cs.add(value == 0xc)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb21)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb22)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb23)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb24)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb25)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb26)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb27)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb28)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x400258)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x400259)
        value = cs.new_bitvec(8)
        cs.add(value == 0xb9)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x40025a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x40025b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x40025c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x40025d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x40025e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x40025f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdbe0)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdb20)
        cpu.RIP = 0x400c80
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x400248)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c80, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x400c81, 8)== ord('S'))
        condition = Operators.AND(condition, cpu.read_int(0x400c82, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb18, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb19, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1a, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb20, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb21, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb22, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb23, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb24, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb25, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb26, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb27, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb28, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x400258, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x400259, 8)== ord('\xb9'))
        condition = Operators.AND(condition, cpu.read_int(0x40025a, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x40025b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x40025c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x40025d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x40025e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x40025f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RBX == 0x400248)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdb18)
        condition = Operators.AND(condition, cpu.RIP == 0x41b910)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdbe0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_2_symbolic(self):
        ''' Instruction CALL_2 
            Groups: call, mode64 
            0x400c80:	call	qword ptr [rbx + 0x10]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x400c80] = '\xff'
        mem[0x400c81] = 'S'
        mem[0x400c82] = '\x10'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x400288)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x400289)
        value = cs.new_bitvec(8)
        cs.add(value == 0xa8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x40028a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x40028b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x40028c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x40028d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x40028e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x40028f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x83)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb19)
        value = cs.new_bitvec(8)
        cs.add(value == 0xc)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb21)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb22)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb23)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb24)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb25)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb26)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb27)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb28)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdbe0)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdb20)
        cpu.RIP = 0x400c80
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x400278)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c80, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x400c81, 8)== ord('S'))
        condition = Operators.AND(condition, cpu.read_int(0x400c82, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x400288, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x400289, 8)== ord('\xa8'))
        condition = Operators.AND(condition, cpu.read_int(0x40028a, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x40028b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x40028c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x40028d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x40028e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x40028f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb18, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb19, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1a, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb20, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb21, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb22, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb23, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb24, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb25, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb26, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb27, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb28, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.RBX == 0x400278)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdb18)
        condition = Operators.AND(condition, cpu.RIP == 0x41a820)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdbe0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_20_symbolic(self):
        ''' Instruction CALL_20 
            Groups: call, mode64 
            0x43422a:	call	0x45c590
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda88)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda89)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda90)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda91)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda92)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda93)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda94)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda95)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda96)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda97)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda98)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        mem[0x43422a] = '\xe8'
        mem[0x43422b] = 'a'
        mem[0x43422c] = '\x83'
        mem[0x43422d] = '\x02'
        mem[0x43422e] = '\x00'
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda90)
        cpu.RIP = 0x43422a
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdab0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda88, 8)== ord('/'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda89, 8)== ord('B'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda90, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda91, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda92, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda93, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda94, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda95, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda96, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda97, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda98, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(0x43422a, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x43422b, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x43422c, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x43422d, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(0x43422e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda88)
        condition = Operators.AND(condition, cpu.RIP == 0x45c590)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdab0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_21_symbolic(self):
        ''' Instruction CALL_21 
            Groups: call, mode64 
            0x436fe0:	call	0x406dd0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda98)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda99)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x50)
        mem[addr] = value
        mem[0x436fe0] = '\xe8'
        mem[0x436fe1] = '\xeb'
        mem[0x436fe2] = '\xfd'
        mem[0x436fe3] = '\xfc'
        mem[0x436fe4] = '\xff'
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdaa0)
        cpu.RIP = 0x436fe0
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdae0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda98, 8)== ord('\xe5'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda99, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa0, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa8, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.read_int(0x436fe0, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x436fe1, 8)== ord('\xeb'))
        condition = Operators.AND(condition, cpu.read_int(0x436fe2, 8)== ord('\xfd'))
        condition = Operators.AND(condition, cpu.read_int(0x436fe3, 8)== ord('\xfc'))
        condition = Operators.AND(condition, cpu.read_int(0x436fe4, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda98)
        condition = Operators.AND(condition, cpu.RIP == 0x406dd0)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdae0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_3_symbolic(self):
        ''' Instruction CALL_3 
            Groups: call, mode64 
            0x400de1:	call	rax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x400de1] = '\xff'
        mem[0x400de2] = '\xd0'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb23)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb24)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb25)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb26)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb21)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb28)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb27)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb22)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x95)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb19)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdb20)
        cpu.RIP = 0x400de1
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x400a48)
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdbe0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb20, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb21, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb22, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb23, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb24, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb25, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb26, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x400de1, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb28, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb27, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x400de2, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb18, 8)== ord('\xe3'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb19, 8)== ord('\r'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1a, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdb18)
        condition = Operators.AND(condition, cpu.RAX == 0x400a48)
        condition = Operators.AND(condition, cpu.RIP == 0x400a48)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdbe0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_4_symbolic(self):
        ''' Instruction CALL_4 
            Groups: call, mode64 
            0x401368:	call	qword ptr [r12 + rbx*8 - 8]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem.mmap(0x006b5000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaba)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdabb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdabc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdabd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdabe)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdabf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        mem[0x401368] = 'A'
        mem[0x401369] = '\xff'
        mem[0x40136a] = 'T'
        mem[0x40136b] = '\xdc'
        mem[0x40136c] = '\xf8'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b5df0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b5df1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b5df2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b5df3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b5df4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b5df5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b5df6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b5df7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdac0)
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdad0)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x6b5de8)
        cpu.RIP = 0x401368
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x2)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab8, 8)== ord('m'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab9, 8)== ord('\x13'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaba, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdabb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdabc, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdabd, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdabe, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdabf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac0, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac8, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x401368, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x401369, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x40136a, 8)== ord('T'))
        condition = Operators.AND(condition, cpu.read_int(0x40136b, 8)== ord('\xdc'))
        condition = Operators.AND(condition, cpu.read_int(0x40136c, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.read_int(0x6b5df0, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x6b5df1, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.read_int(0x6b5df2, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x6b5df3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b5df4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b5df5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b5df6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b5df7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.R12 == 0x6b5de8)
        condition = Operators.AND(condition, cpu.RBX == 0x2)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdab8)
        condition = Operators.AND(condition, cpu.RIP == 0x4005e0)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdad0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_5_symbolic(self):
        ''' Instruction CALL_5 
            Groups: call, mode64 
            0x4009e9:	call	0x48fed0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x9)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaaa)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaab)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaac)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaad)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaae)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaaf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6d)
        mem[addr] = value
        mem[0x4009e9] = '\xe8'
        mem[0x4009ea] = '\xe2'
        mem[0x4009eb] = '\xf4'
        mem[0x4009ec] = '\x08'
        mem[0x4009ed] = '\x00'
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdab0)
        cpu.RIP = 0x4009e9
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdab0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa8, 8)== ord('\xee'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa9, 8)== ord('\t'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaaa, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaab, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaac, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaad, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaae, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaaf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab0, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab1, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab2, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab3, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab4, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab5, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab8, 8)== ord('m'))
        condition = Operators.AND(condition, cpu.read_int(0x4009e9, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ea, 8)== ord('\xe2'))
        condition = Operators.AND(condition, cpu.read_int(0x4009eb, 8)== ord('\xf4'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ec, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ed, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdaa8)
        condition = Operators.AND(condition, cpu.RIP == 0x48fed0)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdab0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_6_symbolic(self):
        ''' Instruction CALL_6 
            Groups: call, mode64 
            0x465d96:	call	0x413480
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x465d96] = '\xe8'
        mem[0x465d97] = '\xe5'
        mem[0x465d98] = '\xd6'
        mem[0x465d99] = '\xfa'
        mem[0x465d9a] = '\xff'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca68)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca69)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca6a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca6b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca6c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca6d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca6e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca6f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca70)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca71)
        value = cs.new_bitvec(8)
        cs.add(value == 0x68)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca72)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca73)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6d)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca74)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca75)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca76)
        value = cs.new_bitvec(8)
        cs.add(value == 0x66)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca77)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca78)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6c)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffca70)
        cpu.RIP = 0x465d96
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x465d96, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x465d97, 8)== ord('\xe5'))
        condition = Operators.AND(condition, cpu.read_int(0x465d98, 8)== ord('\xd6'))
        condition = Operators.AND(condition, cpu.read_int(0x465d99, 8)== ord('\xfa'))
        condition = Operators.AND(condition, cpu.read_int(0x465d9a, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca68, 8)== ord('\x9b'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca69, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca6a, 8)== ord('F'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca6b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca6c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca6d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca6e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca6f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca70, 8)== ord('/'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca71, 8)== ord('h'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca72, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca73, 8)== ord('m'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca74, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca75, 8)== ord('/'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca76, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca77, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca78, 8)== ord('l'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffca68)
        condition = Operators.AND(condition, cpu.RIP == 0x413480)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_7_symbolic(self):
        ''' Instruction CALL_7 
            Groups: call, mode64 
            0x400c80:	call	qword ptr [rbx + 0x10]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x400c80] = '\xff'
        mem[0x400c81] = 'S'
        mem[0x400c82] = '\x10'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x83)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb19)
        value = cs.new_bitvec(8)
        cs.add(value == 0xc)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb21)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb22)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb23)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb24)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb25)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb26)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb27)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb28)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4002b8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4002b9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xb1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4002ba)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4002bb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4002bc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4002bd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4002be)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4002bf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdbe0)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdb20)
        cpu.RIP = 0x400c80
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x4002a8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c80, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x400c81, 8)== ord('S'))
        condition = Operators.AND(condition, cpu.read_int(0x400c82, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb18, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb19, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1a, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb20, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb21, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb22, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb23, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb24, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb25, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb26, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb27, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb28, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4002b8, 8)== ord('\x90'))
        condition = Operators.AND(condition, cpu.read_int(0x4002b9, 8)== ord('\xb1'))
        condition = Operators.AND(condition, cpu.read_int(0x4002ba, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4002bb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4002bc, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4002bd, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4002be, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4002bf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RBX == 0x4002a8)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdb18)
        condition = Operators.AND(condition, cpu.RIP == 0x41b190)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdbe0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_8_symbolic(self):
        ''' Instruction CALL_8 
            Groups: call, mode64 
            0x436ead:	call	0x45f7d0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda98)
        value = cs.new_bitvec(8)
        cs.add(value == 0xaa)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda99)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x50)
        mem[addr] = value
        mem[0x436ead] = '\xe8'
        mem[0x436eae] = '\x1e'
        mem[0x436eaf] = '\x89'
        mem[0x436eb0] = '\x02'
        mem[0x436eb1] = '\x00'
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdaa0)
        cpu.RIP = 0x436ead
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdae0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda98, 8)== ord('\xb2'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda99, 8)== ord('n'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa0, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa8, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.read_int(0x436ead, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x436eae, 8)== ord('\x1e'))
        condition = Operators.AND(condition, cpu.read_int(0x436eaf, 8)== ord('\x89'))
        condition = Operators.AND(condition, cpu.read_int(0x436eb0, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(0x436eb1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda98)
        condition = Operators.AND(condition, cpu.RIP == 0x45f7d0)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdae0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CALL_9_symbolic(self):
        ''' Instruction CALL_9 
            Groups: call, mode64 
            0x4369b0:	call	0x465c50
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda98)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda99)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x50)
        mem[addr] = value
        mem[0x4369b0] = '\xe8'
        mem[0x4369b1] = '\x9b'
        mem[0x4369b2] = '\xf2'
        mem[0x4369b3] = '\x02'
        mem[0x4369b4] = '\x00'
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdaa0)
        cpu.RIP = 0x4369b0
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdae0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda98, 8)== ord('\xb5'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda99, 8)== ord('i'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa0, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa8, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.read_int(0x4369b0, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x4369b1, 8)== ord('\x9b'))
        condition = Operators.AND(condition, cpu.read_int(0x4369b2, 8)== ord('\xf2'))
        condition = Operators.AND(condition, cpu.read_int(0x4369b3, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(0x4369b4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda98)
        condition = Operators.AND(condition, cpu.RIP == 0x465c50)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdae0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMOVAE_1_symbolic(self):
        ''' Instruction CMOVAE_1 
            Groups: cmov 
            0x411688:	cmovae	rax, r10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411688] = 'I'
        mem[0x411689] = '\x0f'
        mem[0x41168a] = 'C'
        mem[0x41168b] = '\xc2'
        cpu.RIP = 0x411688
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x20)
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 0x4a0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411688, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x411689, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x41168a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x41168b, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.RAX == 0x4a0)
        condition = Operators.AND(condition, cpu.RIP == 0x41168c)
        condition = Operators.AND(condition, cpu.R10 == 0x4a0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMOVAE_2_symbolic(self):
        ''' Instruction CMOVAE_2 
            Groups: cmov 
            0x411688:	cmovae	rax, r10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411688] = 'I'
        mem[0x411689] = '\x0f'
        mem[0x41168a] = 'C'
        mem[0x41168b] = '\xc2'
        cpu.RIP = 0x411688
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x20)
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 0x20)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411688, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x411689, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x41168a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x41168b, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.RAX == 0x20)
        condition = Operators.AND(condition, cpu.RIP == 0x41168c)
        condition = Operators.AND(condition, cpu.R10 == 0x20)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMOVAE_3_symbolic(self):
        ''' Instruction CMOVAE_3 
            Groups: cmov 
            0x411688:	cmovae	rax, r10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411688] = 'I'
        mem[0x411689] = '\x0f'
        mem[0x41168a] = 'C'
        mem[0x41168b] = '\xc2'
        cpu.RIP = 0x411688
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x20)
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 0x30)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411688, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x411689, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x41168a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x41168b, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.RAX == 0x30)
        condition = Operators.AND(condition, cpu.RIP == 0x41168c)
        condition = Operators.AND(condition, cpu.R10 == 0x30)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMOVAE_4_symbolic(self):
        ''' Instruction CMOVAE_4 
            Groups: cmov 
            0x411688:	cmovae	rax, r10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411688] = 'I'
        mem[0x411689] = '\x0f'
        mem[0x41168a] = 'C'
        mem[0x41168b] = '\xc2'
        cpu.RIP = 0x411688
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x20)
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 0x650)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411688, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x411689, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x41168a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x41168b, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.RAX == 0x650)
        condition = Operators.AND(condition, cpu.RIP == 0x41168c)
        condition = Operators.AND(condition, cpu.R10 == 0x650)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMOVAE_5_symbolic(self):
        ''' Instruction CMOVAE_5 
            Groups: cmov 
            0x411688:	cmovae	rax, r10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411688] = 'I'
        mem[0x411689] = '\x0f'
        mem[0x41168a] = 'C'
        mem[0x41168b] = '\xc2'
        cpu.RIP = 0x411688
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x20)
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 0x20)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411688, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x411689, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x41168a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x41168b, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.RAX == 0x20)
        condition = Operators.AND(condition, cpu.RIP == 0x41168c)
        condition = Operators.AND(condition, cpu.R10 == 0x20)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMOVAE_6_symbolic(self):
        ''' Instruction CMOVAE_6 
            Groups: cmov 
            0x411688:	cmovae	rax, r10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411688] = 'I'
        mem[0x411689] = '\x0f'
        mem[0x41168a] = 'C'
        mem[0x41168b] = '\xc2'
        cpu.RIP = 0x411688
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x20)
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 0x40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411688, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x411689, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x41168a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x41168b, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.RAX == 0x40)
        condition = Operators.AND(condition, cpu.RIP == 0x41168c)
        condition = Operators.AND(condition, cpu.R10 == 0x40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMOVA_1_symbolic(self):
        ''' Instruction CMOVA_1 
            Groups: cmov 
            0x41415a:	cmova	rdx, r13
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x41415a] = 'I'
        mem[0x41415b] = '\x0f'
        mem[0x41415c] = 'G'
        mem[0x41415d] = '\xd5'
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x4a0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x21e00)
        cpu.RIP = 0x41415a
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41415a, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x41415b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x41415c, 8)== ord('G'))
        condition = Operators.AND(condition, cpu.read_int(0x41415d, 8)== ord('\xd5'))
        condition = Operators.AND(condition, cpu.RDX == 0x4a0)
        condition = Operators.AND(condition, cpu.RIP == 0x41415e)
        condition = Operators.AND(condition, cpu.R13 == 0x21e00)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMOVB_1_symbolic(self):
        ''' Instruction CMOVB_1 
            Groups: cmov 
            0x400fed:	cmovb	r12, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400ff0] = '\xe3'
        mem[0x400fed] = 'L'
        mem[0x400fee] = '\x0f'
        mem[0x400fef] = 'B'
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x40)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400fed
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ff0, 8)== ord('\xe3'))
        condition = Operators.AND(condition, cpu.read_int(0x400fed, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x400fee, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400fef, 8)== ord('B'))
        condition = Operators.AND(condition, cpu.R12 == 0x40)
        condition = Operators.AND(condition, cpu.RIP == 0x400ff1)
        condition = Operators.AND(condition, cpu.RBX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMOVB_2_symbolic(self):
        ''' Instruction CMOVB_2 
            Groups: cmov 
            0x401190:	cmovb	r12, rax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x401190] = 'L'
        mem[0x401191] = '\x0f'
        mem[0x401192] = 'B'
        mem[0x401193] = '\xe0'
        cpu.RIP = 0x401190
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x40)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x401190, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x401191, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x401192, 8)== ord('B'))
        condition = Operators.AND(condition, cpu.read_int(0x401193, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.R12 == 0x40)
        condition = Operators.AND(condition, cpu.RAX == 0x40)
        condition = Operators.AND(condition, cpu.RIP == 0x401194)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMOVE_1_symbolic(self):
        ''' Instruction CMOVE_1 
            Groups: cmov 
            0x436edc:	cmove	rax, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436edc] = 'H'
        mem[0x436edd] = '\x0f'
        mem[0x436ede] = 'D'
        mem[0x436edf] = '\xc3'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x436edc
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x4a5301)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436edc, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436edd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x436ede, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x436edf, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.RAX == 0x4a5301)
        condition = Operators.AND(condition, cpu.RIP == 0x436ee0)
        condition = Operators.AND(condition, cpu.RBX == 0x4a5301)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMOVE_2_symbolic(self):
        ''' Instruction CMOVE_2 
            Groups: cmov 
            0x415da5:	cmove	rax, rdx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00415000, 0x1000, 'rwx')
        mem[0x415da8] = '\xc2'
        mem[0x415da5] = 'H'
        mem[0x415da6] = '\x0f'
        mem[0x415da7] = 'D'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x415da5
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x6e01c0)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x415da8, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.read_int(0x415da5, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x415da6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x415da7, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.RAX == 0x6e01c0)
        condition = Operators.AND(condition, cpu.RIP == 0x415da9)
        condition = Operators.AND(condition, cpu.RDX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMOVE_3_symbolic(self):
        ''' Instruction CMOVE_3 
            Groups: cmov 
            0x436f00:	cmove	rax, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436f00] = 'H'
        mem[0x436f01] = '\x0f'
        mem[0x436f02] = 'D'
        mem[0x436f03] = '\xc3'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x436f00
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x4a5301)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436f00, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436f01, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x436f02, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x436f03, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.RAX == 0x4a5301)
        condition = Operators.AND(condition, cpu.RIP == 0x436f04)
        condition = Operators.AND(condition, cpu.RBX == 0x4a5301)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMOVE_4_symbolic(self):
        ''' Instruction CMOVE_4 
            Groups: cmov 
            0x436f24:	cmove	rax, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436f24] = 'H'
        mem[0x436f25] = '\x0f'
        mem[0x436f26] = 'D'
        mem[0x436f27] = '\xc3'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x436f24
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x4a5301)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436f24, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436f25, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x436f26, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x436f27, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.RAX == 0x4a5301)
        condition = Operators.AND(condition, cpu.RIP == 0x436f28)
        condition = Operators.AND(condition, cpu.RBX == 0x4a5301)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMOVE_5_symbolic(self):
        ''' Instruction CMOVE_5 
            Groups: cmov 
            0x436a10:	cmove	rax, rdi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436a10] = 'H'
        mem[0x436a11] = '\x0f'
        mem[0x436a12] = 'D'
        mem[0x436a13] = '\xc7'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x4a5301)
        cpu.RIP = 0x436a10
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436a10, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436a11, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x436a12, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x436a13, 8)== ord('\xc7'))
        condition = Operators.AND(condition, cpu.RDI == 0x4a5301)
        condition = Operators.AND(condition, cpu.RAX == 0x4a5301)
        condition = Operators.AND(condition, cpu.RIP == 0x436a14)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMOVE_6_symbolic(self):
        ''' Instruction CMOVE_6 
            Groups: cmov 
            0x415da5:	cmove	rax, rdx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00415000, 0x1000, 'rwx')
        mem[0x415da8] = '\xc2'
        mem[0x415da5] = 'H'
        mem[0x415da6] = '\x0f'
        mem[0x415da7] = 'D'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x415da5
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x6bf1c0)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x415da8, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.read_int(0x415da5, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x415da6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x415da7, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.RAX == 0x6bf1c0)
        condition = Operators.AND(condition, cpu.RIP == 0x415da9)
        condition = Operators.AND(condition, cpu.RDX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMOVNE_1_symbolic(self):
        ''' Instruction CMOVNE_1 
            Groups: cmov 
            0x462345:	cmovne	rbx, rax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, 'rwx')
        mem[0x462348] = '\xd8'
        mem[0x462345] = 'H'
        mem[0x462346] = '\x0f'
        mem[0x462347] = 'E'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x462345
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x4a5301)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6bf6a0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x462348, 8)== ord('\xd8'))
        condition = Operators.AND(condition, cpu.read_int(0x462345, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x462346, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x462347, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.RAX == 0x4a5301)
        condition = Operators.AND(condition, cpu.RIP == 0x462349)
        condition = Operators.AND(condition, cpu.RBX == 0x6bf6a0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMPXCHG_1_symbolic(self):
        ''' Instruction CMPXCHG_1 
            Groups:  
            0x4134e6:	cmpxchg	dword ptr [rbx], esi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9840)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9841)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9842)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9843)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4134e6] = '\x0f'
        mem[0x4134e7] = '\xb1'
        mem[0x4134e8] = '3'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x1)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6b9840)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4134e6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6b9840, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9841, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9842, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9843, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4134e6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4134e7, 8)== ord('\xb1'))
        condition = Operators.AND(condition, cpu.read_int(0x4134e8, 8)== ord('3'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RBX == 0x6b9840)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4134e9)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMPXCHG_2_symbolic(self):
        ''' Instruction CMPXCHG_2 
            Groups:  
            0x435935:	cmpxchg	qword ptr [rdx], rdi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00435000, 0x1000, 'rwx')
        mem.mmap(0x006bd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd380)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd381)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd382)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd383)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd384)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd385)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd386)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd387)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x435935] = 'H'
        mem[0x435936] = '\x0f'
        mem[0x435937] = '\xb1'
        mem[0x435938] = ':'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x6bb7c0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x435935
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x6bd380)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6bd380, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.read_int(0x6bd381, 8)== ord('\xb7'))
        condition = Operators.AND(condition, cpu.read_int(0x6bd382, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x6bd383, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bd384, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bd385, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bd386, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bd387, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x435935, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x435936, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x435937, 8)== ord('\xb1'))
        condition = Operators.AND(condition, cpu.read_int(0x435938, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RDI == 0x6bb7c0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x435939)
        condition = Operators.AND(condition, cpu.RDX == 0x6bd380)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMPXCHG_3_symbolic(self):
        ''' Instruction CMPXCHG_3 
            Groups:  
            0x4134e6:	cmpxchg	dword ptr [rbx], esi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9840)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9841)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9842)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9843)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4134e6] = '\x0f'
        mem[0x4134e7] = '\xb1'
        mem[0x4134e8] = '3'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x1)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6b9840)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4134e6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6b9840, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9841, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9842, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9843, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4134e6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4134e7, 8)== ord('\xb1'))
        condition = Operators.AND(condition, cpu.read_int(0x4134e8, 8)== ord('3'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RBX == 0x6b9840)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4134e9)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMPXCHG_4_symbolic(self):
        ''' Instruction CMPXCHG_4 
            Groups:  
            0x4134e6:	cmpxchg	dword ptr [rbx], esi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9840)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9841)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9842)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9843)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4134e6] = '\x0f'
        mem[0x4134e7] = '\xb1'
        mem[0x4134e8] = '3'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x1)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6b9840)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4134e6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6b9840, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9841, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9842, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9843, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4134e6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4134e7, 8)== ord('\xb1'))
        condition = Operators.AND(condition, cpu.read_int(0x4134e8, 8)== ord('3'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RBX == 0x6b9840)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4134e9)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMPXCHG_5_symbolic(self):
        ''' Instruction CMPXCHG_5 
            Groups:  
            0x4134e6:	cmpxchg	dword ptr [rbx], esi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9840)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9841)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9842)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9843)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4134e6] = '\x0f'
        mem[0x4134e7] = '\xb1'
        mem[0x4134e8] = '3'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x1)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6b9840)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4134e6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6b9840, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9841, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9842, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9843, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4134e6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4134e7, 8)== ord('\xb1'))
        condition = Operators.AND(condition, cpu.read_int(0x4134e8, 8)== ord('3'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RBX == 0x6b9840)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4134e9)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMPXCHG_6_symbolic(self):
        ''' Instruction CMPXCHG_6 
            Groups:  
            0x407077:	cmpxchg	dword ptr [rip + 0x2b4692], esi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00407000, 0x1000, 'rwx')
        mem.mmap(0x006bb000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb710)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb711)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb712)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb713)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x407077] = '\x0f'
        mem[0x407078] = '\xb1'
        mem[0x407079] = '5'
        mem[0x40707a] = '\x92'
        mem[0x40707b] = 'F'
        mem[0x40707c] = '+'
        mem[0x40707d] = '\x00'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x1)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x407077
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6bb710, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb711, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb712, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb713, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x407077, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x407078, 8)== ord('\xb1'))
        condition = Operators.AND(condition, cpu.read_int(0x407079, 8)== ord('5'))
        condition = Operators.AND(condition, cpu.read_int(0x40707a, 8)== ord('\x92'))
        condition = Operators.AND(condition, cpu.read_int(0x40707b, 8)== ord('F'))
        condition = Operators.AND(condition, cpu.read_int(0x40707c, 8)== ord('+'))
        condition = Operators.AND(condition, cpu.read_int(0x40707d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40707e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMPXCHG_7_symbolic(self):
        ''' Instruction CMPXCHG_7 
            Groups:  
            0x414116:	cmpxchg	dword ptr [rbx], esi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9840)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9841)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9842)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9843)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x414116] = '\x0f'
        mem[0x414117] = '\xb1'
        mem[0x414118] = '3'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x1)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6b9840)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x414116
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6b9840, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9841, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9842, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9843, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x414116, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x414117, 8)== ord('\xb1'))
        condition = Operators.AND(condition, cpu.read_int(0x414118, 8)== ord('3'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RBX == 0x6b9840)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x414119)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMPXCHG_8_symbolic(self):
        ''' Instruction CMPXCHG_8 
            Groups:  
            0x4134e6:	cmpxchg	dword ptr [rbx], esi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9840)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9841)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9842)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9843)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4134e6] = '\x0f'
        mem[0x4134e7] = '\xb1'
        mem[0x4134e8] = '3'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x1)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6b9840)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4134e6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6b9840, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9841, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9842, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9843, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4134e6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4134e7, 8)== ord('\xb1'))
        condition = Operators.AND(condition, cpu.read_int(0x4134e8, 8)== ord('3'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RBX == 0x6b9840)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4134e9)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_1_symbolic(self):
        ''' Instruction CMP_1 
            Groups:  
            0x4322a2:	cmp	rax, r8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a2] = 'L'
        mem[0x4322a3] = '9'
        mem[0x4322a4] = '\xc0'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x22)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4322a2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a2, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a3, 8)== ord('9'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a4, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x22)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.R8 == 0x0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4322a5)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_10_symbolic(self):
        ''' Instruction CMP_10 
            Groups:  
            0x41172f:	cmp	r14, rax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411730] = '9'
        mem[0x411731] = '\xc6'
        mem[0x41172f] = 'I'
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x6b98b8)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x6b98b8)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x41172f
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411730, 8)== ord('9'))
        condition = Operators.AND(condition, cpu.read_int(0x411731, 8)== ord('\xc6'))
        condition = Operators.AND(condition, cpu.read_int(0x41172f, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.R14 == 0x6b98b8)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x6b98b8)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x411732)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_11_symbolic(self):
        ''' Instruction CMP_11 
            Groups:  
            0x411640:	cmp	rsi, -0x41
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411640] = 'H'
        mem[0x411641] = '\x83'
        mem[0x411642] = '\xfe'
        mem[0x411643] = '\xbf'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x10)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411640
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411640, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x411641, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x411642, 8)== ord('\xfe'))
        condition = Operators.AND(condition, cpu.read_int(0x411643, 8)== ord('\xbf'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RSI == 0x10)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x411644)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_12_symbolic(self):
        ''' Instruction CMP_12 
            Groups:  
            0x406e8d:	cmp	r14w, word ptr [rbx]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffe000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe904)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe905)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4f)
        mem[addr] = value
        mem[0x406e8d] = 'f'
        mem[0x406e8e] = 'D'
        mem[0x406e8f] = ';'
        mem[0x406e90] = '3'
        cpu.R14W = cs.new_bitvec(16)
        cs.add(cpu.R14W == 0x444c)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffe904)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e8d
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe904, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe905, 8)== ord('O'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8d, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8e, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8f, 8)== ord(';'))
        condition = Operators.AND(condition, cpu.read_int(0x406e90, 8)== ord('3'))
        condition = Operators.AND(condition, cpu.R14W == 0x444c)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffe904)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x406e91)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_13_symbolic(self):
        ''' Instruction CMP_13 
            Groups:  
            0x420ef0:	cmp	rdx, 0x400
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00420000, 0x1000, 'rwx')
        mem[0x420ef0] = 'H'
        mem[0x420ef1] = '\x81'
        mem[0x420ef2] = '\xfa'
        mem[0x420ef3] = '\x00'
        mem[0x420ef4] = '\x04'
        mem[0x420ef5] = '\x00'
        mem[0x420ef6] = '\x00'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x420ef0
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x20)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x420ef0, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x420ef1, 8)== ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(0x420ef2, 8)== ord('\xfa'))
        condition = Operators.AND(condition, cpu.read_int(0x420ef3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x420ef4, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(0x420ef5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x420ef6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x420ef7)
        condition = Operators.AND(condition, cpu.RDX == 0x20)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_14_symbolic(self):
        ''' Instruction CMP_14 
            Groups:  
            0x400b17:	cmp	dword ptr [rbp - 0x18], 5
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x400b18] = '}'
        mem[0x400b17] = '\x83'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x400b1a] = '\x05'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdafb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x400b19] = '\xe8'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdafa)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400b17
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdb10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf8, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdafb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x400b17, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x400b18, 8)== ord('}'))
        condition = Operators.AND(condition, cpu.read_int(0x400b19, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x400b1a, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf9, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdafa, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b1b)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdb10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_15_symbolic(self):
        ''' Instruction CMP_15 
            Groups:  
            0x406e8d:	cmp	r14w, word ptr [rbx]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffe000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffeb6a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x50)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffeb6b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x57)
        mem[addr] = value
        mem[0x406e8d] = 'f'
        mem[0x406e8e] = 'D'
        mem[0x406e8f] = ';'
        mem[0x406e90] = '3'
        cpu.R14W = cs.new_bitvec(16)
        cs.add(cpu.R14W == 0x444c)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffeb6a)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e8d
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffeb6a, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffeb6b, 8)== ord('W'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8d, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8e, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8f, 8)== ord(';'))
        condition = Operators.AND(condition, cpu.read_int(0x406e90, 8)== ord('3'))
        condition = Operators.AND(condition, cpu.R14W == 0x444c)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffeb6a)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x406e91)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_16_symbolic(self):
        ''' Instruction CMP_16 
            Groups:  
            0x400bf4:	cmp	qword ptr [rdi - 8], 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddb8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x39)
        mem[addr] = value
        mem[0x400bf4] = 'H'
        mem[0x400bf5] = '\x83'
        mem[0x400bf6] = '\x7f'
        mem[0x400bf7] = '\xf8'
        mem[0x400bf8] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddb9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xed)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddba)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddbb)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddbc)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddbd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddbe)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddbf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7fffffffddc0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400bf4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bf8, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf4, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf5, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf6, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf7, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddb8, 8)== ord('9'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddb9, 8)== ord('\xed'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddba, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddbb, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddbc, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddbd, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddbe, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddbf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RDI == 0x7fffffffddc0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400bf9)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_17_symbolic(self):
        ''' Instruction CMP_17 
            Groups:  
            0x400bf4:	cmp	qword ptr [rdi - 8], 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddf8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x51)
        mem[addr] = value
        mem[0x400bf4] = 'H'
        mem[0x400bf5] = '\x83'
        mem[0x400bf6] = '\x7f'
        mem[0x400bf7] = '\xf8'
        mem[0x400bf8] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddf9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xee)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddfa)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddfb)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddfc)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddfd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddfe)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddff)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7fffffffde00)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400bf4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bf8, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf4, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf5, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf6, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf7, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddf8, 8)== ord('Q'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddf9, 8)== ord('\xee'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddfa, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddfb, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddfc, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddfd, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddfe, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddff, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RDI == 0x7fffffffde00)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400bf9)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_18_symbolic(self):
        ''' Instruction CMP_18 
            Groups:  
            0x41167f:	cmp	rax, 0x20
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411680] = '\x83'
        mem[0x411681] = '\xf8'
        mem[0x411682] = ' '
        mem[0x41167f] = 'H'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x43)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x41167f
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411680, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x411681, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.read_int(0x411682, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x41167f, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x43)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x411683)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_19_symbolic(self):
        ''' Instruction CMP_19 
            Groups:  
            0x4323e2:	cmp	edx, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4323e2] = '\x83'
        mem[0x4323e3] = '\xfa'
        mem[0x4323e4] = '\x01'
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x3)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4323e2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4323e2, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x4323e3, 8)== ord('\xfa'))
        condition = Operators.AND(condition, cpu.read_int(0x4323e4, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.EDX == 0x3)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4323e5)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_2_symbolic(self):
        ''' Instruction CMP_2 
            Groups:  
            0x40ec84:	cmp	rax, rdx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040e000, 0x1000, 'rwx')
        mem[0x40ec84] = 'H'
        mem[0x40ec85] = '9'
        mem[0x40ec86] = '\xd0'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x6b9ef8)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40ec84
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x6ba088)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40ec84, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x40ec85, 8)== ord('9'))
        condition = Operators.AND(condition, cpu.read_int(0x40ec86, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x6b9ef8)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40ec87)
        condition = Operators.AND(condition, cpu.RDX == 0x6ba088)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_20_symbolic(self):
        ''' Instruction CMP_20 
            Groups:  
            0x406e8d:	cmp	r14w, word ptr [rbx]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffe000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffeccb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffeccc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4f)
        mem[addr] = value
        mem[0x406e8d] = 'f'
        mem[0x406e8e] = 'D'
        mem[0x406e8f] = ';'
        mem[0x406e90] = '3'
        cpu.R14W = cs.new_bitvec(16)
        cs.add(cpu.R14W == 0x444c)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffeccb)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e8d
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffeccb, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffeccc, 8)== ord('O'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8d, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8e, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8f, 8)== ord(';'))
        condition = Operators.AND(condition, cpu.read_int(0x406e90, 8)== ord('3'))
        condition = Operators.AND(condition, cpu.R14W == 0x444c)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffeccb)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x406e91)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_21_symbolic(self):
        ''' Instruction CMP_21 
            Groups:  
            0x411be6:	cmp	edi, 3
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411be8] = '\x03'
        mem[0x411be6] = '\x83'
        mem[0x411be7] = '\xff'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x4)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411be6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411be8, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(0x411be6, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x411be7, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x4)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x411be9)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_3_symbolic(self):
        ''' Instruction CMP_3 
            Groups:  
            0x43229b:	cmp	r10b, byte ptr [r9]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942b0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x68)
        mem[addr] = value
        mem[0x43229b] = 'E'
        mem[0x43229c] = ':'
        mem[0x43229d] = '\x11'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.R10B = cs.new_bitvec(8)
        cs.add(cpu.R10B == 0x76)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x43229b
        cpu.R9 = cs.new_bitvec(64)
        cs.add(cpu.R9 == 0x4942b0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4942b0, 8)== ord('h'))
        condition = Operators.AND(condition, cpu.read_int(0x43229b, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x43229c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x43229d, 8)== ord('\x11'))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.R10B == 0x76)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x43229e)
        condition = Operators.AND(condition, cpu.R9 == 0x4942b0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_4_symbolic(self):
        ''' Instruction CMP_4 
            Groups:  
            0x400bf4:	cmp	qword ptr [rdi - 8], 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdca8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdca9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe2)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdcaa)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdcab)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdcac)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdcad)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdcae)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdcaf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x400bf4] = 'H'
        mem[0x400bf5] = '\x83'
        mem[0x400bf6] = '\x7f'
        mem[0x400bf7] = '\xf8'
        mem[0x400bf8] = '\x00'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7fffffffdcb0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400bf4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdca8, 8)== ord('\x06'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdca9, 8)== ord('\xe2'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdcaa, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdcab, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdcac, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdcad, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdcae, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdcaf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf4, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf5, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf6, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf7, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf8, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RDI == 0x7fffffffdcb0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400bf9)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_5_symbolic(self):
        ''' Instruction CMP_5 
            Groups:  
            0x4322e4:	cmp	r8, r12
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322e4] = 'M'
        mem[0x4322e5] = '9'
        mem[0x4322e6] = '\xe0'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x44)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x23)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322e4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322e4, 8)== ord('M'))
        condition = Operators.AND(condition, cpu.read_int(0x4322e5, 8)== ord('9'))
        condition = Operators.AND(condition, cpu.read_int(0x4322e6, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.R12 == 0x44)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.R8 == 0x23)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4322e7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_6_symbolic(self):
        ''' Instruction CMP_6 
            Groups:  
            0x411b57:	cmp	r13, 0x3ff
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411b57] = 'I'
        mem[0x411b58] = '\x81'
        mem[0x411b59] = '\xfd'
        mem[0x411b5a] = '\xff'
        mem[0x411b5b] = '\x03'
        mem[0x411b5c] = '\x00'
        mem[0x411b5d] = '\x00'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x30)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411b57
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411b57, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x411b58, 8)== ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(0x411b59, 8)== ord('\xfd'))
        condition = Operators.AND(condition, cpu.read_int(0x411b5a, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x411b5b, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(0x411b5c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x411b5d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.R13 == 0x30)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x411b5e)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_7_symbolic(self):
        ''' Instruction CMP_7 
            Groups:  
            0x4322a2:	cmp	rax, r8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a2] = 'L'
        mem[0x4322a3] = '9'
        mem[0x4322a4] = '\xc0'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x8)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4322a2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a2, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a3, 8)== ord('9'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a4, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x8)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.R8 == 0x0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4322a5)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_8_symbolic(self):
        ''' Instruction CMP_8 
            Groups:  
            0x406e8d:	cmp	r14w, word ptr [rbx]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffe000, 0x1000, 'rwx')
        mem[0x406e8d] = 'f'
        mem[0x406e8e] = 'D'
        mem[0x406e8f] = ';'
        mem[0x406e90] = '3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe0f8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x58)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe0f9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        cpu.R14W = cs.new_bitvec(16)
        cs.add(cpu.R14W == 0x444c)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffe0f8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e8d
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e8d, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8e, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8f, 8)== ord(';'))
        condition = Operators.AND(condition, cpu.read_int(0x406e90, 8)== ord('3'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe0f8, 8)== ord('X'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe0f9, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.R14W == 0x444c)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffe0f8)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x406e91)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_CMP_9_symbolic(self):
        ''' Instruction CMP_9 
            Groups:  
            0x413518:	cmp	dword ptr [rip + 0x2a9e5d], 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006bd000, 0x1000, 'rwx')
        mem[0x413518] = '\x83'
        mem[0x413519] = '='
        mem[0x41351a] = ']'
        mem[0x41351b] = '\x9e'
        mem[0x41351c] = '*'
        mem[0x41351d] = '\x00'
        mem[0x41351e] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd37c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd37d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd37e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd37f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x413518
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x413518, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x413519, 8)== ord('='))
        condition = Operators.AND(condition, cpu.read_int(0x41351a, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.read_int(0x41351b, 8)== ord('\x9e'))
        condition = Operators.AND(condition, cpu.read_int(0x41351c, 8)== ord('*'))
        condition = Operators.AND(condition, cpu.read_int(0x41351d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x41351e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bd37c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bd37d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bd37e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bd37f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41351f)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_DEC_1_symbolic(self):
        ''' Instruction DEC_1 
            Groups:  
            0x40715b:	dec	dword ptr [rip + 0x2b45af]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00407000, 0x1000, 'rwx')
        mem.mmap(0x006bb000, 0x1000, 'rwx')
        mem[0x407160] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb710)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb712)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb713)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb711)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x40715b] = '\xff'
        mem[0x40715c] = '\r'
        mem[0x40715d] = '\xaf'
        mem[0x40715e] = 'E'
        mem[0x40715f] = '+'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x40715b
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x407160, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb710, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb712, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb713, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb711, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x40715b, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x40715c, 8)== ord('\r'))
        condition = Operators.AND(condition, cpu.read_int(0x40715d, 8)== ord('\xaf'))
        condition = Operators.AND(condition, cpu.read_int(0x40715e, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x40715f, 8)== ord('+'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x407161)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_DEC_2_symbolic(self):
        ''' Instruction DEC_2 
            Groups:  
            0x420f00:	dec	ecx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00420000, 0x1000, 'rwx')
        mem[0x420f00] = '\xff'
        mem[0x420f01] = '\xc9'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x420f00
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x420f00, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x420f01, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x420f02)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_DEC_3_symbolic(self):
        ''' Instruction DEC_3 
            Groups:  
            0x413528:	dec	dword ptr [rbx]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9840)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9841)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9842)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9843)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x413528] = '\xff'
        mem[0x413529] = '\x0b'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6b9840)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.RIP = 0x413528
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6b9840, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9841, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9842, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9843, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x413528, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x413529, 8)== ord('\x0b'))
        condition = Operators.AND(condition, cpu.RBX == 0x6b9840)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41352a)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_DEC_4_symbolic(self):
        ''' Instruction DEC_4 
            Groups:  
            0x413528:	dec	dword ptr [rbx]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9840)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9841)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9842)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9843)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x413528] = '\xff'
        mem[0x413529] = '\x0b'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6b9840)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.RIP = 0x413528
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6b9840, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9841, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9842, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9843, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x413528, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x413529, 8)== ord('\x0b'))
        condition = Operators.AND(condition, cpu.RBX == 0x6b9840)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41352a)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_DEC_5_symbolic(self):
        ''' Instruction DEC_5 
            Groups:  
            0x413528:	dec	dword ptr [rbx]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9840)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9841)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9842)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9843)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x413528] = '\xff'
        mem[0x413529] = '\x0b'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6b9840)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.RIP = 0x413528
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6b9840, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9841, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9842, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9843, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x413528, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x413529, 8)== ord('\x0b'))
        condition = Operators.AND(condition, cpu.RBX == 0x6b9840)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41352a)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_DEC_6_symbolic(self):
        ''' Instruction DEC_6 
            Groups:  
            0x413528:	dec	dword ptr [rbx]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9840)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9841)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9842)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9843)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x413528] = '\xff'
        mem[0x413529] = '\x0b'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6b9840)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.RIP = 0x413528
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6b9840, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9841, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9842, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9843, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x413528, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x413529, 8)== ord('\x0b'))
        condition = Operators.AND(condition, cpu.RBX == 0x6b9840)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41352a)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_DEC_7_symbolic(self):
        ''' Instruction DEC_7 
            Groups:  
            0x41b450:	dec	ecx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041b000, 0x1000, 'rwx')
        mem[0x41b450] = '\xff'
        mem[0x41b451] = '\xc9'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x41b450
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41b450, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x41b451, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x41b452)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_DEC_8_symbolic(self):
        ''' Instruction DEC_8 
            Groups:  
            0x4140b0:	dec	dword ptr [rbx]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9840)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9841)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9842)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9843)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4140b0] = '\xff'
        mem[0x4140b1] = '\x0b'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6b9840)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.RIP = 0x4140b0
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6b9840, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9841, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9842, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9843, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4140b0, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x4140b1, 8)== ord('\x0b'))
        condition = Operators.AND(condition, cpu.RBX == 0x6b9840)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4140b2)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_DEC_9_symbolic(self):
        ''' Instruction DEC_9 
            Groups:  
            0x413528:	dec	dword ptr [rbx]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9840)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9841)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9842)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9843)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x413528] = '\xff'
        mem[0x413529] = '\x0b'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6b9840)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.RIP = 0x413528
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6b9840, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9841, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9842, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9843, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x413528, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x413529, 8)== ord('\x0b'))
        condition = Operators.AND(condition, cpu.RBX == 0x6b9840)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41352a)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_IMUL_1_symbolic(self):
        ''' Instruction IMUL_1 
            Groups:  
            0x40101f:	imul	rax, r12
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x401020] = '\x0f'
        mem[0x401021] = '\xaf'
        mem[0x401022] = '\xc4'
        mem[0x40101f] = 'I'
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x40)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40101f
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0xf)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x22)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x401020, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x401021, 8)== ord('\xaf'))
        condition = Operators.AND(condition, cpu.read_int(0x401022, 8)== ord('\xc4'))
        condition = Operators.AND(condition, cpu.read_int(0x40101f, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.R12 == 0x40)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x401023)
        condition = Operators.AND(condition, cpu.RDX == 0xf)
        condition = Operators.AND(condition, cpu.RAX == 0x880)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_IMUL_10_symbolic(self):
        ''' Instruction IMUL_10 
            Groups:  
            0x4010dd:	imul	rax, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x4010e0] = '\xc3'
        mem[0x4010dd] = 'H'
        mem[0x4010de] = '\x0f'
        mem[0x4010df] = '\xaf'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x8)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x7)
        cpu.RIP = 0x4010dd
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0xa)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4010e0, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.read_int(0x4010dd, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4010de, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4010df, 8)== ord('\xaf'))
        condition = Operators.AND(condition, cpu.RBX == 0x8)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RDX == 0x7)
        condition = Operators.AND(condition, cpu.RIP == 0x4010e1)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x50)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_IMUL_11_symbolic(self):
        ''' Instruction IMUL_11 
            Groups:  
            0x432453:	imul	eax, edx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432453] = '\x0f'
        mem[0x432454] = '\xaf'
        mem[0x432455] = '\xc2'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432453
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0xc)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x40)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xc)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432453, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x432454, 8)== ord('\xaf'))
        condition = Operators.AND(condition, cpu.read_int(0x432455, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x432456)
        condition = Operators.AND(condition, cpu.RDX == 0xc)
        condition = Operators.AND(condition, cpu.EAX == 0x300)
        condition = Operators.AND(condition, cpu.EDX == 0xc)
        condition = Operators.AND(condition, cpu.RAX == 0x300)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_IMUL_12_symbolic(self):
        ''' Instruction IMUL_12 
            Groups:  
            0x432453:	imul	eax, edx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432453] = '\x0f'
        mem[0x432454] = '\xaf'
        mem[0x432455] = '\xc2'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432453
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x40)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x8)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432453, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x432454, 8)== ord('\xaf'))
        condition = Operators.AND(condition, cpu.read_int(0x432455, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x432456)
        condition = Operators.AND(condition, cpu.RDX == 0x8)
        condition = Operators.AND(condition, cpu.EAX == 0x200)
        condition = Operators.AND(condition, cpu.EDX == 0x8)
        condition = Operators.AND(condition, cpu.RAX == 0x200)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_IMUL_13_symbolic(self):
        ''' Instruction IMUL_13 
            Groups:  
            0x432464:	imul	eax, edx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432464] = '\x0f'
        mem[0x432465] = '\xaf'
        mem[0x432466] = '\xc2'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432464
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x1)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x600000)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x600000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432464, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x432465, 8)== ord('\xaf'))
        condition = Operators.AND(condition, cpu.read_int(0x432466, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x432467)
        condition = Operators.AND(condition, cpu.RDX == 0x1)
        condition = Operators.AND(condition, cpu.EAX == 0x600000)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.RAX == 0x600000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_IMUL_14_symbolic(self):
        ''' Instruction IMUL_14 
            Groups:  
            0x432461:	imul	eax, ecx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432461] = '\x0f'
        mem[0x432462] = '\xaf'
        mem[0x432463] = '\xc1'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432461
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x1)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x300)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x300)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x2000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432461, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x432462, 8)== ord('\xaf'))
        condition = Operators.AND(condition, cpu.read_int(0x432463, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x432464)
        condition = Operators.AND(condition, cpu.RDX == 0x1)
        condition = Operators.AND(condition, cpu.EAX == 0x600000)
        condition = Operators.AND(condition, cpu.RAX == 0x600000)
        condition = Operators.AND(condition, cpu.ECX == 0x2000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_IMUL_2_symbolic(self):
        ''' Instruction IMUL_2 
            Groups:  
            0x401162:	imul	rax, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x401162] = 'H'
        mem[0x401163] = '\x0f'
        mem[0x401164] = '\xaf'
        mem[0x401165] = '\xc3'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x8)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x800)
        cpu.RIP = 0x401162
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0xa)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x401162, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x401163, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x401164, 8)== ord('\xaf'))
        condition = Operators.AND(condition, cpu.read_int(0x401165, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.RBX == 0x8)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RDX == 0x800)
        condition = Operators.AND(condition, cpu.RIP == 0x401166)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x50)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_IMUL_3_symbolic(self):
        ''' Instruction IMUL_3 
            Groups:  
            0x413fcc:	imul	r12, rsi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem[0x413fcc] = 'L'
        mem[0x413fcd] = '\x0f'
        mem[0x413fce] = '\xaf'
        mem[0x413fcf] = '\xe6'
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x491)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x1)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x491)
        cpu.RIP = 0x413fcc
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0xffffffff)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x413fcc, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x413fcd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x413fce, 8)== ord('\xaf'))
        condition = Operators.AND(condition, cpu.read_int(0x413fcf, 8)== ord('\xe6'))
        condition = Operators.AND(condition, cpu.R12 == 0x491)
        condition = Operators.AND(condition, cpu.RSI == 0x1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x413fd0)
        condition = Operators.AND(condition, cpu.RDX == 0x491)
        condition = Operators.AND(condition, cpu.RAX == 0xffffffff)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_IMUL_4_symbolic(self):
        ''' Instruction IMUL_4 
            Groups:  
            0x43221c:	imul	edx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x43221c] = '\xf7'
        mem[0x43221d] = '\xea'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x43221c
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x55555556)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x55555556)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x9)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43221c, 8)== ord('\xf7'))
        condition = Operators.AND(condition, cpu.read_int(0x43221d, 8)== ord('\xea'))
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x43221e)
        condition = Operators.AND(condition, cpu.RDX == 0x3)
        condition = Operators.AND(condition, cpu.EDX == 0x3)
        condition = Operators.AND(condition, cpu.RAX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_IMUL_5_symbolic(self):
        ''' Instruction IMUL_5 
            Groups:  
            0x432461:	imul	eax, ecx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432461] = '\x0f'
        mem[0x432462] = '\xaf'
        mem[0x432463] = '\xc1'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432461
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x1)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x200)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x200)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432461, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x432462, 8)== ord('\xaf'))
        condition = Operators.AND(condition, cpu.read_int(0x432463, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x432464)
        condition = Operators.AND(condition, cpu.RDX == 0x1)
        condition = Operators.AND(condition, cpu.EAX == 0x8000)
        condition = Operators.AND(condition, cpu.RAX == 0x8000)
        condition = Operators.AND(condition, cpu.ECX == 0x40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_IMUL_6_symbolic(self):
        ''' Instruction IMUL_6 
            Groups:  
            0x43221c:	imul	edx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x43221c] = '\xf7'
        mem[0x43221d] = '\xea'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x43221c
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x55555556)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x55555556)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x3)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43221c, 8)== ord('\xf7'))
        condition = Operators.AND(condition, cpu.read_int(0x43221d, 8)== ord('\xea'))
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x43221e)
        condition = Operators.AND(condition, cpu.RDX == 0x1)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.RAX == 0x2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_IMUL_7_symbolic(self):
        ''' Instruction IMUL_7 
            Groups:  
            0x43221c:	imul	edx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x43221c] = '\xf7'
        mem[0x43221d] = '\xea'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x43221c
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x55555556)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x55555556)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x3)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43221c, 8)== ord('\xf7'))
        condition = Operators.AND(condition, cpu.read_int(0x43221d, 8)== ord('\xea'))
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x43221e)
        condition = Operators.AND(condition, cpu.RDX == 0x1)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.RAX == 0x2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_IMUL_8_symbolic(self):
        ''' Instruction IMUL_8 
            Groups:  
            0x43221c:	imul	edx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x43221c] = '\xf7'
        mem[0x43221d] = '\xea'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x43221c
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x55555556)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x55555556)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x9)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43221c, 8)== ord('\xf7'))
        condition = Operators.AND(condition, cpu.read_int(0x43221d, 8)== ord('\xea'))
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x43221e)
        condition = Operators.AND(condition, cpu.RDX == 0x3)
        condition = Operators.AND(condition, cpu.EDX == 0x3)
        condition = Operators.AND(condition, cpu.RAX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_IMUL_9_symbolic(self):
        ''' Instruction IMUL_9 
            Groups:  
            0x432464:	imul	eax, edx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432464] = '\x0f'
        mem[0x432465] = '\xaf'
        mem[0x432466] = '\xc2'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432464
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x1)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x8000)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x8000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432464, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x432465, 8)== ord('\xaf'))
        condition = Operators.AND(condition, cpu.read_int(0x432466, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x432467)
        condition = Operators.AND(condition, cpu.RDX == 0x1)
        condition = Operators.AND(condition, cpu.EAX == 0x8000)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.RAX == 0x8000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_INC_1_symbolic(self):
        ''' Instruction INC_1 
            Groups:  
            0x420e46:	inc	rdi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00420000, 0x1000, 'rwx')
        mem[0x420e48] = '\xc7'
        mem[0x420e46] = 'H'
        mem[0x420e47] = '\xff'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x420e46
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x6bf6a0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x420e48, 8)== ord('\xc7'))
        condition = Operators.AND(condition, cpu.read_int(0x420e46, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x420e47, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x420e49)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RDI == 0x6bf6a1)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_INC_2_symbolic(self):
        ''' Instruction INC_2 
            Groups:  
            0x41b3a0:	inc	rsi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041b000, 0x1000, 'rwx')
        mem[0x41b3a0] = 'H'
        mem[0x41b3a1] = '\xff'
        mem[0x41b3a2] = '\xc6'
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x4a487e)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x41b3a0
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41b3a0, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x41b3a1, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x41b3a2, 8)== ord('\xc6'))
        condition = Operators.AND(condition, cpu.RSI == 0x4a487f)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41b3a3)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_INC_3_symbolic(self):
        ''' Instruction INC_3 
            Groups:  
            0x41b3a3:	inc	rdi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041b000, 0x1000, 'rwx')
        mem[0x41b3a3] = 'H'
        mem[0x41b3a4] = '\xff'
        mem[0x41b3a5] = '\xc7'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x41b3a3
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x6bf6f0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41b3a3, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x41b3a4, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x41b3a5, 8)== ord('\xc7'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41b3a6)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RDI == 0x6bf6f1)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_INC_4_symbolic(self):
        ''' Instruction INC_4 
            Groups:  
            0x420e43:	inc	rsi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00420000, 0x1000, 'rwx')
        mem[0x420e43] = 'H'
        mem[0x420e44] = '\xff'
        mem[0x420e45] = '\xc6'
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x4a5301)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x420e43
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x420e43, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x420e44, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x420e45, 8)== ord('\xc6'))
        condition = Operators.AND(condition, cpu.RSI == 0x4a5302)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x420e46)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_1_symbolic(self):
        ''' Instruction JAE_1 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a0] = 's'
        mem[0x4322a1] = '>'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322a0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a0, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a1, 8)== ord('>'))
        condition = Operators.AND(condition, cpu.RIP == 0x4322e0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_10_symbolic(self):
        ''' Instruction JAE_10 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a0] = 's'
        mem[0x4322a1] = '>'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322a0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a0, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a1, 8)== ord('>'))
        condition = Operators.AND(condition, cpu.RIP == 0x4322e0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_11_symbolic(self):
        ''' Instruction JAE_11 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a0] = 's'
        mem[0x4322a1] = '>'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322a0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a0, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a1, 8)== ord('>'))
        condition = Operators.AND(condition, cpu.RIP == 0x4322e0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_12_symbolic(self):
        ''' Instruction JAE_12 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a0] = 's'
        mem[0x4322a1] = '>'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4322a0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a0, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a1, 8)== ord('>'))
        condition = Operators.AND(condition, cpu.RIP == 0x4322a2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_13_symbolic(self):
        ''' Instruction JAE_13 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a0] = 's'
        mem[0x4322a1] = '>'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4322a0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a0, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a1, 8)== ord('>'))
        condition = Operators.AND(condition, cpu.RIP == 0x4322a2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_14_symbolic(self):
        ''' Instruction JAE_14 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a0] = 's'
        mem[0x4322a1] = '>'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4322a0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a0, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a1, 8)== ord('>'))
        condition = Operators.AND(condition, cpu.RIP == 0x4322a2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_15_symbolic(self):
        ''' Instruction JAE_15 
            Groups: jump 
            0x400c91:	jae	0x400ce9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400c91] = 's'
        mem[0x400c92] = 'V'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400c91

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c91, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x400c92, 8)== ord('V'))
        condition = Operators.AND(condition, cpu.RIP == 0x400c93)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_16_symbolic(self):
        ''' Instruction JAE_16 
            Groups: jump 
            0x411368:	jae	0x411518
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411368] = '\x0f'
        mem[0x411369] = '\x83'
        mem[0x41136a] = '\xaa'
        mem[0x41136b] = '\x01'
        mem[0x41136c] = '\x00'
        mem[0x41136d] = '\x00'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411368

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411368, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x411369, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x41136a, 8)== ord('\xaa'))
        condition = Operators.AND(condition, cpu.read_int(0x41136b, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x41136c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x41136d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x411518)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_17_symbolic(self):
        ''' Instruction JAE_17 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a0] = 's'
        mem[0x4322a1] = '>'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4322a0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a0, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a1, 8)== ord('>'))
        condition = Operators.AND(condition, cpu.RIP == 0x4322a2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_18_symbolic(self):
        ''' Instruction JAE_18 
            Groups: jump 
            0x41b394:	jae	0x41b410
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041b000, 0x1000, 'rwx')
        mem[0x41b394] = 's'
        mem[0x41b395] = 'z'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x41b394

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41b394, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x41b395, 8)== ord('z'))
        condition = Operators.AND(condition, cpu.RIP == 0x41b396)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_19_symbolic(self):
        ''' Instruction JAE_19 
            Groups: jump 
            0x400c91:	jae	0x400ce9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400c91] = 's'
        mem[0x400c92] = 'V'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400c91

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c91, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x400c92, 8)== ord('V'))
        condition = Operators.AND(condition, cpu.RIP == 0x400c93)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_2_symbolic(self):
        ''' Instruction JAE_2 
            Groups: jump 
            0x400fcf:	jae	0x400ff8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400fd0] = "'"
        mem[0x400fcf] = 's'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400fcf

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400fd0, 8)== ord("'"))
        condition = Operators.AND(condition, cpu.read_int(0x400fcf, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.RIP == 0x400fd1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_20_symbolic(self):
        ''' Instruction JAE_20 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a0] = 's'
        mem[0x4322a1] = '>'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4322a0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a0, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a1, 8)== ord('>'))
        condition = Operators.AND(condition, cpu.RIP == 0x4322a2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_21_symbolic(self):
        ''' Instruction JAE_21 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a0] = 's'
        mem[0x4322a1] = '>'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4322a0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a0, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a1, 8)== ord('>'))
        condition = Operators.AND(condition, cpu.RIP == 0x4322a2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_3_symbolic(self):
        ''' Instruction JAE_3 
            Groups: jump 
            0x400c91:	jae	0x400ce9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400c91] = 's'
        mem[0x400c92] = 'V'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400c91

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c91, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x400c92, 8)== ord('V'))
        condition = Operators.AND(condition, cpu.RIP == 0x400ce9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_4_symbolic(self):
        ''' Instruction JAE_4 
            Groups: jump 
            0x400fcf:	jae	0x400ff8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400fd0] = "'"
        mem[0x400fcf] = 's'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400fcf

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400fd0, 8)== ord("'"))
        condition = Operators.AND(condition, cpu.read_int(0x400fcf, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.RIP == 0x400fd1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_5_symbolic(self):
        ''' Instruction JAE_5 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a0] = 's'
        mem[0x4322a1] = '>'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4322a0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a0, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a1, 8)== ord('>'))
        condition = Operators.AND(condition, cpu.RIP == 0x4322a2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_6_symbolic(self):
        ''' Instruction JAE_6 
            Groups: jump 
            0x400fcf:	jae	0x400ff8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400fd0] = "'"
        mem[0x400fcf] = 's'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400fcf

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400fd0, 8)== ord("'"))
        condition = Operators.AND(condition, cpu.read_int(0x400fcf, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.RIP == 0x400fd1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_7_symbolic(self):
        ''' Instruction JAE_7 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a0] = 's'
        mem[0x4322a1] = '>'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4322a0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a0, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a1, 8)== ord('>'))
        condition = Operators.AND(condition, cpu.RIP == 0x4322a2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_8_symbolic(self):
        ''' Instruction JAE_8 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a0] = 's'
        mem[0x4322a1] = '>'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322a0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a0, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a1, 8)== ord('>'))
        condition = Operators.AND(condition, cpu.RIP == 0x4322e0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JAE_9_symbolic(self):
        ''' Instruction JAE_9 
            Groups: jump 
            0x4322a0:	jae	0x4322e0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a0] = 's'
        mem[0x4322a1] = '>'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4322a0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a0, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a1, 8)== ord('>'))
        condition = Operators.AND(condition, cpu.RIP == 0x4322a2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_1_symbolic(self):
        ''' Instruction JA_1 
            Groups: jump 
            0x463fb5:	ja	0x463fea
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00463000, 0x1000, 'rwx')
        mem[0x463fb5] = 'w'
        mem[0x463fb6] = '3'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x463fb5

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x463fb5, 8)== ord('w'))
        condition = Operators.AND(condition, cpu.read_int(0x463fb6, 8)== ord('3'))
        condition = Operators.AND(condition, cpu.RIP == 0x463fea)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_10_symbolic(self):
        ''' Instruction JA_10 
            Groups: jump 
            0x4376c8:	ja	0x437723
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x4376c8] = 'w'
        mem[0x4376c9] = 'Y'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4376c8

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4376c8, 8)== ord('w'))
        condition = Operators.AND(condition, cpu.read_int(0x4376c9, 8)== ord('Y'))
        condition = Operators.AND(condition, cpu.RIP == 0x4376ca)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_11_symbolic(self):
        ''' Instruction JA_11 
            Groups: jump 
            0x45c5a9:	ja	0x45c5c0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045c000, 0x1000, 'rwx')
        mem[0x45c5a9] = 'w'
        mem[0x45c5aa] = '\x15'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x45c5a9

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x45c5a9, 8)== ord('w'))
        condition = Operators.AND(condition, cpu.read_int(0x45c5aa, 8)== ord('\x15'))
        condition = Operators.AND(condition, cpu.RIP == 0x45c5ab)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_12_symbolic(self):
        ''' Instruction JA_12 
            Groups: jump 
            0x437176:	ja	0x436b5a
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x437176] = '\x0f'
        mem[0x437177] = '\x87'
        mem[0x437178] = '\xde'
        mem[0x437179] = '\xf9'
        mem[0x43717a] = '\xff'
        mem[0x43717b] = '\xff'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x437176

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x437176, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x437177, 8)== ord('\x87'))
        condition = Operators.AND(condition, cpu.read_int(0x437178, 8)== ord('\xde'))
        condition = Operators.AND(condition, cpu.read_int(0x437179, 8)== ord('\xf9'))
        condition = Operators.AND(condition, cpu.read_int(0x43717a, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x43717b, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RIP == 0x43717c)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_13_symbolic(self):
        ''' Instruction JA_13 
            Groups: jump 
            0x436810:	ja	0x436830
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436810] = 'w'
        mem[0x436811] = '\x1e'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x436810

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436810, 8)== ord('w'))
        condition = Operators.AND(condition, cpu.read_int(0x436811, 8)== ord('\x1e'))
        condition = Operators.AND(condition, cpu.RIP == 0x436812)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_14_symbolic(self):
        ''' Instruction JA_14 
            Groups: jump 
            0x436b6a:	ja	0x436b40
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436b6a] = 'w'
        mem[0x436b6b] = '\xd4'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x436b6a

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436b6a, 8)== ord('w'))
        condition = Operators.AND(condition, cpu.read_int(0x436b6b, 8)== ord('\xd4'))
        condition = Operators.AND(condition, cpu.RIP == 0x436b6c)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_15_symbolic(self):
        ''' Instruction JA_15 
            Groups: jump 
            0x411717:	ja	0x411792
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411718] = 'y'
        mem[0x411717] = 'w'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x411717

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411718, 8)== ord('y'))
        condition = Operators.AND(condition, cpu.read_int(0x411717, 8)== ord('w'))
        condition = Operators.AND(condition, cpu.RIP == 0x411719)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_16_symbolic(self):
        ''' Instruction JA_16 
            Groups: jump 
            0x40dab8:	ja	0x40d9ab
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem[0x40dab8] = '\x0f'
        mem[0x40dab9] = '\x87'
        mem[0x40daba] = '\xed'
        mem[0x40dabb] = '\xfe'
        mem[0x40dabc] = '\xff'
        mem[0x40dabd] = '\xff'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40dab8

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40dab8, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40dab9, 8)== ord('\x87'))
        condition = Operators.AND(condition, cpu.read_int(0x40daba, 8)== ord('\xed'))
        condition = Operators.AND(condition, cpu.read_int(0x40dabb, 8)== ord('\xfe'))
        condition = Operators.AND(condition, cpu.read_int(0x40dabc, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x40dabd, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RIP == 0x40dabe)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_17_symbolic(self):
        ''' Instruction JA_17 
            Groups: jump 
            0x411644:	ja	0x411ddd
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411644] = '\x0f'
        mem[0x411645] = '\x87'
        mem[0x411646] = '\x93'
        mem[0x411647] = '\x07'
        mem[0x411648] = '\x00'
        mem[0x411649] = '\x00'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x411644

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411644, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x411645, 8)== ord('\x87'))
        condition = Operators.AND(condition, cpu.read_int(0x411646, 8)== ord('\x93'))
        condition = Operators.AND(condition, cpu.read_int(0x411647, 8)== ord('\x07'))
        condition = Operators.AND(condition, cpu.read_int(0x411648, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x411649, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x41164a)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_18_symbolic(self):
        ''' Instruction JA_18 
            Groups: jump 
            0x436810:	ja	0x436830
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436810] = 'w'
        mem[0x436811] = '\x1e'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x436810

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436810, 8)== ord('w'))
        condition = Operators.AND(condition, cpu.read_int(0x436811, 8)== ord('\x1e'))
        condition = Operators.AND(condition, cpu.RIP == 0x436812)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_19_symbolic(self):
        ''' Instruction JA_19 
            Groups: jump 
            0x432181:	ja	0x4321c0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432181] = 'w'
        mem[0x432182] = '='
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x432181

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432181, 8)== ord('w'))
        condition = Operators.AND(condition, cpu.read_int(0x432182, 8)== ord('='))
        condition = Operators.AND(condition, cpu.RIP == 0x432183)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_2_symbolic(self):
        ''' Instruction JA_2 
            Groups: jump 
            0x411717:	ja	0x411792
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411718] = 'y'
        mem[0x411717] = 'w'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411717

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411718, 8)== ord('y'))
        condition = Operators.AND(condition, cpu.read_int(0x411717, 8)== ord('w'))
        condition = Operators.AND(condition, cpu.RIP == 0x411792)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_20_symbolic(self):
        ''' Instruction JA_20 
            Groups: jump 
            0x4183c8:	ja	0x418430
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183c8] = 'w'
        mem[0x4183c9] = 'f'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4183c8

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183c8, 8)== ord('w'))
        condition = Operators.AND(condition, cpu.read_int(0x4183c9, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.RIP == 0x4183ca)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_21_symbolic(self):
        ''' Instruction JA_21 
            Groups: jump 
            0x411717:	ja	0x411792
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411718] = 'y'
        mem[0x411717] = 'w'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x411717

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411718, 8)== ord('y'))
        condition = Operators.AND(condition, cpu.read_int(0x411717, 8)== ord('w'))
        condition = Operators.AND(condition, cpu.RIP == 0x411719)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_3_symbolic(self):
        ''' Instruction JA_3 
            Groups: jump 
            0x436810:	ja	0x436830
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436810] = 'w'
        mem[0x436811] = '\x1e'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x436810

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436810, 8)== ord('w'))
        condition = Operators.AND(condition, cpu.read_int(0x436811, 8)== ord('\x1e'))
        condition = Operators.AND(condition, cpu.RIP == 0x436812)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_4_symbolic(self):
        ''' Instruction JA_4 
            Groups: jump 
            0x436b4a:	ja	0x437148
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436b4a] = '\x0f'
        mem[0x436b4b] = '\x87'
        mem[0x436b4c] = '\xf8'
        mem[0x436b4d] = '\x05'
        mem[0x436b4e] = '\x00'
        mem[0x436b4f] = '\x00'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x436b4a

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436b4a, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x436b4b, 8)== ord('\x87'))
        condition = Operators.AND(condition, cpu.read_int(0x436b4c, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.read_int(0x436b4d, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.read_int(0x436b4e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x436b4f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x436b50)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_5_symbolic(self):
        ''' Instruction JA_5 
            Groups: jump 
            0x40dab8:	ja	0x40d9ab
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem[0x40dab8] = '\x0f'
        mem[0x40dab9] = '\x87'
        mem[0x40daba] = '\xed'
        mem[0x40dabb] = '\xfe'
        mem[0x40dabc] = '\xff'
        mem[0x40dabd] = '\xff'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40dab8

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40dab8, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40dab9, 8)== ord('\x87'))
        condition = Operators.AND(condition, cpu.read_int(0x40daba, 8)== ord('\xed'))
        condition = Operators.AND(condition, cpu.read_int(0x40dabb, 8)== ord('\xfe'))
        condition = Operators.AND(condition, cpu.read_int(0x40dabc, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x40dabd, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RIP == 0x40dabe)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_6_symbolic(self):
        ''' Instruction JA_6 
            Groups: jump 
            0x465c99:	ja	0x465d10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x465c99] = 'w'
        mem[0x465c9a] = 'u'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x465c99

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x465c99, 8)== ord('w'))
        condition = Operators.AND(condition, cpu.read_int(0x465c9a, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.RIP == 0x465c9b)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_7_symbolic(self):
        ''' Instruction JA_7 
            Groups: jump 
            0x436b6a:	ja	0x436b40
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436b6a] = 'w'
        mem[0x436b6b] = '\xd4'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x436b6a

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436b6a, 8)== ord('w'))
        condition = Operators.AND(condition, cpu.read_int(0x436b6b, 8)== ord('\xd4'))
        condition = Operators.AND(condition, cpu.RIP == 0x436b40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_8_symbolic(self):
        ''' Instruction JA_8 
            Groups: jump 
            0x4183c8:	ja	0x418430
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183c8] = 'w'
        mem[0x4183c9] = 'f'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4183c8

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183c8, 8)== ord('w'))
        condition = Operators.AND(condition, cpu.read_int(0x4183c9, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.RIP == 0x4183ca)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JA_9_symbolic(self):
        ''' Instruction JA_9 
            Groups: jump 
            0x45c5b7:	ja	0x45c5e0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045c000, 0x1000, 'rwx')
        mem[0x45c5b8] = "'"
        mem[0x45c5b7] = 'w'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x45c5b7

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x45c5b8, 8)== ord("'"))
        condition = Operators.AND(condition, cpu.read_int(0x45c5b7, 8)== ord('w'))
        condition = Operators.AND(condition, cpu.RIP == 0x45c5b9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_1_symbolic(self):
        ''' Instruction JBE_1 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a8] = 'v'
        mem[0x4322a9] = ' '
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322a8

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a8, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a9, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.RIP == 0x4322aa)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_10_symbolic(self):
        ''' Instruction JBE_10 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a8] = 'v'
        mem[0x4322a9] = ' '
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322a8

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a8, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a9, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.RIP == 0x4322aa)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_11_symbolic(self):
        ''' Instruction JBE_11 
            Groups: jump 
            0x411b8e:	jbe	0x411ba4
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411b8e] = 'v'
        mem[0x411b8f] = '\x14'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411b8e

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411b8e, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x411b8f, 8)== ord('\x14'))
        condition = Operators.AND(condition, cpu.RIP == 0x411b90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_12_symbolic(self):
        ''' Instruction JBE_12 
            Groups: jump 
            0x413fd3:	jbe	0x413ff0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem[0x413fd3] = 'v'
        mem[0x413fd4] = '\x1b'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x413fd3

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x413fd3, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x413fd4, 8)== ord('\x1b'))
        condition = Operators.AND(condition, cpu.RIP == 0x413ff0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_13_symbolic(self):
        ''' Instruction JBE_13 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a8] = 'v'
        mem[0x4322a9] = ' '
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322a8

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a8, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a9, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.RIP == 0x4322aa)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_14_symbolic(self):
        ''' Instruction JBE_14 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a8] = 'v'
        mem[0x4322a9] = ' '
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322a8

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a8, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a9, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.RIP == 0x4322aa)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_15_symbolic(self):
        ''' Instruction JBE_15 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a8] = 'v'
        mem[0x4322a9] = ' '
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322a8

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a8, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a9, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.RIP == 0x4322aa)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_16_symbolic(self):
        ''' Instruction JBE_16 
            Groups: jump 
            0x411be9:	jbe	0x411bd0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411be9] = 'v'
        mem[0x411bea] = '\xe5'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411be9

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411be9, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x411bea, 8)== ord('\xe5'))
        condition = Operators.AND(condition, cpu.RIP == 0x411bd0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_17_symbolic(self):
        ''' Instruction JBE_17 
            Groups: jump 
            0x4324f3:	jbe	0x4325df
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4324f3] = '\x0f'
        mem[0x4324f4] = '\x86'
        mem[0x4324f5] = '\xe6'
        mem[0x4324f6] = '\x00'
        mem[0x4324f7] = '\x00'
        mem[0x4324f8] = '\x00'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4324f3

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4324f3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4324f4, 8)== ord('\x86'))
        condition = Operators.AND(condition, cpu.read_int(0x4324f5, 8)== ord('\xe6'))
        condition = Operators.AND(condition, cpu.read_int(0x4324f6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4324f7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4324f8, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x4324f9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_18_symbolic(self):
        ''' Instruction JBE_18 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a8] = 'v'
        mem[0x4322a9] = ' '
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322a8

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a8, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a9, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.RIP == 0x4322aa)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_19_symbolic(self):
        ''' Instruction JBE_19 
            Groups: jump 
            0x411be9:	jbe	0x411bd0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411be9] = 'v'
        mem[0x411bea] = '\xe5'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411be9

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411be9, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x411bea, 8)== ord('\xe5'))
        condition = Operators.AND(condition, cpu.RIP == 0x411bd0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_2_symbolic(self):
        ''' Instruction JBE_2 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a8] = 'v'
        mem[0x4322a9] = ' '
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322a8

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a8, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a9, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.RIP == 0x4322aa)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_20_symbolic(self):
        ''' Instruction JBE_20 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a8] = 'v'
        mem[0x4322a9] = ' '
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322a8

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a8, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a9, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.RIP == 0x4322ca)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_21_symbolic(self):
        ''' Instruction JBE_21 
            Groups: jump 
            0x4324f3:	jbe	0x4325df
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4324f3] = '\x0f'
        mem[0x4324f4] = '\x86'
        mem[0x4324f5] = '\xe6'
        mem[0x4324f6] = '\x00'
        mem[0x4324f7] = '\x00'
        mem[0x4324f8] = '\x00'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4324f3

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4324f3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4324f4, 8)== ord('\x86'))
        condition = Operators.AND(condition, cpu.read_int(0x4324f5, 8)== ord('\xe6'))
        condition = Operators.AND(condition, cpu.read_int(0x4324f6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4324f7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4324f8, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x4324f9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_3_symbolic(self):
        ''' Instruction JBE_3 
            Groups: jump 
            0x41179d:	jbe	0x411dd0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x4117a0] = '\x06'
        mem[0x4117a1] = '\x00'
        mem[0x4117a2] = '\x00'
        mem[0x41179d] = '\x0f'
        mem[0x41179e] = '\x86'
        mem[0x41179f] = '-'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x41179d

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4117a0, 8)== ord('\x06'))
        condition = Operators.AND(condition, cpu.read_int(0x4117a1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4117a2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x41179d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x41179e, 8)== ord('\x86'))
        condition = Operators.AND(condition, cpu.read_int(0x41179f, 8)== ord('-'))
        condition = Operators.AND(condition, cpu.RIP == 0x411dd0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_4_symbolic(self):
        ''' Instruction JBE_4 
            Groups: jump 
            0x411b8e:	jbe	0x411ba4
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411b8e] = 'v'
        mem[0x411b8f] = '\x14'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411b8e

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411b8e, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x411b8f, 8)== ord('\x14'))
        condition = Operators.AND(condition, cpu.RIP == 0x411b90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_5_symbolic(self):
        ''' Instruction JBE_5 
            Groups: jump 
            0x411be9:	jbe	0x411bd0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411be9] = 'v'
        mem[0x411bea] = '\xe5'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x411be9

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411be9, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x411bea, 8)== ord('\xe5'))
        condition = Operators.AND(condition, cpu.RIP == 0x411bd0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_6_symbolic(self):
        ''' Instruction JBE_6 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a8] = 'v'
        mem[0x4322a9] = ' '
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322a8

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a8, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a9, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.RIP == 0x4322aa)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_7_symbolic(self):
        ''' Instruction JBE_7 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a8] = 'v'
        mem[0x4322a9] = ' '
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322a8

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a8, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a9, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.RIP == 0x4322aa)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_8_symbolic(self):
        ''' Instruction JBE_8 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a8] = 'v'
        mem[0x4322a9] = ' '
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322a8

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a8, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a9, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.RIP == 0x4322aa)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JBE_9_symbolic(self):
        ''' Instruction JBE_9 
            Groups: jump 
            0x4322a8:	jbe	0x4322ca
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322a8] = 'v'
        mem[0x4322a9] = ' '
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322a8

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322a8, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x4322a9, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.RIP == 0x4322aa)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_1_symbolic(self):
        ''' Instruction JB_1 
            Groups: jump 
            0x43219d:	jb	0x432183
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x43219d] = 'r'
        mem[0x43219e] = '\xe4'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x43219d

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43219d, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.read_int(0x43219e, 8)== ord('\xe4'))
        condition = Operators.AND(condition, cpu.RIP == 0x43219f)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_10_symbolic(self):
        ''' Instruction JB_10 
            Groups: jump 
            0x4322e7:	jb	0x432290
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322e8] = '\xa7'
        mem[0x4322e7] = 'r'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322e7

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322e8, 8)== ord('\xa7'))
        condition = Operators.AND(condition, cpu.read_int(0x4322e7, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.RIP == 0x4322e9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_11_symbolic(self):
        ''' Instruction JB_11 
            Groups: jump 
            0x4322e7:	jb	0x432290
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322e8] = '\xa7'
        mem[0x4322e7] = 'r'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4322e7

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322e8, 8)== ord('\xa7'))
        condition = Operators.AND(condition, cpu.read_int(0x4322e7, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.RIP == 0x432290)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_12_symbolic(self):
        ''' Instruction JB_12 
            Groups: jump 
            0x43219d:	jb	0x432183
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x43219d] = 'r'
        mem[0x43219e] = '\xe4'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x43219d

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43219d, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.read_int(0x43219e, 8)== ord('\xe4'))
        condition = Operators.AND(condition, cpu.RIP == 0x432183)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_13_symbolic(self):
        ''' Instruction JB_13 
            Groups: jump 
            0x400fc1:	jb	0x400fd1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400fc1] = 'r'
        mem[0x400fc2] = '\x0e'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400fc1

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400fc1, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.read_int(0x400fc2, 8)== ord('\x0e'))
        condition = Operators.AND(condition, cpu.RIP == 0x400fd1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_14_symbolic(self):
        ''' Instruction JB_14 
            Groups: jump 
            0x432058:	jb	0x432120
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432058] = '\x0f'
        mem[0x432059] = '\x82'
        mem[0x43205a] = '\xc2'
        mem[0x43205b] = '\x00'
        mem[0x43205c] = '\x00'
        mem[0x43205d] = '\x00'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432058

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432058, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x432059, 8)== ord('\x82'))
        condition = Operators.AND(condition, cpu.read_int(0x43205a, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.read_int(0x43205b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x43205c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x43205d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x43205e)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_15_symbolic(self):
        ''' Instruction JB_15 
            Groups: jump 
            0x406f76:	jb	0x406f6b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406f76] = 'r'
        mem[0x406f77] = '\xf3'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406f76

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406f76, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.read_int(0x406f77, 8)== ord('\xf3'))
        condition = Operators.AND(condition, cpu.RIP == 0x406f78)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_16_symbolic(self):
        ''' Instruction JB_16 
            Groups: jump 
            0x4322e7:	jb	0x432290
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322e8] = '\xa7'
        mem[0x4322e7] = 'r'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322e7

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322e8, 8)== ord('\xa7'))
        condition = Operators.AND(condition, cpu.read_int(0x4322e7, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.RIP == 0x4322e9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_17_symbolic(self):
        ''' Instruction JB_17 
            Groups: jump 
            0x43219d:	jb	0x432183
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x43219d] = 'r'
        mem[0x43219e] = '\xe4'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x43219d

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43219d, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.read_int(0x43219e, 8)== ord('\xe4'))
        condition = Operators.AND(condition, cpu.RIP == 0x432183)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_18_symbolic(self):
        ''' Instruction JB_18 
            Groups: jump 
            0x4322e7:	jb	0x432290
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322e8] = '\xa7'
        mem[0x4322e7] = 'r'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322e7

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322e8, 8)== ord('\xa7'))
        condition = Operators.AND(condition, cpu.read_int(0x4322e7, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.RIP == 0x4322e9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_19_symbolic(self):
        ''' Instruction JB_19 
            Groups: jump 
            0x4370da:	jb	0x4370e3
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x4370da] = 'r'
        mem[0x4370db] = '\x07'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4370da

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4370da, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.read_int(0x4370db, 8)== ord('\x07'))
        condition = Operators.AND(condition, cpu.RIP == 0x4370dc)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_2_symbolic(self):
        ''' Instruction JB_2 
            Groups: jump 
            0x43219d:	jb	0x432183
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x43219d] = 'r'
        mem[0x43219e] = '\xe4'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x43219d

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43219d, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.read_int(0x43219e, 8)== ord('\xe4'))
        condition = Operators.AND(condition, cpu.RIP == 0x432183)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_20_symbolic(self):
        ''' Instruction JB_20 
            Groups: jump 
            0x4322e7:	jb	0x432290
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322e8] = '\xa7'
        mem[0x4322e7] = 'r'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4322e7

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322e8, 8)== ord('\xa7'))
        condition = Operators.AND(condition, cpu.read_int(0x4322e7, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.RIP == 0x432290)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_21_symbolic(self):
        ''' Instruction JB_21 
            Groups: jump 
            0x4322e7:	jb	0x432290
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322e8] = '\xa7'
        mem[0x4322e7] = 'r'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4322e7

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322e8, 8)== ord('\xa7'))
        condition = Operators.AND(condition, cpu.read_int(0x4322e7, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.RIP == 0x432290)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_3_symbolic(self):
        ''' Instruction JB_3 
            Groups: jump 
            0x4322e7:	jb	0x432290
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322e8] = '\xa7'
        mem[0x4322e7] = 'r'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4322e7

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322e8, 8)== ord('\xa7'))
        condition = Operators.AND(condition, cpu.read_int(0x4322e7, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.RIP == 0x432290)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_4_symbolic(self):
        ''' Instruction JB_4 
            Groups: jump 
            0x43219d:	jb	0x432183
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x43219d] = 'r'
        mem[0x43219e] = '\xe4'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x43219d

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43219d, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.read_int(0x43219e, 8)== ord('\xe4'))
        condition = Operators.AND(condition, cpu.RIP == 0x432183)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_5_symbolic(self):
        ''' Instruction JB_5 
            Groups: jump 
            0x4322e7:	jb	0x432290
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322e8] = '\xa7'
        mem[0x4322e7] = 'r'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4322e7

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322e8, 8)== ord('\xa7'))
        condition = Operators.AND(condition, cpu.read_int(0x4322e7, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.RIP == 0x432290)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_6_symbolic(self):
        ''' Instruction JB_6 
            Groups: jump 
            0x43219d:	jb	0x432183
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x43219d] = 'r'
        mem[0x43219e] = '\xe4'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x43219d

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43219d, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.read_int(0x43219e, 8)== ord('\xe4'))
        condition = Operators.AND(condition, cpu.RIP == 0x432183)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_7_symbolic(self):
        ''' Instruction JB_7 
            Groups: jump 
            0x4322e7:	jb	0x432290
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322e8] = '\xa7'
        mem[0x4322e7] = 'r'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4322e7

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322e8, 8)== ord('\xa7'))
        condition = Operators.AND(condition, cpu.read_int(0x4322e7, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.RIP == 0x432290)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_8_symbolic(self):
        ''' Instruction JB_8 
            Groups: jump 
            0x43219d:	jb	0x432183
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x43219d] = 'r'
        mem[0x43219e] = '\xe4'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x43219d

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43219d, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.read_int(0x43219e, 8)== ord('\xe4'))
        condition = Operators.AND(condition, cpu.RIP == 0x432183)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JB_9_symbolic(self):
        ''' Instruction JB_9 
            Groups: jump 
            0x400c78:	jb	0x400c93
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400c78] = 'r'
        mem[0x400c79] = '\x19'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400c78

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c78, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.read_int(0x400c79, 8)== ord('\x19'))
        condition = Operators.AND(condition, cpu.RIP == 0x400c93)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_1_symbolic(self):
        ''' Instruction JE_1 
            Groups: jump 
            0x414713:	je	0x414788
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x414713] = 't'
        mem[0x414714] = 's'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x414713

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x414713, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x414714, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.RIP == 0x414715)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_10_symbolic(self):
        ''' Instruction JE_10 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e8b] = 't'
        mem[0x406e8c] = '\xb9'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e8b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e8b, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8c, 8)== ord('\xb9'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e8d)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_11_symbolic(self):
        ''' Instruction JE_11 
            Groups: jump 
            0x411b8a:	je	0x411be3
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411b8a] = 't'
        mem[0x411b8b] = 'W'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x411b8a

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411b8a, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x411b8b, 8)== ord('W'))
        condition = Operators.AND(condition, cpu.RIP == 0x411b8c)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_12_symbolic(self):
        ''' Instruction JE_12 
            Groups: jump 
            0x41b3bc:	je	0x41b3ca
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041b000, 0x1000, 'rwx')
        mem[0x41b3bc] = 't'
        mem[0x41b3bd] = '\x0c'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x41b3bc

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41b3bc, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x41b3bd, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.RIP == 0x41b3ca)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_13_symbolic(self):
        ''' Instruction JE_13 
            Groups: jump 
            0x43224d:	je	0x43233d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x43224d] = '\x0f'
        mem[0x43224e] = '\x84'
        mem[0x43224f] = '\xea'
        mem[0x432250] = '\x00'
        mem[0x432251] = '\x00'
        mem[0x432252] = '\x00'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x43224d

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43224d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x43224e, 8)== ord('\x84'))
        condition = Operators.AND(condition, cpu.read_int(0x43224f, 8)== ord('\xea'))
        condition = Operators.AND(condition, cpu.read_int(0x432250, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x432251, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x432252, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x43233d)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_14_symbolic(self):
        ''' Instruction JE_14 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e8b] = 't'
        mem[0x406e8c] = '\xb9'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e8b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e8b, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8c, 8)== ord('\xb9'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e8d)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_15_symbolic(self):
        ''' Instruction JE_15 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e8b] = 't'
        mem[0x406e8c] = '\xb9'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e8b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e8b, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8c, 8)== ord('\xb9'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e8d)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_16_symbolic(self):
        ''' Instruction JE_16 
            Groups: jump 
            0x435932:	je	0x435935
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00435000, 0x1000, 'rwx')
        mem[0x435932] = 't'
        mem[0x435933] = '\x01'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x435932

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x435932, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x435933, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.RIP == 0x435935)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_17_symbolic(self):
        ''' Instruction JE_17 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e8b] = 't'
        mem[0x406e8c] = '\xb9'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e8b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e8b, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8c, 8)== ord('\xb9'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e8d)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_18_symbolic(self):
        ''' Instruction JE_18 
            Groups: jump 
            0x48fe5e:	je	0x48fe71
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0048f000, 0x1000, 'rwx')
        mem[0x48fe5e] = 't'
        mem[0x48fe5f] = '\x11'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x48fe5e

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x48fe5e, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x48fe5f, 8)== ord('\x11'))
        condition = Operators.AND(condition, cpu.RIP == 0x48fe71)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_19_symbolic(self):
        ''' Instruction JE_19 
            Groups: jump 
            0x414713:	je	0x414788
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x414713] = 't'
        mem[0x414714] = 's'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x414713

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x414713, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x414714, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.RIP == 0x414715)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_2_symbolic(self):
        ''' Instruction JE_2 
            Groups: jump 
            0x406e08:	je	0x406eb8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e08] = '\x0f'
        mem[0x406e09] = '\x84'
        mem[0x406e0a] = '\xaa'
        mem[0x406e0b] = '\x00'
        mem[0x406e0c] = '\x00'
        mem[0x406e0d] = '\x00'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e08

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e08, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x406e09, 8)== ord('\x84'))
        condition = Operators.AND(condition, cpu.read_int(0x406e0a, 8)== ord('\xaa'))
        condition = Operators.AND(condition, cpu.read_int(0x406e0b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x406e0c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x406e0d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e0e)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_20_symbolic(self):
        ''' Instruction JE_20 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e8b] = 't'
        mem[0x406e8c] = '\xb9'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e8b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e8b, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8c, 8)== ord('\xb9'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e8d)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_21_symbolic(self):
        ''' Instruction JE_21 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e8b] = 't'
        mem[0x406e8c] = '\xb9'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x406e8b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e8b, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8c, 8)== ord('\xb9'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e46)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_3_symbolic(self):
        ''' Instruction JE_3 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e8b] = 't'
        mem[0x406e8c] = '\xb9'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e8b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e8b, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8c, 8)== ord('\xb9'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e8d)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_4_symbolic(self):
        ''' Instruction JE_4 
            Groups: jump 
            0x4323fc:	je	0x4323a0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4323fc] = 't'
        mem[0x4323fd] = '\xa2'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x4323fc

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4323fc, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x4323fd, 8)== ord('\xa2'))
        condition = Operators.AND(condition, cpu.RIP == 0x4323a0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_5_symbolic(self):
        ''' Instruction JE_5 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e8b] = 't'
        mem[0x406e8c] = '\xb9'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e8b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e8b, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8c, 8)== ord('\xb9'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e8d)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_6_symbolic(self):
        ''' Instruction JE_6 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e8b] = 't'
        mem[0x406e8c] = '\xb9'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e8b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e8b, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8c, 8)== ord('\xb9'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e8d)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_7_symbolic(self):
        ''' Instruction JE_7 
            Groups: jump 
            0x414713:	je	0x414788
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x414713] = 't'
        mem[0x414714] = 's'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x414713

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x414713, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x414714, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.RIP == 0x414715)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_8_symbolic(self):
        ''' Instruction JE_8 
            Groups: jump 
            0x43229e:	je	0x4322b9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x43229e] = 't'
        mem[0x43229f] = '\x19'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x43229e

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43229e, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x43229f, 8)== ord('\x19'))
        condition = Operators.AND(condition, cpu.RIP == 0x4322a0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JE_9_symbolic(self):
        ''' Instruction JE_9 
            Groups: jump 
            0x406e8b:	je	0x406e46
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e8b] = 't'
        mem[0x406e8c] = '\xb9'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e8b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e8b, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8c, 8)== ord('\xb9'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e8d)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JG_1_symbolic(self):
        ''' Instruction JG_1 
            Groups: jump 
            0x400cd4:	jg	0x400c6a
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400cd4] = '\x7f'
        mem[0x400cd5] = '\x94'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x400cd4

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400cd4, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x400cd5, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.RIP == 0x400c6a)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_1_symbolic(self):
        ''' Instruction JLE_1 
            Groups: jump 
            0x40d994:	jle	0x40dab0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem[0x40d994] = '\x0f'
        mem[0x40d995] = '\x8e'
        mem[0x40d996] = '\x16'
        mem[0x40d997] = '\x01'
        mem[0x40d998] = '\x00'
        mem[0x40d999] = '\x00'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x40d994

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40d994, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40d995, 8)== ord('\x8e'))
        condition = Operators.AND(condition, cpu.read_int(0x40d996, 8)== ord('\x16'))
        condition = Operators.AND(condition, cpu.read_int(0x40d997, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x40d998, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x40d999, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x40dab0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_10_symbolic(self):
        ''' Instruction JLE_10 
            Groups: jump 
            0x400af1:	jle	0x400a94
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400af1] = '~'
        mem[0x400af2] = '\xa1'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x400af1

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400af1, 8)== ord('~'))
        condition = Operators.AND(condition, cpu.read_int(0x400af2, 8)== ord('\xa1'))
        condition = Operators.AND(condition, cpu.RIP == 0x400a94)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_11_symbolic(self):
        ''' Instruction JLE_11 
            Groups: jump 
            0x40d994:	jle	0x40dab0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem[0x40d994] = '\x0f'
        mem[0x40d995] = '\x8e'
        mem[0x40d996] = '\x16'
        mem[0x40d997] = '\x01'
        mem[0x40d998] = '\x00'
        mem[0x40d999] = '\x00'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x40d994

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40d994, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40d995, 8)== ord('\x8e'))
        condition = Operators.AND(condition, cpu.read_int(0x40d996, 8)== ord('\x16'))
        condition = Operators.AND(condition, cpu.read_int(0x40d997, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x40d998, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x40d999, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x40dab0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_12_symbolic(self):
        ''' Instruction JLE_12 
            Groups: jump 
            0x400b1b:	jle	0x400b03
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b1b] = '~'
        mem[0x400b1c] = '\xe6'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x400b1b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b1b, 8)== ord('~'))
        condition = Operators.AND(condition, cpu.read_int(0x400b1c, 8)== ord('\xe6'))
        condition = Operators.AND(condition, cpu.RIP == 0x400b03)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_13_symbolic(self):
        ''' Instruction JLE_13 
            Groups: jump 
            0x400b1b:	jle	0x400b03
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b1b] = '~'
        mem[0x400b1c] = '\xe6'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x400b1b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b1b, 8)== ord('~'))
        condition = Operators.AND(condition, cpu.read_int(0x400b1c, 8)== ord('\xe6'))
        condition = Operators.AND(condition, cpu.RIP == 0x400b03)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_14_symbolic(self):
        ''' Instruction JLE_14 
            Groups: jump 
            0x4341f2:	jle	0x434260
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x4341f2] = '~'
        mem[0x4341f3] = 'l'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x4341f2

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4341f2, 8)== ord('~'))
        condition = Operators.AND(condition, cpu.read_int(0x4341f3, 8)== ord('l'))
        condition = Operators.AND(condition, cpu.RIP == 0x4341f4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_15_symbolic(self):
        ''' Instruction JLE_15 
            Groups: jump 
            0x465c8e:	jle	0x465d10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x465c8e] = '\x0f'
        mem[0x465c8f] = '\x8e'
        mem[0x465c90] = '|'
        mem[0x465c91] = '\x00'
        mem[0x465c92] = '\x00'
        mem[0x465c93] = '\x00'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x465c8e

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x465c8e, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x465c8f, 8)== ord('\x8e'))
        condition = Operators.AND(condition, cpu.read_int(0x465c90, 8)== ord('|'))
        condition = Operators.AND(condition, cpu.read_int(0x465c91, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x465c92, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x465c93, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x465c94)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_16_symbolic(self):
        ''' Instruction JLE_16 
            Groups: jump 
            0x4006df:	jle	0x40070d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006e0] = ','
        mem[0x4006df] = '~'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x4006df

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006e0, 8)== ord(','))
        condition = Operators.AND(condition, cpu.read_int(0x4006df, 8)== ord('~'))
        condition = Operators.AND(condition, cpu.RIP == 0x4006e1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_17_symbolic(self):
        ''' Instruction JLE_17 
            Groups: jump 
            0x4341f2:	jle	0x434260
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x4341f2] = '~'
        mem[0x4341f3] = 'l'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x4341f2

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4341f2, 8)== ord('~'))
        condition = Operators.AND(condition, cpu.read_int(0x4341f3, 8)== ord('l'))
        condition = Operators.AND(condition, cpu.RIP == 0x4341f4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_18_symbolic(self):
        ''' Instruction JLE_18 
            Groups: jump 
            0x400b1b:	jle	0x400b03
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b1b] = '~'
        mem[0x400b1c] = '\xe6'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x400b1b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b1b, 8)== ord('~'))
        condition = Operators.AND(condition, cpu.read_int(0x400b1c, 8)== ord('\xe6'))
        condition = Operators.AND(condition, cpu.RIP == 0x400b03)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_19_symbolic(self):
        ''' Instruction JLE_19 
            Groups: jump 
            0x4378e8:	jle	0x4378ff
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x4378e8] = '~'
        mem[0x4378e9] = '\x15'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x4378e8

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4378e8, 8)== ord('~'))
        condition = Operators.AND(condition, cpu.read_int(0x4378e9, 8)== ord('\x15'))
        condition = Operators.AND(condition, cpu.RIP == 0x4378ea)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_2_symbolic(self):
        ''' Instruction JLE_2 
            Groups: jump 
            0x400b1b:	jle	0x400b03
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b1b] = '~'
        mem[0x400b1c] = '\xe6'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x400b1b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b1b, 8)== ord('~'))
        condition = Operators.AND(condition, cpu.read_int(0x400b1c, 8)== ord('\xe6'))
        condition = Operators.AND(condition, cpu.RIP == 0x400b1d)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_20_symbolic(self):
        ''' Instruction JLE_20 
            Groups: jump 
            0x400674:	jle	0x4008cc
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400674] = '\x0f'
        mem[0x400675] = '\x8e'
        mem[0x400676] = 'R'
        mem[0x400677] = '\x02'
        mem[0x400678] = '\x00'
        mem[0x400679] = '\x00'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x400674

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400674, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400675, 8)== ord('\x8e'))
        condition = Operators.AND(condition, cpu.read_int(0x400676, 8)== ord('R'))
        condition = Operators.AND(condition, cpu.read_int(0x400677, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(0x400678, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x400679, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x40067a)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_21_symbolic(self):
        ''' Instruction JLE_21 
            Groups: jump 
            0x400af1:	jle	0x400a94
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400af1] = '~'
        mem[0x400af2] = '\xa1'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x400af1

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400af1, 8)== ord('~'))
        condition = Operators.AND(condition, cpu.read_int(0x400af2, 8)== ord('\xa1'))
        condition = Operators.AND(condition, cpu.RIP == 0x400a94)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_3_symbolic(self):
        ''' Instruction JLE_3 
            Groups: jump 
            0x400af1:	jle	0x400a94
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400af1] = '~'
        mem[0x400af2] = '\xa1'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x400af1

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400af1, 8)== ord('~'))
        condition = Operators.AND(condition, cpu.read_int(0x400af2, 8)== ord('\xa1'))
        condition = Operators.AND(condition, cpu.RIP == 0x400a94)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_4_symbolic(self):
        ''' Instruction JLE_4 
            Groups: jump 
            0x400710:	jle	0x400639
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400710] = '\x0f'
        mem[0x400711] = '\x8e'
        mem[0x400712] = '#'
        mem[0x400713] = '\xff'
        mem[0x400714] = '\xff'
        mem[0x400715] = '\xff'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x400710

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400710, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400711, 8)== ord('\x8e'))
        condition = Operators.AND(condition, cpu.read_int(0x400712, 8)== ord('#'))
        condition = Operators.AND(condition, cpu.read_int(0x400713, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x400714, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x400715, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RIP == 0x400716)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_5_symbolic(self):
        ''' Instruction JLE_5 
            Groups: jump 
            0x400af1:	jle	0x400a94
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400af1] = '~'
        mem[0x400af2] = '\xa1'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x400af1

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400af1, 8)== ord('~'))
        condition = Operators.AND(condition, cpu.read_int(0x400af2, 8)== ord('\xa1'))
        condition = Operators.AND(condition, cpu.RIP == 0x400a94)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_6_symbolic(self):
        ''' Instruction JLE_6 
            Groups: jump 
            0x40d994:	jle	0x40dab0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem[0x40d994] = '\x0f'
        mem[0x40d995] = '\x8e'
        mem[0x40d996] = '\x16'
        mem[0x40d997] = '\x01'
        mem[0x40d998] = '\x00'
        mem[0x40d999] = '\x00'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x40d994

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40d994, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40d995, 8)== ord('\x8e'))
        condition = Operators.AND(condition, cpu.read_int(0x40d996, 8)== ord('\x16'))
        condition = Operators.AND(condition, cpu.read_int(0x40d997, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x40d998, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x40d999, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x40dab0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_7_symbolic(self):
        ''' Instruction JLE_7 
            Groups: jump 
            0x40081d:	jle	0x40085b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40081d] = '~'
        mem[0x40081e] = '<'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x40081d

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40081d, 8)== ord('~'))
        condition = Operators.AND(condition, cpu.read_int(0x40081e, 8)== ord('<'))
        condition = Operators.AND(condition, cpu.RIP == 0x40081f)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_8_symbolic(self):
        ''' Instruction JLE_8 
            Groups: jump 
            0x4006cf:	jle	0x4006dc
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006d0] = '\x0b'
        mem[0x4006cf] = '~'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x4006cf

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006d0, 8)== ord('\x0b'))
        condition = Operators.AND(condition, cpu.read_int(0x4006cf, 8)== ord('~'))
        condition = Operators.AND(condition, cpu.RIP == 0x4006d1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JLE_9_symbolic(self):
        ''' Instruction JLE_9 
            Groups: jump 
            0x4341f2:	jle	0x434260
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x4341f2] = '~'
        mem[0x4341f3] = 'l'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x4341f2

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4341f2, 8)== ord('~'))
        condition = Operators.AND(condition, cpu.read_int(0x4341f3, 8)== ord('l'))
        condition = Operators.AND(condition, cpu.RIP == 0x4341f4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_1_symbolic(self):
        ''' Instruction JMP_1 
            Groups: mode64, jump 
            0x4379f7:	jmp	rdx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x4379f8] = '\xe2'
        mem[0x4379f7] = '\xff'
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x437a82)
        cpu.RIP = 0x4379f7

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4379f8, 8)== ord('\xe2'))
        condition = Operators.AND(condition, cpu.read_int(0x4379f7, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RDX == 0x437a82)
        condition = Operators.AND(condition, cpu.RIP == 0x437a82)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_10_symbolic(self):
        ''' Instruction JMP_10 
            Groups: jump 
            0x464608:	jmp	0x4640f6
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00464000, 0x1000, 'rwx')
        mem[0x464608] = '\xe9'
        mem[0x464609] = '\xe9'
        mem[0x46460a] = '\xfa'
        mem[0x46460b] = '\xff'
        mem[0x46460c] = '\xff'
        cpu.RIP = 0x464608

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x464608, 8)== ord('\xe9'))
        condition = Operators.AND(condition, cpu.read_int(0x464609, 8)== ord('\xe9'))
        condition = Operators.AND(condition, cpu.read_int(0x46460a, 8)== ord('\xfa'))
        condition = Operators.AND(condition, cpu.read_int(0x46460b, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x46460c, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RIP == 0x4640f6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_11_symbolic(self):
        ''' Instruction JMP_11 
            Groups: jump 
            0x46250b:	jmp	0x462378
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, 'rwx')
        mem[0x46250b] = '\xe9'
        mem[0x46250c] = 'h'
        mem[0x46250d] = '\xfe'
        mem[0x46250e] = '\xff'
        mem[0x46250f] = '\xff'
        cpu.RIP = 0x46250b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x46250b, 8)== ord('\xe9'))
        condition = Operators.AND(condition, cpu.read_int(0x46250c, 8)== ord('h'))
        condition = Operators.AND(condition, cpu.read_int(0x46250d, 8)== ord('\xfe'))
        condition = Operators.AND(condition, cpu.read_int(0x46250e, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x46250f, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RIP == 0x462378)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_12_symbolic(self):
        ''' Instruction JMP_12 
            Groups: jump 
            0x436b36:	jmp	0x436b66
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436b36] = '\xeb'
        mem[0x436b37] = '.'
        cpu.RIP = 0x436b36

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436b36, 8)== ord('\xeb'))
        condition = Operators.AND(condition, cpu.read_int(0x436b37, 8)== ord('.'))
        condition = Operators.AND(condition, cpu.RIP == 0x436b66)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_13_symbolic(self):
        ''' Instruction JMP_13 
            Groups: mode64, jump 
            0x436819:	jmp	rax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436819] = '\xff'
        mem[0x43681a] = '\xe0'
        cpu.RIP = 0x436819
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x436830)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436819, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x43681a, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.RAX == 0x436830)
        condition = Operators.AND(condition, cpu.RIP == 0x436830)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_14_symbolic(self):
        ''' Instruction JMP_14 
            Groups: jump 
            0x4371d6:	jmp	0x436ddf
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x4371d8] = '\xfc'
        mem[0x4371d9] = '\xff'
        mem[0x4371da] = '\xff'
        mem[0x4371d6] = '\xe9'
        mem[0x4371d7] = '\x04'
        cpu.RIP = 0x4371d6

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4371d8, 8)== ord('\xfc'))
        condition = Operators.AND(condition, cpu.read_int(0x4371d9, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x4371da, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x4371d6, 8)== ord('\xe9'))
        condition = Operators.AND(condition, cpu.read_int(0x4371d7, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.RIP == 0x436ddf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_15_symbolic(self):
        ''' Instruction JMP_15 
            Groups: jump 
            0x465dbb:	jmp	0x465d6a
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x465dbb] = '\xeb'
        mem[0x465dbc] = '\xad'
        cpu.RIP = 0x465dbb

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x465dbb, 8)== ord('\xeb'))
        condition = Operators.AND(condition, cpu.read_int(0x465dbc, 8)== ord('\xad'))
        condition = Operators.AND(condition, cpu.RIP == 0x465d6a)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_16_symbolic(self):
        ''' Instruction JMP_16 
            Groups: mode64, jump 
            0x4135e8:	jmp	rax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem[0x4135e8] = '\xff'
        mem[0x4135e9] = '\xe0'
        cpu.RIP = 0x4135e8
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x414a20)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4135e8, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x4135e9, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.RAX == 0x414a20)
        condition = Operators.AND(condition, cpu.RIP == 0x414a20)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_17_symbolic(self):
        ''' Instruction JMP_17 
            Groups: jump 
            0x401377:	jmp	0x4914cc
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x401378] = 'P'
        mem[0x401379] = '\x01'
        mem[0x40137a] = '\t'
        mem[0x40137b] = '\x00'
        mem[0x401377] = '\xe9'
        cpu.RIP = 0x401377

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x401378, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.read_int(0x401379, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x40137a, 8)== ord('\t'))
        condition = Operators.AND(condition, cpu.read_int(0x40137b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x401377, 8)== ord('\xe9'))
        condition = Operators.AND(condition, cpu.RIP == 0x4914cc)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_18_symbolic(self):
        ''' Instruction JMP_18 
            Groups: jump 
            0x406fd2:	jmp	0x406f00
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406fd2] = '\xe9'
        mem[0x406fd3] = ')'
        mem[0x406fd4] = '\xff'
        mem[0x406fd5] = '\xff'
        mem[0x406fd6] = '\xff'
        cpu.RIP = 0x406fd2

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406fd2, 8)== ord('\xe9'))
        condition = Operators.AND(condition, cpu.read_int(0x406fd3, 8)== ord(')'))
        condition = Operators.AND(condition, cpu.read_int(0x406fd4, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x406fd5, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x406fd6, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RIP == 0x406f00)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_19_symbolic(self):
        ''' Instruction JMP_19 
            Groups: jump 
            0x4368b0:	jmp	0x436830
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x4368b0] = '\xe9'
        mem[0x4368b1] = '{'
        mem[0x4368b2] = '\xff'
        mem[0x4368b3] = '\xff'
        mem[0x4368b4] = '\xff'
        cpu.RIP = 0x4368b0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4368b0, 8)== ord('\xe9'))
        condition = Operators.AND(condition, cpu.read_int(0x4368b1, 8)== ord('{'))
        condition = Operators.AND(condition, cpu.read_int(0x4368b2, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x4368b3, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x4368b4, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RIP == 0x436830)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_2_symbolic(self):
        ''' Instruction JMP_2 
            Groups: jump 
            0x4367d4:	jmp	0x43677f
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x4367d4] = '\xeb'
        mem[0x4367d5] = '\xa9'
        cpu.RIP = 0x4367d4

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4367d4, 8)== ord('\xeb'))
        condition = Operators.AND(condition, cpu.read_int(0x4367d5, 8)== ord('\xa9'))
        condition = Operators.AND(condition, cpu.RIP == 0x43677f)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_20_symbolic(self):
        ''' Instruction JMP_20 
            Groups: jump 
            0x411b90:	jmp	0x411be3
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411b90] = '\xeb'
        mem[0x411b91] = 'Q'
        cpu.RIP = 0x411b90

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411b90, 8)== ord('\xeb'))
        condition = Operators.AND(condition, cpu.read_int(0x411b91, 8)== ord('Q'))
        condition = Operators.AND(condition, cpu.RIP == 0x411be3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_21_symbolic(self):
        ''' Instruction JMP_21 
            Groups: jump 
            0x400ce4:	jmp	0x400bb6
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400ce8] = '\xff'
        mem[0x400ce4] = '\xe9'
        mem[0x400ce5] = '\xcd'
        mem[0x400ce6] = '\xfe'
        mem[0x400ce7] = '\xff'
        cpu.RIP = 0x400ce4

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ce8, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x400ce4, 8)== ord('\xe9'))
        condition = Operators.AND(condition, cpu.read_int(0x400ce5, 8)== ord('\xcd'))
        condition = Operators.AND(condition, cpu.read_int(0x400ce6, 8)== ord('\xfe'))
        condition = Operators.AND(condition, cpu.read_int(0x400ce7, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RIP == 0x400bb6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_3_symbolic(self):
        ''' Instruction JMP_3 
            Groups: jump 
            0x4005ec:	jmp	0x475240
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4005f0] = '\x00'
        mem[0x4005ec] = '\xe9'
        mem[0x4005ed] = 'O'
        mem[0x4005ee] = 'L'
        mem[0x4005ef] = '\x07'
        cpu.RIP = 0x4005ec

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4005f0, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4005ec, 8)== ord('\xe9'))
        condition = Operators.AND(condition, cpu.read_int(0x4005ed, 8)== ord('O'))
        condition = Operators.AND(condition, cpu.read_int(0x4005ee, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x4005ef, 8)== ord('\x07'))
        condition = Operators.AND(condition, cpu.RIP == 0x475240)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_4_symbolic(self):
        ''' Instruction JMP_4 
            Groups: jump 
            0x4322e9:	jmp	0x4322ca
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322e9] = '\xeb'
        mem[0x4322ea] = '\xdf'
        cpu.RIP = 0x4322e9

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322e9, 8)== ord('\xeb'))
        condition = Operators.AND(condition, cpu.read_int(0x4322ea, 8)== ord('\xdf'))
        condition = Operators.AND(condition, cpu.RIP == 0x4322ca)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_5_symbolic(self):
        ''' Instruction JMP_5 
            Groups: jump 
            0x437189:	jmp	0x436b70
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x437189] = '\xe9'
        mem[0x43718a] = '\xe2'
        mem[0x43718b] = '\xf9'
        mem[0x43718c] = '\xff'
        mem[0x43718d] = '\xff'
        cpu.RIP = 0x437189

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x437189, 8)== ord('\xe9'))
        condition = Operators.AND(condition, cpu.read_int(0x43718a, 8)== ord('\xe2'))
        condition = Operators.AND(condition, cpu.read_int(0x43718b, 8)== ord('\xf9'))
        condition = Operators.AND(condition, cpu.read_int(0x43718c, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x43718d, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RIP == 0x436b70)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_6_symbolic(self):
        ''' Instruction JMP_6 
            Groups: mode64, jump 
            0x436819:	jmp	rax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436819] = '\xff'
        mem[0x43681a] = '\xe0'
        cpu.RIP = 0x436819
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x4368d0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436819, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x43681a, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.RAX == 0x4368d0)
        condition = Operators.AND(condition, cpu.RIP == 0x4368d0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_7_symbolic(self):
        ''' Instruction JMP_7 
            Groups: jump 
            0x400a2f:	jmp	0x400960
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a30] = ','
        mem[0x400a31] = '\xff'
        mem[0x400a32] = '\xff'
        mem[0x400a33] = '\xff'
        mem[0x400a2f] = '\xe9'
        cpu.RIP = 0x400a2f

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a30, 8)== ord(','))
        condition = Operators.AND(condition, cpu.read_int(0x400a31, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x400a32, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x400a33, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x400a2f, 8)== ord('\xe9'))
        condition = Operators.AND(condition, cpu.RIP == 0x400960)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_8_symbolic(self):
        ''' Instruction JMP_8 
            Groups: jump 
            0x41150f:	jmp	0x4111db
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411510] = '\xc7'
        mem[0x411511] = '\xfc'
        mem[0x411512] = '\xff'
        mem[0x411513] = '\xff'
        mem[0x41150f] = '\xe9'
        cpu.RIP = 0x41150f

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411510, 8)== ord('\xc7'))
        condition = Operators.AND(condition, cpu.read_int(0x411511, 8)== ord('\xfc'))
        condition = Operators.AND(condition, cpu.read_int(0x411512, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x411513, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x41150f, 8)== ord('\xe9'))
        condition = Operators.AND(condition, cpu.RIP == 0x4111db)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JMP_9_symbolic(self):
        ''' Instruction JMP_9 
            Groups: jump 
            0x463f76:	jmp	0x463f92
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00463000, 0x1000, 'rwx')
        mem[0x463f76] = '\xeb'
        mem[0x463f77] = '\x1a'
        cpu.RIP = 0x463f76

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x463f76, 8)== ord('\xeb'))
        condition = Operators.AND(condition, cpu.read_int(0x463f77, 8)== ord('\x1a'))
        condition = Operators.AND(condition, cpu.RIP == 0x463f92)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_1_symbolic(self):
        ''' Instruction JNE_1 
            Groups: jump 
            0x411bdd:	jne	0x411c90
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411be0] = '\x00'
        mem[0x411be1] = '\x00'
        mem[0x411be2] = '\x00'
        mem[0x411bdd] = '\x0f'
        mem[0x411bde] = '\x85'
        mem[0x411bdf] = '\xad'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x411bdd

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411be0, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x411be1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x411be2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x411bdd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x411bde, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x411bdf, 8)== ord('\xad'))
        condition = Operators.AND(condition, cpu.RIP == 0x411be3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_10_symbolic(self):
        ''' Instruction JNE_10 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e91] = 'u'
        mem[0x406e92] = '\xed'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e91

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e91, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x406e92, 8)== ord('\xed'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e80)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_11_symbolic(self):
        ''' Instruction JNE_11 
            Groups: jump 
            0x40dc89:	jne	0x40db98
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem[0x40dc89] = '\x0f'
        mem[0x40dc8a] = '\x85'
        mem[0x40dc8b] = '\t'
        mem[0x40dc8c] = '\xff'
        mem[0x40dc8d] = '\xff'
        mem[0x40dc8e] = '\xff'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x40dc89

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40dc89, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40dc8a, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x40dc8b, 8)== ord('\t'))
        condition = Operators.AND(condition, cpu.read_int(0x40dc8c, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x40dc8d, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x40dc8e, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RIP == 0x40db98)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_12_symbolic(self):
        ''' Instruction JNE_12 
            Groups: jump 
            0x400bf9:	jne	0x400bf0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400bf9] = 'u'
        mem[0x400bfa] = '\xf5'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x400bf9

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bf9, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x400bfa, 8)== ord('\xf5'))
        condition = Operators.AND(condition, cpu.RIP == 0x400bf0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_13_symbolic(self):
        ''' Instruction JNE_13 
            Groups: jump 
            0x45f8df:	jne	0x45f8d0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045f000, 0x1000, 'rwx')
        mem[0x45f8e0] = '\xef'
        mem[0x45f8df] = 'u'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x45f8df

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x45f8e0, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x45f8df, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.RIP == 0x45f8d0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_14_symbolic(self):
        ''' Instruction JNE_14 
            Groups: jump 
            0x4323ad:	jne	0x4323b5
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4323ad] = 'u'
        mem[0x4323ae] = '\x06'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x4323ad

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4323ad, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x4323ae, 8)== ord('\x06'))
        condition = Operators.AND(condition, cpu.RIP == 0x4323b5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_15_symbolic(self):
        ''' Instruction JNE_15 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e91] = 'u'
        mem[0x406e92] = '\xed'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e91

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e91, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x406e92, 8)== ord('\xed'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e80)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_16_symbolic(self):
        ''' Instruction JNE_16 
            Groups: jump 
            0x40ec87:	jne	0x40ec78
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040e000, 0x1000, 'rwx')
        mem[0x40ec88] = '\xef'
        mem[0x40ec87] = 'u'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x40ec87

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40ec88, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x40ec87, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.RIP == 0x40ec78)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_17_symbolic(self):
        ''' Instruction JNE_17 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e91] = 'u'
        mem[0x406e92] = '\xed'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e91

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e91, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x406e92, 8)== ord('\xed'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e80)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_18_symbolic(self):
        ''' Instruction JNE_18 
            Groups: jump 
            0x4322cf:	jne	0x432238
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322cf] = '\x0f'
        mem[0x4322d0] = '\x85'
        mem[0x4322d1] = 'c'
        mem[0x4322d2] = '\xff'
        mem[0x4322d3] = '\xff'
        mem[0x4322d4] = '\xff'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x4322cf

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322cf, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4322d0, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x4322d1, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4322d2, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x4322d3, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x4322d4, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RIP == 0x432238)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_19_symbolic(self):
        ''' Instruction JNE_19 
            Groups: jump 
            0x41601f:	jne	0x41603b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00416000, 0x1000, 'rwx')
        mem[0x416020] = '\x1a'
        mem[0x41601f] = 'u'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x41601f

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x416020, 8)== ord('\x1a'))
        condition = Operators.AND(condition, cpu.read_int(0x41601f, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.RIP == 0x41603b)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_2_symbolic(self):
        ''' Instruction JNE_2 
            Groups: jump 
            0x400bf9:	jne	0x400bf0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400bf9] = 'u'
        mem[0x400bfa] = '\xf5'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x400bf9

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bf9, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x400bfa, 8)== ord('\xf5'))
        condition = Operators.AND(condition, cpu.RIP == 0x400bf0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_20_symbolic(self):
        ''' Instruction JNE_20 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e91] = 'u'
        mem[0x406e92] = '\xed'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e91

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e91, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x406e92, 8)== ord('\xed'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e80)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_21_symbolic(self):
        ''' Instruction JNE_21 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e91] = 'u'
        mem[0x406e92] = '\xed'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e91

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e91, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x406e92, 8)== ord('\xed'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e80)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_3_symbolic(self):
        ''' Instruction JNE_3 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e91] = 'u'
        mem[0x406e92] = '\xed'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e91

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e91, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x406e92, 8)== ord('\xed'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e80)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_4_symbolic(self):
        ''' Instruction JNE_4 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e91] = 'u'
        mem[0x406e92] = '\xed'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e91

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e91, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x406e92, 8)== ord('\xed'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e80)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_5_symbolic(self):
        ''' Instruction JNE_5 
            Groups: jump 
            0x482c18:	jne	0x482c2d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00482000, 0x1000, 'rwx')
        mem[0x482c18] = 'u'
        mem[0x482c19] = '\x13'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x482c18

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x482c18, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x482c19, 8)== ord('\x13'))
        condition = Operators.AND(condition, cpu.RIP == 0x482c1a)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_6_symbolic(self):
        ''' Instruction JNE_6 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e91] = 'u'
        mem[0x406e92] = '\xed'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e91

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e91, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x406e92, 8)== ord('\xed'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e80)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_7_symbolic(self):
        ''' Instruction JNE_7 
            Groups: jump 
            0x414718:	jne	0x414708
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x414718] = 'u'
        mem[0x414719] = '\xee'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x414718

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x414718, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x414719, 8)== ord('\xee'))
        condition = Operators.AND(condition, cpu.RIP == 0x414708)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_8_symbolic(self):
        ''' Instruction JNE_8 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e91] = 'u'
        mem[0x406e92] = '\xed'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e91

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e91, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x406e92, 8)== ord('\xed'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e80)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JNE_9_symbolic(self):
        ''' Instruction JNE_9 
            Groups: jump 
            0x406e91:	jne	0x406e80
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e91] = 'u'
        mem[0x406e92] = '\xed'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406e91

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e91, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x406e92, 8)== ord('\xed'))
        condition = Operators.AND(condition, cpu.RIP == 0x406e80)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JS_1_symbolic(self):
        ''' Instruction JS_1 
            Groups: jump 
            0x4113b0:	js	0x41161d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x4113b0] = '\x0f'
        mem[0x4113b1] = '\x88'
        mem[0x4113b2] = 'g'
        mem[0x4113b3] = '\x02'
        mem[0x4113b4] = '\x00'
        mem[0x4113b5] = '\x00'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x4113b0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4113b0, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4113b1, 8)== ord('\x88'))
        condition = Operators.AND(condition, cpu.read_int(0x4113b2, 8)== ord('g'))
        condition = Operators.AND(condition, cpu.read_int(0x4113b3, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(0x4113b4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4113b5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x4113b6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JS_10_symbolic(self):
        ''' Instruction JS_10 
            Groups: jump 
            0x4321e2:	js	0x43242b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4321e2] = '\x0f'
        mem[0x4321e3] = '\x88'
        mem[0x4321e4] = 'C'
        mem[0x4321e5] = '\x02'
        mem[0x4321e6] = '\x00'
        mem[0x4321e7] = '\x00'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x4321e2

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4321e2, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e3, 8)== ord('\x88'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e4, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e5, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x4321e8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JS_11_symbolic(self):
        ''' Instruction JS_11 
            Groups: jump 
            0x4321e2:	js	0x43242b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4321e2] = '\x0f'
        mem[0x4321e3] = '\x88'
        mem[0x4321e4] = 'C'
        mem[0x4321e5] = '\x02'
        mem[0x4321e6] = '\x00'
        mem[0x4321e7] = '\x00'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x4321e2

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4321e2, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e3, 8)== ord('\x88'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e4, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e5, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x4321e8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JS_2_symbolic(self):
        ''' Instruction JS_2 
            Groups: jump 
            0x43424b:	js	0x43420f
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x43424b] = 'x'
        mem[0x43424c] = '\xc2'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x43424b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43424b, 8)== ord('x'))
        condition = Operators.AND(condition, cpu.read_int(0x43424c, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.RIP == 0x43424d)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JS_3_symbolic(self):
        ''' Instruction JS_3 
            Groups: jump 
            0x434231:	js	0x43420f
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x434231] = 'x'
        mem[0x434232] = '\xdc'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x434231

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x434231, 8)== ord('x'))
        condition = Operators.AND(condition, cpu.read_int(0x434232, 8)== ord('\xdc'))
        condition = Operators.AND(condition, cpu.RIP == 0x434233)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JS_4_symbolic(self):
        ''' Instruction JS_4 
            Groups: jump 
            0x43424b:	js	0x43420f
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x43424b] = 'x'
        mem[0x43424c] = '\xc2'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x43424b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43424b, 8)== ord('x'))
        condition = Operators.AND(condition, cpu.read_int(0x43424c, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.RIP == 0x43424d)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JS_5_symbolic(self):
        ''' Instruction JS_5 
            Groups: jump 
            0x4321e2:	js	0x43242b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4321e2] = '\x0f'
        mem[0x4321e3] = '\x88'
        mem[0x4321e4] = 'C'
        mem[0x4321e5] = '\x02'
        mem[0x4321e6] = '\x00'
        mem[0x4321e7] = '\x00'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x4321e2

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4321e2, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e3, 8)== ord('\x88'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e4, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e5, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x4321e8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JS_6_symbolic(self):
        ''' Instruction JS_6 
            Groups: jump 
            0x414a36:	js	0x414a40
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x414a36] = 'x'
        mem[0x414a37] = '\x08'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x414a36

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x414a36, 8)== ord('x'))
        condition = Operators.AND(condition, cpu.read_int(0x414a37, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.RIP == 0x414a40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JS_7_symbolic(self):
        ''' Instruction JS_7 
            Groups: jump 
            0x43424b:	js	0x43420f
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x43424b] = 'x'
        mem[0x43424c] = '\xc2'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x43424b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43424b, 8)== ord('x'))
        condition = Operators.AND(condition, cpu.read_int(0x43424c, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.RIP == 0x43424d)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JS_8_symbolic(self):
        ''' Instruction JS_8 
            Groups: jump 
            0x4321e2:	js	0x43242b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4321e2] = '\x0f'
        mem[0x4321e3] = '\x88'
        mem[0x4321e4] = 'C'
        mem[0x4321e5] = '\x02'
        mem[0x4321e6] = '\x00'
        mem[0x4321e7] = '\x00'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x4321e2

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4321e2, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e3, 8)== ord('\x88'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e4, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e5, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4321e7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x4321e8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_JS_9_symbolic(self):
        ''' Instruction JS_9 
            Groups: jump 
            0x400caf:	js	0x400e20
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400caf] = '\x0f'
        mem[0x400cb0] = '\x88'
        mem[0x400cb1] = 'k'
        mem[0x400cb2] = '\x01'
        mem[0x400cb3] = '\x00'
        mem[0x400cb4] = '\x00'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x400caf

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400caf, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400cb0, 8)== ord('\x88'))
        condition = Operators.AND(condition, cpu.read_int(0x400cb1, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x400cb2, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x400cb3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x400cb4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x400cb5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEAVE_1_symbolic(self):
        ''' Instruction LEAVE_1 
            Groups: mode64 
            0x414a64:	leave	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca48)
        value = cs.new_bitvec(8)
        cs.add(value == 0x60)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca49)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4a)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca4a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca4b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca4c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca4d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca4e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca4f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca50)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca51)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca52)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca53)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca54)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca55)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca56)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca57)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca58)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca59)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca5a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca5b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca5c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca5d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca5e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca5f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca60)
        value = cs.new_bitvec(8)
        cs.add(value == 0x90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca61)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca62)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca63)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca64)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca65)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca66)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca67)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x414a64] = '\xc9'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca68)
        value = cs.new_bitvec(8)
        cs.add(value == 0x9b)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffca50)
        cpu.RIP = 0x414a64
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffca60)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca48, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca49, 8)== ord('J'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca4a, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca4b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca4c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca4d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca4e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca4f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca50, 8)== ord('+'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca51, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca52, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca53, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca54, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca55, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca56, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca57, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca58, 8)== ord(','))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca59, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca5a, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca5b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca5c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca5d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca5e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca5f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca60, 8)== ord('\x90'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca61, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca62, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca63, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x414a64, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca65, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca66, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca67, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca64, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca68, 8)== ord('\x9b'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffca68)
        condition = Operators.AND(condition, cpu.RIP == 0x414a65)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEAVE_2_symbolic(self):
        ''' Instruction LEAVE_2 
            Groups: mode64 
            0x400b50:	leave	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb08)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb09)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0a)
        value = cs.new_bitvec(8)
        cs.add(value == 0xb9)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x46)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x9d)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0d)
        value = cs.new_bitvec(8)
        cs.add(value == 0xa4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0e)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb10)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb11)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdb)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb12)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb13)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb14)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb15)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb16)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb17)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb18)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe3)
        mem[addr] = value
        mem[0x400b50] = '\xc9'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdae8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdae9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xa)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaea)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaeb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaec)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaed)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaee)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaef)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x12)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdaf0)
        cpu.RIP = 0x400b50
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdb10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb08, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb09, 8)== ord('\xf7'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0a, 8)== ord('\xb9'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0b, 8)== ord('F'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0c, 8)== ord('\x9d'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0d, 8)== ord('\xa4'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0e, 8)== ord('\xe4'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0f, 8)== ord('\x1c'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb10, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb11, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb12, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb13, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb14, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb15, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb16, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb17, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb18, 8)== ord('\xe3'))
        condition = Operators.AND(condition, cpu.read_int(0x400b50, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdae8, 8)== ord('\x8b'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdae9, 8)== ord('\n'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaea, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaeb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaec, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaed, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaee, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaef, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf0, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf1, 8)== ord('\x12'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf2, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf8, 8)== ord('\x06'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdb18)
        condition = Operators.AND(condition, cpu.RIP == 0x400b51)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdbe0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_1_symbolic(self):
        ''' Instruction LEA_1 
            Groups:  
            0x465c83:	lea	rsi, [rbp - 0x1020]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x465c83] = 'H'
        mem[0x465c84] = '\x8d'
        mem[0x465c85] = '\xb5'
        mem[0x465c86] = '\xe0'
        mem[0x465c87] = '\xef'
        mem[0x465c88] = '\xff'
        mem[0x465c89] = '\xff'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca70)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca71)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca72)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca73)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca74)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca75)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca76)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca77)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7fffffffdc08)
        cpu.RIP = 0x465c83
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x465c83, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x465c84, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x465c85, 8)== ord('\xb5'))
        condition = Operators.AND(condition, cpu.read_int(0x465c86, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x465c87, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x465c88, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x465c89, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca70, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca71, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca72, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca73, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca74, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca75, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca76, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca77, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSI == 0x7fffffffca70)
        condition = Operators.AND(condition, cpu.RIP == 0x465c8a)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_10_symbolic(self):
        ''' Instruction LEA_10 
            Groups:  
            0x436e0a:	lea	rdx, [rbx + 0x28]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x006bf000, 0x1000, 'rwx')
        mem[0x436e0a] = 'H'
        mem[0x436e0b] = '\x8d'
        mem[0x436e0c] = 'S'
        mem[0x436e0d] = '('
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf238)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf239)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf2)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf23a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf23b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf23c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf23d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf23e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf23f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x1)
        cpu.RIP = 0x436e0a
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6bf210)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436e0a, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436e0b, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x436e0c, 8)== ord('S'))
        condition = Operators.AND(condition, cpu.read_int(0x436e0d, 8)== ord('('))
        condition = Operators.AND(condition, cpu.read_int(0x6bf238, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf239, 8)== ord('\xf2'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf23a, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf23b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf23c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf23d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf23e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf23f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RDX == 0x6bf238)
        condition = Operators.AND(condition, cpu.RIP == 0x436e0e)
        condition = Operators.AND(condition, cpu.RBX == 0x6bf210)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_11_symbolic(self):
        ''' Instruction LEA_11 
            Groups:  
            0x4367ef:	lea	rdx, [rip + 0x5e34a]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b40)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b41)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1d)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b42)
        value = cs.new_bitvec(8)
        cs.add(value == 0xfa)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b43)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b44)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b45)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b46)
        value = cs.new_bitvec(8)
        cs.add(value == 0xfa)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b47)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        mem[0x4367ef] = 'H'
        mem[0x4367f0] = '\x8d'
        mem[0x4367f1] = '\x15'
        mem[0x4367f2] = 'J'
        mem[0x4367f3] = '\xe3'
        mem[0x4367f4] = '\x05'
        mem[0x4367f5] = '\x00'
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x6b7888)
        cpu.RIP = 0x4367ef

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494b40, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x494b41, 8)== ord('\x1d'))
        condition = Operators.AND(condition, cpu.read_int(0x494b42, 8)== ord('\xfa'))
        condition = Operators.AND(condition, cpu.read_int(0x494b43, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x494b44, 8)== ord('\xf0'))
        condition = Operators.AND(condition, cpu.read_int(0x494b45, 8)== ord('\x1c'))
        condition = Operators.AND(condition, cpu.read_int(0x494b46, 8)== ord('\xfa'))
        condition = Operators.AND(condition, cpu.read_int(0x494b47, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x4367ef, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4367f0, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x4367f1, 8)== ord('\x15'))
        condition = Operators.AND(condition, cpu.read_int(0x4367f2, 8)== ord('J'))
        condition = Operators.AND(condition, cpu.read_int(0x4367f3, 8)== ord('\xe3'))
        condition = Operators.AND(condition, cpu.read_int(0x4367f4, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.read_int(0x4367f5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RDX == 0x494b40)
        condition = Operators.AND(condition, cpu.RIP == 0x4367f6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_12_symbolic(self):
        ''' Instruction LEA_12 
            Groups:  
            0x411d0a:	lea	rax, [r15 + rax*8 + 0x58]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        mem[0x411d0a] = 'I'
        mem[0x411d0b] = '\x8d'
        mem[0x411d0c] = 'D'
        mem[0x411d0d] = '\xc7'
        mem[0x411d0e] = 'X'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9d18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9d19)
        value = cs.new_bitvec(8)
        cs.add(value == 0x9d)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9d1a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9d1b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9d1c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9d1d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9d1e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9d1f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.R15 = cs.new_bitvec(64)
        cs.add(cpu.R15 == 0x6b9840)
        cpu.RIP = 0x411d0a
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411d0a, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x411d0b, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x411d0c, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x411d0d, 8)== ord('\xc7'))
        condition = Operators.AND(condition, cpu.read_int(0x411d0e, 8)== ord('X'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9d18, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9d19, 8)== ord('\x9d'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9d1a, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9d1b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9d1c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9d1d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9d1e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9d1f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.R15 == 0x6b9840)
        condition = Operators.AND(condition, cpu.RAX == 0x6b9d18)
        condition = Operators.AND(condition, cpu.RIP == 0x411d0f)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_13_symbolic(self):
        ''' Instruction LEA_13 
            Groups:  
            0x46223d:	lea	rdx, [rip + 0x257f7c]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, 'rwx')
        mem.mmap(0x006ba000, 0x1000, 'rwx')
        mem[0x462240] = '|'
        mem[0x462241] = '\x7f'
        mem[0x462242] = '%'
        mem[0x462243] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba1c4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba1c5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba1c6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba1c1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba1c2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba1c3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba1c0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba1c7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x46223d] = 'H'
        mem[0x46223e] = '\x8d'
        mem[0x46223f] = '\x15'
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x6ba300)
        cpu.RIP = 0x46223d

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x462240, 8)== ord('|'))
        condition = Operators.AND(condition, cpu.read_int(0x462241, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x462242, 8)== ord('%'))
        condition = Operators.AND(condition, cpu.read_int(0x462243, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba1c4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba1c5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba1c6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba1c1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba1c2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba1c3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba1c0, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba1c7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x46223d, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x46223e, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x46223f, 8)== ord('\x15'))
        condition = Operators.AND(condition, cpu.RDX == 0x6ba1c0)
        condition = Operators.AND(condition, cpu.RIP == 0x462244)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_14_symbolic(self):
        ''' Instruction LEA_14 
            Groups:  
            0x43222d:	lea	rdx, [rip + 0x61f4c]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494180)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494181)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494182)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494183)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494184)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494185)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494186)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494187)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x43222d] = 'H'
        mem[0x43222e] = '\x8d'
        mem[0x43222f] = '\x15'
        mem[0x432230] = 'L'
        mem[0x432231] = '\x1f'
        mem[0x432232] = '\x06'
        mem[0x432233] = '\x00'
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x3)
        cpu.RIP = 0x43222d

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494180, 8)== ord('\x06'))
        condition = Operators.AND(condition, cpu.read_int(0x494181, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(0x494182, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x494183, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x494184, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x494185, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x494186, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x494187, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x43222d, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x43222e, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x43222f, 8)== ord('\x15'))
        condition = Operators.AND(condition, cpu.read_int(0x432230, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x432231, 8)== ord('\x1f'))
        condition = Operators.AND(condition, cpu.read_int(0x432232, 8)== ord('\x06'))
        condition = Operators.AND(condition, cpu.read_int(0x432233, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RDX == 0x494180)
        condition = Operators.AND(condition, cpu.RIP == 0x432234)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_15_symbolic(self):
        ''' Instruction LEA_15 
            Groups:  
            0x4322b0:	lea	r9, [rdx + rax*8]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941a0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xc)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941a1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941a2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941a3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941a4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941a5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941a6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941a7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4322b0] = 'L'
        mem[0x4322b1] = '\x8d'
        mem[0x4322b2] = '\x0c'
        mem[0x4322b3] = '\xc2'
        cpu.RIP = 0x4322b0
        cpu.R9 = cs.new_bitvec(64)
        cs.add(cpu.R9 == 0x4941c0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x4)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x494180)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4941a0, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x4941a1, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(0x4941a2, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x4941a3, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(0x4941a4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4941a5, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x4941a6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4941a7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4322b0, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x4322b1, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x4322b2, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x4322b3, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.RAX == 0x4)
        condition = Operators.AND(condition, cpu.R9 == 0x4941a0)
        condition = Operators.AND(condition, cpu.RIP == 0x4322b4)
        condition = Operators.AND(condition, cpu.RDX == 0x494180)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_16_symbolic(self):
        ''' Instruction LEA_16 
            Groups:  
            0x4341df:	lea	rax, [rip + 0x2865b2]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem.mmap(0x006ba000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba798)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba799)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba79a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba79b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba79c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba79d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba79e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba79f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4341e0] = '\x8d'
        mem[0x4341e1] = '\x05'
        mem[0x4341e2] = '\xb2'
        mem[0x4341e3] = 'e'
        mem[0x4341e4] = '('
        mem[0x4341e5] = '\x00'
        mem[0x4341df] = 'H'
        cpu.RIP = 0x4341df
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0xfff)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6ba798, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba799, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba79a, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba79b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba79c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba79d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba79e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4341df, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4341e0, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x4341e1, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.read_int(0x4341e2, 8)== ord('\xb2'))
        condition = Operators.AND(condition, cpu.read_int(0x4341e3, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.read_int(0x4341e4, 8)== ord('('))
        condition = Operators.AND(condition, cpu.read_int(0x4341e5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba79f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RAX == 0x6ba798)
        condition = Operators.AND(condition, cpu.RIP == 0x4341e6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_17_symbolic(self):
        ''' Instruction LEA_17 
            Groups:  
            0x436fd9:	lea	rdi, [rip + 0x5ddee]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dce)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dcf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x53)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x53)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x55)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4d)
        mem[addr] = value
        mem[0x436fd9] = 'H'
        mem[0x436fda] = '\x8d'
        mem[0x436fdb] = '='
        mem[0x436fdc] = '\xee'
        mem[0x436fdd] = '\xdd'
        mem[0x436fde] = '\x05'
        mem[0x436fdf] = '\x00'
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x494d9e)
        cpu.RIP = 0x436fd9

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494dce, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494dcf, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd0, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd1, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd2, 8)== ord('S'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd3, 8)== ord('S'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd4, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd5, 8)== ord('M'))
        condition = Operators.AND(condition, cpu.read_int(0x436fd9, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436fda, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x436fdb, 8)== ord('='))
        condition = Operators.AND(condition, cpu.read_int(0x436fdc, 8)== ord('\xee'))
        condition = Operators.AND(condition, cpu.read_int(0x436fdd, 8)== ord('\xdd'))
        condition = Operators.AND(condition, cpu.read_int(0x436fde, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.read_int(0x436fdf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RDI == 0x494dce)
        condition = Operators.AND(condition, cpu.RIP == 0x436fe0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_18_symbolic(self):
        ''' Instruction LEA_18 
            Groups:  
            0x436ce3:	lea	rsi, [rip + 0x280b16]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x006b7000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b7800)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b7801)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b7802)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b7803)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b7804)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b7805)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b7806)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b7807)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x436ce3] = 'H'
        mem[0x436ce4] = '\x8d'
        mem[0x436ce5] = '5'
        mem[0x436ce6] = '\x16'
        mem[0x436ce7] = '\x0b'
        mem[0x436ce8] = '('
        mem[0x436ce9] = '\x00'
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7ffff7ffd3b0)
        cpu.RIP = 0x436ce3

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6b7800, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(0x6b7801, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b7802, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b7803, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b7804, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b7805, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b7806, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b7807, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x436ce3, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436ce4, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x436ce5, 8)== ord('5'))
        condition = Operators.AND(condition, cpu.read_int(0x436ce6, 8)== ord('\x16'))
        condition = Operators.AND(condition, cpu.read_int(0x436ce7, 8)== ord('\x0b'))
        condition = Operators.AND(condition, cpu.read_int(0x436ce8, 8)== ord('('))
        condition = Operators.AND(condition, cpu.read_int(0x436ce9, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSI == 0x6b7800)
        condition = Operators.AND(condition, cpu.RIP == 0x436cea)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_19_symbolic(self):
        ''' Instruction LEA_19 
            Groups:  
            0x411ff5:	lea	rcx, [rip + 0x2a7844]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9840)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9841)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9842)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9843)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9844)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9845)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9846)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9847)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x411ff5] = 'H'
        mem[0x411ff6] = '\x8d'
        mem[0x411ff7] = '\r'
        mem[0x411ff8] = 'D'
        mem[0x411ff9] = 'x'
        mem[0x411ffa] = '*'
        mem[0x411ffb] = '\x00'
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x4)
        cpu.RIP = 0x411ff5

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6b9840, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9841, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9842, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9843, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9844, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9845, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9846, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9847, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x411ff5, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x411ff6, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x411ff7, 8)== ord('\r'))
        condition = Operators.AND(condition, cpu.read_int(0x411ff8, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x411ff9, 8)== ord('x'))
        condition = Operators.AND(condition, cpu.read_int(0x411ffa, 8)== ord('*'))
        condition = Operators.AND(condition, cpu.read_int(0x411ffb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RCX == 0x6b9840)
        condition = Operators.AND(condition, cpu.RIP == 0x411ffc)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_2_symbolic(self):
        ''' Instruction LEA_2 
            Groups:  
            0x411824:	lea	rbx, [r15 + 0x58]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9898)
        value = cs.new_bitvec(8)
        cs.add(value == 0xa0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9899)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf6)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b989a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b989b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b989c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b989d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b989e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b989f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x411824] = 'I'
        mem[0x411825] = '\x8d'
        mem[0x411826] = '_'
        mem[0x411827] = 'X'
        cpu.R15 = cs.new_bitvec(64)
        cs.add(cpu.R15 == 0x6b9840)
        cpu.RIP = 0x411824
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6b9840)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6b9898, 8)== ord('\xa0'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9899, 8)== ord('\xf6'))
        condition = Operators.AND(condition, cpu.read_int(0x6b989a, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x6b989b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b989c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b989d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b989e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b989f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x411824, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x411825, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x411826, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x411827, 8)== ord('X'))
        condition = Operators.AND(condition, cpu.R15 == 0x6b9840)
        condition = Operators.AND(condition, cpu.RIP == 0x411828)
        condition = Operators.AND(condition, cpu.RBX == 0x6b9898)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_20_symbolic(self):
        ''' Instruction LEA_20 
            Groups:  
            0x400a59:	lea	rsp, [rsp + 0x1020]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x400a60] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x12)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x400a59] = 'H'
        mem[0x400a5a] = '\x8d'
        mem[0x400a5b] = '\xa4'
        mem[0x400a5c] = '$'
        mem[0x400a5d] = ' '
        mem[0x400a5e] = '\x10'
        mem[0x400a5f] = '\x00'
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffcad0)
        cpu.RIP = 0x400a59

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a60, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf0, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf1, 8)== ord('\x12'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf2, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x400a59, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x400a5a, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x400a5b, 8)== ord('\xa4'))
        condition = Operators.AND(condition, cpu.read_int(0x400a5c, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x400a5d, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x400a5e, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x400a5f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdaf0)
        condition = Operators.AND(condition, cpu.RIP == 0x400a61)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_21_symbolic(self):
        ''' Instruction LEA_21 
            Groups:  
            0x411824:	lea	rbx, [r15 + 0x58]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x006b9000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9898)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b9899)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b989a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b989b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b989c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b989d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b989e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6b989f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x411824] = 'I'
        mem[0x411825] = '\x8d'
        mem[0x411826] = '_'
        mem[0x411827] = 'X'
        cpu.R15 = cs.new_bitvec(64)
        cs.add(cpu.R15 == 0x6b9840)
        cpu.RIP = 0x411824
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6b9840)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6b9898, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x6b9899, 8)== ord('\xf7'))
        condition = Operators.AND(condition, cpu.read_int(0x6b989a, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x6b989b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b989c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b989d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b989e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6b989f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x411824, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x411825, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x411826, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x411827, 8)== ord('X'))
        condition = Operators.AND(condition, cpu.R15 == 0x6b9840)
        condition = Operators.AND(condition, cpu.RIP == 0x411828)
        condition = Operators.AND(condition, cpu.RBX == 0x6b9898)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_3_symbolic(self):
        ''' Instruction LEA_3 
            Groups:  
            0x4623f6:	lea	rcx, [r13 + 0x2b8]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, 'rwx')
        mem.mmap(0x006bf000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf4c8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf4c9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf4ca)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf4cb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf4cc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf4cd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf4ce)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf4cf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4623f6] = 'I'
        mem[0x4623f7] = '\x8d'
        mem[0x4623f8] = '\x8d'
        mem[0x4623f9] = '\xb8'
        mem[0x4623fa] = '\x02'
        mem[0x4623fb] = '\x00'
        mem[0x4623fc] = '\x00'
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x0)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x6bf210)
        cpu.RIP = 0x4623f6

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6bf4c8, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf4c9, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf4ca, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf4cb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf4cc, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf4cd, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf4ce, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf4cf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4623f6, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x4623f7, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x4623f8, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x4623f9, 8)== ord('\xb8'))
        condition = Operators.AND(condition, cpu.read_int(0x4623fa, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(0x4623fb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4623fc, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RCX == 0x6bf4c8)
        condition = Operators.AND(condition, cpu.R13 == 0x6bf210)
        condition = Operators.AND(condition, cpu.RIP == 0x4623fd)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_4_symbolic(self):
        ''' Instruction LEA_4 
            Groups:  
            0x436ed5:	lea	rdi, [rip + 0x5dea6]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d82)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d83)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d84)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d85)
        value = cs.new_bitvec(8)
        cs.add(value == 0x42)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d86)
        value = cs.new_bitvec(8)
        cs.add(value == 0x49)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d87)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d88)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d89)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        mem[0x436ed5] = 'H'
        mem[0x436ed6] = '\x8d'
        mem[0x436ed7] = '='
        mem[0x436ed8] = '\xa6'
        mem[0x436ed9] = '\xde'
        mem[0x436eda] = '\x05'
        mem[0x436edb] = '\x00'
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x494d76)
        cpu.RIP = 0x436ed5

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494d82, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494d83, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x494d84, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494d85, 8)== ord('B'))
        condition = Operators.AND(condition, cpu.read_int(0x494d86, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x494d87, 8)== ord('N'))
        condition = Operators.AND(condition, cpu.read_int(0x494d88, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x494d89, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x436ed5, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436ed6, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x436ed7, 8)== ord('='))
        condition = Operators.AND(condition, cpu.read_int(0x436ed8, 8)== ord('\xa6'))
        condition = Operators.AND(condition, cpu.read_int(0x436ed9, 8)== ord('\xde'))
        condition = Operators.AND(condition, cpu.read_int(0x436eda, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.read_int(0x436edb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RDI == 0x494d82)
        condition = Operators.AND(condition, cpu.RIP == 0x436edc)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_5_symbolic(self):
        ''' Instruction LEA_5 
            Groups:  
            0x400bd1:	lea	rdx, [rip + 0x2bac50]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x006bb000, 0x1000, 'rwx')
        mem[0x400bd1] = 'H'
        mem[0x400bd2] = '\x8d'
        mem[0x400bd3] = '\x15'
        mem[0x400bd4] = 'P'
        mem[0x400bd5] = '\xac'
        mem[0x400bd6] = '+'
        mem[0x400bd7] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb828)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb829)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb82a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb82b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb82c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb82d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb82e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb82f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RIP = 0x400bd1

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bd1, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd2, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd3, 8)== ord('\x15'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd4, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd5, 8)== ord('\xac'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd6, 8)== ord('+'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb828, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb829, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb82a, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb82b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb82c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb82d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb82e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb82f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RDX == 0x6bb828)
        condition = Operators.AND(condition, cpu.RIP == 0x400bd8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_6_symbolic(self):
        ''' Instruction LEA_6 
            Groups:  
            0x4322b0:	lea	r9, [rdx + rax*8]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942d8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942d9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942da)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942db)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942dc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942dd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942de)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942df)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4322b0] = 'L'
        mem[0x4322b1] = '\x8d'
        mem[0x4322b2] = '\x0c'
        mem[0x4322b3] = '\xc2'
        cpu.RIP = 0x4322b0
        cpu.R9 = cs.new_bitvec(64)
        cs.add(cpu.R9 == 0x494318)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x2b)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x494180)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4942d8, 8)== ord('|'))
        condition = Operators.AND(condition, cpu.read_int(0x4942d9, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(0x4942da, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x4942db, 8)== ord('\x06'))
        condition = Operators.AND(condition, cpu.read_int(0x4942dc, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4942dd, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4942de, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x4942df, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4322b0, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x4322b1, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x4322b2, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x4322b3, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.RAX == 0x2b)
        condition = Operators.AND(condition, cpu.R9 == 0x4942d8)
        condition = Operators.AND(condition, cpu.RIP == 0x4322b4)
        condition = Operators.AND(condition, cpu.RDX == 0x494180)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_7_symbolic(self):
        ''' Instruction LEA_7 
            Groups:  
            0x4322b0:	lea	r9, [rdx + rax*8]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941a0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xc)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941a1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941a2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941a3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941a4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941a5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941a6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941a7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4322b0] = 'L'
        mem[0x4322b1] = '\x8d'
        mem[0x4322b2] = '\x0c'
        mem[0x4322b3] = '\xc2'
        cpu.RIP = 0x4322b0
        cpu.R9 = cs.new_bitvec(64)
        cs.add(cpu.R9 == 0x4941c0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x4)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x494180)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4941a0, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x4941a1, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(0x4941a2, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x4941a3, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(0x4941a4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4941a5, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x4941a6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4941a7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4322b0, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x4322b1, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x4322b2, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x4322b3, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.RAX == 0x4)
        condition = Operators.AND(condition, cpu.R9 == 0x4941a0)
        condition = Operators.AND(condition, cpu.RIP == 0x4322b4)
        condition = Operators.AND(condition, cpu.RDX == 0x494180)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_8_symbolic(self):
        ''' Instruction LEA_8 
            Groups:  
            0x41abee:	lea	rax, [rip + 0x854b]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041a000, 0x1000, 'rwx')
        mem.mmap(0x00423000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x423140)
        value = cs.new_bitvec(8)
        cs.add(value == 0x66)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x423141)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x423142)
        value = cs.new_bitvec(8)
        cs.add(value == 0xef)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x423143)
        value = cs.new_bitvec(8)
        cs.add(value == 0xc0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x423144)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x423145)
        value = cs.new_bitvec(8)
        cs.add(value == 0x83)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x423146)
        value = cs.new_bitvec(8)
        cs.add(value == 0xfa)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x423147)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4f)
        mem[addr] = value
        mem[0x41abee] = 'H'
        mem[0x41abef] = '\x8d'
        mem[0x41abf0] = '\x05'
        mem[0x41abf1] = 'K'
        mem[0x41abf2] = '\x85'
        mem[0x41abf3] = '\x00'
        mem[0x41abf4] = '\x00'
        cpu.RIP = 0x41abee
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x41dc10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x423140, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x423141, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x423142, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x423143, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.read_int(0x423144, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x423145, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x423146, 8)== ord('\xfa'))
        condition = Operators.AND(condition, cpu.read_int(0x423147, 8)== ord('O'))
        condition = Operators.AND(condition, cpu.read_int(0x41abee, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x41abef, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x41abf0, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.read_int(0x41abf1, 8)== ord('K'))
        condition = Operators.AND(condition, cpu.read_int(0x41abf2, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x41abf3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x41abf4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RAX == 0x423140)
        condition = Operators.AND(condition, cpu.RIP == 0x41abf5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_LEA_9_symbolic(self):
        ''' Instruction LEA_9 
            Groups:  
            0x41b470:	lea	rsi, [rsi + 0x20]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041b000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca90)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca91)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca92)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca93)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca94)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca95)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca96)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca97)
        value = cs.new_bitvec(8)
        cs.add(value == 0x75)
        mem[addr] = value
        mem[0x41b470] = 'H'
        mem[0x41b471] = '\x8d'
        mem[0x41b472] = 'v'
        mem[0x41b473] = ' '
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7fffffffca70)
        cpu.RIP = 0x41b470

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca90, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca91, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca92, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca93, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca94, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca95, 8)== ord('/'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca96, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca97, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x41b470, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x41b471, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x41b472, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x41b473, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.RSI == 0x7fffffffca90)
        condition = Operators.AND(condition, cpu.RIP == 0x41b474)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVABS_1_symbolic(self):
        ''' Instruction MOVABS_1 
            Groups:  
            0x45f843:	movabs	rdx, 0xcccccccccccccccd
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045f000, 0x1000, 'rwx')
        mem[0x45f843] = 'H'
        mem[0x45f844] = '\xba'
        mem[0x45f845] = '\xcd'
        mem[0x45f846] = '\xcc'
        mem[0x45f847] = '\xcc'
        mem[0x45f848] = '\xcc'
        mem[0x45f849] = '\xcc'
        mem[0x45f84a] = '\xcc'
        mem[0x45f84b] = '\xcc'
        mem[0x45f84c] = '\xcc'
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x6bf700)
        cpu.RIP = 0x45f843

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x45f843, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x45f844, 8)== ord('\xba'))
        condition = Operators.AND(condition, cpu.read_int(0x45f845, 8)== ord('\xcd'))
        condition = Operators.AND(condition, cpu.read_int(0x45f846, 8)== ord('\xcc'))
        condition = Operators.AND(condition, cpu.read_int(0x45f847, 8)== ord('\xcc'))
        condition = Operators.AND(condition, cpu.read_int(0x45f848, 8)== ord('\xcc'))
        condition = Operators.AND(condition, cpu.read_int(0x45f849, 8)== ord('\xcc'))
        condition = Operators.AND(condition, cpu.read_int(0x45f84a, 8)== ord('\xcc'))
        condition = Operators.AND(condition, cpu.read_int(0x45f84b, 8)== ord('\xcc'))
        condition = Operators.AND(condition, cpu.read_int(0x45f84c, 8)== ord('\xcc'))
        condition = Operators.AND(condition, cpu.RDX == 0xcccccccccccccccd)
        condition = Operators.AND(condition, cpu.RIP == 0x45f84d)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVABS_2_symbolic(self):
        ''' Instruction MOVABS_2 
            Groups:  
            0x436b20:	movabs	r11, 0x37ffff1a0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436b20] = 'I'
        mem[0x436b21] = '\xbb'
        mem[0x436b22] = '\xa0'
        mem[0x436b23] = '\xf1'
        mem[0x436b24] = '\xff'
        mem[0x436b25] = '\x7f'
        mem[0x436b26] = '\x03'
        mem[0x436b27] = '\x00'
        mem[0x436b28] = '\x00'
        mem[0x436b29] = '\x00'
        cpu.RIP = 0x436b20
        cpu.R11 = cs.new_bitvec(64)
        cs.add(cpu.R11 == 0x346)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436b20, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x436b21, 8)== ord('\xbb'))
        condition = Operators.AND(condition, cpu.read_int(0x436b22, 8)== ord('\xa0'))
        condition = Operators.AND(condition, cpu.read_int(0x436b23, 8)== ord('\xf1'))
        condition = Operators.AND(condition, cpu.read_int(0x436b24, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x436b25, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x436b26, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(0x436b27, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x436b28, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x436b29, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x436b2a)
        condition = Operators.AND(condition, cpu.R11 == 0x37ffff1a0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVDQA_1_symbolic(self):
        ''' Instruction MOVDQA_1 
            Groups: sse2 
            0x457935:	movdqa	xmm5, xmm4
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x457938] = '\xec'
        mem[0x457935] = 'f'
        mem[0x457936] = '\x0f'
        mem[0x457937] = 'o'
        cpu.RIP = 0x457935
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 0x2f65726f6369746e616d2f737463656a)
        cpu.XMM5 = cs.new_bitvec(128)
        cs.add(cpu.XMM5 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457938, 8)== ord('\xec'))
        condition = Operators.AND(condition, cpu.read_int(0x457935, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x457936, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x457937, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.XMM4 == 0x2f65726f6369746e616d2f737463656a)
        condition = Operators.AND(condition, cpu.RIP == 0x457939)
        condition = Operators.AND(condition, cpu.XMM5 == 0x2f65726f6369746e616d2f737463656a)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVDQA_2_symbolic(self):
        ''' Instruction MOVDQA_2 
            Groups: sse2 
            0x45794f:	movdqa	xmm5, xmm3
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x457950] = '\x0f'
        mem[0x457951] = 'o'
        mem[0x457952] = '\xeb'
        mem[0x45794f] = 'f'
        cpu.XMM3 = cs.new_bitvec(128)
        cs.add(cpu.XMM3 == 0x7865646e692f6f7475612f7374736574)
        cpu.RIP = 0x45794f
        cpu.XMM5 = cs.new_bitvec(128)
        cs.add(cpu.XMM5 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457950, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x457951, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x457952, 8)== ord('\xeb'))
        condition = Operators.AND(condition, cpu.read_int(0x45794f, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.XMM3 == 0x7865646e692f6f7475612f7374736574)
        condition = Operators.AND(condition, cpu.RIP == 0x457953)
        condition = Operators.AND(condition, cpu.XMM5 == 0x7865646e692f6f7475612f7374736574)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVDQA_3_symbolic(self):
        ''' Instruction MOVDQA_3 
            Groups: sse2 
            0x4578fd:	movdqa	xmm3, xmm0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x457900] = '\xd8'
        mem[0x4578fd] = 'f'
        mem[0x4578fe] = '\x0f'
        mem[0x4578ff] = 'o'
        cpu.XMM3 = cs.new_bitvec(128)
        cs.add(cpu.XMM3 == 0x0)
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x6f72502f6570696c65662f656d6f682f)
        cpu.RIP = 0x4578fd

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457900, 8)== ord('\xd8'))
        condition = Operators.AND(condition, cpu.read_int(0x4578fd, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4578fe, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4578ff, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.XMM3 == 0x6f72502f6570696c65662f656d6f682f)
        condition = Operators.AND(condition, cpu.XMM0 == 0x6f72502f6570696c65662f656d6f682f)
        condition = Operators.AND(condition, cpu.RIP == 0x457901)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVDQU_1_symbolic(self):
        ''' Instruction MOVDQU_1 
            Groups: sse2 
            0x4183ca:	movdqu	xmm12, xmmword ptr [rax]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x7ffff7ffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7ffff7ffd300)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7ffff7ffd301)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7ffff7ffd302)
        value = cs.new_bitvec(8)
        cs.add(value == 0x31)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7ffff7ffd303)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4183ca] = '\xf3'
        mem[0x4183cb] = 'D'
        mem[0x4183cc] = '\x0f'
        mem[0x4183cd] = 'o'
        mem[0x4183ce] = ' '
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7ffff7ffd2f4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7ffff7ffd2f5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x69)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7ffff7ffd2f6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7ffff7ffd2f7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x75)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7ffff7ffd2f8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x78)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7ffff7ffd2f9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2d)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7ffff7ffd2fa)
        value = cs.new_bitvec(8)
        cs.add(value == 0x76)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7ffff7ffd2fb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7ffff7ffd2fc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7ffff7ffd2fd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7ffff7ffd2fe)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7ffff7ffd2ff)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0xff00ff)
        cpu.RIP = 0x4183ca
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x7ffff7ffd2f4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7ffff7ffd300, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x7ffff7ffd301, 8)== ord('.'))
        condition = Operators.AND(condition, cpu.read_int(0x7ffff7ffd302, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x7ffff7ffd303, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ca, 8)== ord('\xf3'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cb, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cc, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cd, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ce, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x7ffff7ffd2f4, 8)== ord('l'))
        condition = Operators.AND(condition, cpu.read_int(0x7ffff7ffd2f5, 8)== ord('i'))
        condition = Operators.AND(condition, cpu.read_int(0x7ffff7ffd2f6, 8)== ord('n'))
        condition = Operators.AND(condition, cpu.read_int(0x7ffff7ffd2f7, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x7ffff7ffd2f8, 8)== ord('x'))
        condition = Operators.AND(condition, cpu.read_int(0x7ffff7ffd2f9, 8)== ord('-'))
        condition = Operators.AND(condition, cpu.read_int(0x7ffff7ffd2fa, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x7ffff7ffd2fb, 8)== ord('d'))
        condition = Operators.AND(condition, cpu.read_int(0x7ffff7ffd2fc, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x7ffff7ffd2fd, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x7ffff7ffd2fe, 8)== ord('.'))
        condition = Operators.AND(condition, cpu.read_int(0x7ffff7ffd2ff, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.XMM12 == 0x312e6f732e6f7364762d78756e696c)
        condition = Operators.AND(condition, cpu.RAX == 0x7ffff7ffd2f4)
        condition = Operators.AND(condition, cpu.RIP == 0x4183cf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVDQU_10_symbolic(self):
        ''' Instruction MOVDQU_10 
            Groups: sse2 
            0x4183ca:	movdqu	xmm12, xmmword ptr [rax]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x4183ca] = '\xf3'
        mem[0x4183cb] = 'D'
        mem[0x4183cc] = '\x0f'
        mem[0x4183cd] = 'o'
        mem[0x4183ce] = ' '
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d8f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d90)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d91)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d92)
        value = cs.new_bitvec(8)
        cs.add(value == 0x59)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d93)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d94)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d8e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d96)
        value = cs.new_bitvec(8)
        cs.add(value == 0x49)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d97)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d98)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d99)
        value = cs.new_bitvec(8)
        cs.add(value == 0x57)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d9a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d9b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d9c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d9d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d95)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4d)
        mem[addr] = value
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0xff0000000000000000000000)
        cpu.RIP = 0x4183ca
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x494d8e)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183ca, 8)== ord('\xf3'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cb, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cc, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cd, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ce, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x494d8f, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x494d90, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494d91, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x494d92, 8)== ord('Y'))
        condition = Operators.AND(condition, cpu.read_int(0x494d93, 8)== ord('N'))
        condition = Operators.AND(condition, cpu.read_int(0x494d94, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x494d8e, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494d96, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x494d97, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x494d98, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494d99, 8)== ord('W'))
        condition = Operators.AND(condition, cpu.read_int(0x494d9a, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x494d9b, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x494d9c, 8)== ord('K'))
        condition = Operators.AND(condition, cpu.read_int(0x494d9d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x494d95, 8)== ord('M'))
        condition = Operators.AND(condition, cpu.XMM12 == 0x4b4145575f43494d414e59445f444c)
        condition = Operators.AND(condition, cpu.RAX == 0x494d8e)
        condition = Operators.AND(condition, cpu.RIP == 0x4183cf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVDQU_11_symbolic(self):
        ''' Instruction MOVDQU_11 
            Groups: sse2 
            0x4578f5:	movdqu	xmm0, xmmword ptr [rdi]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfa0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6f)
        mem[addr] = value
        mem[0x4578f6] = '\x0f'
        mem[0x4578f7] = 'o'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdf9a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x69)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdf95)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdf91)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdf92)
        value = cs.new_bitvec(8)
        cs.add(value == 0x68)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdf93)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdf94)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6d)
        mem[addr] = value
        mem[0x4578f5] = '\xf3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdf96)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdf97)
        value = cs.new_bitvec(8)
        cs.add(value == 0x66)
        mem[addr] = value
        mem[0x4578f8] = '\x07'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdf99)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdf98)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdf9b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdf9c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdf9d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdf9e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x50)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdf9f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7fffffffdf91)
        cpu.RIP = 0x4578f5

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfa0, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x4578f5, 8)== ord('\xf3'))
        condition = Operators.AND(condition, cpu.read_int(0x4578f6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4578f7, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x4578f8, 8)== ord('\x07'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdf91, 8)== ord('/'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdf92, 8)== ord('h'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdf93, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdf94, 8)== ord('m'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdf95, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdf96, 8)== ord('/'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdf97, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdf98, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdf99, 8)== ord('l'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdf9a, 8)== ord('i'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdf9b, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdf9c, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdf9d, 8)== ord('/'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdf9e, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdf9f, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.XMM0 == 0x6f72502f6570696c65662f656d6f682f)
        condition = Operators.AND(condition, cpu.RDI == 0x7fffffffdf91)
        condition = Operators.AND(condition, cpu.RIP == 0x4578f9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVDQU_12_symbolic(self):
        ''' Instruction MOVDQU_12 
            Groups: sse2 
            0x457946:	movdqu	xmm0, xmmword ptr [rdi + 0x30]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfc1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x68)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfc2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfc3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfc4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfc5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x457946] = '\xf3'
        mem[0x457947] = '\x0f'
        mem[0x457948] = 'o'
        mem[0x457949] = 'G'
        mem[0x45794a] = '0'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfc7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfcc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfcd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x67)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfcb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfcf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfd0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x58)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfc8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x67)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfce)
        value = cs.new_bitvec(8)
        cs.add(value == 0x32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfc9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x31)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfc6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfca)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0xff000000000000ff00000000ff)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7fffffffdf91)
        cpu.RIP = 0x457946

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfc1, 8)== ord('h'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfc2, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfc3, 8)== ord('l'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfc4, 8)== ord('l'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfc5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x457946, 8)== ord('\xf3'))
        condition = Operators.AND(condition, cpu.read_int(0x457947, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x457948, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x457949, 8)== ord('G'))
        condition = Operators.AND(condition, cpu.read_int(0x45794a, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfcb, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfcc, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfcd, 8)== ord('g'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfce, 8)== ord('2'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfcf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfd0, 8)== ord('X'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfc8, 8)== ord('g'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfc7, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfc9, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfc6, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfca, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.XMM0 == 0x5800326772610031677261006c6c6568)
        condition = Operators.AND(condition, cpu.RDI == 0x7fffffffdf91)
        condition = Operators.AND(condition, cpu.RIP == 0x45794b)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVDQU_13_symbolic(self):
        ''' Instruction MOVDQU_13 
            Groups: sse2 
            0x4183ca:	movdqu	xmm12, xmmword ptr [rax]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x004a5000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4a5301)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4a5302)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4a5303)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4a5304)
        value = cs.new_bitvec(8)
        cs.add(value == 0x25)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4a5305)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4a5306)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4a5307)
        value = cs.new_bitvec(8)
        cs.add(value == 0x25)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4a5308)
        value = cs.new_bitvec(8)
        cs.add(value == 0x62)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4a5309)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        mem[0x4183ca] = '\xf3'
        mem[0x4183cb] = 'D'
        mem[0x4183cc] = '\x0f'
        mem[0x4183cd] = 'o'
        mem[0x4183ce] = ' '
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4a530d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x25)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4a5310)
        value = cs.new_bitvec(8)
        cs.add(value == 0x25)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4a530c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4a530e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4a530a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x25)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4a530f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3a)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4a530b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0xff00000000000000)
        cpu.RIP = 0x4183ca
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x4a5301)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4a5301, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4a5302, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(0x4a5303, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4a5304, 8)== ord('%'))
        condition = Operators.AND(condition, cpu.read_int(0x4a5305, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x4a5306, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x4a5307, 8)== ord('%'))
        condition = Operators.AND(condition, cpu.read_int(0x4a5308, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4a5309, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x4183ca, 8)== ord('\xf3'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cb, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cc, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cd, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ce, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x4a530d, 8)== ord('%'))
        condition = Operators.AND(condition, cpu.read_int(0x4a5310, 8)== ord('%'))
        condition = Operators.AND(condition, cpu.read_int(0x4a530c, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x4a530e, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4a530a, 8)== ord('%'))
        condition = Operators.AND(condition, cpu.read_int(0x4a530f, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4a530b, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.XMM12 == 0x253a4825206525206225206125000200)
        condition = Operators.AND(condition, cpu.RAX == 0x4a5301)
        condition = Operators.AND(condition, cpu.RIP == 0x4183cf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVDQU_2_symbolic(self):
        ''' Instruction MOVDQU_2 
            Groups: sse2 
            0x4183ca:	movdqu	xmm12, xmmword ptr [rax]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x50)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x52)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x46)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x49)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4f)
        mem[addr] = value
        mem[0x4183ca] = '\xf3'
        mem[0x4183cb] = 'D'
        mem[0x4183cc] = '\x0f'
        mem[0x4183cd] = 'o'
        mem[0x4183ce] = ' '
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dad)
        value = cs.new_bitvec(8)
        cs.add(value == 0x55)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d9f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dac)
        value = cs.new_bitvec(8)
        cs.add(value == 0x50)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dab)
        value = cs.new_bitvec(8)
        cs.add(value == 0x54)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d9e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494daa)
        value = cs.new_bitvec(8)
        cs.add(value == 0x55)
        mem[addr] = value
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0xff000000000000000000000000000000)
        cpu.RIP = 0x4183ca
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x494d9e)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494da0, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494da1, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.read_int(0x494da2, 8)== ord('R'))
        condition = Operators.AND(condition, cpu.read_int(0x494da3, 8)== ord('O'))
        condition = Operators.AND(condition, cpu.read_int(0x494da4, 8)== ord('F'))
        condition = Operators.AND(condition, cpu.read_int(0x494da5, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x494da6, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494da7, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x494da8, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494da9, 8)== ord('O'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ca, 8)== ord('\xf3'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cb, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cc, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cd, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ce, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x494dad, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.read_int(0x494dac, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.read_int(0x494dab, 8)== ord('T'))
        condition = Operators.AND(condition, cpu.read_int(0x494daa, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.read_int(0x494d9e, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494d9f, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.XMM12 == 0x555054554f5f454c49464f52505f444c)
        condition = Operators.AND(condition, cpu.RAX == 0x494d9e)
        condition = Operators.AND(condition, cpu.RIP == 0x4183cf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVDQU_3_symbolic(self):
        ''' Instruction MOVDQU_3 
            Groups: sse2 
            0x4183ca:	movdqu	xmm12, xmmword ptr [rax]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d80)
        value = cs.new_bitvec(8)
        cs.add(value == 0x57)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d81)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d82)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d83)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d84)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d85)
        value = cs.new_bitvec(8)
        cs.add(value == 0x42)
        mem[addr] = value
        mem[0x4183ca] = '\xf3'
        mem[0x4183cb] = 'D'
        mem[0x4183cc] = '\x0f'
        mem[0x4183cd] = 'o'
        mem[0x4183ce] = ' '
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d76)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d77)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d78)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d79)
        value = cs.new_bitvec(8)
        cs.add(value == 0x42)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d7a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x49)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d7b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d7c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d7d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d7e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d7f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4f)
        mem[addr] = value
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0xff000000000000000000000000000000)
        cpu.RIP = 0x4183ca
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x494d76)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494d80, 8)== ord('W'))
        condition = Operators.AND(condition, cpu.read_int(0x494d81, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x494d82, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494d83, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x494d84, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494d85, 8)== ord('B'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ca, 8)== ord('\xf3'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cb, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cc, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cd, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ce, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x494d76, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494d77, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x494d78, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494d79, 8)== ord('B'))
        condition = Operators.AND(condition, cpu.read_int(0x494d7a, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x494d7b, 8)== ord('N'))
        condition = Operators.AND(condition, cpu.read_int(0x494d7c, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x494d7d, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494d7e, 8)== ord('N'))
        condition = Operators.AND(condition, cpu.read_int(0x494d7f, 8)== ord('O'))
        condition = Operators.AND(condition, cpu.XMM12 == 0x425f444c00574f4e5f444e49425f444c)
        condition = Operators.AND(condition, cpu.RAX == 0x494d76)
        condition = Operators.AND(condition, cpu.RIP == 0x4183cf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVDQU_4_symbolic(self):
        ''' Instruction MOVDQU_4 
            Groups: sse2 
            0x4183ca:	movdqu	xmm12, xmmword ptr [rax]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x4183cb] = 'D'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d05)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d06)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d07)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d08)
        value = cs.new_bitvec(8)
        cs.add(value == 0x57)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d09)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        mem[0x4183ca] = '\xf3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d0b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4e)
        mem[addr] = value
        mem[0x4183cc] = '\x0f'
        mem[0x4183cd] = 'o'
        mem[0x4183ce] = ' '
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d0d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d10)
        value = cs.new_bitvec(8)
        cs.add(value == 0x75)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d11)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d12)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2d)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d13)
        value = cs.new_bitvec(8)
        cs.add(value == 0x76)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d14)
        value = cs.new_bitvec(8)
        cs.add(value == 0x64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d0e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d0c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d0f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d0a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x52)
        mem[addr] = value
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0x0)
        cpu.RIP = 0x4183ca
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x494d05)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494d0b, 8)== ord('N'))
        condition = Operators.AND(condition, cpu.read_int(0x494d05, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494d06, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x494d07, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494d08, 8)== ord('W'))
        condition = Operators.AND(condition, cpu.read_int(0x494d09, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ca, 8)== ord('\xf3'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cb, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cc, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cd, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ce, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x494d0d, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x494d10, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x494d11, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.read_int(0x494d12, 8)== ord('-'))
        condition = Operators.AND(condition, cpu.read_int(0x494d13, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x494d14, 8)== ord('d'))
        condition = Operators.AND(condition, cpu.read_int(0x494d0e, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.read_int(0x494d0c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x494d0f, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x494d0a, 8)== ord('R'))
        condition = Operators.AND(condition, cpu.XMM12 == 0x64762d7075746573004e5241575f444c)
        condition = Operators.AND(condition, cpu.RAX == 0x494d05)
        condition = Operators.AND(condition, cpu.RIP == 0x4183cf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVDQU_5_symbolic(self):
        ''' Instruction MOVDQU_5 
            Groups: sse2 
            0x457939:	movdqu	xmm3, xmmword ptr [rdi + 0x20]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfc0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x78)
        mem[addr] = value
        mem[0x45793b] = 'o'
        mem[0x45793a] = '\x0f'
        mem[0x45793c] = '_'
        mem[0x45793d] = ' '
        mem[0x457939] = '\xf3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfb1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfb2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfb3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfb4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfb5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfb6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfb7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfb8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x75)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfb9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfba)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfbb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfbc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x69)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfbd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfbe)
        value = cs.new_bitvec(8)
        cs.add(value == 0x64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfbf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        cpu.XMM3 = cs.new_bitvec(128)
        cs.add(cpu.XMM3 == 0x0)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7fffffffdf91)
        cpu.RIP = 0x457939

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfc0, 8)== ord('x'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfbb, 8)== ord('/'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfbd, 8)== ord('n'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfbc, 8)== ord('i'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfb9, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfba, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfb1, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfb2, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfb3, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfb4, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfb5, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfb6, 8)== ord('/'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfb7, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfb8, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x457939, 8)== ord('\xf3'))
        condition = Operators.AND(condition, cpu.read_int(0x45793a, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x45793b, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x45793c, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x45793d, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfbe, 8)== ord('d'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfbf, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.XMM3 == 0x7865646e692f6f7475612f7374736574)
        condition = Operators.AND(condition, cpu.RDI == 0x7fffffffdf91)
        condition = Operators.AND(condition, cpu.RIP == 0x45793e)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVDQU_6_symbolic(self):
        ''' Instruction MOVDQU_6 
            Groups: sse2 
            0x457930:	movdqu	xmm4, xmmword ptr [rdi + 0x10]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfa1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6a)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfa2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfa3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x63)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfa4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfa5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfa6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfa7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6d)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfa8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfa9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfaa)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfab)
        value = cs.new_bitvec(8)
        cs.add(value == 0x69)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfac)
        value = cs.new_bitvec(8)
        cs.add(value == 0x63)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfad)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfae)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfaf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        mem[0x457930] = '\xf3'
        mem[0x457931] = '\x0f'
        mem[0x457932] = 'o'
        mem[0x457933] = 'g'
        mem[0x457934] = '\x10'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdfb0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2f)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7fffffffdf91)
        cpu.RIP = 0x457930
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfa1, 8)== ord('j'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfa2, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfa3, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfa4, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfa5, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfa6, 8)== ord('/'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfa7, 8)== ord('m'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfa8, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfa9, 8)== ord('n'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfaa, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfab, 8)== ord('i'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfac, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfad, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfae, 8)== ord('r'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfaf, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdfb0, 8)== ord('/'))
        condition = Operators.AND(condition, cpu.read_int(0x457931, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x457932, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x457933, 8)== ord('g'))
        condition = Operators.AND(condition, cpu.read_int(0x457934, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x457930, 8)== ord('\xf3'))
        condition = Operators.AND(condition, cpu.RDI == 0x7fffffffdf91)
        condition = Operators.AND(condition, cpu.XMM4 == 0x2f65726f6369746e616d2f737463656a)
        condition = Operators.AND(condition, cpu.RIP == 0x457935)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVDQU_7_symbolic(self):
        ''' Instruction MOVDQU_7 
            Groups: sse2 
            0x4183ca:	movdqu	xmm12, xmmword ptr [rax]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x4183ca] = '\xf3'
        mem[0x4183cb] = 'D'
        mem[0x4183cc] = '\x0f'
        mem[0x4183cd] = 'o'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dce)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dcf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x53)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x53)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x55)
        mem[addr] = value
        mem[0x4183ce] = ' '
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dda)
        value = cs.new_bitvec(8)
        cs.add(value == 0x52)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494ddb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494ddc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494ddd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4d)
        mem[addr] = value
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0x0)
        cpu.RIP = 0x4183ca
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x494dce)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183ca, 8)== ord('\xf3'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cb, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cc, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cd, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x494dce, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494dcf, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd0, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd1, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd2, 8)== ord('S'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd3, 8)== ord('S'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd4, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ce, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x494dd6, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd7, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd8, 8)== ord('K'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd9, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x494dda, 8)== ord('R'))
        condition = Operators.AND(condition, cpu.read_int(0x494ddb, 8)== ord('N'))
        condition = Operators.AND(condition, cpu.read_int(0x494ddc, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x494ddd, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd5, 8)== ord('M'))
        condition = Operators.AND(condition, cpu.XMM12 == 0x4c454e52454b5f454d555353415f444c)
        condition = Operators.AND(condition, cpu.RAX == 0x494dce)
        condition = Operators.AND(condition, cpu.RIP == 0x4183cf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVDQU_8_symbolic(self):
        ''' Instruction MOVDQU_8 
            Groups: sse2 
            0x4183ca:	movdqu	xmm12, xmmword ptr [rax]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x4183cb] = 'D'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d66)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d67)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d68)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d69)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        mem[0x4183ca] = '\xf3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d6b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x42)
        mem[addr] = value
        mem[0x4183cc] = '\x0f'
        mem[0x4183cd] = 'o'
        mem[0x4183ce] = ' '
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d6d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d70)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d71)
        value = cs.new_bitvec(8)
        cs.add(value == 0x50)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d72)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d73)
        value = cs.new_bitvec(8)
        cs.add(value == 0x54)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d74)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d6e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x52)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d6c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x52)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d6f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x59)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d6a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x49)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d75)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0xff000000000000000000000000000000)
        cpu.RIP = 0x4183ca
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x494d66)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494d6b, 8)== ord('B'))
        condition = Operators.AND(condition, cpu.read_int(0x494d66, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494d67, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x494d68, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494d69, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ca, 8)== ord('\xf3'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cb, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cc, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cd, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ce, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x494d6d, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x494d70, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494d71, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.read_int(0x494d72, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x494d73, 8)== ord('T'))
        condition = Operators.AND(condition, cpu.read_int(0x494d74, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x494d6e, 8)== ord('R'))
        condition = Operators.AND(condition, cpu.read_int(0x494d6c, 8)== ord('R'))
        condition = Operators.AND(condition, cpu.read_int(0x494d6f, 8)== ord('Y'))
        condition = Operators.AND(condition, cpu.read_int(0x494d6a, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x494d75, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.XMM12 == 0x485441505f5952415242494c5f444c)
        condition = Operators.AND(condition, cpu.RAX == 0x494d66)
        condition = Operators.AND(condition, cpu.RIP == 0x4183cf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVDQU_9_symbolic(self):
        ''' Instruction MOVDQU_9 
            Groups: sse2 
            0x4183ca:	movdqu	xmm12, xmmword ptr [rax]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d82)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d83)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d84)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d85)
        value = cs.new_bitvec(8)
        cs.add(value == 0x42)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d86)
        value = cs.new_bitvec(8)
        cs.add(value == 0x49)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d87)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d88)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d89)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        mem[0x4183ca] = '\xf3'
        mem[0x4183cb] = 'D'
        mem[0x4183cc] = '\x0f'
        mem[0x4183cd] = 'o'
        mem[0x4183ce] = ' '
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d8d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d90)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d91)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d8e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d8c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x54)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d8f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d8b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d8a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4e)
        mem[addr] = value
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0xff0000000000000000000000)
        cpu.RIP = 0x4183ca
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x494d82)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494d82, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494d83, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x494d84, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494d85, 8)== ord('B'))
        condition = Operators.AND(condition, cpu.read_int(0x494d86, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x494d87, 8)== ord('N'))
        condition = Operators.AND(condition, cpu.read_int(0x494d88, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x494d89, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ca, 8)== ord('\xf3'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cb, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cc, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cd, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ce, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x494d8d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x494d90, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494d91, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x494d8e, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494d8c, 8)== ord('T'))
        condition = Operators.AND(condition, cpu.read_int(0x494d8f, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x494d8b, 8)== ord('O'))
        condition = Operators.AND(condition, cpu.read_int(0x494d8a, 8)== ord('N'))
        condition = Operators.AND(condition, cpu.XMM12 == 0x445f444c00544f4e5f444e49425f444c)
        condition = Operators.AND(condition, cpu.RAX == 0x494d82)
        condition = Operators.AND(condition, cpu.RIP == 0x4183cf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVD_1_symbolic(self):
        ''' Instruction MOVD_1 
            Groups: sse2 
            0x4578d0:	movd	xmm1, esi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x4578d0] = 'f'
        mem[0x4578d1] = '\x0f'
        mem[0x4578d2] = 'n'
        mem[0x4578d3] = '\xce'
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.RIP = 0x4578d0
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x2f)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4578d0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4578d1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4578d2, 8)== ord('n'))
        condition = Operators.AND(condition, cpu.read_int(0x4578d3, 8)== ord('\xce'))
        condition = Operators.AND(condition, cpu.XMM1 == 0x2f)
        condition = Operators.AND(condition, cpu.ESI == 0x2f)
        condition = Operators.AND(condition, cpu.RIP == 0x4578d4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_1_symbolic(self):
        ''' Instruction MOVSXD_1 
            Groups: mode64 
            0x436812:	movsxd	rax, dword ptr [rdx + rax*4]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x436812] = 'H'
        mem[0x436813] = 'c'
        mem[0x436814] = '\x04'
        mem[0x436815] = '\x82'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b68)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b69)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1d)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b6a)
        value = cs.new_bitvec(8)
        cs.add(value == 0xfa)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b6b)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        cpu.RIP = 0x436812
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0xa)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x494b40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436812, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436813, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x436814, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(0x436815, 8)== ord('\x82'))
        condition = Operators.AND(condition, cpu.read_int(0x494b68, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x494b69, 8)== ord('\x1d'))
        condition = Operators.AND(condition, cpu.read_int(0x494b6a, 8)== ord('\xfa'))
        condition = Operators.AND(condition, cpu.read_int(0x494b6b, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RAX == 0xfffffffffffa1d10)
        condition = Operators.AND(condition, cpu.RIP == 0x436816)
        condition = Operators.AND(condition, cpu.RDX == 0x494b40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_10_symbolic(self):
        ''' Instruction MOVSXD_10 
            Groups: mode64 
            0x465cd3:	movsxd	rdx, eax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x465cd3] = 'H'
        mem[0x465cd4] = 'c'
        mem[0x465cd5] = '\xd0'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x2e)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x2f)
        cpu.RIP = 0x465cd3

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x465cd3, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x465cd4, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x465cd5, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.EAX == 0x2e)
        condition = Operators.AND(condition, cpu.RDX == 0x2e)
        condition = Operators.AND(condition, cpu.RIP == 0x465cd6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_11_symbolic(self):
        ''' Instruction MOVSXD_11 
            Groups: mode64 
            0x436812:	movsxd	rax, dword ptr [rdx + rax*4]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x436812] = 'H'
        mem[0x436813] = 'c'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b74)
        value = cs.new_bitvec(8)
        cs.add(value == 0xa8)
        mem[addr] = value
        mem[0x436815] = '\x82'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b76)
        value = cs.new_bitvec(8)
        cs.add(value == 0xfa)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b77)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        mem[0x436814] = '\x04'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b75)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1d)
        mem[addr] = value
        cpu.RIP = 0x436812
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0xd)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x494b40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436812, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436813, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x494b74, 8)== ord('\xa8'))
        condition = Operators.AND(condition, cpu.read_int(0x436815, 8)== ord('\x82'))
        condition = Operators.AND(condition, cpu.read_int(0x494b76, 8)== ord('\xfa'))
        condition = Operators.AND(condition, cpu.read_int(0x494b77, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x436814, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(0x494b75, 8)== ord('\x1d'))
        condition = Operators.AND(condition, cpu.RAX == 0xfffffffffffa1da8)
        condition = Operators.AND(condition, cpu.RIP == 0x436816)
        condition = Operators.AND(condition, cpu.RDX == 0x494b40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_12_symbolic(self):
        ''' Instruction MOVSXD_12 
            Groups: mode64 
            0x436c32:	movsxd	rdx, eax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436c32] = 'H'
        mem[0x436c33] = 'c'
        mem[0x436c34] = '\xd0'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x2)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x6b7810)
        cpu.RIP = 0x436c32

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436c32, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436c33, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x436c34, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.EAX == 0x2)
        condition = Operators.AND(condition, cpu.RDX == 0x2)
        condition = Operators.AND(condition, cpu.RIP == 0x436c35)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_13_symbolic(self):
        ''' Instruction MOVSXD_13 
            Groups: mode64 
            0x465cd3:	movsxd	rdx, eax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x465cd3] = 'H'
        mem[0x465cd4] = 'c'
        mem[0x465cd5] = '\xd0'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x31)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x32)
        cpu.RIP = 0x465cd3

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x465cd3, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x465cd4, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x465cd5, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.EAX == 0x31)
        condition = Operators.AND(condition, cpu.RDX == 0x31)
        condition = Operators.AND(condition, cpu.RIP == 0x465cd6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_14_symbolic(self):
        ''' Instruction MOVSXD_14 
            Groups: mode64 
            0x436ce0:	movsxd	rdx, eax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436ce0] = 'H'
        mem[0x436ce1] = 'c'
        mem[0x436ce2] = '\xd0'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x3)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x6b7820)
        cpu.RIP = 0x436ce0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436ce0, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436ce1, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x436ce2, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.EAX == 0x3)
        condition = Operators.AND(condition, cpu.RDX == 0x3)
        condition = Operators.AND(condition, cpu.RIP == 0x436ce3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_15_symbolic(self):
        ''' Instruction MOVSXD_15 
            Groups: mode64 
            0x436812:	movsxd	rax, dword ptr [rdx + rax*4]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x436812] = 'H'
        mem[0x436813] = 'c'
        mem[0x436814] = '\x04'
        mem[0x436815] = '\x82'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b48)
        value = cs.new_bitvec(8)
        cs.add(value == 0x30)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b49)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1d)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b4a)
        value = cs.new_bitvec(8)
        cs.add(value == 0xfa)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b4b)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        cpu.RIP = 0x436812
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x2)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x494b40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436812, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436813, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x436814, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(0x436815, 8)== ord('\x82'))
        condition = Operators.AND(condition, cpu.read_int(0x494b48, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.read_int(0x494b49, 8)== ord('\x1d'))
        condition = Operators.AND(condition, cpu.read_int(0x494b4a, 8)== ord('\xfa'))
        condition = Operators.AND(condition, cpu.read_int(0x494b4b, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RAX == 0xfffffffffffa1d30)
        condition = Operators.AND(condition, cpu.RIP == 0x436816)
        condition = Operators.AND(condition, cpu.RDX == 0x494b40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_16_symbolic(self):
        ''' Instruction MOVSXD_16 
            Groups: mode64 
            0x436bfc:	movsxd	rdx, eax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436bfc] = 'H'
        mem[0x436bfd] = 'c'
        mem[0x436bfe] = '\xd0'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x4)
        cpu.RIP = 0x436bfc

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436bfc, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436bfd, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x436bfe, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.EAX == 0x1)
        condition = Operators.AND(condition, cpu.RDX == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x436bff)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_17_symbolic(self):
        ''' Instruction MOVSXD_17 
            Groups: mode64 
            0x436812:	movsxd	rax, dword ptr [rdx + rax*4]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x436812] = 'H'
        mem[0x436813] = 'c'
        mem[0x436814] = '\x04'
        mem[0x436815] = '\x82'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494bb8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494bb9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494bba)
        value = cs.new_bitvec(8)
        cs.add(value == 0xfa)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494bbb)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        cpu.RIP = 0x436812
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x1e)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x494b40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436812, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436813, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x436814, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(0x436815, 8)== ord('\x82'))
        condition = Operators.AND(condition, cpu.read_int(0x494bb8, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x494bb9, 8)== ord('\x1c'))
        condition = Operators.AND(condition, cpu.read_int(0x494bba, 8)== ord('\xfa'))
        condition = Operators.AND(condition, cpu.read_int(0x494bbb, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RAX == 0xfffffffffffa1ce0)
        condition = Operators.AND(condition, cpu.RIP == 0x436816)
        condition = Operators.AND(condition, cpu.RDX == 0x494b40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_18_symbolic(self):
        ''' Instruction MOVSXD_18 
            Groups: mode64 
            0x436812:	movsxd	rax, dword ptr [rdx + rax*4]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b50)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b51)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b52)
        value = cs.new_bitvec(8)
        cs.add(value == 0xfa)
        mem[addr] = value
        mem[0x436813] = 'c'
        mem[0x436814] = '\x04'
        mem[0x436815] = '\x82'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b53)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        mem[0x436812] = 'H'
        cpu.RIP = 0x436812
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x4)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x494b40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494b50, 8)== ord('\xf0'))
        condition = Operators.AND(condition, cpu.read_int(0x494b51, 8)== ord('\x1c'))
        condition = Operators.AND(condition, cpu.read_int(0x436812, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436813, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x436814, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(0x436815, 8)== ord('\x82'))
        condition = Operators.AND(condition, cpu.read_int(0x494b53, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x494b52, 8)== ord('\xfa'))
        condition = Operators.AND(condition, cpu.RAX == 0xfffffffffffa1cf0)
        condition = Operators.AND(condition, cpu.RIP == 0x436816)
        condition = Operators.AND(condition, cpu.RDX == 0x494b40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_19_symbolic(self):
        ''' Instruction MOVSXD_19 
            Groups: mode64 
            0x465cd3:	movsxd	rdx, eax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x465cd3] = 'H'
        mem[0x465cd4] = 'c'
        mem[0x465cd5] = '\xd0'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x2f)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x30)
        cpu.RIP = 0x465cd3

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x465cd3, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x465cd4, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x465cd5, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.EAX == 0x2f)
        condition = Operators.AND(condition, cpu.RDX == 0x2f)
        condition = Operators.AND(condition, cpu.RIP == 0x465cd6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_2_symbolic(self):
        ''' Instruction MOVSXD_2 
            Groups: mode64 
            0x465cb8:	movsxd	rdx, ebx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x465cb8] = 'H'
        mem[0x465cb9] = 'c'
        mem[0x465cba] = '\xd3'
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0x33)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x2f)
        cpu.RIP = 0x465cb8

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x465cb8, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x465cb9, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x465cba, 8)== ord('\xd3'))
        condition = Operators.AND(condition, cpu.EBX == 0x33)
        condition = Operators.AND(condition, cpu.RDX == 0x33)
        condition = Operators.AND(condition, cpu.RIP == 0x465cbb)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_20_symbolic(self):
        ''' Instruction MOVSXD_20 
            Groups: mode64 
            0x465cd3:	movsxd	rdx, eax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x465cd3] = 'H'
        mem[0x465cd4] = 'c'
        mem[0x465cd5] = '\xd0'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x30)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x31)
        cpu.RIP = 0x465cd3

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x465cd3, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x465cd4, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x465cd5, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.EAX == 0x30)
        condition = Operators.AND(condition, cpu.RDX == 0x30)
        condition = Operators.AND(condition, cpu.RIP == 0x465cd6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_21_symbolic(self):
        ''' Instruction MOVSXD_21 
            Groups: mode64 
            0x465db0:	movsxd	rdx, edx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x465db0] = 'H'
        mem[0x465db1] = 'c'
        mem[0x465db2] = '\xd2'
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x2a)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x2a)
        cpu.RIP = 0x465db0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x465db0, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x465db1, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x465db2, 8)== ord('\xd2'))
        condition = Operators.AND(condition, cpu.EDX == 0x2a)
        condition = Operators.AND(condition, cpu.RDX == 0x2a)
        condition = Operators.AND(condition, cpu.RIP == 0x465db3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_3_symbolic(self):
        ''' Instruction MOVSXD_3 
            Groups: mode64 
            0x465cd3:	movsxd	rdx, eax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x465cd3] = 'H'
        mem[0x465cd4] = 'c'
        mem[0x465cd5] = '\xd0'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x2a)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x2b)
        cpu.RIP = 0x465cd3

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x465cd3, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x465cd4, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x465cd5, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.EAX == 0x2a)
        condition = Operators.AND(condition, cpu.RDX == 0x2a)
        condition = Operators.AND(condition, cpu.RIP == 0x465cd6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_4_symbolic(self):
        ''' Instruction MOVSXD_4 
            Groups: mode64 
            0x465d93:	movsxd	rdi, edi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x465d93] = 'H'
        mem[0x465d94] = 'c'
        mem[0x465d95] = '\xff'
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x2c)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x2c)
        cpu.RIP = 0x465d93

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x465d93, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x465d94, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x465d95, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.EDI == 0x2c)
        condition = Operators.AND(condition, cpu.RDI == 0x2c)
        condition = Operators.AND(condition, cpu.RIP == 0x465d96)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_5_symbolic(self):
        ''' Instruction MOVSXD_5 
            Groups: mode64 
            0x436812:	movsxd	rax, dword ptr [rdx + rax*4]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b70)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b71)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b72)
        value = cs.new_bitvec(8)
        cs.add(value == 0xfa)
        mem[addr] = value
        mem[0x436813] = 'c'
        mem[0x436814] = '\x04'
        mem[0x436815] = '\x82'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494b73)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        mem[0x436812] = 'H'
        cpu.RIP = 0x436812
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0xc)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x494b40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494b70, 8)== ord('\xf0'))
        condition = Operators.AND(condition, cpu.read_int(0x494b71, 8)== ord('\x1c'))
        condition = Operators.AND(condition, cpu.read_int(0x436812, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436813, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x436814, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(0x436815, 8)== ord('\x82'))
        condition = Operators.AND(condition, cpu.read_int(0x494b73, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x494b72, 8)== ord('\xfa'))
        condition = Operators.AND(condition, cpu.RAX == 0xfffffffffffa1cf0)
        condition = Operators.AND(condition, cpu.RIP == 0x436816)
        condition = Operators.AND(condition, cpu.RDX == 0x494b40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_6_symbolic(self):
        ''' Instruction MOVSXD_6 
            Groups: mode64 
            0x465cd3:	movsxd	rdx, eax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x465cd3] = 'H'
        mem[0x465cd4] = 'c'
        mem[0x465cd5] = '\xd0'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x2c)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x2d)
        cpu.RIP = 0x465cd3

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x465cd3, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x465cd4, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x465cd5, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.EAX == 0x2c)
        condition = Operators.AND(condition, cpu.RDX == 0x2c)
        condition = Operators.AND(condition, cpu.RIP == 0x465cd6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_7_symbolic(self):
        ''' Instruction MOVSXD_7 
            Groups: mode64 
            0x465cd3:	movsxd	rdx, eax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem[0x465cd3] = 'H'
        mem[0x465cd4] = 'c'
        mem[0x465cd5] = '\xd0'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x2d)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x2e)
        cpu.RIP = 0x465cd3

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x465cd3, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x465cd4, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x465cd5, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.EAX == 0x2d)
        condition = Operators.AND(condition, cpu.RDX == 0x2d)
        condition = Operators.AND(condition, cpu.RIP == 0x465cd6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_8_symbolic(self):
        ''' Instruction MOVSXD_8 
            Groups: mode64 
            0x432cf1:	movsxd	rsi, edi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432cf1] = 'H'
        mem[0x432cf2] = 'c'
        mem[0x432cf3] = '\xf7'
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x0)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x0)
        cpu.RIP = 0x432cf1

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432cf1, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x432cf2, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x432cf3, 8)== ord('\xf7'))
        condition = Operators.AND(condition, cpu.EDI == 0x0)
        condition = Operators.AND(condition, cpu.RSI == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x432cf4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSXD_9_symbolic(self):
        ''' Instruction MOVSXD_9 
            Groups: mode64 
            0x4379f0:	movsxd	rax, dword ptr [rdx + rax*4]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x4379f0] = 'H'
        mem[0x4379f1] = 'c'
        mem[0x4379f2] = '\x04'
        mem[0x4379f3] = '\x82'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494f18)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf2)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494f19)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494f1a)
        value = cs.new_bitvec(8)
        cs.add(value == 0xfa)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494f1b)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        cpu.RIP = 0x4379f0
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x22)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x494e90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4379f0, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4379f1, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4379f2, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(0x4379f3, 8)== ord('\x82'))
        condition = Operators.AND(condition, cpu.read_int(0x494f18, 8)== ord('\xf2'))
        condition = Operators.AND(condition, cpu.read_int(0x494f19, 8)== ord('+'))
        condition = Operators.AND(condition, cpu.read_int(0x494f1a, 8)== ord('\xfa'))
        condition = Operators.AND(condition, cpu.read_int(0x494f1b, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RAX == 0xfffffffffffa2bf2)
        condition = Operators.AND(condition, cpu.RIP == 0x4379f4)
        condition = Operators.AND(condition, cpu.RDX == 0x494e90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSX_1_symbolic(self):
        ''' Instruction MOVSX_1 
            Groups:  
            0x4376bf:	movsx	ecx, byte ptr [rsi]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x4376c0] = '\xbe'
        mem[0x4376c1] = '\x0e'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9e4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x34)
        mem[addr] = value
        mem[0x4376bf] = '\x0f'
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7fffffffd9e4)
        cpu.RIP = 0x4376bf
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4376c0, 8)== ord('\xbe'))
        condition = Operators.AND(condition, cpu.read_int(0x4376c1, 8)== ord('\x0e'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9e4, 8)== ord('4'))
        condition = Operators.AND(condition, cpu.read_int(0x4376bf, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.RSI == 0x7fffffffd9e4)
        condition = Operators.AND(condition, cpu.RIP == 0x4376c2)
        condition = Operators.AND(condition, cpu.ECX == 0x34)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSX_2_symbolic(self):
        ''' Instruction MOVSX_2 
            Groups:  
            0x4376ca:	movsx	edx, byte ptr [rsi + 1]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x4376ca] = '\x0f'
        mem[0x4376cb] = '\xbe'
        mem[0x4376cc] = 'V'
        mem[0x4376cd] = '\x01'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9e3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2e)
        mem[addr] = value
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x4)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7fffffffd9e2)
        cpu.RIP = 0x4376ca

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4376ca, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4376cb, 8)== ord('\xbe'))
        condition = Operators.AND(condition, cpu.read_int(0x4376cc, 8)== ord('V'))
        condition = Operators.AND(condition, cpu.read_int(0x4376cd, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9e3, 8)== ord('.'))
        condition = Operators.AND(condition, cpu.EDX == 0x2e)
        condition = Operators.AND(condition, cpu.RSI == 0x7fffffffd9e2)
        condition = Operators.AND(condition, cpu.RIP == 0x4376ce)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSX_3_symbolic(self):
        ''' Instruction MOVSX_3 
            Groups:  
            0x4376ca:	movsx	edx, byte ptr [rsi + 1]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x4376ca] = '\x0f'
        mem[0x4376cb] = '\xbe'
        mem[0x4376cc] = 'V'
        mem[0x4376cd] = '\x01'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9e7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x39)
        mem[addr] = value
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x3)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7fffffffd9e6)
        cpu.RIP = 0x4376ca

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4376ca, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4376cb, 8)== ord('\xbe'))
        condition = Operators.AND(condition, cpu.read_int(0x4376cc, 8)== ord('V'))
        condition = Operators.AND(condition, cpu.read_int(0x4376cd, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9e7, 8)== ord('9'))
        condition = Operators.AND(condition, cpu.EDX == 0x39)
        condition = Operators.AND(condition, cpu.RSI == 0x7fffffffd9e6)
        condition = Operators.AND(condition, cpu.RIP == 0x4376ce)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSX_4_symbolic(self):
        ''' Instruction MOVSX_4 
            Groups:  
            0x4376bf:	movsx	ecx, byte ptr [rsi]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x4376c0] = '\xbe'
        mem[0x4376c1] = '\x0e'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9e2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x34)
        mem[addr] = value
        mem[0x4376bf] = '\x0f'
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7fffffffd9e2)
        cpu.RIP = 0x4376bf
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x45c2f7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4376c0, 8)== ord('\xbe'))
        condition = Operators.AND(condition, cpu.read_int(0x4376c1, 8)== ord('\x0e'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9e2, 8)== ord('4'))
        condition = Operators.AND(condition, cpu.read_int(0x4376bf, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.RSI == 0x7fffffffd9e2)
        condition = Operators.AND(condition, cpu.RIP == 0x4376c2)
        condition = Operators.AND(condition, cpu.ECX == 0x34)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSX_5_symbolic(self):
        ''' Instruction MOVSX_5 
            Groups:  
            0x4376eb:	movsx	edx, byte ptr [rdi]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9e8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2d)
        mem[addr] = value
        mem[0x4376eb] = '\x0f'
        mem[0x4376ec] = '\xbe'
        mem[0x4376ed] = '\x17'
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x39)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7fffffffd9e8)
        cpu.RIP = 0x4376eb

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9e8, 8)== ord('-'))
        condition = Operators.AND(condition, cpu.read_int(0x4376eb, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4376ec, 8)== ord('\xbe'))
        condition = Operators.AND(condition, cpu.read_int(0x4376ed, 8)== ord('\x17'))
        condition = Operators.AND(condition, cpu.EDX == 0x2d)
        condition = Operators.AND(condition, cpu.RDI == 0x7fffffffd9e8)
        condition = Operators.AND(condition, cpu.RIP == 0x4376ee)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSX_6_symbolic(self):
        ''' Instruction MOVSX_6 
            Groups:  
            0x4376ca:	movsx	edx, byte ptr [rsi + 1]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x4376ca] = '\x0f'
        mem[0x4376cb] = '\xbe'
        mem[0x4376cc] = 'V'
        mem[0x4376cd] = '\x01'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9e5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2e)
        mem[addr] = value
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x4)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7fffffffd9e4)
        cpu.RIP = 0x4376ca

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4376ca, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4376cb, 8)== ord('\xbe'))
        condition = Operators.AND(condition, cpu.read_int(0x4376cc, 8)== ord('V'))
        condition = Operators.AND(condition, cpu.read_int(0x4376cd, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9e5, 8)== ord('.'))
        condition = Operators.AND(condition, cpu.EDX == 0x2e)
        condition = Operators.AND(condition, cpu.RSI == 0x7fffffffd9e4)
        condition = Operators.AND(condition, cpu.RIP == 0x4376ce)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVSX_7_symbolic(self):
        ''' Instruction MOVSX_7 
            Groups:  
            0x4376bf:	movsx	ecx, byte ptr [rsi]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x4376c0] = '\xbe'
        mem[0x4376c1] = '\x0e'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9e6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x33)
        mem[addr] = value
        mem[0x4376bf] = '\x0f'
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7fffffffd9e6)
        cpu.RIP = 0x4376bf
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4376c0, 8)== ord('\xbe'))
        condition = Operators.AND(condition, cpu.read_int(0x4376c1, 8)== ord('\x0e'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9e6, 8)== ord('3'))
        condition = Operators.AND(condition, cpu.read_int(0x4376bf, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.RSI == 0x7fffffffd9e6)
        condition = Operators.AND(condition, cpu.RIP == 0x4376c2)
        condition = Operators.AND(condition, cpu.ECX == 0x33)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_1_symbolic(self):
        ''' Instruction MOVZX_1 
            Groups:  
            0x400aca:	movzx	eax, dl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400aca] = '\x0f'
        mem[0x400acb] = '\xb6'
        mem[0x400acc] = '\xc2'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1e)
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x5)
        cpu.RIP = 0x400aca

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400aca, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400acb, 8)== ord('\xb6'))
        condition = Operators.AND(condition, cpu.read_int(0x400acc, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.EAX == 0x5)
        condition = Operators.AND(condition, cpu.DL == 0x5)
        condition = Operators.AND(condition, cpu.RIP == 0x400acd)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_10_symbolic(self):
        ''' Instruction MOVZX_10 
            Groups:  
            0x412014:	movzx	ecx, cl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x412014] = '\x0f'
        mem[0x412015] = '\xb6'
        mem[0x412016] = '\xc9'
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6b9800)
        cpu.RIP = 0x412014
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x412014, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x412015, 8)== ord('\xb6'))
        condition = Operators.AND(condition, cpu.read_int(0x412016, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.CL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x412017)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_11_symbolic(self):
        ''' Instruction MOVZX_11 
            Groups:  
            0x400b08:	movzx	eax, byte ptr [rbp + rax - 0x10]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb01)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd8)
        mem[addr] = value
        mem[0x400b08] = '\x0f'
        mem[0x400b09] = '\xb6'
        mem[0x400b0a] = 'D'
        mem[0x400b0b] = '\x05'
        mem[0x400b0c] = '\xf0'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.RIP = 0x400b08
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x1)
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdb10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb01, 8)== ord('\xd8'))
        condition = Operators.AND(condition, cpu.read_int(0x400b08, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b09, 8)== ord('\xb6'))
        condition = Operators.AND(condition, cpu.read_int(0x400b0a, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x400b0b, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.read_int(0x400b0c, 8)== ord('\xf0'))
        condition = Operators.AND(condition, cpu.EAX == 0xd8)
        condition = Operators.AND(condition, cpu.RAX == 0xd8)
        condition = Operators.AND(condition, cpu.RIP == 0x400b0d)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdb10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_12_symbolic(self):
        ''' Instruction MOVZX_12 
            Groups:  
            0x406e64:	movzx	r14d, word ptr [r13]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x406e64] = 'E'
        mem[0x406e65] = '\x0f'
        mem[0x406e66] = '\xb7'
        mem[0x406e67] = 'u'
        mem[0x406e68] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d76)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d77)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        cpu.R14D = cs.new_bitvec(32)
        cs.add(cpu.R14D == 0x0)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x494d76)
        cpu.RIP = 0x406e64

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e64, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x406e65, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x406e66, 8)== ord('\xb7'))
        condition = Operators.AND(condition, cpu.read_int(0x406e67, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x406e68, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x494d76, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494d77, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.R14D == 0x444c)
        condition = Operators.AND(condition, cpu.R13 == 0x494d76)
        condition = Operators.AND(condition, cpu.RIP == 0x406e69)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_13_symbolic(self):
        ''' Instruction MOVZX_13 
            Groups:  
            0x412014:	movzx	ecx, cl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x412014] = '\x0f'
        mem[0x412015] = '\xb6'
        mem[0x412016] = '\xc9'
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6b9800)
        cpu.RIP = 0x412014
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x412014, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x412015, 8)== ord('\xb6'))
        condition = Operators.AND(condition, cpu.read_int(0x412016, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.CL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x412017)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_14_symbolic(self):
        ''' Instruction MOVZX_14 
            Groups:  
            0x400ad9:	movzx	eax, byte ptr [rbp + rax - 0x10]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb01)
        value = cs.new_bitvec(8)
        cs.add(value == 0xfb)
        mem[addr] = value
        mem[0x400ad9] = '\x0f'
        mem[0x400ada] = '\xb6'
        mem[0x400adb] = 'D'
        mem[0x400adc] = '\x05'
        mem[0x400add] = '\xf0'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.RIP = 0x400ad9
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x1)
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdb10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb01, 8)== ord('\xfb'))
        condition = Operators.AND(condition, cpu.read_int(0x400ad9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ada, 8)== ord('\xb6'))
        condition = Operators.AND(condition, cpu.read_int(0x400adb, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x400adc, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.read_int(0x400add, 8)== ord('\xf0'))
        condition = Operators.AND(condition, cpu.EAX == 0xfb)
        condition = Operators.AND(condition, cpu.RAX == 0xfb)
        condition = Operators.AND(condition, cpu.RIP == 0x400ade)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdb10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_15_symbolic(self):
        ''' Instruction MOVZX_15 
            Groups:  
            0x406e64:	movzx	r14d, word ptr [r13]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d82)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d83)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        mem[0x406e64] = 'E'
        mem[0x406e65] = '\x0f'
        mem[0x406e66] = '\xb7'
        mem[0x406e67] = 'u'
        mem[0x406e68] = '\x00'
        cpu.R14D = cs.new_bitvec(32)
        cs.add(cpu.R14D == 0x0)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x494d82)
        cpu.RIP = 0x406e64

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494d82, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494d83, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x406e64, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x406e65, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x406e66, 8)== ord('\xb7'))
        condition = Operators.AND(condition, cpu.read_int(0x406e67, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x406e68, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.R14D == 0x444c)
        condition = Operators.AND(condition, cpu.R13 == 0x494d82)
        condition = Operators.AND(condition, cpu.RIP == 0x406e69)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_16_symbolic(self):
        ''' Instruction MOVZX_16 
            Groups:  
            0x406e0e:	movzx	eax, byte ptr [r13]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d66)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        mem[0x406e0e] = 'A'
        mem[0x406e0f] = '\x0f'
        mem[0x406e10] = '\xb6'
        mem[0x406e11] = 'E'
        mem[0x406e12] = '\x00'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6bb828)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x494d66)
        cpu.RIP = 0x406e0e

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494d66, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x406e0e, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x406e0f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x406e10, 8)== ord('\xb6'))
        condition = Operators.AND(condition, cpu.read_int(0x406e11, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x406e12, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.EAX == 0x4c)
        condition = Operators.AND(condition, cpu.R13 == 0x494d66)
        condition = Operators.AND(condition, cpu.RIP == 0x406e13)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_17_symbolic(self):
        ''' Instruction MOVZX_17 
            Groups:  
            0x43259e:	movzx	edi, al
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4325a0] = '\xf8'
        mem[0x43259e] = '\x0f'
        mem[0x43259f] = '\xb6'
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xc2)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x1)
        cpu.RIP = 0x43259e

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4325a0, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.read_int(0x43259e, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x43259f, 8)== ord('\xb6'))
        condition = Operators.AND(condition, cpu.EDI == 0x1)
        condition = Operators.AND(condition, cpu.AL == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x4325a1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_18_symbolic(self):
        ''' Instruction MOVZX_18 
            Groups:  
            0x406e64:	movzx	r14d, word ptr [r13]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d06)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        mem[0x406e64] = 'E'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d05)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        mem[0x406e66] = '\xb7'
        mem[0x406e67] = 'u'
        mem[0x406e68] = '\x00'
        mem[0x406e65] = '\x0f'
        cpu.R14D = cs.new_bitvec(32)
        cs.add(cpu.R14D == 0x0)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x494d05)
        cpu.RIP = 0x406e64

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494d06, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x406e64, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x494d05, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x406e66, 8)== ord('\xb7'))
        condition = Operators.AND(condition, cpu.read_int(0x406e67, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x406e68, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x406e65, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.R14D == 0x444c)
        condition = Operators.AND(condition, cpu.R13 == 0x494d05)
        condition = Operators.AND(condition, cpu.RIP == 0x406e69)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_19_symbolic(self):
        ''' Instruction MOVZX_19 
            Groups:  
            0x406e0e:	movzx	eax, byte ptr [r13]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x406e0e] = 'A'
        mem[0x406e0f] = '\x0f'
        mem[0x406e10] = '\xb6'
        mem[0x406e11] = 'E'
        mem[0x406e12] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d9e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6bb828)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x494d9e)
        cpu.RIP = 0x406e0e

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e0e, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x406e0f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x406e10, 8)== ord('\xb6'))
        condition = Operators.AND(condition, cpu.read_int(0x406e11, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x406e12, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x494d9e, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.EAX == 0x4c)
        condition = Operators.AND(condition, cpu.R13 == 0x494d9e)
        condition = Operators.AND(condition, cpu.RIP == 0x406e13)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_2_symbolic(self):
        ''' Instruction MOVZX_2 
            Groups:  
            0x432238:	movzx	r10d, sil
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432238] = 'D'
        mem[0x432239] = '\x0f'
        mem[0x43223a] = '\xb6'
        mem[0x43223b] = '\xd6'
        cpu.R10D = cs.new_bitvec(32)
        cs.add(cpu.R10D == 0x1)
        cpu.RIP = 0x432238
        cpu.SIL = cs.new_bitvec(8)
        cs.add(cpu.SIL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432238, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x432239, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x43223a, 8)== ord('\xb6'))
        condition = Operators.AND(condition, cpu.read_int(0x43223b, 8)== ord('\xd6'))
        condition = Operators.AND(condition, cpu.SIL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x43223c)
        condition = Operators.AND(condition, cpu.R10D == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_20_symbolic(self):
        ''' Instruction MOVZX_20 
            Groups:  
            0x400b0d:	movzx	eax, al
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b0d] = '\x0f'
        mem[0x400b0e] = '\xb6'
        mem[0x400b0f] = '\xc0'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x9b)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x9b)
        cpu.RIP = 0x400b0d

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b0d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b0e, 8)== ord('\xb6'))
        condition = Operators.AND(condition, cpu.read_int(0x400b0f, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.EAX == 0x9b)
        condition = Operators.AND(condition, cpu.AL == 0x9b)
        condition = Operators.AND(condition, cpu.RIP == 0x400b10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_21_symbolic(self):
        ''' Instruction MOVZX_21 
            Groups:  
            0x432238:	movzx	r10d, sil
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432238] = 'D'
        mem[0x432239] = '\x0f'
        mem[0x43223a] = '\xb6'
        mem[0x43223b] = '\xd6'
        cpu.R10D = cs.new_bitvec(32)
        cs.add(cpu.R10D == 0x3)
        cpu.RIP = 0x432238
        cpu.SIL = cs.new_bitvec(8)
        cs.add(cpu.SIL == 0x76)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432238, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x432239, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x43223a, 8)== ord('\xb6'))
        condition = Operators.AND(condition, cpu.read_int(0x43223b, 8)== ord('\xd6'))
        condition = Operators.AND(condition, cpu.SIL == 0x76)
        condition = Operators.AND(condition, cpu.RIP == 0x43223c)
        condition = Operators.AND(condition, cpu.R10D == 0x76)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_3_symbolic(self):
        ''' Instruction MOVZX_3 
            Groups:  
            0x465c9b:	movzx	edx, byte ptr [rbp - 0x1020]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x465ca0] = '\xff'
        mem[0x465ca1] = '\xff'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca70)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2f)
        mem[addr] = value
        mem[0x465c9b] = '\x0f'
        mem[0x465c9c] = '\xb6'
        mem[0x465c9d] = '\x95'
        mem[0x465c9e] = '\xe0'
        mem[0x465c9f] = '\xef'
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1000)
        cpu.RIP = 0x465c9b
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x465ca0, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x465ca1, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca70, 8)== ord('/'))
        condition = Operators.AND(condition, cpu.read_int(0x465c9b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x465c9c, 8)== ord('\xb6'))
        condition = Operators.AND(condition, cpu.read_int(0x465c9d, 8)== ord('\x95'))
        condition = Operators.AND(condition, cpu.read_int(0x465c9e, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x465c9f, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.EDX == 0x2f)
        condition = Operators.AND(condition, cpu.RIP == 0x465ca2)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_4_symbolic(self):
        ''' Instruction MOVZX_4 
            Groups:  
            0x436a63:	movzx	esi, word ptr [rcx + 0x38]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x7ffff7ffd000, 0x1000, 'rwx')
        mem[0x436a63] = '\x0f'
        mem[0x436a64] = '\xb7'
        mem[0x436a65] = 'q'
        mem[0x436a66] = '8'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7ffff7ffd038)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7ffff7ffd039)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x7ffff7ffd000)
        cpu.RIP = 0x436a63
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x6bf4c8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436a63, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x436a64, 8)== ord('\xb7'))
        condition = Operators.AND(condition, cpu.read_int(0x436a65, 8)== ord('q'))
        condition = Operators.AND(condition, cpu.read_int(0x436a66, 8)== ord('8'))
        condition = Operators.AND(condition, cpu.read_int(0x7ffff7ffd038, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(0x7ffff7ffd039, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RCX == 0x7ffff7ffd000)
        condition = Operators.AND(condition, cpu.ESI == 0x4)
        condition = Operators.AND(condition, cpu.RIP == 0x436a67)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_5_symbolic(self):
        ''' Instruction MOVZX_5 
            Groups:  
            0x406e64:	movzx	r14d, word ptr [r13]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x406e64] = 'E'
        mem[0x406e65] = '\x0f'
        mem[0x406e66] = '\xb7'
        mem[0x406e67] = 'u'
        mem[0x406e68] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d8e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d8f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        cpu.R14D = cs.new_bitvec(32)
        cs.add(cpu.R14D == 0x0)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x494d8e)
        cpu.RIP = 0x406e64

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e64, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x406e65, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x406e66, 8)== ord('\xb7'))
        condition = Operators.AND(condition, cpu.read_int(0x406e67, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x406e68, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x494d8e, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494d8f, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.R14D == 0x444c)
        condition = Operators.AND(condition, cpu.R13 == 0x494d8e)
        condition = Operators.AND(condition, cpu.RIP == 0x406e69)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_6_symbolic(self):
        ''' Instruction MOVZX_6 
            Groups:  
            0x400834:	movzx	ebx, bl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400834] = '\x0f'
        mem[0x400835] = '\xb6'
        mem[0x400836] = '\xdb'
        cpu.BL = cs.new_bitvec(8)
        cs.add(cpu.BL == 0x8)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0x8)
        cpu.RIP = 0x400834

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400834, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400835, 8)== ord('\xb6'))
        condition = Operators.AND(condition, cpu.read_int(0x400836, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.BL == 0x8)
        condition = Operators.AND(condition, cpu.EBX == 0x8)
        condition = Operators.AND(condition, cpu.RIP == 0x400837)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_7_symbolic(self):
        ''' Instruction MOVZX_7 
            Groups:  
            0x400aca:	movzx	eax, dl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400aca] = '\x0f'
        mem[0x400acb] = '\xb6'
        mem[0x400acc] = '\xc2'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xf6)
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x5)
        cpu.RIP = 0x400aca

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400aca, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400acb, 8)== ord('\xb6'))
        condition = Operators.AND(condition, cpu.read_int(0x400acc, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.EAX == 0x5)
        condition = Operators.AND(condition, cpu.DL == 0x5)
        condition = Operators.AND(condition, cpu.RIP == 0x400acd)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_8_symbolic(self):
        ''' Instruction MOVZX_8 
            Groups:  
            0x462349:	movzx	eax, byte ptr [r14 + 0x314]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, 'rwx')
        mem.mmap(0x006bf000, 0x1000, 'rwx')
        mem[0x462350] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf524)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x462349] = 'A'
        mem[0x46234a] = '\x0f'
        mem[0x46234b] = '\xb6'
        mem[0x46234c] = '\x86'
        mem[0x46234d] = '\x14'
        mem[0x46234e] = '\x03'
        mem[0x46234f] = '\x00'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4a5301)
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x6bf210)
        cpu.RIP = 0x462349

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x462350, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf524, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x462349, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x46234a, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x46234b, 8)== ord('\xb6'))
        condition = Operators.AND(condition, cpu.read_int(0x46234c, 8)== ord('\x86'))
        condition = Operators.AND(condition, cpu.read_int(0x46234d, 8)== ord('\x14'))
        condition = Operators.AND(condition, cpu.read_int(0x46234e, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(0x46234f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.R14 == 0x6bf210)
        condition = Operators.AND(condition, cpu.RIP == 0x462351)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOVZX_9_symbolic(self):
        ''' Instruction MOVZX_9 
            Groups:  
            0x406e0e:	movzx	eax, byte ptr [r13]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494d05)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        mem[0x406e0e] = 'A'
        mem[0x406e0f] = '\x0f'
        mem[0x406e10] = '\xb6'
        mem[0x406e11] = 'E'
        mem[0x406e12] = '\x00'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6bb828)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x494d05)
        cpu.RIP = 0x406e0e

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494d05, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x406e0e, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x406e0f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x406e10, 8)== ord('\xb6'))
        condition = Operators.AND(condition, cpu.read_int(0x406e11, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x406e12, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.EAX == 0x4c)
        condition = Operators.AND(condition, cpu.R13 == 0x494d05)
        condition = Operators.AND(condition, cpu.RIP == 0x406e13)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_1_symbolic(self):
        ''' Instruction MOV_1 
            Groups:  
            0x40d922:	mov	qword ptr [rip + 0x2ade07], rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem.mmap(0x006bb000, 0x1000, 'rwx')
        mem[0x40d922] = 'H'
        mem[0x40d923] = '\x89'
        mem[0x40d924] = '\x1d'
        mem[0x40d925] = '\x07'
        mem[0x40d926] = '\xde'
        mem[0x40d927] = '*'
        mem[0x40d928] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb730)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb731)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb732)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb733)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb734)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb735)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb736)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb737)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RIP = 0x40d922
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6b9280)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40d922, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x40d923, 8)== ord('\x89'))
        condition = Operators.AND(condition, cpu.read_int(0x40d924, 8)== ord('\x1d'))
        condition = Operators.AND(condition, cpu.read_int(0x40d925, 8)== ord('\x07'))
        condition = Operators.AND(condition, cpu.read_int(0x40d926, 8)== ord('\xde'))
        condition = Operators.AND(condition, cpu.read_int(0x40d927, 8)== ord('*'))
        condition = Operators.AND(condition, cpu.read_int(0x40d928, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb730, 8)== ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb731, 8)== ord('\x92'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb732, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb733, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb734, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb735, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb736, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb737, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 0x40d929)
        condition = Operators.AND(condition, cpu.RBX == 0x6b9280)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_10_symbolic(self):
        ''' Instruction MOV_10 
            Groups:  
            0x411bef:	mov	rax, qword ptr [rdx + 8]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x006bf000, 0x1000, 'rwx')
        mem[0x411bef] = 'H'
        mem[0x411bf0] = '\x8b'
        mem[0x411bf1] = 'B'
        mem[0x411bf2] = '\x08'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf6f8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x11)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf6f9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x19)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf6fa)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf6fb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf6fc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf6fd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf6fe)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf6ff)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RIP = 0x411bef
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x6bf6f0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411bef, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x411bf0, 8)== ord('\x8b'))
        condition = Operators.AND(condition, cpu.read_int(0x411bf1, 8)== ord('B'))
        condition = Operators.AND(condition, cpu.read_int(0x411bf2, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf6f8, 8)== ord('\x11'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf6f9, 8)== ord('\x19'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf6fa, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf6fb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf6fc, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf6fd, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf6fe, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf6ff, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RAX == 0x21911)
        condition = Operators.AND(condition, cpu.RIP == 0x411bf3)
        condition = Operators.AND(condition, cpu.RDX == 0x6bf6f0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_11_symbolic(self):
        ''' Instruction MOV_11 
            Groups:  
            0x4012f0:	mov	rax, r14
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x4012f0] = 'L'
        mem[0x4012f1] = '\x89'
        mem[0x4012f2] = '\xf0'
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x2)
        cpu.RIP = 0x4012f0
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4012f0, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x4012f1, 8)== ord('\x89'))
        condition = Operators.AND(condition, cpu.read_int(0x4012f2, 8)== ord('\xf0'))
        condition = Operators.AND(condition, cpu.R14 == 0x2)
        condition = Operators.AND(condition, cpu.RAX == 0x2)
        condition = Operators.AND(condition, cpu.RIP == 0x4012f3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_12_symbolic(self):
        ''' Instruction MOV_12 
            Groups:  
            0x406e84:	mov	rbx, qword ptr [r12]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x406e84] = 'I'
        mem[0x406e85] = '\x8b'
        mem[0x406e86] = '\x1c'
        mem[0x406e87] = '$'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc90)
        value = cs.new_bitvec(8)
        cs.add(value == 0xbd)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc91)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc92)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc93)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc94)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc95)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc96)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc97)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x7fffffffdc90)
        cpu.RIP = 0x406e84
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffe19d)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e84, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x406e85, 8)== ord('\x8b'))
        condition = Operators.AND(condition, cpu.read_int(0x406e86, 8)== ord('\x1c'))
        condition = Operators.AND(condition, cpu.read_int(0x406e87, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc90, 8)== ord('\xbd'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc91, 8)== ord('\xe1'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc92, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc93, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc94, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc95, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc96, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc97, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.R12 == 0x7fffffffdc90)
        condition = Operators.AND(condition, cpu.RIP == 0x406e88)
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffe1bd)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_13_symbolic(self):
        ''' Instruction MOV_13 
            Groups:  
            0x4323ca:	mov	edx, eax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4323ca] = '\x89'
        mem[0x4323cb] = '\xc2'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1c004122)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.RIP = 0x4323ca

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4323ca, 8)== ord('\x89'))
        condition = Operators.AND(condition, cpu.read_int(0x4323cb, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.EAX == 0x1c004122)
        condition = Operators.AND(condition, cpu.EDX == 0x1c004122)
        condition = Operators.AND(condition, cpu.RIP == 0x4323cc)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_14_symbolic(self):
        ''' Instruction MOV_14 
            Groups:  
            0x464494:	mov	rax, qword ptr [rbp - 0x60]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00464000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda00)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda01)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf6)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda02)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda03)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda04)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda05)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda06)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda07)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x464494] = 'H'
        mem[0x464495] = '\x8b'
        mem[0x464496] = 'E'
        mem[0x464497] = '\xa0'
        cpu.RIP = 0x464494
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x6bf6d0)
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda60)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda00, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda01, 8)== ord('\xf6'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda02, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda03, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda04, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda05, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda06, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda07, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x464494, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x464495, 8)== ord('\x8b'))
        condition = Operators.AND(condition, cpu.read_int(0x464496, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x464497, 8)== ord('\xa0'))
        condition = Operators.AND(condition, cpu.RAX == 0x6bf6d0)
        condition = Operators.AND(condition, cpu.RIP == 0x464498)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda60)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_15_symbolic(self):
        ''' Instruction MOV_15 
            Groups:  
            0x4117f3:	mov	qword ptr [rbp - 0x60], rax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9a0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9a1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9a2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9a3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x63)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9a4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9a5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9a6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x68)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9a7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6f)
        mem[addr] = value
        mem[0x4117f3] = 'H'
        mem[0x4117f4] = '\x89'
        mem[0x4117f5] = 'E'
        mem[0x4117f6] = '\xa0'
        cpu.RIP = 0x4117f3
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x12)
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda00)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9a0, 8)== ord('\x12'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9a1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9a2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9a3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9a4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9a5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9a6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9a7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4117f3, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4117f4, 8)== ord('\x89'))
        condition = Operators.AND(condition, cpu.read_int(0x4117f5, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4117f6, 8)== ord('\xa0'))
        condition = Operators.AND(condition, cpu.RAX == 0x12)
        condition = Operators.AND(condition, cpu.RIP == 0x4117f7)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda00)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_16_symbolic(self):
        ''' Instruction MOV_16 
            Groups:  
            0x4369b5:	mov	qword ptr [rip + 0x283c7c], rax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x006ba000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba638)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba639)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba63a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba63b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4369b5] = 'H'
        mem[0x4369b6] = '\x89'
        mem[0x4369b7] = '\x05'
        mem[0x4369b8] = '|'
        mem[0x4369b9] = '<'
        mem[0x4369ba] = '('
        mem[0x4369bb] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba63c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba63d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba63e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba63f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RIP = 0x4369b5
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x6bf1d0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4369b8, 8)== ord('|'))
        condition = Operators.AND(condition, cpu.read_int(0x4369b9, 8)== ord('<'))
        condition = Operators.AND(condition, cpu.read_int(0x4369ba, 8)== ord('('))
        condition = Operators.AND(condition, cpu.read_int(0x6ba63b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4369b5, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4369b6, 8)== ord('\x89'))
        condition = Operators.AND(condition, cpu.read_int(0x4369b7, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba638, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba639, 8)== ord('\xf1'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba63a, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x4369bb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba63c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba63d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba63e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba63f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RAX == 0x6bf1d0)
        condition = Operators.AND(condition, cpu.RIP == 0x4369bc)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_17_symbolic(self):
        ''' Instruction MOV_17 
            Groups:  
            0x406e84:	mov	rbx, qword ptr [r12]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x406e84] = 'I'
        mem[0x406e85] = '\x8b'
        mem[0x406e86] = '\x1c'
        mem[0x406e87] = '$'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc50)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc51)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc52)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc53)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc54)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc55)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc56)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc57)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x7fffffffdc50)
        cpu.RIP = 0x406e84
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffe0e8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e84, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x406e85, 8)== ord('\x8b'))
        condition = Operators.AND(condition, cpu.read_int(0x406e86, 8)== ord('\x1c'))
        condition = Operators.AND(condition, cpu.read_int(0x406e87, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc50, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc51, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc52, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc53, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc54, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc55, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc56, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc57, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.R12 == 0x7fffffffdc50)
        condition = Operators.AND(condition, cpu.RIP == 0x406e88)
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffe0f8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_18_symbolic(self):
        ''' Instruction MOV_18 
            Groups:  
            0x442603:	mov	qword ptr [rdi + 8], rax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00442000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x442603] = 'H'
        mem[0x442604] = '\x89'
        mem[0x442605] = 'G'
        mem[0x442606] = '\x08'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb48)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb49)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb4a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb4b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb4c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb4d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb4e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb4f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7fffffffdb40)
        cpu.RIP = 0x442603
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x89da7bf088fd4a75)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x442603, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x442604, 8)== ord('\x89'))
        condition = Operators.AND(condition, cpu.read_int(0x442605, 8)== ord('G'))
        condition = Operators.AND(condition, cpu.read_int(0x442606, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb48, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb49, 8)== ord('J'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb4a, 8)== ord('\xfd'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb4b, 8)== ord('\x88'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb4c, 8)== ord('\xf0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb4d, 8)== ord('{'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb4e, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb4f, 8)== ord('\x89'))
        condition = Operators.AND(condition, cpu.RDI == 0x7fffffffdb40)
        condition = Operators.AND(condition, cpu.RAX == 0x89da7bf088fd4a75)
        condition = Operators.AND(condition, cpu.RIP == 0x442607)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_19_symbolic(self):
        ''' Instruction MOV_19 
            Groups:  
            0x406e84:	mov	rbx, qword ptr [r12]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x406e84] = 'I'
        mem[0x406e85] = '\x8b'
        mem[0x406e86] = '\x1c'
        mem[0x406e87] = '$'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdda8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdda9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xec)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddaa)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddab)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddac)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddad)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddae)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffddaf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x7fffffffdda8)
        cpu.RIP = 0x406e84
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffece5)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e84, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x406e85, 8)== ord('\x8b'))
        condition = Operators.AND(condition, cpu.read_int(0x406e86, 8)== ord('\x1c'))
        condition = Operators.AND(condition, cpu.read_int(0x406e87, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdda8, 8)== ord('\xf7'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdda9, 8)== ord('\xec'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddaa, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddab, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddac, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddad, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddae, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffddaf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.R12 == 0x7fffffffdda8)
        condition = Operators.AND(condition, cpu.RIP == 0x406e88)
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffecf7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_2_symbolic(self):
        ''' Instruction MOV_2 
            Groups:  
            0x4341d6:	mov	rbx, qword ptr [r13]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem.mmap(0x006bc000, 0x1000, 'rwx')
        mem[0x4341d6] = 'I'
        mem[0x4341d7] = '\x8b'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bcad0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bcad1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bcad2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bcad3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bcad4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bcad5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bcad6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bcad7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4341d8] = ']'
        mem[0x4341d9] = '\x00'
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x6bcad0)
        cpu.RIP = 0x4341d6
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6bcad6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bcad7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bcad0, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bcad1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bcad2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bcad3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bcad4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bcad5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4341d6, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x4341d7, 8)== ord('\x8b'))
        condition = Operators.AND(condition, cpu.read_int(0x4341d8, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.read_int(0x4341d9, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.R13 == 0x6bcad0)
        condition = Operators.AND(condition, cpu.RIP == 0x4341da)
        condition = Operators.AND(condition, cpu.RBX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_20_symbolic(self):
        ''' Instruction MOV_20 
            Groups:  
            0x436799:	mov	rdx, qword ptr [rdx]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x006ba000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba240)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba241)
        value = cs.new_bitvec(8)
        cs.add(value == 0xa3)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba242)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba243)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba244)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba245)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba246)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6ba247)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x436799] = 'H'
        mem[0x43679a] = '\x8b'
        mem[0x43679b] = '\x12'
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x6ba240)
        cpu.RIP = 0x436799

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6ba240, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba241, 8)== ord('\xa3'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba242, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba243, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba244, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba245, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba246, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6ba247, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x436799, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x43679a, 8)== ord('\x8b'))
        condition = Operators.AND(condition, cpu.read_int(0x43679b, 8)== ord('\x12'))
        condition = Operators.AND(condition, cpu.RDX == 0x6ba300)
        condition = Operators.AND(condition, cpu.RIP == 0x43679c)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_21_symbolic(self):
        ''' Instruction MOV_21 
            Groups:  
            0x4117d7:	mov	rsi, r13
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x4117d8] = '\x89'
        mem[0x4117d9] = '\xee'
        mem[0x4117d7] = 'L'
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x640)
        cpu.RIP = 0x4117d7
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x650)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4117d8, 8)== ord('\x89'))
        condition = Operators.AND(condition, cpu.read_int(0x4117d9, 8)== ord('\xee'))
        condition = Operators.AND(condition, cpu.read_int(0x4117d7, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.RSI == 0x650)
        condition = Operators.AND(condition, cpu.RIP == 0x4117da)
        condition = Operators.AND(condition, cpu.R13 == 0x650)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_3_symbolic(self):
        ''' Instruction MOV_3 
            Groups:  
            0x406e84:	mov	rbx, qword ptr [r12]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x406e84] = 'I'
        mem[0x406e85] = '\x8b'
        mem[0x406e86] = '\x1c'
        mem[0x406e87] = '$'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdcf8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xa4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdcf9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xea)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdcfa)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdcfb)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdcfc)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdcfd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdcfe)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdcff)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x7fffffffdcf8)
        cpu.RIP = 0x406e84
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffea8b)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e84, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x406e85, 8)== ord('\x8b'))
        condition = Operators.AND(condition, cpu.read_int(0x406e86, 8)== ord('\x1c'))
        condition = Operators.AND(condition, cpu.read_int(0x406e87, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdcf8, 8)== ord('\xa4'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdcf9, 8)== ord('\xea'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdcfa, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdcfb, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdcfc, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdcfd, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdcfe, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdcff, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.R12 == 0x7fffffffdcf8)
        condition = Operators.AND(condition, cpu.RIP == 0x406e88)
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffeaa4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_4_symbolic(self):
        ''' Instruction MOV_4 
            Groups:  
            0x406e84:	mov	rbx, qword ptr [r12]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x406e84] = 'I'
        mem[0x406e85] = '\x8b'
        mem[0x406e86] = '\x1c'
        mem[0x406e87] = '$'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffde18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x18)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffde19)
        value = cs.new_bitvec(8)
        cs.add(value == 0xef)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffde1a)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffde1b)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffde1c)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffde1d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffde1e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffde1f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x7fffffffde18)
        cpu.RIP = 0x406e84
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffef00)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e84, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x406e85, 8)== ord('\x8b'))
        condition = Operators.AND(condition, cpu.read_int(0x406e86, 8)== ord('\x1c'))
        condition = Operators.AND(condition, cpu.read_int(0x406e87, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffde18, 8)== ord('\x18'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffde19, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffde1a, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffde1b, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffde1c, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffde1d, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffde1e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffde1f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.R12 == 0x7fffffffde18)
        condition = Operators.AND(condition, cpu.RIP == 0x406e88)
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffef18)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_5_symbolic(self):
        ''' Instruction MOV_5 
            Groups:  
            0x411b7d:	mov	r8d, edi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411b7d] = 'A'
        mem[0x411b7e] = '\x89'
        mem[0x411b7f] = '\xf8'
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x0)
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 0x6baa80)
        cpu.RIP = 0x411b7d

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411b7d, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x411b7e, 8)== ord('\x89'))
        condition = Operators.AND(condition, cpu.read_int(0x411b7f, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.EDI == 0x0)
        condition = Operators.AND(condition, cpu.R8D == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x411b80)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_6_symbolic(self):
        ''' Instruction MOV_6 
            Groups:  
            0x4644b1:	mov	qword ptr [rax + 0x10], rdi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00464000, 0x1000, 'rwx')
        mem.mmap(0x006bf000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf6e0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf6e1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf6e2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf6e3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf6e4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf6e5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf6e6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bf6e7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4644b1] = 'H'
        mem[0x4644b2] = '\x89'
        mem[0x4644b3] = 'x'
        mem[0x4644b4] = '\x10'
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x6bf6f0)
        cpu.RIP = 0x4644b1
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x6bf6d0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6bf6e0, 8)== ord('\xf0'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf6e1, 8)== ord('\xf6'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf6e2, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf6e3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf6e4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf6e5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf6e6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bf6e7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4644b1, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4644b2, 8)== ord('\x89'))
        condition = Operators.AND(condition, cpu.read_int(0x4644b3, 8)== ord('x'))
        condition = Operators.AND(condition, cpu.read_int(0x4644b4, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.RDI == 0x6bf6f0)
        condition = Operators.AND(condition, cpu.RAX == 0x6bf6d0)
        condition = Operators.AND(condition, cpu.RIP == 0x4644b5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_7_symbolic(self):
        ''' Instruction MOV_7 
            Groups:  
            0x4113df:	mov	rsi, qword ptr [rdx]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x006bb000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb780)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb781)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb782)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb783)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb784)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb785)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb786)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bb787)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4113df] = 'H'
        mem[0x4113e0] = '\x8b'
        mem[0x4113e1] = '2'
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x6e1000)
        cpu.RIP = 0x4113df
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x6bb780)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6bb780, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb781, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb782, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb783, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb784, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb785, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb786, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bb787, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4113df, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4113e0, 8)== ord('\x8b'))
        condition = Operators.AND(condition, cpu.read_int(0x4113e1, 8)== ord('2'))
        condition = Operators.AND(condition, cpu.RSI == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4113e2)
        condition = Operators.AND(condition, cpu.RDX == 0x6bb780)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_8_symbolic(self):
        ''' Instruction MOV_8 
            Groups:  
            0x464602:	mov	rax, rdx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00464000, 0x1000, 'rwx')
        mem[0x464602] = 'H'
        mem[0x464603] = '\x89'
        mem[0x464604] = '\xd0'
        cpu.RIP = 0x464602
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x20)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x464602, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x464603, 8)== ord('\x89'))
        condition = Operators.AND(condition, cpu.read_int(0x464604, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.RAX == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x464605)
        condition = Operators.AND(condition, cpu.RDX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_MOV_9_symbolic(self):
        ''' Instruction MOV_9 
            Groups:  
            0x406e84:	mov	rbx, qword ptr [r12]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x406e84] = 'I'
        mem[0x406e85] = '\x8b'
        mem[0x406e86] = '\x1c'
        mem[0x406e87] = '$'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc88)
        value = cs.new_bitvec(8)
        cs.add(value == 0x9d)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc89)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc8a)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc8b)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc8c)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc8d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc8e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc8f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x7fffffffdc88)
        cpu.RIP = 0x406e84
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffe17c)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e84, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x406e85, 8)== ord('\x8b'))
        condition = Operators.AND(condition, cpu.read_int(0x406e86, 8)== ord('\x1c'))
        condition = Operators.AND(condition, cpu.read_int(0x406e87, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc88, 8)== ord('\x9d'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc89, 8)== ord('\xe1'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc8a, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc8b, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc8c, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc8d, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc8e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc8f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.R12 == 0x7fffffffdc88)
        condition = Operators.AND(condition, cpu.RIP == 0x406e88)
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffe19d)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_NEG_1_symbolic(self):
        ''' Instruction NEG_1 
            Groups:  
            0x40103d:	neg	rax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x40103d] = 'H'
        mem[0x40103e] = '\xf7'
        mem[0x40103f] = '\xd8'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x40)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40103d
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40103d, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x40103e, 8)== ord('\xf7'))
        condition = Operators.AND(condition, cpu.read_int(0x40103f, 8)== ord('\xd8'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0xffffffffffffffc0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x401040)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_NEG_2_symbolic(self):
        ''' Instruction NEG_2 
            Groups:  
            0x45f8f1:	neg	rdx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045f000, 0x1000, 'rwx')
        mem[0x45f8f1] = 'H'
        mem[0x45f8f2] = '\xf7'
        mem[0x45f8f3] = '\xda'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x45f8f1
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x50)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x45f8f1, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x45f8f2, 8)== ord('\xf7'))
        condition = Operators.AND(condition, cpu.read_int(0x45f8f3, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x45f8f4)
        condition = Operators.AND(condition, cpu.RDX == 0xffffffffffffffb0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_NEG_3_symbolic(self):
        ''' Instruction NEG_3 
            Groups:  
            0x410dd5:	neg	rdx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, 'rwx')
        mem[0x410dd5] = 'H'
        mem[0x410dd6] = '\xf7'
        mem[0x410dd7] = '\xda'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x410dd5
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x1000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x410dd5, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x410dd6, 8)== ord('\xf7'))
        condition = Operators.AND(condition, cpu.read_int(0x410dd7, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x410dd8)
        condition = Operators.AND(condition, cpu.RDX == 0xfffffffffffff000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_NEG_4_symbolic(self):
        ''' Instruction NEG_4 
            Groups:  
            0x411166:	neg	r10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411168] = '\xda'
        mem[0x411166] = 'I'
        mem[0x411167] = '\xf7'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 0x1000)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411166
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411168, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x411166, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x411167, 8)== ord('\xf7'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.R10 == 0xfffffffffffff000)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x411169)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_NOT_1_symbolic(self):
        ''' Instruction NOT_1 
            Groups:  
            0x400857:	not	esi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400858] = '\xd6'
        mem[0x400857] = '\xf7'
        cpu.RIP = 0x400857
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xfffffff0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400858, 8)== ord('\xd6'))
        condition = Operators.AND(condition, cpu.read_int(0x400857, 8)== ord('\xf7'))
        condition = Operators.AND(condition, cpu.ESI == 0xf)
        condition = Operators.AND(condition, cpu.RIP == 0x400859)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_NOT_2_symbolic(self):
        ''' Instruction NOT_2 
            Groups:  
            0x436f6b:	not	eax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436f6b] = '\xf7'
        mem[0x436f6c] = '\xd0'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xffffffff)
        cpu.RIP = 0x436f6b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436f6b, 8)== ord('\xf7'))
        condition = Operators.AND(condition, cpu.read_int(0x436f6c, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x436f6d)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_1_symbolic(self):
        ''' Instruction OR_1 
            Groups:  
            0x412010:	or	rax, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x412010] = 'H'
        mem[0x412011] = '\x83'
        mem[0x412012] = '\xc8'
        mem[0x412013] = '\x01'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x412010
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x21940)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x412010, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x412011, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x412012, 8)== ord('\xc8'))
        condition = Operators.AND(condition, cpu.read_int(0x412013, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x412014)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x21941)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_10_symbolic(self):
        ''' Instruction OR_10 
            Groups:  
            0x436904:	or	ecx, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436904] = '\x83'
        mem[0x436905] = '\xc9'
        mem[0x436906] = '\x08'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x436904
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436904, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x436905, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.read_int(0x436906, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x436907)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_11_symbolic(self):
        ''' Instruction OR_11 
            Groups:  
            0x437702:	or	eax, ecx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x437702] = '\t'
        mem[0x437703] = '\xc8'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x400)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x4)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x437702
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x437702, 8)== ord('\t'))
        condition = Operators.AND(condition, cpu.read_int(0x437703, 8)== ord('\xc8'))
        condition = Operators.AND(condition, cpu.EAX == 0x404)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x4)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x437704)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_12_symbolic(self):
        ''' Instruction OR_12 
            Groups:  
            0x41348e:	or	qword ptr [rsp], 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffb000, 0x1000, 'rwx')
        mem[0x41348e] = 'H'
        mem[0x41348f] = '\x83'
        mem[0x413490] = '\x0c'
        mem[0x413491] = '$'
        mem[0x413492] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffba30)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffba31)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffba32)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffba33)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffba34)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffba35)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffba36)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffba37)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x41348e
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffba30)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41348e, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x41348f, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x413490, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x413491, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x413492, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffba30, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffba31, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffba32, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffba33, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffba34, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffba35, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffba36, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffba37, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x413493)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffba30)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_13_symbolic(self):
        ''' Instruction OR_13 
            Groups:  
            0x41165e:	or	qword ptr [rsp], 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc950)
        value = cs.new_bitvec(8)
        cs.add(value == 0xc0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc951)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc952)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc953)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc954)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc955)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc956)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc957)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x41165e] = 'H'
        mem[0x41165f] = '\x83'
        mem[0x411660] = '\x0c'
        mem[0x411661] = '$'
        mem[0x411662] = '\x00'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x41165e
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffc950)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc950, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc951, 8)== ord('\xf1'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc952, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc953, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc954, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc955, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc956, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc957, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x41165e, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x41165f, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x411660, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x411661, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x411662, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x411663)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffc950)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_14_symbolic(self):
        ''' Instruction OR_14 
            Groups:  
            0x4321fa:	or	qword ptr [rsp], 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9f0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x60)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9f1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9f2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9f3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9f4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9f5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9f6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9f7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4321fa] = 'H'
        mem[0x4321fb] = '\x83'
        mem[0x4321fc] = '\x0c'
        mem[0x4321fd] = '$'
        mem[0x4321fe] = '\x00'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4321fa
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffc9f0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9f0, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9f1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9f2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9f3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9f4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9f5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9f6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9f7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4321fa, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4321fb, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x4321fc, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x4321fd, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x4321fe, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4321ff)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffc9f0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_15_symbolic(self):
        ''' Instruction OR_15 
            Groups:  
            0x4341c0:	or	qword ptr [rsp], 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffb000, 0x1000, 'rwx')
        mem[0x4341c0] = 'H'
        mem[0x4341c1] = '\x83'
        mem[0x4341c2] = '\x0c'
        mem[0x4341c3] = '$'
        mem[0x4341c4] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffb8e0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffb8e1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffb8e2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffb8e3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffb8e4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffb8e5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffb8e6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffb8e7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4341c0
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffb8e0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4341c0, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4341c1, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x4341c2, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x4341c3, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x4341c4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffb8e0, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffb8e1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffb8e2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffb8e3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffb8e4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffb8e5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffb8e6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffb8e7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4341c5)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffb8e0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_16_symbolic(self):
        ''' Instruction OR_16 
            Groups:  
            0x41a82c:	or	qword ptr [rsp], 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041a000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcae0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcae1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcae2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcae3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcae4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcae5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcae6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcae7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x41a82c] = 'H'
        mem[0x41a82d] = '\x83'
        mem[0x41a82e] = '\x0c'
        mem[0x41a82f] = '$'
        mem[0x41a830] = '\x00'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x41a82c
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffcae0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcae0, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcae1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcae2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcae3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcae4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcae5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcae6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcae7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x41a82c, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x41a82d, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x41a82e, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x41a82f, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x41a830, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41a831)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffcae0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_17_symbolic(self):
        ''' Instruction OR_17 
            Groups:  
            0x410efe:	or	rcx, r12
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, 'rwx')
        mem[0x410f00] = '\xe1'
        mem[0x410efe] = 'L'
        mem[0x410eff] = '\t'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x0)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x41)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x410efe
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x410f00, 8)== ord('\xe1'))
        condition = Operators.AND(condition, cpu.read_int(0x410efe, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x410eff, 8)== ord('\t'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RCX == 0x41)
        condition = Operators.AND(condition, cpu.R12 == 0x41)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x410f01)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_18_symbolic(self):
        ''' Instruction OR_18 
            Groups:  
            0x41165e:	or	qword ptr [rsp], 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffb000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffb990)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffb991)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffb992)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffb993)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffb994)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffb995)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffb996)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffb997)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x41165e] = 'H'
        mem[0x41165f] = '\x83'
        mem[0x411660] = '\x0c'
        mem[0x411661] = '$'
        mem[0x411662] = '\x00'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x41165e
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffb990)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffb990, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffb991, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffb992, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffb993, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffb994, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffb995, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffb996, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffb997, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x41165e, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x41165f, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x411660, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x411661, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x411662, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x411663)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffb990)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_19_symbolic(self):
        ''' Instruction OR_19 
            Groups:  
            0x406de4:	or	qword ptr [rsp], 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x406de4] = 'H'
        mem[0x406de5] = '\x83'
        mem[0x406de6] = '\x0c'
        mem[0x406de7] = '$'
        mem[0x406de8] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca30)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca31)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca32)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca33)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca34)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca35)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca36)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca37)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406de4
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffca30)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406de4, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x406de5, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x406de6, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x406de7, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x406de8, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca30, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca31, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca32, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca33, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca34, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca35, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca36, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca37, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406de9)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffca30)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_2_symbolic(self):
        ''' Instruction OR_2 
            Groups:  
            0x41348e:	or	qword ptr [rsp], 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x41348e] = 'H'
        mem[0x41348f] = '\x83'
        mem[0x413490] = '\x0c'
        mem[0x413491] = '$'
        mem[0x413492] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca30)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca31)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca32)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca33)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca34)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca35)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca36)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca37)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x41348e
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffca30)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41348e, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x41348f, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x413490, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x413491, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x413492, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca30, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca31, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca32, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca33, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca34, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca35, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca36, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca37, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x413493)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffca30)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_20_symbolic(self):
        ''' Instruction OR_20 
            Groups:  
            0x437a94:	or	dword ptr [rsi + 0x40], 0x33
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x006bd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd500)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd501)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd502)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd503)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x437a94] = '\x83'
        mem[0x437a95] = 'N'
        mem[0x437a96] = '@'
        mem[0x437a97] = '3'
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x6bd4c0)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x437a94
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6bd500, 8)== ord('3'))
        condition = Operators.AND(condition, cpu.read_int(0x6bd501, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bd502, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bd503, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x437a94, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x437a95, 8)== ord('N'))
        condition = Operators.AND(condition, cpu.read_int(0x437a96, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x437a97, 8)== ord('3'))
        condition = Operators.AND(condition, cpu.RSI == 0x6bd4c0)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x437a98)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_21_symbolic(self):
        ''' Instruction OR_21 
            Groups:  
            0x406de4:	or	qword ptr [rsp], 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x406de4] = 'H'
        mem[0x406de5] = '\x83'
        mem[0x406de6] = '\x0c'
        mem[0x406de7] = '$'
        mem[0x406de8] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca30)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca31)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca32)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca33)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca34)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca35)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca36)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca37)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406de4
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffca30)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406de4, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x406de5, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x406de6, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x406de7, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x406de8, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca30, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca31, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca32, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca33, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca34, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca35, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca36, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca37, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406de9)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffca30)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_3_symbolic(self):
        ''' Instruction OR_3 
            Groups:  
            0x41840e:	or	rcx, r8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x418410] = '\xc1'
        mem[0x41840e] = 'L'
        mem[0x41840f] = '\t'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x0)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0xfe00)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x41840e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x418410, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x41840e, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x41840f, 8)== ord('\t'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RCX == 0xfe00)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.R8 == 0xfe00)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x418411)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_4_symbolic(self):
        ''' Instruction OR_4 
            Groups:  
            0x406ed2:	or	qword ptr [rsp], 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcac0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcac1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcac2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcac3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcac4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcac5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcac6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcac7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x406ed2] = 'H'
        mem[0x406ed3] = '\x83'
        mem[0x406ed4] = '\x0c'
        mem[0x406ed5] = '$'
        mem[0x406ed6] = '\x00'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406ed2
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffcac0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcac0, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcac1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcac2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcac3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcac4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcac5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcac6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcac7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x406ed2, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x406ed3, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x406ed4, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x406ed5, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x406ed6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406ed7)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffcac0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_5_symbolic(self):
        ''' Instruction OR_5 
            Groups:  
            0x41165e:	or	qword ptr [rsp], 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc990)
        value = cs.new_bitvec(8)
        cs.add(value == 0x98)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc991)
        value = cs.new_bitvec(8)
        cs.add(value == 0x98)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc992)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc993)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc994)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc995)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc996)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc997)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x41165e] = 'H'
        mem[0x41165f] = '\x83'
        mem[0x411660] = '\x0c'
        mem[0x411661] = '$'
        mem[0x411662] = '\x00'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x41165e
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffc990)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc990, 8)== ord('\x98'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc991, 8)== ord('\x98'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc992, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc993, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc994, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc995, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc996, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc997, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x41165e, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x41165f, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x411660, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x411661, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x411662, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x411663)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffc990)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_6_symbolic(self):
        ''' Instruction OR_6 
            Groups:  
            0x437965:	or	dword ptr [rsi + 0x40], 0x80
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x006bd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd500)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd501)
        value = cs.new_bitvec(8)
        cs.add(value == 0xc)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd502)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6bd503)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x437965] = '\x81'
        mem[0x437966] = 'N'
        mem[0x437967] = '@'
        mem[0x437968] = '\x80'
        mem[0x437969] = '\x00'
        mem[0x43796a] = '\x00'
        mem[0x43796b] = '\x00'
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x6bd4c0)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x437965
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6bd500, 8)== ord('\xf3'))
        condition = Operators.AND(condition, cpu.read_int(0x6bd501, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x6bd502, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x6bd503, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x437965, 8)== ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(0x437966, 8)== ord('N'))
        condition = Operators.AND(condition, cpu.read_int(0x437967, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x437968, 8)== ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(0x437969, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x43796a, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x43796b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSI == 0x6bd4c0)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x43796c)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_7_symbolic(self):
        ''' Instruction OR_7 
            Groups:  
            0x418415:	or	rdx, rcx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x418415] = 'H'
        mem[0x418416] = '\t'
        mem[0x418417] = '\xca'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x2000800000000000)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x418415
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x80000000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x418415, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x418416, 8)== ord('\t'))
        condition = Operators.AND(condition, cpu.read_int(0x418417, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RCX == 0x2000800000000000)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x418418)
        condition = Operators.AND(condition, cpu.RDX == 0x2000800080000000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_8_symbolic(self):
        ''' Instruction OR_8 
            Groups:  
            0x41348e:	or	qword ptr [rsp], 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffb000, 0x1000, 'rwx')
        mem[0x41348e] = 'H'
        mem[0x41348f] = '\x83'
        mem[0x413490] = '\x0c'
        mem[0x413491] = '$'
        mem[0x413492] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffba30)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffba31)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffba32)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffba33)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffba34)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffba35)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffba36)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffba37)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x41348e
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffba30)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41348e, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x41348f, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x413490, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x413491, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x413492, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffba30, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffba31, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffba32, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffba33, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffba34, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffba35, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffba36, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffba37, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x413493)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffba30)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_OR_9_symbolic(self):
        ''' Instruction OR_9 
            Groups:  
            0x435533:	or	qword ptr [rsp], 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00435000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x435536] = '$'
        mem[0x435537] = '\x00'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcab3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcab0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcab1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcab2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x435533] = 'H'
        mem[0x435534] = '\x83'
        mem[0x435535] = '\x0c'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcab6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcab7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcab4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffcab5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x435533
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffcab0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcab6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcab7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcab3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcab0, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcab1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcab2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x435533, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x435534, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x435535, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x435536, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x435537, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcab4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffcab5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x435538)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffcab0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_1_symbolic(self):
        ''' Instruction PCMPEQB_1 
            Groups: sse2 
            0x4183eb:	pcmpeqb	xmm10, xmmword ptr [rax + 0x20]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494db0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494db1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494db2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494db3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x63)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494db4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494db5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494db6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x75)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494db7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x69)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494db8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494db9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2d)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dba)
        value = cs.new_bitvec(8)
        cs.add(value == 0x64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dbb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dbc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x62)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dbd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x75)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dbe)
        value = cs.new_bitvec(8)
        cs.add(value == 0x67)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dbf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4183eb] = 'f'
        mem[0x4183ec] = 'D'
        mem[0x4183ed] = '\x0f'
        mem[0x4183ee] = 't'
        mem[0x4183ef] = 'P'
        mem[0x4183f0] = ' '
        cpu.XMM10 = cs.new_bitvec(128)
        cs.add(cpu.XMM10 == 0x0)
        cpu.RIP = 0x4183eb
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x494d90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494db0, 8)== ord('/'))
        condition = Operators.AND(condition, cpu.read_int(0x494db1, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.read_int(0x494db2, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x494db3, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x494db4, 8)== ord('/'))
        condition = Operators.AND(condition, cpu.read_int(0x494db5, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x494db6, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x494db7, 8)== ord('i'))
        condition = Operators.AND(condition, cpu.read_int(0x494db8, 8)== ord('d'))
        condition = Operators.AND(condition, cpu.read_int(0x494db9, 8)== ord('-'))
        condition = Operators.AND(condition, cpu.read_int(0x494dba, 8)== ord('d'))
        condition = Operators.AND(condition, cpu.read_int(0x494dbb, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.read_int(0x494dbc, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x494dbd, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x494dbe, 8)== ord('g'))
        condition = Operators.AND(condition, cpu.read_int(0x494dbf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4183eb, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ec, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ed, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ee, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ef, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.read_int(0x4183f0, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.XMM10 == 0xff000000000000000000000000000000)
        condition = Operators.AND(condition, cpu.RAX == 0x494d90)
        condition = Operators.AND(condition, cpu.RIP == 0x4183f1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_10_symbolic(self):
        ''' Instruction PCMPEQB_10 
            Groups: sse2 
            0x4183cf:	pcmpeqb	xmm12, xmm8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183d0] = 'E'
        mem[0x4183d1] = '\x0f'
        mem[0x4183d2] = 't'
        mem[0x4183d3] = '\xe0'
        mem[0x4183cf] = 'f'
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0x425f444c00574f4e5f444e49425f444c)
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0x0)
        cpu.RIP = 0x4183cf

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183d0, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d2, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d3, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cf, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.XMM12 == 0xff0000000000000000000000)
        condition = Operators.AND(condition, cpu.XMM8 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183d4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_11_symbolic(self):
        ''' Instruction PCMPEQB_11 
            Groups: sse2 
            0x4183cf:	pcmpeqb	xmm12, xmm8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183d0] = 'E'
        mem[0x4183d1] = '\x0f'
        mem[0x4183d2] = 't'
        mem[0x4183d3] = '\xe0'
        mem[0x4183cf] = 'f'
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0x555054554f5f454c49464f52505f444c)
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0x0)
        cpu.RIP = 0x4183cf

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183d0, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d2, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d3, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cf, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.XMM12 == 0x0)
        condition = Operators.AND(condition, cpu.XMM8 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183d4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_12_symbolic(self):
        ''' Instruction PCMPEQB_12 
            Groups: sse2 
            0x4183cf:	pcmpeqb	xmm12, xmm8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183d0] = 'E'
        mem[0x4183d1] = '\x0f'
        mem[0x4183d2] = 't'
        mem[0x4183d3] = '\xe0'
        mem[0x4183cf] = 'f'
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0x4b4145575f43494d414e59445f444c)
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0x0)
        cpu.RIP = 0x4183cf

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183d0, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d2, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d3, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cf, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.XMM12 == 0xff000000000000000000000000000000)
        condition = Operators.AND(condition, cpu.XMM8 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183d4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_13_symbolic(self):
        ''' Instruction PCMPEQB_13 
            Groups: sse2 
            0x457942:	pcmpeqb	xmm5, xmm2
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x457942] = 'f'
        mem[0x457943] = '\x0f'
        mem[0x457944] = 't'
        mem[0x457945] = '\xea'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x0)
        cpu.RIP = 0x457942
        cpu.XMM5 = cs.new_bitvec(128)
        cs.add(cpu.XMM5 == 0x2f65726f6369746e616d2f737463656a)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457942, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x457943, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x457944, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x457945, 8)== ord('\xea'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x457946)
        condition = Operators.AND(condition, cpu.XMM5 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_14_symbolic(self):
        ''' Instruction PCMPEQB_14 
            Groups: sse2 
            0x457953:	pcmpeqb	xmm3, xmm1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x457953] = 'f'
        mem[0x457954] = '\x0f'
        mem[0x457955] = 't'
        mem[0x457956] = '\xd9'
        cpu.XMM3 = cs.new_bitvec(128)
        cs.add(cpu.XMM3 == 0x7865646e692f6f7475612f7374736574)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f)
        cpu.RIP = 0x457953

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457953, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x457954, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x457955, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x457956, 8)== ord('\xd9'))
        condition = Operators.AND(condition, cpu.XMM3 == 0xff00000000ff0000000000)
        condition = Operators.AND(condition, cpu.XMM1 == 0x2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f)
        condition = Operators.AND(condition, cpu.RIP == 0x457957)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_15_symbolic(self):
        ''' Instruction PCMPEQB_15 
            Groups: sse2 
            0x4183eb:	pcmpeqb	xmm10, xmmword ptr [rax + 0x20]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x4183eb] = 'f'
        mem[0x4183ec] = 'D'
        mem[0x4183ed] = '\x0f'
        mem[0x4183ee] = 't'
        mem[0x4183ef] = 'P'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494de0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494de1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494de2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x75)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494de3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494de4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494de5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x76)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494de6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494de7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494de8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494de9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dea)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494deb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dec)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494ded)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dee)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494def)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4183f0] = ' '
        cpu.XMM10 = cs.new_bitvec(128)
        cs.add(cpu.XMM10 == 0x0)
        cpu.RIP = 0x4183eb
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x494dc0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494deb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x494dec, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x494ded, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x494dee, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x494def, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x494de0, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.read_int(0x494de1, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x494de2, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x494de3, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.read_int(0x494de4, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494de5, 8)== ord('v'))
        condition = Operators.AND(condition, cpu.read_int(0x494de6, 8)== ord('d'))
        condition = Operators.AND(condition, cpu.read_int(0x494de7, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x494de8, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x494de9, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x494dea, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4183eb, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ec, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ed, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ee, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ef, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.read_int(0x4183f0, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.XMM10 == 0xffffffffffffff000000000000000000)
        condition = Operators.AND(condition, cpu.RAX == 0x494dc0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183f1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_16_symbolic(self):
        ''' Instruction PCMPEQB_16 
            Groups: sse2 
            0x4183e5:	pcmpeqb	xmm9, xmmword ptr [rax + 0x10]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x50)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x52)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x46)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x49)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494da9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494daa)
        value = cs.new_bitvec(8)
        cs.add(value == 0x55)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dab)
        value = cs.new_bitvec(8)
        cs.add(value == 0x54)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dac)
        value = cs.new_bitvec(8)
        cs.add(value == 0x50)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dad)
        value = cs.new_bitvec(8)
        cs.add(value == 0x55)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dae)
        value = cs.new_bitvec(8)
        cs.add(value == 0x54)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494daf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4183e5] = 'f'
        mem[0x4183e6] = 'D'
        mem[0x4183e7] = '\x0f'
        mem[0x4183e8] = 't'
        mem[0x4183e9] = 'H'
        mem[0x4183ea] = '\x10'
        cpu.XMM9 = cs.new_bitvec(128)
        cs.add(cpu.XMM9 == 0x0)
        cpu.RIP = 0x4183e5
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x494d90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494da0, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494da1, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.read_int(0x494da2, 8)== ord('R'))
        condition = Operators.AND(condition, cpu.read_int(0x494da3, 8)== ord('O'))
        condition = Operators.AND(condition, cpu.read_int(0x494da4, 8)== ord('F'))
        condition = Operators.AND(condition, cpu.read_int(0x494da5, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x494da6, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494da7, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x494da8, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494da9, 8)== ord('O'))
        condition = Operators.AND(condition, cpu.read_int(0x494daa, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.read_int(0x494dab, 8)== ord('T'))
        condition = Operators.AND(condition, cpu.read_int(0x494dac, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.read_int(0x494dad, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.read_int(0x494dae, 8)== ord('T'))
        condition = Operators.AND(condition, cpu.read_int(0x494daf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4183e5, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183e6, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x4183e7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183e8, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x4183e9, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ea, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.XMM9 == 0xff000000000000000000000000000000)
        condition = Operators.AND(condition, cpu.RAX == 0x494d90)
        condition = Operators.AND(condition, cpu.RIP == 0x4183eb)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_17_symbolic(self):
        ''' Instruction PCMPEQB_17 
            Groups: sse2 
            0x45795b:	pcmpeqb	xmm2, xmm0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x45795b] = 'f'
        mem[0x45795c] = '\x0f'
        mem[0x45795d] = 't'
        mem[0x45795e] = '\xd0'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x0)
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x5800326772610031677261006c6c6568)
        cpu.RIP = 0x45795b

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x45795b, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x45795c, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x45795d, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x45795e, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.XMM2 == 0xff00000000ff00000000ff00000000)
        condition = Operators.AND(condition, cpu.XMM0 == 0x5800326772610031677261006c6c6568)
        condition = Operators.AND(condition, cpu.RIP == 0x45795f)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_18_symbolic(self):
        ''' Instruction PCMPEQB_18 
            Groups: sse2 
            0x4183f1:	pcmpeqb	xmm11, xmmword ptr [rax + 0x30]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        mem[0x4183f1] = 'f'
        mem[0x4183f2] = 'D'
        mem[0x4183f3] = '\x0f'
        mem[0x4183f4] = 't'
        mem[0x4183f5] = 'X'
        mem[0x4183f6] = '0'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494df0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x69)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494df1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494df2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x66)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494df3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494df4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494df5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x39)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494df6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5d)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494df7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2d)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494df8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494df9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dfa)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dfb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x75)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dfc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dfd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dfe)
        value = cs.new_bitvec(8)
        cs.add(value == 0x64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dff)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        cpu.XMM11 = cs.new_bitvec(128)
        cs.add(cpu.XMM11 == 0x0)
        cpu.RIP = 0x4183f1
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x494dc0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494df1, 8)== ord('n'))
        condition = Operators.AND(condition, cpu.read_int(0x494df2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183f3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183f4, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x494df5, 8)== ord('9'))
        condition = Operators.AND(condition, cpu.read_int(0x494df6, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.read_int(0x494df0, 8)== ord('i'))
        condition = Operators.AND(condition, cpu.read_int(0x4183f1, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183f2, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x494df3, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x494df4, 8)== ord('['))
        condition = Operators.AND(condition, cpu.read_int(0x4183f5, 8)== ord('X'))
        condition = Operators.AND(condition, cpu.read_int(0x4183f6, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.read_int(0x494df7, 8)== ord('-'))
        condition = Operators.AND(condition, cpu.read_int(0x494df8, 8)== ord('>'))
        condition = Operators.AND(condition, cpu.read_int(0x494df9, 8)== ord('d'))
        condition = Operators.AND(condition, cpu.read_int(0x494dfa, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494dfb, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x494dfc, 8)== ord('n'))
        condition = Operators.AND(condition, cpu.read_int(0x494dfd, 8)== ord('.'))
        condition = Operators.AND(condition, cpu.read_int(0x494dfe, 8)== ord('d'))
        condition = Operators.AND(condition, cpu.read_int(0x494dff, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.XMM11 == 0x0)
        condition = Operators.AND(condition, cpu.RAX == 0x494dc0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183f7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_19_symbolic(self):
        ''' Instruction PCMPEQB_19 
            Groups: sse2 
            0x4183cf:	pcmpeqb	xmm12, xmm8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183d0] = 'E'
        mem[0x4183d1] = '\x0f'
        mem[0x4183d2] = 't'
        mem[0x4183d3] = '\xe0'
        mem[0x4183cf] = 'f'
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0x485441505f5952415242494c5f444c)
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0x0)
        cpu.RIP = 0x4183cf

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183d0, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d2, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d3, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cf, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.XMM12 == 0xff000000000000000000000000000000)
        condition = Operators.AND(condition, cpu.XMM8 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183d4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_2_symbolic(self):
        ''' Instruction PCMPEQB_2 
            Groups: sse2 
            0x4183e5:	pcmpeqb	xmm9, xmmword ptr [rax + 0x10]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x53)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x53)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x55)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4d)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dd9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dda)
        value = cs.new_bitvec(8)
        cs.add(value == 0x52)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494ddb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494ddc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494ddd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dde)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494ddf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        mem[0x4183e5] = 'f'
        mem[0x4183e6] = 'D'
        mem[0x4183e7] = '\x0f'
        mem[0x4183e8] = 't'
        mem[0x4183e9] = 'H'
        mem[0x4183ea] = '\x10'
        cpu.XMM9 = cs.new_bitvec(128)
        cs.add(cpu.XMM9 == 0x0)
        cpu.RIP = 0x4183e5
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x494dc0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494dd0, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd1, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd2, 8)== ord('S'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd3, 8)== ord('S'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd4, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd5, 8)== ord('M'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd6, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd7, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd8, 8)== ord('K'))
        condition = Operators.AND(condition, cpu.read_int(0x494dd9, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x494dda, 8)== ord('R'))
        condition = Operators.AND(condition, cpu.read_int(0x494ddb, 8)== ord('N'))
        condition = Operators.AND(condition, cpu.read_int(0x494ddc, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x494ddd, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494dde, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x494ddf, 8)== ord('s'))
        condition = Operators.AND(condition, cpu.read_int(0x4183e5, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183e6, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x4183e7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183e8, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x4183e9, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ea, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.XMM9 == 0xff0000000000000000000000000000)
        condition = Operators.AND(condition, cpu.RAX == 0x494dc0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183eb)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_20_symbolic(self):
        ''' Instruction PCMPEQB_20 
            Groups: sse2 
            0x45793e:	pcmpeqb	xmm4, xmm1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x457940] = 't'
        mem[0x457941] = '\xe1'
        mem[0x45793e] = 'f'
        mem[0x45793f] = '\x0f'
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f)
        cpu.RIP = 0x45793e
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 0x2f65726f6369746e616d2f737463656a)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457940, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x457941, 8)== ord('\xe1'))
        condition = Operators.AND(condition, cpu.read_int(0x45793e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x45793f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM1 == 0x2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f)
        condition = Operators.AND(condition, cpu.XMM4 == 0xff000000000000000000ff0000000000)
        condition = Operators.AND(condition, cpu.RIP == 0x457942)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_21_symbolic(self):
        ''' Instruction PCMPEQB_21 
            Groups: sse2 
            0x4183cf:	pcmpeqb	xmm12, xmm8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183d0] = 'E'
        mem[0x4183d1] = '\x0f'
        mem[0x4183d2] = 't'
        mem[0x4183d3] = '\xe0'
        mem[0x4183cf] = 'f'
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0x253a4825206525206225206125000200)
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0x0)
        cpu.RIP = 0x4183cf

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183d0, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d2, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d3, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cf, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.XMM12 == 0xff00ff)
        condition = Operators.AND(condition, cpu.XMM8 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183d4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_3_symbolic(self):
        ''' Instruction PCMPEQB_3 
            Groups: sse2 
            0x4183cf:	pcmpeqb	xmm12, xmm8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183d0] = 'E'
        mem[0x4183d1] = '\x0f'
        mem[0x4183d2] = 't'
        mem[0x4183d3] = '\xe0'
        mem[0x4183cf] = 'f'
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0x312e6f732e6f7364762d78756e696c)
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0x0)
        cpu.RIP = 0x4183cf

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183d0, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d2, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d3, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cf, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.XMM12 == 0xff000000000000000000000000000000)
        condition = Operators.AND(condition, cpu.XMM8 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183d4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_4_symbolic(self):
        ''' Instruction PCMPEQB_4 
            Groups: sse2 
            0x4183cf:	pcmpeqb	xmm12, xmm8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183d0] = 'E'
        mem[0x4183d1] = '\x0f'
        mem[0x4183d2] = 't'
        mem[0x4183d3] = '\xe0'
        mem[0x4183cf] = 'f'
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0x64762d7075746573004e5241575f444c)
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0x0)
        cpu.RIP = 0x4183cf

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183d0, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d2, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d3, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cf, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.XMM12 == 0xff00000000000000)
        condition = Operators.AND(condition, cpu.XMM8 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183d4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_5_symbolic(self):
        ''' Instruction PCMPEQB_5 
            Groups: sse2 
            0x457905:	pcmpeqb	xmm3, xmm2
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x457908] = '\xda'
        mem[0x457905] = 'f'
        mem[0x457906] = '\x0f'
        mem[0x457907] = 't'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x0)
        cpu.XMM3 = cs.new_bitvec(128)
        cs.add(cpu.XMM3 == 0x6f72502f6570696c65662f656d6f682f)
        cpu.RIP = 0x457905

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457908, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x457905, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x457906, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x457907, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x0)
        condition = Operators.AND(condition, cpu.XMM3 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x457909)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_6_symbolic(self):
        ''' Instruction PCMPEQB_6 
            Groups: sse2 
            0x457901:	pcmpeqb	xmm0, xmm1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x457901] = 'f'
        mem[0x457902] = '\x0f'
        mem[0x457903] = 't'
        mem[0x457904] = '\xc1'
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x6f72502f6570696c65662f656d6f682f)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f)
        cpu.RIP = 0x457901

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457901, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x457902, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x457903, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x457904, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.XMM0 == 0xff000000000000ff00000000ff)
        condition = Operators.AND(condition, cpu.XMM1 == 0x2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f)
        condition = Operators.AND(condition, cpu.RIP == 0x457905)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_7_symbolic(self):
        ''' Instruction PCMPEQB_7 
            Groups: sse2 
            0x4183f1:	pcmpeqb	xmm11, xmmword ptr [rax + 0x30]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x00494000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dc0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4d)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dc1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dc2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dc3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dc4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dc5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dc6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dc7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dc8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dc9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dca)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dcb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dcc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dcd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dce)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494dcf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        mem[0x4183f1] = 'f'
        mem[0x4183f2] = 'D'
        mem[0x4183f3] = '\x0f'
        mem[0x4183f4] = 't'
        mem[0x4183f5] = 'X'
        mem[0x4183f6] = '0'
        cpu.XMM11 = cs.new_bitvec(128)
        cs.add(cpu.XMM11 == 0x0)
        cpu.RIP = 0x4183f1
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x494d90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494dc0, 8)== ord('M'))
        condition = Operators.AND(condition, cpu.read_int(0x494dc1, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x494dc2, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494dc3, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494dc4, 8)== ord('O'))
        condition = Operators.AND(condition, cpu.read_int(0x494dc5, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x494dc6, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494dc7, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x494dc8, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x494dc9, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x494dca, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x494dcb, 8)== ord('K'))
        condition = Operators.AND(condition, cpu.read_int(0x494dcc, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x494dcd, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x494dce, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x494dcf, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x4183f1, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183f2, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x4183f3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183f4, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x4183f5, 8)== ord('X'))
        condition = Operators.AND(condition, cpu.read_int(0x4183f6, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.XMM11 == 0xff00000000000000000000000000)
        condition = Operators.AND(condition, cpu.RAX == 0x494d90)
        condition = Operators.AND(condition, cpu.RIP == 0x4183f7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_8_symbolic(self):
        ''' Instruction PCMPEQB_8 
            Groups: sse2 
            0x457978:	pcmpeqb	xmm0, xmm1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x457978] = 'f'
        mem[0x457979] = '\x0f'
        mem[0x45797a] = 't'
        mem[0x45797b] = '\xc1'
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x5800326772610031677261006c6c6568)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f)
        cpu.RIP = 0x457978

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457978, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x457979, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x45797a, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x45797b, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f)
        condition = Operators.AND(condition, cpu.RIP == 0x45797c)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPEQB_9_symbolic(self):
        ''' Instruction PCMPEQB_9 
            Groups: sse2 
            0x4183cf:	pcmpeqb	xmm12, xmm8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183d0] = 'E'
        mem[0x4183d1] = '\x0f'
        mem[0x4183d2] = 't'
        mem[0x4183d3] = '\xe0'
        mem[0x4183cf] = 'f'
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0x445f444c00544f4e5f444e49425f444c)
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0x0)
        cpu.RIP = 0x4183cf

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183d0, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d2, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d3, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x4183cf, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.XMM12 == 0xff0000000000000000000000)
        condition = Operators.AND(condition, cpu.XMM8 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183d4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_1_symbolic(self):
        ''' Instruction PMOVMSKB_1 
            Groups: sse2 
            0x4183d4:	pmovmskb	edx, xmm12
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183d8] = '\xd4'
        mem[0x4183d4] = 'f'
        mem[0x4183d5] = 'A'
        mem[0x4183d6] = '\x0f'
        mem[0x4183d7] = '\xd7'
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0x0)
        cpu.RIP = 0x4183d4

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183d8, 8)== ord('\xd4'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d5, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d7, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.XMM12 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183d9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_10_symbolic(self):
        ''' Instruction PMOVMSKB_10 
            Groups: sse2 
            0x4183f7:	pmovmskb	edx, xmm9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183f8] = 'A'
        mem[0x4183f9] = '\x0f'
        mem[0x4183fa] = '\xd7'
        mem[0x4183fb] = '\xd1'
        mem[0x4183f7] = 'f'
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.XMM9 = cs.new_bitvec(128)
        cs.add(cpu.XMM9 == 0xff0000000000000000000000000000)
        cpu.RIP = 0x4183f7

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183f8, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4183f9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183fa, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.read_int(0x4183fb, 8)== ord('\xd1'))
        condition = Operators.AND(condition, cpu.read_int(0x4183f7, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.EDX == 0x4000)
        condition = Operators.AND(condition, cpu.XMM9 == 0xff0000000000000000000000000000)
        condition = Operators.AND(condition, cpu.RIP == 0x4183fc)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_11_symbolic(self):
        ''' Instruction PMOVMSKB_11 
            Groups: sse2 
            0x4183d4:	pmovmskb	edx, xmm12
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183d8] = '\xd4'
        mem[0x4183d4] = 'f'
        mem[0x4183d5] = 'A'
        mem[0x4183d6] = '\x0f'
        mem[0x4183d7] = '\xd7'
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0xff0000000000000000000000)
        cpu.RIP = 0x4183d4

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183d8, 8)== ord('\xd4'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d5, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d7, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.EDX == 0x800)
        condition = Operators.AND(condition, cpu.XMM12 == 0xff0000000000000000000000)
        condition = Operators.AND(condition, cpu.RIP == 0x4183d9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_12_symbolic(self):
        ''' Instruction PMOVMSKB_12 
            Groups: sse2 
            0x457968:	pmovmskb	eax, xmm5
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x457968] = 'f'
        mem[0x457969] = '\x0f'
        mem[0x45796a] = '\xd7'
        mem[0x45796b] = '\xc5'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xf91)
        cpu.RIP = 0x457968
        cpu.XMM5 = cs.new_bitvec(128)
        cs.add(cpu.XMM5 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457968, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x457969, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x45796a, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.read_int(0x45796b, 8)== ord('\xc5'))
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x45796c)
        condition = Operators.AND(condition, cpu.XMM5 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_13_symbolic(self):
        ''' Instruction PMOVMSKB_13 
            Groups: sse2 
            0x4183d4:	pmovmskb	edx, xmm12
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183d8] = '\xd4'
        mem[0x4183d4] = 'f'
        mem[0x4183d5] = 'A'
        mem[0x4183d6] = '\x0f'
        mem[0x4183d7] = '\xd7'
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x6bf720)
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0xff0000000000000000000000)
        cpu.RIP = 0x4183d4

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183d8, 8)== ord('\xd4'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d5, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d7, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.EDX == 0x800)
        condition = Operators.AND(condition, cpu.XMM12 == 0xff0000000000000000000000)
        condition = Operators.AND(condition, cpu.RIP == 0x4183d9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_14_symbolic(self):
        ''' Instruction PMOVMSKB_14 
            Groups: sse2 
            0x457909:	pmovmskb	ecx, xmm0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x457909] = 'f'
        mem[0x45790a] = '\x0f'
        mem[0x45790b] = '\xd7'
        mem[0x45790c] = '\xc8'
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0xff000000000000ff00000000ff)
        cpu.RIP = 0x457909
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x400120)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457909, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x45790a, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x45790b, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.read_int(0x45790c, 8)== ord('\xc8'))
        condition = Operators.AND(condition, cpu.XMM0 == 0xff000000000000ff00000000ff)
        condition = Operators.AND(condition, cpu.RIP == 0x45790d)
        condition = Operators.AND(condition, cpu.ECX == 0x1021)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_15_symbolic(self):
        ''' Instruction PMOVMSKB_15 
            Groups: sse2 
            0x457963:	pmovmskb	r8d, xmm3
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x457963] = 'f'
        mem[0x457964] = 'D'
        mem[0x457965] = '\x0f'
        mem[0x457966] = '\xd7'
        mem[0x457967] = '\xc3'
        cpu.XMM3 = cs.new_bitvec(128)
        cs.add(cpu.XMM3 == 0xff00000000ff0000000000)
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 0xfe00)
        cpu.RIP = 0x457963

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457963, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x457964, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x457965, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x457966, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.read_int(0x457967, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.XMM3 == 0xff00000000ff0000000000)
        condition = Operators.AND(condition, cpu.R8D == 0x420)
        condition = Operators.AND(condition, cpu.RIP == 0x457968)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_16_symbolic(self):
        ''' Instruction PMOVMSKB_16 
            Groups: sse2 
            0x4183fc:	pmovmskb	r8d, xmm10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x418400] = '\xc2'
        mem[0x4183fc] = 'f'
        mem[0x4183fd] = 'E'
        mem[0x4183fe] = '\x0f'
        mem[0x4183ff] = '\xd7'
        cpu.XMM10 = cs.new_bitvec(128)
        cs.add(cpu.XMM10 == 0xff000000000000000000000000000000)
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 0x3)
        cpu.RIP = 0x4183fc

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x418400, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.read_int(0x4183fc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183fd, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183fe, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ff, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.XMM10 == 0xff000000000000000000000000000000)
        condition = Operators.AND(condition, cpu.R8D == 0x8000)
        condition = Operators.AND(condition, cpu.RIP == 0x418401)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_17_symbolic(self):
        ''' Instruction PMOVMSKB_17 
            Groups: sse2 
            0x4183f7:	pmovmskb	edx, xmm9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183f8] = 'A'
        mem[0x4183f9] = '\x0f'
        mem[0x4183fa] = '\xd7'
        mem[0x4183fb] = '\xd1'
        mem[0x4183f7] = 'f'
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.XMM9 = cs.new_bitvec(128)
        cs.add(cpu.XMM9 == 0xff000000000000000000000000000000)
        cpu.RIP = 0x4183f7

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183f8, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4183f9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183fa, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.read_int(0x4183fb, 8)== ord('\xd1'))
        condition = Operators.AND(condition, cpu.read_int(0x4183f7, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.EDX == 0x8000)
        condition = Operators.AND(condition, cpu.XMM9 == 0xff000000000000000000000000000000)
        condition = Operators.AND(condition, cpu.RIP == 0x4183fc)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_18_symbolic(self):
        ''' Instruction PMOVMSKB_18 
            Groups: sse2 
            0x4183fc:	pmovmskb	r8d, xmm10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x418400] = '\xc2'
        mem[0x4183fc] = 'f'
        mem[0x4183fd] = 'E'
        mem[0x4183fe] = '\x0f'
        mem[0x4183ff] = '\xd7'
        cpu.XMM10 = cs.new_bitvec(128)
        cs.add(cpu.XMM10 == 0xffffffffffffff000000000000000000)
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 0x8000)
        cpu.RIP = 0x4183fc

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x418400, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.read_int(0x4183fc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183fd, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183fe, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ff, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.XMM10 == 0xffffffffffffff000000000000000000)
        condition = Operators.AND(condition, cpu.R8D == 0xfe00)
        condition = Operators.AND(condition, cpu.RIP == 0x418401)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_19_symbolic(self):
        ''' Instruction PMOVMSKB_19 
            Groups: sse2 
            0x4183d4:	pmovmskb	edx, xmm12
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183d8] = '\xd4'
        mem[0x4183d4] = 'f'
        mem[0x4183d5] = 'A'
        mem[0x4183d6] = '\x0f'
        mem[0x4183d7] = '\xd7'
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x6bd3f0)
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0xff00000000000000)
        cpu.RIP = 0x4183d4

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183d8, 8)== ord('\xd4'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d5, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d7, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.EDX == 0x80)
        condition = Operators.AND(condition, cpu.XMM12 == 0xff00000000000000)
        condition = Operators.AND(condition, cpu.RIP == 0x4183d9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_2_symbolic(self):
        ''' Instruction PMOVMSKB_2 
            Groups: sse2 
            0x457994:	pmovmskb	ecx, xmm0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x457994] = 'f'
        mem[0x457995] = '\x0f'
        mem[0x457996] = '\xd7'
        mem[0x457997] = '\xc8'
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.RIP = 0x457994
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1021)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457994, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x457995, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x457996, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.read_int(0x457997, 8)== ord('\xc8'))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x457998)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_20_symbolic(self):
        ''' Instruction PMOVMSKB_20 
            Groups: sse2 
            0x45790d:	pmovmskb	edx, xmm3
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x457910] = '\xd3'
        mem[0x45790d] = 'f'
        mem[0x45790e] = '\x0f'
        mem[0x45790f] = '\xd7'
        cpu.XMM3 = cs.new_bitvec(128)
        cs.add(cpu.XMM3 == 0x0)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xffffdc28)
        cpu.RIP = 0x45790d

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457910, 8)== ord('\xd3'))
        condition = Operators.AND(condition, cpu.read_int(0x45790d, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x45790e, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x45790f, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.XMM3 == 0x0)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x457911)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_21_symbolic(self):
        ''' Instruction PMOVMSKB_21 
            Groups: sse2 
            0x45794b:	pmovmskb	edx, xmm5
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x45794b] = 'f'
        mem[0x45794c] = '\x0f'
        mem[0x45794d] = '\xd7'
        mem[0x45794e] = '\xd5'
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.RIP = 0x45794b
        cpu.XMM5 = cs.new_bitvec(128)
        cs.add(cpu.XMM5 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x45794b, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x45794c, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x45794d, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.read_int(0x45794e, 8)== ord('\xd5'))
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x45794f)
        condition = Operators.AND(condition, cpu.XMM5 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_3_symbolic(self):
        ''' Instruction PMOVMSKB_3 
            Groups: sse2 
            0x45796c:	pmovmskb	esi, xmm2
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x45796c] = 'f'
        mem[0x45796d] = '\x0f'
        mem[0x45796e] = '\xd7'
        mem[0x45796f] = '\xf2'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0xff00000000ff00000000ff00000000)
        cpu.RIP = 0x45796c
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x2f)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x45796c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x45796d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x45796e, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.read_int(0x45796f, 8)== ord('\xf2'))
        condition = Operators.AND(condition, cpu.XMM2 == 0xff00000000ff00000000ff00000000)
        condition = Operators.AND(condition, cpu.ESI == 0x4210)
        condition = Operators.AND(condition, cpu.RIP == 0x457970)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_4_symbolic(self):
        ''' Instruction PMOVMSKB_4 
            Groups: sse2 
            0x4183d4:	pmovmskb	edx, xmm12
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183d8] = '\xd4'
        mem[0x4183d4] = 'f'
        mem[0x4183d5] = 'A'
        mem[0x4183d6] = '\x0f'
        mem[0x4183d7] = '\xd7'
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x6b7810)
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0xff000000000000000000000000000000)
        cpu.RIP = 0x4183d4

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183d8, 8)== ord('\xd4'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d5, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d7, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.EDX == 0x8000)
        condition = Operators.AND(condition, cpu.XMM12 == 0xff000000000000000000000000000000)
        condition = Operators.AND(condition, cpu.RIP == 0x4183d9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_5_symbolic(self):
        ''' Instruction PMOVMSKB_5 
            Groups: sse2 
            0x418401:	pmovmskb	ecx, xmm11
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x418401] = 'f'
        mem[0x418402] = 'A'
        mem[0x418403] = '\x0f'
        mem[0x418404] = '\xd7'
        mem[0x418405] = '\xcb'
        cpu.XMM11 = cs.new_bitvec(128)
        cs.add(cpu.XMM11 == 0x0)
        cpu.RIP = 0x418401
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xdce)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x418401, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x418402, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x418403, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x418404, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.read_int(0x418405, 8)== ord('\xcb'))
        condition = Operators.AND(condition, cpu.XMM11 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x418406)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_6_symbolic(self):
        ''' Instruction PMOVMSKB_6 
            Groups: sse2 
            0x4183d4:	pmovmskb	edx, xmm12
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183d8] = '\xd4'
        mem[0x4183d4] = 'f'
        mem[0x4183d5] = 'A'
        mem[0x4183d6] = '\x0f'
        mem[0x4183d7] = '\xd7'
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0xff000000000000000000000000000000)
        cpu.RIP = 0x4183d4

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183d8, 8)== ord('\xd4'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d5, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d7, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.EDX == 0x8000)
        condition = Operators.AND(condition, cpu.XMM12 == 0xff000000000000000000000000000000)
        condition = Operators.AND(condition, cpu.RIP == 0x4183d9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_7_symbolic(self):
        ''' Instruction PMOVMSKB_7 
            Groups: sse2 
            0x4183d4:	pmovmskb	edx, xmm12
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183d8] = '\xd4'
        mem[0x4183d4] = 'f'
        mem[0x4183d5] = 'A'
        mem[0x4183d6] = '\x0f'
        mem[0x4183d7] = '\xd7'
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0x0)
        cpu.RIP = 0x4183d4

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183d8, 8)== ord('\xd4'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d5, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183d7, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.XMM12 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183d9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_8_symbolic(self):
        ''' Instruction PMOVMSKB_8 
            Groups: sse2 
            0x418401:	pmovmskb	ecx, xmm11
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x418401] = 'f'
        mem[0x418402] = 'A'
        mem[0x418403] = '\x0f'
        mem[0x418404] = '\xd7'
        mem[0x418405] = '\xcb'
        cpu.XMM11 = cs.new_bitvec(128)
        cs.add(cpu.XMM11 == 0xff00000000000000000000000000)
        cpu.RIP = 0x418401
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xd9e)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x418401, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x418402, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x418403, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x418404, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.read_int(0x418405, 8)== ord('\xcb'))
        condition = Operators.AND(condition, cpu.XMM11 == 0xff00000000000000000000000000)
        condition = Operators.AND(condition, cpu.RIP == 0x418406)
        condition = Operators.AND(condition, cpu.ECX == 0x2000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PMOVMSKB_9_symbolic(self):
        ''' Instruction PMOVMSKB_9 
            Groups: sse2 
            0x457982:	pmovmskb	esi, xmm4
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x457982] = 'f'
        mem[0x457983] = '\x0f'
        mem[0x457984] = '\xd7'
        mem[0x457985] = '\xf4'
        cpu.RIP = 0x457982
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x4210)
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 0xff000000000000000000ff0000000000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457982, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x457983, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x457984, 8)== ord('\xd7'))
        condition = Operators.AND(condition, cpu.read_int(0x457985, 8)== ord('\xf4'))
        condition = Operators.AND(condition, cpu.ESI == 0x8020)
        condition = Operators.AND(condition, cpu.RIP == 0x457986)
        condition = Operators.AND(condition, cpu.XMM4 == 0xff000000000000000000ff0000000000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_1_symbolic(self):
        ''' Instruction POP_1 
            Groups: mode64 
            0x411787:	pop	rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9e0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x91)
        mem[addr] = value
        mem[0x411787] = '['
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9d0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9d1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9d2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9d3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9d4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9d5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9d6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9d7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9d8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9d9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x98)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9da)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9db)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9dc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9dd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9de)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd9df)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda00)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffd9d8)
        cpu.RIP = 0x411787
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6b9898)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9e0, 8)== ord('\x91'))
        condition = Operators.AND(condition, cpu.read_int(0x411787, 8)== ord('['))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9d0, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9d1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9d2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9d3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9d4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9d5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9d6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9d7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9d8, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9d9, 8)== ord('\x98'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9da, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9db, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9dc, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9dd, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9de, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd9df, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RBX == 0x6b9840)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffd9e0)
        condition = Operators.AND(condition, cpu.RIP == 0x411788)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda00)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_10_symbolic(self):
        ''' Instruction POP_10 
            Groups: mode64 
            0x45c5b9:	pop	rbp
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045c000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8e8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8e9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8ea)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8eb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8ec)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8ed)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8ee)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8ef)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8f0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8f1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xc9)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8f2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8f3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8f4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8f5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8f6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8f7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8f8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x49)
        mem[addr] = value
        mem[0x45c5b9] = ']'
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffc8f0)
        cpu.RIP = 0x45c5b9
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffc8f0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8e8, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8e9, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8ea, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8eb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8ec, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8ed, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8ee, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8ef, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8f0, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8f1, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8f2, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8f3, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8f4, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8f5, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8f6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8f7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8f8, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x45c5b9, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffc8f8)
        condition = Operators.AND(condition, cpu.RIP == 0x45c5ba)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffc920)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_11_symbolic(self):
        ''' Instruction POP_11 
            Groups: mode64 
            0x4011b1:	pop	r12
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x4011b1] = 'A'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdae8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdae9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaea)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaeb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaec)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaed)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaee)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaef)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x12)
        mem[addr] = value
        mem[0x4011b2] = '\\'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x30)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdaf0)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x40)
        cpu.RIP = 0x4011b1
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdb10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf1, 8)== ord('\x12'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdae8, 8)== ord('\xd8'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdae9, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaea, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaeb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaec, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaed, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaee, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaef, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf0, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.read_int(0x4011b1, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4011b2, 8)== ord('\\'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf8, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf2, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.R12 == 0x401270)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdaf8)
        condition = Operators.AND(condition, cpu.RIP == 0x4011b3)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdb10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_12_symbolic(self):
        ''' Instruction POP_12 
            Groups: mode64 
            0x434254:	pop	rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda94)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda90)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda91)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda92)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda93)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x434254] = '['
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda95)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda96)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda97)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda98)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda99)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdab0)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda98)
        cpu.RIP = 0x434254
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6be000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa0, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda94, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda90, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda91, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda92, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda93, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x434254, 8)== ord('['))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda95, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda96, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda97, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda98, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda99, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9a, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RBX == 0x8)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdaa0)
        condition = Operators.AND(condition, cpu.RIP == 0x434255)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdab0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_13_symbolic(self):
        ''' Instruction POP_13 
            Groups: mode64 
            0x40dc99:	pop	rbp
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xb3)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaca)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdacb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdacc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdacd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdace)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdacf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdb)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6f)
        mem[addr] = value
        mem[0x40dc99] = ']'
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdad0)
        cpu.RIP = 0x40dc99
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdad0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac8, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac9, 8)== ord('\xb3'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaca, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdacb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdacc, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdacd, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdace, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdacf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad0, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad1, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad2, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad3, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad4, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad5, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad8, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x40dc99, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdad8)
        condition = Operators.AND(condition, cpu.RIP == 0x40dc9a)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdb00)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_14_symbolic(self):
        ''' Instruction POP_14 
            Groups: mode64 
            0x400745:	pop	r13
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x400745] = 'A'
        mem[0x400746] = ']'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdc)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaaa)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaab)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaac)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaad)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaae)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaaf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x28)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdc)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdab0)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x8000)
        cpu.RIP = 0x400745
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdac0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400745, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x400746, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa8, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa9, 8)== ord('\xdc'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaaa, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaab, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaac, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaad, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaae, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaaf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab0, 8)== ord('('))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab1, 8)== ord('\xdc'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab2, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab3, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab4, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab5, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab8, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdab8)
        condition = Operators.AND(condition, cpu.R13 == 0x7fffffffdc28)
        condition = Operators.AND(condition, cpu.RIP == 0x400747)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdac0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_15_symbolic(self):
        ''' Instruction POP_15 
            Groups: mode64 
            0x4011b7:	pop	r15
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb00)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb01)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb02)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb03)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb04)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb05)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb06)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb07)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb08)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb09)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb10)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        mem[0x4011b7] = 'A'
        mem[0x4011b8] = '_'
        cpu.R15 = cs.new_bitvec(64)
        cs.add(cpu.R15 == 0x880)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdb08)
        cpu.RIP = 0x4011b7
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdb10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb00, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb01, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb02, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb03, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb04, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb05, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb06, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb07, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb08, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb09, 8)== ord('\x8c'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0a, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb10, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x4011b7, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4011b8, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.R15 == 0x6b8c70)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdb10)
        condition = Operators.AND(condition, cpu.RIP == 0x4011b9)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdb10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_16_symbolic(self):
        ''' Instruction POP_16 
            Groups: mode64 
            0x4147b5:	pop	rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca15)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca10)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca11)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca12)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca13)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca14)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4147b5] = '['
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca16)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca17)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca19)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca1a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca1b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca1c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca1d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca1e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca1f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffca40)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffca18)
        cpu.RIP = 0x4147b5
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca20, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(0x4147b5, 8)== ord('['))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca10, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca11, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca12, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca13, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca14, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca15, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca16, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca17, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca18, 8)== ord('+'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca19, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca1a, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca1b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca1c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca1d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca1e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca1f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RBX == 0x2b)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffca20)
        condition = Operators.AND(condition, cpu.RIP == 0x4147b6)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffca40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_17_symbolic(self):
        ''' Instruction POP_17 
            Groups: mode64 
            0x41178e:	pop	r15
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd960)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd961)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd962)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd963)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd964)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd965)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd966)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd967)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd968)
        value = cs.new_bitvec(8)
        cs.add(value == 0xa0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd969)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd9)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd96a)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd96b)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd96c)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd96d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        mem[0x41178e] = 'A'
        mem[0x41178f] = '_'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd970)
        value = cs.new_bitvec(8)
        cs.add(value == 0x90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd96e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd96f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.R15 = cs.new_bitvec(64)
        cs.add(cpu.R15 == 0x6b9840)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffd968)
        cpu.RIP = 0x41178e
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffd970)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd960, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd961, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd962, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd963, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd964, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd965, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd966, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd967, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd968, 8)== ord('\xa0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd969, 8)== ord('\xd9'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd96a, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd96b, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd96c, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd96d, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x41178e, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x41178f, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd970, 8)== ord('\x90'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd96e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd96f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.R15 == 0x7fffffffd9a0)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffd970)
        condition = Operators.AND(condition, cpu.RIP == 0x411790)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffd970)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_18_symbolic(self):
        ''' Instruction POP_18 
            Groups: mode64 
            0x406e50:	pop	r13
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda80)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x406e50] = 'A'
        mem[0x406e51] = ']'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda70)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda71)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdc)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda72)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda73)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda74)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda75)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda76)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda77)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda78)
        value = cs.new_bitvec(8)
        cs.add(value == 0x28)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda79)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdc)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7a)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7b)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7c)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda78)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x494d07)
        cpu.RIP = 0x406e50
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda80, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda70, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda71, 8)== ord('\xdc'))
        condition = Operators.AND(condition, cpu.read_int(0x406e50, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x406e51, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda72, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda73, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda74, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda75, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda76, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda77, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda78, 8)== ord('('))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda79, 8)== ord('\xdc'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7a, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7b, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7c, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7d, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda80)
        condition = Operators.AND(condition, cpu.R13 == 0x7fffffffdc28)
        condition = Operators.AND(condition, cpu.RIP == 0x406e52)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_19_symbolic(self):
        ''' Instruction POP_19 
            Groups: mode64 
            0x4322de:	pop	rbp
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda28)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda29)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2a)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2b)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2c)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda30)
        value = cs.new_bitvec(8)
        cs.add(value == 0x90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda31)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda32)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda33)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda34)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda35)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda36)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda37)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda38)
        value = cs.new_bitvec(8)
        cs.add(value == 0x30)
        mem[addr] = value
        mem[0x4322de] = ']'
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda30)
        cpu.RIP = 0x4322de
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda30)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda28, 8)== ord('^'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda29, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2a, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2b, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2c, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2d, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda30, 8)== ord('\x90'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda31, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda32, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda33, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda34, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda35, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda36, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda37, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda38, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.read_int(0x4322de, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda38)
        condition = Operators.AND(condition, cpu.RIP == 0x4322df)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_2_symbolic(self):
        ''' Instruction POP_2 
            Groups: mode64 
            0x401323:	pop	rbp
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x401323] = ']'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb08)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb09)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb10)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb11)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdb)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb12)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb13)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb14)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb15)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb16)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb17)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdb10)
        cpu.RIP = 0x401323
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdb10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x401323, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb08, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb09, 8)== ord('\x8c'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0a, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb10, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb11, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb12, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb13, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb14, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb15, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb16, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb17, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb18, 8)== ord('\x80'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdb18)
        condition = Operators.AND(condition, cpu.RIP == 0x401324)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdbe0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_20_symbolic(self):
        ''' Instruction POP_20 
            Groups: mode64 
            0x4325d4:	pop	rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda60)
        value = cs.new_bitvec(8)
        cs.add(value == 0x90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda61)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda62)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda63)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda64)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda65)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda66)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda67)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda68)
        value = cs.new_bitvec(8)
        cs.add(value == 0xc0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda69)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda70)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        mem[0x4325d4] = '['
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda68)
        cpu.RIP = 0x4325d4
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0xf0b5ff)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda60, 8)== ord('\x90'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda61, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda62, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda63, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda64, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda65, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda66, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda67, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda68, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda69, 8)== ord('\xd4'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6a, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda70, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(0x4325d4, 8)== ord('['))
        condition = Operators.AND(condition, cpu.RBX == 0x6bd4c0)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda70)
        condition = Operators.AND(condition, cpu.RIP == 0x4325d5)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_21_symbolic(self):
        ''' Instruction POP_21 
            Groups: mode64 
            0x465d75:	pop	r12
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00465000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda80)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda81)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdc)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda82)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda83)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda84)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda85)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda86)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda87)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda88)
        value = cs.new_bitvec(8)
        cs.add(value == 0x28)
        mem[addr] = value
        mem[0x465d75] = 'A'
        mem[0x465d76] = '\\'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda78)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda79)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda80)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x6bf1d0)
        cpu.RIP = 0x465d75
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda80, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda81, 8)== ord('\xdc'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda82, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda83, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda84, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda85, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda86, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda87, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda88, 8)== ord('('))
        condition = Operators.AND(condition, cpu.read_int(0x465d75, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x465d76, 8)== ord('\\'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda78, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda79, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7a, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.R12 == 0x7fffffffdc08)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda88)
        condition = Operators.AND(condition, cpu.RIP == 0x465d77)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_3_symbolic(self):
        ''' Instruction POP_3 
            Groups: mode64 
            0x4135e0:	pop	rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        mem[0x4135e0] = '['
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca48)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca49)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca4a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca4b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca4c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca4d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca4e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca4f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca50)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca51)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca52)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca53)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca54)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca55)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca56)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca57)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca58)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffca60)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffca50)
        cpu.RIP = 0x4135e0
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x2b)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4135e0, 8)== ord('['))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca48, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca49, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca4a, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca4b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca4c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca4d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca4e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca4f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca50, 8)== ord('+'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca51, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca52, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca53, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca54, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca55, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca56, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca57, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca58, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.RBX == 0x2b)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffca58)
        condition = Operators.AND(condition, cpu.RIP == 0x4135e1)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffca60)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_4_symbolic(self):
        ''' Instruction POP_4 
            Groups: mode64 
            0x44268f:	pop	rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00442000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb00)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb01)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb02)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb03)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb04)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb05)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb06)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb07)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb08)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb09)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x44268f] = '['
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb10)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdb10)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdb08)
        cpu.RIP = 0x44268f
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffdb40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb00, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb01, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb02, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb03, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb04, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb05, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb06, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb07, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb08, 8)== ord('\xd8'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb09, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0a, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x44268f, 8)== ord('['))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb10, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RBX == 0x4002d8)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdb10)
        condition = Operators.AND(condition, cpu.RIP == 0x442690)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdb10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_5_symbolic(self):
        ''' Instruction POP_5 
            Groups: mode64 
            0x406e52:	pop	r14
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda80)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda81)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda82)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda83)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda84)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda85)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda86)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda87)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda88)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        mem[0x406e52] = 'A'
        mem[0x406e53] = '^'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda78)
        value = cs.new_bitvec(8)
        cs.add(value == 0x88)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda79)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf6)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x444c)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda80)
        cpu.RIP = 0x406e52
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda80, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda81, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda82, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda83, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda84, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda85, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda86, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda87, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda88, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x406e52, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x406e53, 8)== ord('^'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda78, 8)== ord('\x88'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda79, 8)== ord('\xf6'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7a, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.R14 == 0x0)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda88)
        condition = Operators.AND(condition, cpu.RIP == 0x406e54)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_6_symbolic(self):
        ''' Instruction POP_6 
            Groups: mode64 
            0x414275:	pop	r14
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda21)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda22)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda23)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda24)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda25)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda26)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda27)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda28)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda29)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda30)
        value = cs.new_bitvec(8)
        cs.add(value == 0x90)
        mem[addr] = value
        mem[0x414275] = 'A'
        mem[0x414276] = '^'
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x6bf200)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda28)
        cpu.RIP = 0x414275
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda30)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda20, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda21, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda22, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda23, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda24, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda25, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda26, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda27, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda28, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda29, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2a, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda30, 8)== ord('\x90'))
        condition = Operators.AND(condition, cpu.read_int(0x414275, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x414276, 8)== ord('^'))
        condition = Operators.AND(condition, cpu.R14 == 0x0)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda30)
        condition = Operators.AND(condition, cpu.RIP == 0x414277)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda30)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_7_symbolic(self):
        ''' Instruction POP_7 
            Groups: mode64 
            0x437926:	pop	rbp
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb00)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb01)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb02)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb03)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb04)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb05)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x437926] = ']'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb07)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb08)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb09)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdb)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0a)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0b)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0c)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb10)
        value = cs.new_bitvec(8)
        cs.add(value == 0xbe)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb06)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdb08)
        cpu.RIP = 0x437926
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdb08)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb00, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb01, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb02, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb03, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb04, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb05, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb06, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb07, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb08, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb09, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0a, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0b, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0c, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0d, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb10, 8)== ord('\xbe'))
        condition = Operators.AND(condition, cpu.read_int(0x437926, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdb10)
        condition = Operators.AND(condition, cpu.RIP == 0x437927)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdbe0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_8_symbolic(self):
        ''' Instruction POP_8 
            Groups: mode64 
            0x406e4d:	pop	rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda60)
        value = cs.new_bitvec(8)
        cs.add(value == 0x90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda61)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda62)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda63)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda64)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda65)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda66)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda67)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda68)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda69)
        value = cs.new_bitvec(8)
        cs.add(value == 0x53)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4a)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x406e4d] = '['
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda70)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda68)
        cpu.RIP = 0x406e4d
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda60, 8)== ord('\x90'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda61, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda62, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda63, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda64, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda65, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda66, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda67, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda68, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda69, 8)== ord('S'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6a, 8)== ord('J'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x406e4d, 8)== ord('['))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda70, 8)== ord('\xf4'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RBX == 0x4a5301)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda70)
        condition = Operators.AND(condition, cpu.RIP == 0x406e4e)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_POP_9_symbolic(self):
        ''' Instruction POP_9 
            Groups: mode64 
            0x406e4d:	pop	rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda60)
        value = cs.new_bitvec(8)
        cs.add(value == 0x90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda61)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda62)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda63)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda64)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda65)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda66)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda67)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda68)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda69)
        value = cs.new_bitvec(8)
        cs.add(value == 0x53)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4a)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x406e4d] = '['
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda70)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda68)
        cpu.RIP = 0x406e4d
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda60, 8)== ord('\x90'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda61, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda62, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda63, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda64, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda65, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda66, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda67, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda68, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda69, 8)== ord('S'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6a, 8)== ord('J'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x406e4d, 8)== ord('['))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda70, 8)== ord('\xf4'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RBX == 0x4a5301)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda70)
        condition = Operators.AND(condition, cpu.RIP == 0x406e4e)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PSHUFD_1_symbolic(self):
        ''' Instruction PSHUFD_1 
            Groups: sse2 
            0x4578ea:	pshufd	xmm1, xmm1, 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x4578ea] = 'f'
        mem[0x4578eb] = '\x0f'
        mem[0x4578ec] = 'p'
        mem[0x4578ed] = '\xc9'
        mem[0x4578ee] = '\x00'
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x2f2f2f2f)
        cpu.RIP = 0x4578ea

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4578ea, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4578eb, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4578ec, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.read_int(0x4578ed, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.read_int(0x4578ee, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.XMM1 == 0x2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f)
        condition = Operators.AND(condition, cpu.RIP == 0x4578ef)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUNPCKLBW_1_symbolic(self):
        ''' Instruction PUNPCKLBW_1 
            Groups: sse2 
            0x4578dc:	punpcklbw	xmm1, xmm1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x4578dc] = 'f'
        mem[0x4578dd] = '\x0f'
        mem[0x4578de] = '`'
        mem[0x4578df] = '\xc9'
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x2f)
        cpu.RIP = 0x4578dc

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4578dc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4578dd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4578de, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4578df, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.XMM1 == 0x2f2f)
        condition = Operators.AND(condition, cpu.RIP == 0x4578e0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUNPCKLWD_1_symbolic(self):
        ''' Instruction PUNPCKLWD_1 
            Groups: sse2 
            0x4578e6:	punpcklwd	xmm1, xmm1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x4578e8] = 'a'
        mem[0x4578e9] = '\xc9'
        mem[0x4578e6] = 'f'
        mem[0x4578e7] = '\x0f'
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x2f2f)
        cpu.RIP = 0x4578e6

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4578e8, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x4578e9, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.read_int(0x4578e6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4578e7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM1 == 0x2f2f2f2f)
        condition = Operators.AND(condition, cpu.RIP == 0x4578ea)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_1_symbolic(self):
        ''' Instruction PUSH_1 
            Groups: mode64 
            0x4008fe:	push	rsp
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdc00)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        mem[0x4008fe] = 'T'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdbf0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdbf1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdbf2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdbf3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdbf4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdbf5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdbf6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdbf7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdbf8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdbf9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdbfa)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdbfb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdbfc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdbfd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdbfe)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdbff)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdbf8)
        cpu.RIP = 0x4008fe
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdc00, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdbfe, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdbf0, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdbf1, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdbf2, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdbf3, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdbf4, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdbf5, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdbf6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdbf7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdbf8, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdbf9, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdbfa, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdbfb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdbfc, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdbfd, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4008fe, 8)== ord('T'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdbff, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdbf0)
        condition = Operators.AND(condition, cpu.RIP == 0x4008ff)
        condition = Operators.AND(condition, cpu.RBP == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_10_symbolic(self):
        ''' Instruction PUSH_10 
            Groups: mode64 
            0x413484:	push	r12
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca60)
        value = cs.new_bitvec(8)
        cs.add(value == 0x90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca61)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca62)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca63)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        mem[0x413484] = 'A'
        mem[0x413485] = 'T'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca66)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca67)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca68)
        value = cs.new_bitvec(8)
        cs.add(value == 0x9b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca5f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca59)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca58)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca64)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca5a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca5b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca5c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca5d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca5e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca65)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffca60)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x7fffffffdc08)
        cpu.RIP = 0x413484
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffca60)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca60, 8)== ord('\x90'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca61, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca62, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca63, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x413484, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x413485, 8)== ord('T'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca66, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca67, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca68, 8)== ord('\x9b'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca65, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca64, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca58, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca59, 8)== ord('\xdc'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca5a, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca5b, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca5c, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca5d, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca5e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca5f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.R12 == 0x7fffffffdc08)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffca58)
        condition = Operators.AND(condition, cpu.RIP == 0x413486)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffca60)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_11_symbolic(self):
        ''' Instruction PUSH_11 
            Groups: mode64 
            0x406dd6:	push	r14
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda80)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda81)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda82)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda83)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda84)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda85)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda86)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda87)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda88)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda89)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda90)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        mem[0x406dd6] = 'A'
        mem[0x406dd7] = 'V'
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x0)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda88)
        cpu.RIP = 0x406dd6
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda80, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda81, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda82, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda83, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda84, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda85, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda86, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda87, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda88, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda89, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8a, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda90, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x406dd6, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x406dd7, 8)== ord('V'))
        condition = Operators.AND(condition, cpu.R14 == 0x0)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda80)
        condition = Operators.AND(condition, cpu.RIP == 0x406dd8)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_12_symbolic(self):
        ''' Instruction PUSH_12 
            Groups: mode64 
            0x411652:	push	r13
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd960)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd961)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd962)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd963)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd964)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd965)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd966)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd967)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd968)
        value = cs.new_bitvec(8)
        cs.add(value == 0xa0)
        mem[addr] = value
        mem[0x411652] = 'A'
        mem[0x411653] = 'U'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd958)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd959)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd95a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd95b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd95c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd95d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd95e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffd95f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffd960)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x3c)
        cpu.RIP = 0x411652
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffd970)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd960, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd961, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd962, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd963, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd964, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd965, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd966, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd967, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd968, 8)== ord('\xa0'))
        condition = Operators.AND(condition, cpu.read_int(0x411652, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x411653, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd958, 8)== ord('<'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd959, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd95a, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd95b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd95c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd95d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd95e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffd95f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffd958)
        condition = Operators.AND(condition, cpu.R13 == 0x3c)
        condition = Operators.AND(condition, cpu.RIP == 0x411654)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffd970)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_13_symbolic(self):
        ''' Instruction PUSH_13 
            Groups: mode64 
            0x406ddc:	push	rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda68)
        value = cs.new_bitvec(8)
        cs.add(value == 0x36)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda69)
        value = cs.new_bitvec(8)
        cs.add(value == 0x34)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda70)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda71)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdc)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda72)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda73)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda74)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda75)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda76)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda77)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda78)
        value = cs.new_bitvec(8)
        cs.add(value == 0x28)
        mem[addr] = value
        mem[0x406ddc] = 'S'
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda70)
        cpu.RIP = 0x406ddc
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x3)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda68, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda69, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6a, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda70, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda71, 8)== ord('\xdc'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda72, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda73, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda74, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda75, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda76, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda77, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda78, 8)== ord('('))
        condition = Operators.AND(condition, cpu.read_int(0x406ddc, 8)== ord('S'))
        condition = Operators.AND(condition, cpu.RBX == 0x3)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda68)
        condition = Operators.AND(condition, cpu.RIP == 0x406ddd)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_14_symbolic(self):
        ''' Instruction PUSH_14 
            Groups: mode64 
            0x4321ee:	push	r13
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda21)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda22)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda23)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda24)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda25)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda26)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda27)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda28)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda29)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2a)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2b)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2c)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        mem[0x4321ee] = 'A'
        mem[0x4321ef] = 'U'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda30)
        value = cs.new_bitvec(8)
        cs.add(value == 0x90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda28)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x7fffffffda5f)
        cpu.RIP = 0x4321ee
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda30)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda20, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda21, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda22, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda23, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda24, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda25, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda26, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda27, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda28, 8)== ord('^'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda29, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2a, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2b, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2c, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2d, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda30, 8)== ord('\x90'))
        condition = Operators.AND(condition, cpu.read_int(0x4321ee, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4321ef, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda20)
        condition = Operators.AND(condition, cpu.R13 == 0x7fffffffda5f)
        condition = Operators.AND(condition, cpu.RIP == 0x4321f0)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda30)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_15_symbolic(self):
        ''' Instruction PUSH_15 
            Groups: mode64 
            0x41b194:	push	rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041b000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb08)
        value = cs.new_bitvec(8)
        cs.add(value == 0x78)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb09)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb10)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb11)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdb)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb12)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb13)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        mem[0x41b194] = 'S'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb15)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb16)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb17)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x83)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb14)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdb10)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdb10)
        cpu.RIP = 0x41b194
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x4002a8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb08, 8)== ord('\xa8'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb09, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0a, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb10, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb11, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb12, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb13, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x41b194, 8)== ord('S'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb15, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb16, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb17, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb18, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb14, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.RBX == 0x4002a8)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdb08)
        condition = Operators.AND(condition, cpu.RIP == 0x41b195)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdb10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_16_symbolic(self):
        ''' Instruction PUSH_16 
            Groups: mode64 
            0x400f78:	push	r13
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb00)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb01)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb02)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb03)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb04)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb05)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb06)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb07)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb08)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        mem[0x400f78] = 'A'
        mem[0x400f79] = 'U'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdafa)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdafb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdafc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdafd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdafe)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaff)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdb00)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x401330)
        cpu.RIP = 0x400f78
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdb10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb00, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb01, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb02, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb03, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb04, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb05, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb06, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb07, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb08, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf8, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf9, 8)== ord('\x13'))
        condition = Operators.AND(condition, cpu.read_int(0x400f78, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x400f79, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdafa, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdafb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdafc, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdafd, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdafe, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaff, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdaf8)
        condition = Operators.AND(condition, cpu.R13 == 0x401330)
        condition = Operators.AND(condition, cpu.RIP == 0x400f7a)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdb10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_17_symbolic(self):
        ''' Instruction PUSH_17 
            Groups: mode64 
            0x400967:	push	rbp
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdb)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x400967] = 'U'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xc)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x13)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaca)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdacc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdacd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdace)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdacf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdacb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdac8)
        cpu.RIP = 0x400967
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdb10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac0, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac1, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac2, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac3, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac4, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac5, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac8, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac9, 8)== ord('\x13'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaca, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdacb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdacc, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdacd, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdace, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdacf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad0, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(0x400967, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdac0)
        condition = Operators.AND(condition, cpu.RIP == 0x400968)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdb10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_18_symbolic(self):
        ''' Instruction PUSH_18 
            Groups: mode64 
            0x406ddc:	push	rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda68)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda69)
        value = cs.new_bitvec(8)
        cs.add(value == 0x53)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4a)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda70)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda71)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd2)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda72)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda73)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda74)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda75)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda76)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda77)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda78)
        value = cs.new_bitvec(8)
        cs.add(value == 0x88)
        mem[addr] = value
        mem[0x406ddc] = 'S'
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda70)
        cpu.RIP = 0x406ddc
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x4a5301)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda68, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda69, 8)== ord('S'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6a, 8)== ord('J'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda70, 8)== ord('\xf4'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda71, 8)== ord('\xd2'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda72, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda73, 8)== ord('\xf7'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda74, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda75, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda76, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda77, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda78, 8)== ord('\x88'))
        condition = Operators.AND(condition, cpu.read_int(0x406ddc, 8)== ord('S'))
        condition = Operators.AND(condition, cpu.RBX == 0x4a5301)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda68)
        condition = Operators.AND(condition, cpu.RIP == 0x406ddd)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_19_symbolic(self):
        ''' Instruction PUSH_19 
            Groups: mode64 
            0x462294:	push	r15
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda88)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda89)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8c)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda90)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda91)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda92)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda93)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        mem[0x462294] = 'A'
        mem[0x462295] = 'W'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda96)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda97)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda98)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda94)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda95)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        cpu.R15 = cs.new_bitvec(64)
        cs.add(cpu.R15 == 0x6b8c70)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda90)
        cpu.RIP = 0x462294
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda88, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda89, 8)== ord('\x8c'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8a, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda90, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda91, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda92, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda93, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x462294, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x462295, 8)== ord('W'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda96, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda97, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda98, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda94, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda95, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.R15 == 0x6b8c70)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda88)
        condition = Operators.AND(condition, cpu.RIP == 0x462296)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_2_symbolic(self):
        ''' Instruction PUSH_2 
            Groups: mode64 
            0x413480:	push	rbp
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x413480] = 'U'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda90)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda91)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda92)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda93)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda94)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda95)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda96)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda97)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda98)
        value = cs.new_bitvec(8)
        cs.add(value == 0x55)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda99)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda98)
        cpu.RIP = 0x413480
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdae0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x413480, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa0, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda90, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda91, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda92, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda93, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda94, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda95, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda96, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda97, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda98, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda99, 8)== ord('n'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda90)
        condition = Operators.AND(condition, cpu.RIP == 0x413481)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdae0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_20_symbolic(self):
        ''' Instruction PUSH_20 
            Groups: mode64 
            0x406dd4:	push	r15
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda88)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda89)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd2)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8a)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8b)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8c)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda90)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda91)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda92)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda93)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        mem[0x406dd4] = 'A'
        mem[0x406dd5] = 'W'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda96)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda97)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda98)
        value = cs.new_bitvec(8)
        cs.add(value == 0xaa)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda94)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda95)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        cpu.R15 = cs.new_bitvec(64)
        cs.add(cpu.R15 == 0x10)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda90)
        cpu.RIP = 0x406dd4
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda88, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda89, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8a, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda90, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda91, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda92, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda93, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x406dd4, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x406dd5, 8)== ord('W'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda96, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda97, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda98, 8)== ord('\xaa'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda94, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda95, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.R15 == 0x10)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda88)
        condition = Operators.AND(condition, cpu.RIP == 0x406dd6)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_21_symbolic(self):
        ''' Instruction PUSH_21 
            Groups: mode64 
            0x406dd6:	push	r14
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda80)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda81)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda82)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda83)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda84)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda85)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda86)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda87)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda88)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda89)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda8f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda90)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        mem[0x406dd6] = 'A'
        mem[0x406dd7] = 'V'
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x0)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda88)
        cpu.RIP = 0x406dd6
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda80, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda81, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda82, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda83, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda84, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda85, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda86, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda87, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda88, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda89, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8a, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda8f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda90, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x406dd6, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x406dd7, 8)== ord('V'))
        condition = Operators.AND(condition, cpu.R14 == 0x0)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda80)
        condition = Operators.AND(condition, cpu.RIP == 0x406dd8)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_3_symbolic(self):
        ''' Instruction PUSH_3 
            Groups: mode64 
            0x4321f0:	push	r12
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda21)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda22)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda23)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda24)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda25)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda26)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda27)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda28)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5e)
        mem[addr] = value
        mem[0x4321f0] = 'A'
        mem[0x4321f1] = 'T'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda19)
        value = cs.new_bitvec(8)
        cs.add(value == 0x98)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda1a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda1b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda1c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda1d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda1e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda1f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda20)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0xbc)
        cpu.RIP = 0x4321f0
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda30)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda20, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda21, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda22, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda23, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda24, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda25, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda26, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda27, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda28, 8)== ord('^'))
        condition = Operators.AND(condition, cpu.read_int(0x4321f0, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4321f1, 8)== ord('T'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda18, 8)== ord('\xbc'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda19, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda1a, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda1b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda1c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda1d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda1e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda1f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.R12 == 0xbc)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda18)
        condition = Operators.AND(condition, cpu.RIP == 0x4321f2)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda30)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_4_symbolic(self):
        ''' Instruction PUSH_4 
            Groups: mode64 
            0x442650:	push	rbp
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00442000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x442650] = 'U'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb10)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb11)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdb)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb12)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb13)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb14)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb15)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb16)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb17)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x95)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb19)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdb18)
        cpu.RIP = 0x442650
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdbe0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb20, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x442650, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb10, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb11, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb12, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb13, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb14, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb15, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb16, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb17, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb18, 8)== ord('\x95'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb19, 8)== ord('\r'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1a, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdb10)
        condition = Operators.AND(condition, cpu.RIP == 0x442651)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdbe0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_5_symbolic(self):
        ''' Instruction PUSH_5 
            Groups: mode64 
            0x407284:	push	r13
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00407000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x407284] = 'A'
        mem[0x407285] = 'U'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb08)
        value = cs.new_bitvec(8)
        cs.add(value == 0x30)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb09)
        value = cs.new_bitvec(8)
        cs.add(value == 0x13)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb0f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb10)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb11)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdb)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb12)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb13)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb14)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb15)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb16)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb17)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x51)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdb10)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x401330)
        cpu.RIP = 0x407284
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdb10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x407284, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x407285, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb08, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb09, 8)== ord('\x13'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0a, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb0f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb10, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb11, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb12, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb13, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb14, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb15, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb16, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb17, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb18, 8)== ord('Q'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdb08)
        condition = Operators.AND(condition, cpu.R13 == 0x401330)
        condition = Operators.AND(condition, cpu.RIP == 0x407286)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdb10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_6_symbolic(self):
        ''' Instruction PUSH_6 
            Groups: mode64 
            0x4341b8:	push	rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc908)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc909)
        value = cs.new_bitvec(8)
        cs.add(value == 0x98)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc90a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc90b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc90c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc90d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc90e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc90f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc910)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc911)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc912)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc913)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc914)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc915)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc916)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc917)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4341b8] = 'S'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc918)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffc920)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffc910)
        cpu.RIP = 0x4341b8
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6b9840)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4341b8, 8)== ord('S'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc908, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc909, 8)== ord('\x98'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc90a, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc90b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc90c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc90d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc90e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc90f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc910, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc911, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc912, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc913, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc914, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc915, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc916, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc917, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc918, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RBX == 0x6b9840)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffc908)
        condition = Operators.AND(condition, cpu.RIP == 0x4341b9)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffc920)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_7_symbolic(self):
        ''' Instruction PUSH_7 
            Groups: mode64 
            0x4324d8:	push	r13
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda80)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda81)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda82)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda83)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda84)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda85)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda86)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda87)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda88)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd8)
        mem[addr] = value
        mem[0x4324d8] = 'A'
        mem[0x4324d9] = 'U'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda78)
        value = cs.new_bitvec(8)
        cs.add(value == 0x88)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda79)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf6)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda7f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda80)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x7fffffffdc28)
        cpu.RIP = 0x4324d8
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda80, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda81, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda82, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda83, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda84, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda85, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda86, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda87, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda88, 8)== ord('\xd8'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda78, 8)== ord('('))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda79, 8)== ord('\xdc'))
        condition = Operators.AND(condition, cpu.read_int(0x4324d8, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4324d9, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7a, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7b, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7c, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7d, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda7f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda78)
        condition = Operators.AND(condition, cpu.R13 == 0x7fffffffdc28)
        condition = Operators.AND(condition, cpu.RIP == 0x4324da)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_8_symbolic(self):
        ''' Instruction PUSH_8 
            Groups: mode64 
            0x414654:	push	r15
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca40)
        value = cs.new_bitvec(8)
        cs.add(value == 0x60)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca41)
        value = cs.new_bitvec(8)
        cs.add(value == 0xca)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca42)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca43)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca44)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca45)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca46)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca47)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca48)
        value = cs.new_bitvec(8)
        cs.add(value == 0x60)
        mem[addr] = value
        mem[0x414654] = 'A'
        mem[0x414655] = 'W'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca38)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca39)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca3a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca3b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca3c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca3d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca3e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffca3f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.R15 = cs.new_bitvec(64)
        cs.add(cpu.R15 == 0x6b8c70)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffca40)
        cpu.RIP = 0x414654
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffca40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca40, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca41, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca42, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca43, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca44, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca45, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca46, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca47, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca48, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x414654, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x414655, 8)== ord('W'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca38, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca39, 8)== ord('\x8c'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca3a, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca3b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca3c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca3d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca3e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffca3f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.R15 == 0x6b8c70)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffca38)
        condition = Operators.AND(condition, cpu.RIP == 0x414656)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffca40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PUSH_9_symbolic(self):
        ''' Instruction PUSH_9 
            Groups: mode64 
            0x4321ee:	push	r13
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda21)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda22)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda23)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda24)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda25)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda26)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda27)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda28)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda29)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2a)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2b)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2c)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        mem[0x4321ee] = 'A'
        mem[0x4321ef] = 'U'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda30)
        value = cs.new_bitvec(8)
        cs.add(value == 0x90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda2f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda28)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x7fffffffda5f)
        cpu.RIP = 0x4321ee
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda30)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda20, 8)== ord('_'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda21, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda22, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda23, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda24, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda25, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda26, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda27, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda28, 8)== ord('^'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda29, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2a, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2b, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2c, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2d, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda2f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda30, 8)== ord('\x90'))
        condition = Operators.AND(condition, cpu.read_int(0x4321ee, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4321ef, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda20)
        condition = Operators.AND(condition, cpu.R13 == 0x7fffffffda5f)
        condition = Operators.AND(condition, cpu.RIP == 0x4321f0)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda30)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_1_symbolic(self):
        ''' Instruction PXOR_1 
            Groups: sse2 
            0x4183af:	pxor	xmm11, xmm11
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183b0] = 'E'
        mem[0x4183b1] = '\x0f'
        mem[0x4183b2] = '\xef'
        mem[0x4183b3] = '\xdb'
        mem[0x4183af] = 'f'
        cpu.XMM11 = cs.new_bitvec(128)
        cs.add(cpu.XMM11 == 0x0)
        cpu.RIP = 0x4183af

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183b0, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183b1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183b2, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183b3, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.read_int(0x4183af, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.XMM11 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183b4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_10_symbolic(self):
        ''' Instruction PXOR_10 
            Groups: sse2 
            0x4183aa:	pxor	xmm10, xmm10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183aa] = 'f'
        mem[0x4183ab] = 'E'
        mem[0x4183ac] = '\x0f'
        mem[0x4183ad] = '\xef'
        mem[0x4183ae] = '\xd2'
        cpu.XMM10 = cs.new_bitvec(128)
        cs.add(cpu.XMM10 == 0x0)
        cpu.RIP = 0x4183aa

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183aa, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ab, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ac, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ad, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ae, 8)== ord('\xd2'))
        condition = Operators.AND(condition, cpu.XMM10 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183af)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_11_symbolic(self):
        ''' Instruction PXOR_11 
            Groups: sse2 
            0x4183aa:	pxor	xmm10, xmm10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183aa] = 'f'
        mem[0x4183ab] = 'E'
        mem[0x4183ac] = '\x0f'
        mem[0x4183ad] = '\xef'
        mem[0x4183ae] = '\xd2'
        cpu.XMM10 = cs.new_bitvec(128)
        cs.add(cpu.XMM10 == 0x0)
        cpu.RIP = 0x4183aa

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183aa, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ab, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ac, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ad, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ae, 8)== ord('\xd2'))
        condition = Operators.AND(condition, cpu.XMM10 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183af)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_12_symbolic(self):
        ''' Instruction PXOR_12 
            Groups: sse2 
            0x4183a0:	pxor	xmm8, xmm8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183a0] = 'f'
        mem[0x4183a1] = 'E'
        mem[0x4183a2] = '\x0f'
        mem[0x4183a3] = '\xef'
        mem[0x4183a4] = '\xc0'
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0x0)
        cpu.RIP = 0x4183a0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183a0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a1, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a2, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a3, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a4, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.XMM8 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183a5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_13_symbolic(self):
        ''' Instruction PXOR_13 
            Groups: sse2 
            0x4183a0:	pxor	xmm8, xmm8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183a0] = 'f'
        mem[0x4183a1] = 'E'
        mem[0x4183a2] = '\x0f'
        mem[0x4183a3] = '\xef'
        mem[0x4183a4] = '\xc0'
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0x0)
        cpu.RIP = 0x4183a0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183a0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a1, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a2, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a3, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a4, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.XMM8 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183a5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_14_symbolic(self):
        ''' Instruction PXOR_14 
            Groups: sse2 
            0x4183a0:	pxor	xmm8, xmm8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183a0] = 'f'
        mem[0x4183a1] = 'E'
        mem[0x4183a2] = '\x0f'
        mem[0x4183a3] = '\xef'
        mem[0x4183a4] = '\xc0'
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0x0)
        cpu.RIP = 0x4183a0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183a0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a1, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a2, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a3, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a4, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.XMM8 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183a5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_15_symbolic(self):
        ''' Instruction PXOR_15 
            Groups: sse2 
            0x4183a5:	pxor	xmm9, xmm9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183a8] = '\xef'
        mem[0x4183a9] = '\xc9'
        mem[0x4183a5] = 'f'
        mem[0x4183a6] = 'E'
        mem[0x4183a7] = '\x0f'
        cpu.XMM9 = cs.new_bitvec(128)
        cs.add(cpu.XMM9 == 0xff000000000000000000000000000000)
        cpu.RIP = 0x4183a5

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183a8, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a9, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a5, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a6, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM9 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183aa)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_16_symbolic(self):
        ''' Instruction PXOR_16 
            Groups: sse2 
            0x4183a5:	pxor	xmm9, xmm9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183a8] = '\xef'
        mem[0x4183a9] = '\xc9'
        mem[0x4183a5] = 'f'
        mem[0x4183a6] = 'E'
        mem[0x4183a7] = '\x0f'
        cpu.XMM9 = cs.new_bitvec(128)
        cs.add(cpu.XMM9 == 0x0)
        cpu.RIP = 0x4183a5

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183a8, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a9, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a5, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a6, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM9 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183aa)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_17_symbolic(self):
        ''' Instruction PXOR_17 
            Groups: sse2 
            0x4183a0:	pxor	xmm8, xmm8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183a0] = 'f'
        mem[0x4183a1] = 'E'
        mem[0x4183a2] = '\x0f'
        mem[0x4183a3] = '\xef'
        mem[0x4183a4] = '\xc0'
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0x0)
        cpu.RIP = 0x4183a0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183a0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a1, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a2, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a3, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a4, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.XMM8 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183a5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_18_symbolic(self):
        ''' Instruction PXOR_18 
            Groups: sse2 
            0x4183a5:	pxor	xmm9, xmm9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183a8] = '\xef'
        mem[0x4183a9] = '\xc9'
        mem[0x4183a5] = 'f'
        mem[0x4183a6] = 'E'
        mem[0x4183a7] = '\x0f'
        cpu.XMM9 = cs.new_bitvec(128)
        cs.add(cpu.XMM9 == 0x0)
        cpu.RIP = 0x4183a5

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183a8, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a9, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a5, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a6, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM9 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183aa)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_19_symbolic(self):
        ''' Instruction PXOR_19 
            Groups: sse2 
            0x4183af:	pxor	xmm11, xmm11
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183b0] = 'E'
        mem[0x4183b1] = '\x0f'
        mem[0x4183b2] = '\xef'
        mem[0x4183b3] = '\xdb'
        mem[0x4183af] = 'f'
        cpu.XMM11 = cs.new_bitvec(128)
        cs.add(cpu.XMM11 == 0x0)
        cpu.RIP = 0x4183af

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183b0, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183b1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183b2, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183b3, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.read_int(0x4183af, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.XMM11 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183b4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_2_symbolic(self):
        ''' Instruction PXOR_2 
            Groups: sse2 
            0x4183a5:	pxor	xmm9, xmm9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183a8] = '\xef'
        mem[0x4183a9] = '\xc9'
        mem[0x4183a5] = 'f'
        mem[0x4183a6] = 'E'
        mem[0x4183a7] = '\x0f'
        cpu.XMM9 = cs.new_bitvec(128)
        cs.add(cpu.XMM9 == 0x0)
        cpu.RIP = 0x4183a5

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183a8, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a9, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a5, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a6, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM9 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183aa)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_20_symbolic(self):
        ''' Instruction PXOR_20 
            Groups: sse2 
            0x4183a5:	pxor	xmm9, xmm9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183a8] = '\xef'
        mem[0x4183a9] = '\xc9'
        mem[0x4183a5] = 'f'
        mem[0x4183a6] = 'E'
        mem[0x4183a7] = '\x0f'
        cpu.XMM9 = cs.new_bitvec(128)
        cs.add(cpu.XMM9 == 0x0)
        cpu.RIP = 0x4183a5

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183a8, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a9, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a5, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a6, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM9 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183aa)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_21_symbolic(self):
        ''' Instruction PXOR_21 
            Groups: sse2 
            0x4183aa:	pxor	xmm10, xmm10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183aa] = 'f'
        mem[0x4183ab] = 'E'
        mem[0x4183ac] = '\x0f'
        mem[0x4183ad] = '\xef'
        mem[0x4183ae] = '\xd2'
        cpu.XMM10 = cs.new_bitvec(128)
        cs.add(cpu.XMM10 == 0x0)
        cpu.RIP = 0x4183aa

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183aa, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ab, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ac, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ad, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ae, 8)== ord('\xd2'))
        condition = Operators.AND(condition, cpu.XMM10 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183af)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_3_symbolic(self):
        ''' Instruction PXOR_3 
            Groups: sse2 
            0x4183a5:	pxor	xmm9, xmm9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183a8] = '\xef'
        mem[0x4183a9] = '\xc9'
        mem[0x4183a5] = 'f'
        mem[0x4183a6] = 'E'
        mem[0x4183a7] = '\x0f'
        cpu.XMM9 = cs.new_bitvec(128)
        cs.add(cpu.XMM9 == 0x0)
        cpu.RIP = 0x4183a5

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183a8, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a9, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a5, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a6, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM9 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183aa)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_4_symbolic(self):
        ''' Instruction PXOR_4 
            Groups: sse2 
            0x4183aa:	pxor	xmm10, xmm10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183aa] = 'f'
        mem[0x4183ab] = 'E'
        mem[0x4183ac] = '\x0f'
        mem[0x4183ad] = '\xef'
        mem[0x4183ae] = '\xd2'
        cpu.XMM10 = cs.new_bitvec(128)
        cs.add(cpu.XMM10 == 0x0)
        cpu.RIP = 0x4183aa

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183aa, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ab, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ac, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ad, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ae, 8)== ord('\xd2'))
        condition = Operators.AND(condition, cpu.XMM10 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183af)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_5_symbolic(self):
        ''' Instruction PXOR_5 
            Groups: sse2 
            0x4183aa:	pxor	xmm10, xmm10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183aa] = 'f'
        mem[0x4183ab] = 'E'
        mem[0x4183ac] = '\x0f'
        mem[0x4183ad] = '\xef'
        mem[0x4183ae] = '\xd2'
        cpu.XMM10 = cs.new_bitvec(128)
        cs.add(cpu.XMM10 == 0xff000000000000000000000000000000)
        cpu.RIP = 0x4183aa

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183aa, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ab, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ac, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ad, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ae, 8)== ord('\xd2'))
        condition = Operators.AND(condition, cpu.XMM10 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183af)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_6_symbolic(self):
        ''' Instruction PXOR_6 
            Groups: sse2 
            0x4183a5:	pxor	xmm9, xmm9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183a8] = '\xef'
        mem[0x4183a9] = '\xc9'
        mem[0x4183a5] = 'f'
        mem[0x4183a6] = 'E'
        mem[0x4183a7] = '\x0f'
        cpu.XMM9 = cs.new_bitvec(128)
        cs.add(cpu.XMM9 == 0x0)
        cpu.RIP = 0x4183a5

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183a8, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a9, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a5, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a6, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM9 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183aa)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_7_symbolic(self):
        ''' Instruction PXOR_7 
            Groups: sse2 
            0x4183a0:	pxor	xmm8, xmm8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183a0] = 'f'
        mem[0x4183a1] = 'E'
        mem[0x4183a2] = '\x0f'
        mem[0x4183a3] = '\xef'
        mem[0x4183a4] = '\xc0'
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0x0)
        cpu.RIP = 0x4183a0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183a0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a1, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a2, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a3, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183a4, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.XMM8 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183a5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_8_symbolic(self):
        ''' Instruction PXOR_8 
            Groups: sse2 
            0x4183aa:	pxor	xmm10, xmm10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183aa] = 'f'
        mem[0x4183ab] = 'E'
        mem[0x4183ac] = '\x0f'
        mem[0x4183ad] = '\xef'
        mem[0x4183ae] = '\xd2'
        cpu.XMM10 = cs.new_bitvec(128)
        cs.add(cpu.XMM10 == 0x0)
        cpu.RIP = 0x4183aa

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183aa, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ab, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ac, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ad, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ae, 8)== ord('\xd2'))
        condition = Operators.AND(condition, cpu.XMM10 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183af)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PXOR_9_symbolic(self):
        ''' Instruction PXOR_9 
            Groups: sse2 
            0x4183aa:	pxor	xmm10, xmm10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x4183aa] = 'f'
        mem[0x4183ab] = 'E'
        mem[0x4183ac] = '\x0f'
        mem[0x4183ad] = '\xef'
        mem[0x4183ae] = '\xd2'
        cpu.XMM10 = cs.new_bitvec(128)
        cs.add(cpu.XMM10 == 0x0)
        cpu.RIP = 0x4183aa

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183aa, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ab, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ac, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ad, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x4183ae, 8)== ord('\xd2'))
        condition = Operators.AND(condition, cpu.XMM10 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183af)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_1_symbolic(self):
        ''' Instruction RET_1 
            Groups: ret, mode64 
            0x43761d:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdae0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdae1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdae2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdae3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdae4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdae5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdae6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdae7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdae8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x12)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdae9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x78)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaea)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaeb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaec)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaed)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaee)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaef)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaf0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        mem[0x43761d] = '\xc3'
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdae8)
        cpu.RIP = 0x43761d
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdb10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdae0, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdae1, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdae2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdae3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdae4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdae5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdae6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdae7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdae8, 8)== ord('\x12'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdae9, 8)== ord('x'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaea, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaeb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaec, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaed, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaee, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaef, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaf0, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.read_int(0x43761d, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdaf0)
        condition = Operators.AND(condition, cpu.RIP == 0x437812)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdb10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_10_symbolic(self):
        ''' Instruction RET_10 
            Groups: ret, mode64 
            0x475260:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00475000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x475260] = '\xc3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6d)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x13)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaba)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdabb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdabc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdabd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdabe)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdabf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdab8)
        cpu.RIP = 0x475260
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdad0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac0, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x475260, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab0, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab1, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab2, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab3, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab4, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab5, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab8, 8)== ord('m'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab9, 8)== ord('\x13'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaba, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdabb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdabc, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdabd, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdabe, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdabf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdac0)
        condition = Operators.AND(condition, cpu.RIP == 0x40136d)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdad0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_11_symbolic(self):
        ''' Instruction RET_11 
            Groups: ret, mode64 
            0x41a85f:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041a000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x41a85f] = '\xc3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb10)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb11)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdb)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb12)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb13)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb14)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb15)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb16)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb17)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x83)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb19)
        value = cs.new_bitvec(8)
        cs.add(value == 0xc)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdb18)
        cpu.RIP = 0x41a85f
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdbe0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb20, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x41a85f, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb10, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb11, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb12, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb13, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb14, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb15, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb16, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb17, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb18, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb19, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1a, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdb20)
        condition = Operators.AND(condition, cpu.RIP == 0x400c83)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdbe0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_12_symbolic(self):
        ''' Instruction RET_12 
            Groups: ret, mode64 
            0x415daa:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00415000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x415daa] = '\xc3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc930)
        value = cs.new_bitvec(8)
        cs.add(value == 0xa0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc931)
        value = cs.new_bitvec(8)
        cs.add(value == 0xc9)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc932)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc933)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc934)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc935)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc936)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc937)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc938)
        value = cs.new_bitvec(8)
        cs.add(value == 0xc7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc939)
        value = cs.new_bitvec(8)
        cs.add(value == 0x13)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc93a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc93b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc93c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc93d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc93e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc93f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffc938)
        cpu.RIP = 0x415daa
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffc9a0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc940, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x415daa, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc930, 8)== ord('\xa0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc931, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc932, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc933, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc934, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc935, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc936, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc937, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc938, 8)== ord('\xc7'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc939, 8)== ord('\x13'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc93a, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc93b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc93c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc93d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc93e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc93f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffc940)
        condition = Operators.AND(condition, cpu.RIP == 0x4113c7)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffc9a0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_13_symbolic(self):
        ''' Instruction RET_13 
            Groups: ret, mode64 
            0x40dc9a:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdae0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdada)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdb)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6f)
        mem[addr] = value
        mem[0x40dc9a] = '\xc3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdadb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdadc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdadd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdade)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdadf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdad8)
        cpu.RIP = 0x40dc9a
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdb00)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdae0, 8)== ord('\xd8'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdada, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad0, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad1, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad2, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad3, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad4, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad5, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad8, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad9, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x40dc9a, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdadb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdadc, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdadd, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdade, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdadf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdae0)
        condition = Operators.AND(condition, cpu.RIP == 0x406f6f)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdb00)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_14_symbolic(self):
        ''' Instruction RET_14 
            Groups: ret, mode64 
            0x442691:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00442000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x442691] = '\xc3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb10)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb11)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdb)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb12)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb13)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb14)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb15)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb16)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb17)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x95)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb19)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdb18)
        cpu.RIP = 0x442691
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdbe0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb20, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x442691, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb10, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb11, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb12, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb13, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb14, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb15, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb16, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb17, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb18, 8)== ord('\x95'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb19, 8)== ord('\r'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1a, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdb20)
        condition = Operators.AND(condition, cpu.RIP == 0x400d95)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdbe0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_15_symbolic(self):
        ''' Instruction RET_15 
            Groups: ret, mode64 
            0x4322df:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda40)
        value = cs.new_bitvec(8)
        cs.add(value == 0x60)
        mem[addr] = value
        mem[0x4322df] = '\xc3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda30)
        value = cs.new_bitvec(8)
        cs.add(value == 0x90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda31)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda32)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda33)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda34)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda35)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda36)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda37)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda38)
        value = cs.new_bitvec(8)
        cs.add(value == 0x49)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda39)
        value = cs.new_bitvec(8)
        cs.add(value == 0x25)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda3a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda3b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda3c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda3d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda3e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda3f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda38)
        cpu.RIP = 0x4322df
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda40, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda3f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda30, 8)== ord('\x90'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda31, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda32, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda33, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda34, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda35, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda36, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda37, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda38, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda39, 8)== ord('%'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda3a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda3b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda3c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda3d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda3e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4322df, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda40)
        condition = Operators.AND(condition, cpu.RIP == 0x432549)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_16_symbolic(self):
        ''' Instruction RET_16 
            Groups: ret, mode64 
            0x4072e5:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00407000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x4072e5] = '\xc3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb10)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb11)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdb)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb12)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb13)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb14)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb15)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb16)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb17)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x51)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb19)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdb18)
        cpu.RIP = 0x4072e5
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdbe0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb20, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4072e5, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb10, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb11, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb12, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb13, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb14, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb15, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb16, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb17, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb18, 8)== ord('Q'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb19, 8)== ord('\r'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1a, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdb20)
        condition = Operators.AND(condition, cpu.RIP == 0x400d51)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdbe0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_17_symbolic(self):
        ''' Instruction RET_17 
            Groups: ret, mode64 
            0x410f1e:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9a0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9a1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xca)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9a2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9a3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9a4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9a5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9a6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9a7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9a8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xb4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9a9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9aa)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9ab)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9ac)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9ad)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9ae)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9af)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc9b0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x410f1e] = '\xc3'
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffc9a8)
        cpu.RIP = 0x410f1e
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffca40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9a0, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9a1, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9a2, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9a3, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9a4, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9a5, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9a6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9a7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9a8, 8)== ord('\xb4'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9a9, 8)== ord('\x1f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9aa, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9ab, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9ac, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9ad, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9ae, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9af, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc9b0, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x410f1e, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffc9b0)
        condition = Operators.AND(condition, cpu.RIP == 0x411fb4)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffca40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_18_symbolic(self):
        ''' Instruction RET_18 
            Groups: ret, mode64 
            0x401324:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x401324] = '\xc3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb10)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb11)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdb)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb12)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb13)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb14)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb15)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb16)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb17)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb19)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdb1f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdb18)
        cpu.RIP = 0x401324
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdbe0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb20, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x401324, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb10, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb11, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb12, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb13, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb14, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb15, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb16, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb17, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb18, 8)== ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb19, 8)== ord('\r'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1a, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdb1f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdb20)
        condition = Operators.AND(condition, cpu.RIP == 0x400d80)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdbe0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_19_symbolic(self):
        ''' Instruction RET_19 
            Groups: ret, mode64 
            0x420eab:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00420000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        mem[0x420eab] = '\xf3'
        mem[0x420eac] = '\xc3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda90)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda91)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda92)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda93)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda94)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda95)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda96)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda97)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda98)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda99)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda98)
        cpu.RIP = 0x420eab
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdae0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa0, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x420eab, 8)== ord('\xf3'))
        condition = Operators.AND(condition, cpu.read_int(0x420eac, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda90, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda91, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda92, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda93, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda94, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda95, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda96, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda97, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda98, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda99, 8)== ord('n'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdaa0)
        condition = Operators.AND(condition, cpu.RIP == 0x436e70)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdae0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_2_symbolic(self):
        ''' Instruction RET_2 
            Groups: ret, mode64 
            0x4322df:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda40)
        value = cs.new_bitvec(8)
        cs.add(value == 0x60)
        mem[addr] = value
        mem[0x4322df] = '\xc3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda30)
        value = cs.new_bitvec(8)
        cs.add(value == 0x90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda31)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda32)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda33)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda34)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda35)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda36)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda37)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda38)
        value = cs.new_bitvec(8)
        cs.add(value == 0x30)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda39)
        value = cs.new_bitvec(8)
        cs.add(value == 0x25)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda3a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda3b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda3c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda3d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda3e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda3f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda38)
        cpu.RIP = 0x4322df
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda40, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda3f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda30, 8)== ord('\x90'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda31, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda32, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda33, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda34, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda35, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda36, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda37, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda38, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda39, 8)== ord('%'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda3a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda3b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda3c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda3d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda3e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4322df, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda40)
        condition = Operators.AND(condition, cpu.RIP == 0x432530)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_20_symbolic(self):
        ''' Instruction RET_20 
            Groups: ret, mode64 
            0x45c5ba:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045c000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffc000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc900)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8fa)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8f0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8f1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xc9)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8f2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8f3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8f4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8f5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8f6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8f7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8f8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x49)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8f9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x42)
        mem[addr] = value
        mem[0x45c5ba] = '\xc3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8fb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8fc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8fd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8fe)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffc8ff)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffc8f8)
        cpu.RIP = 0x45c5ba
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffc920)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc900, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8fd, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8f0, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8f1, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8f2, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8f3, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8f4, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8f5, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8f6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8f7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8f8, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8f9, 8)== ord('B'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8fa, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8fb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8fc, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x45c5ba, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8fe, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffc8ff, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffc900)
        condition = Operators.AND(condition, cpu.RIP == 0x434249)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffc920)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_21_symbolic(self):
        ''' Instruction RET_21 
            Groups: ret, mode64 
            0x406e57:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        mem[0x406e57] = '\xc3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda90)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda91)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda92)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda93)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda94)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda95)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda96)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda97)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda98)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf6)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda99)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda98)
        cpu.RIP = 0x406e57
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdae0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa0, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda97, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda90, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda91, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda92, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda93, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda94, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda95, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda96, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x406e57, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda98, 8)== ord('\xf6'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda99, 8)== ord('n'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdaa0)
        condition = Operators.AND(condition, cpu.RIP == 0x436ef6)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdae0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_3_symbolic(self):
        ''' Instruction RET_3 
            Groups: ret, mode64 
            0x4325de:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        mem[0x4325de] = '\xc3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda90)
        value = cs.new_bitvec(8)
        cs.add(value == 0xc0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda91)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda92)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda93)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda94)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda95)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda96)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda97)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda98)
        value = cs.new_bitvec(8)
        cs.add(value == 0x58)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda99)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda98)
        cpu.RIP = 0x4325de
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdac0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa0, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(0x4325de, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda90, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda91, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda92, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda93, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda94, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda95, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda96, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda97, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda98, 8)== ord('X'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda99, 8)== ord('\x06'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9a, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdaa0)
        condition = Operators.AND(condition, cpu.RIP == 0x400658)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdac0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_4_symbolic(self):
        ''' Instruction RET_4 
            Groups: ret, mode64 
            0x4183e0:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        mem[0x4183e0] = '\xc3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda90)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda91)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda92)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda93)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda94)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda95)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda96)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda97)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda98)
        value = cs.new_bitvec(8)
        cs.add(value == 0x49)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda99)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6e)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda98)
        cpu.RIP = 0x4183e0
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdae0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa0, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x4183e0, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda90, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda91, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda92, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda93, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda94, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda95, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda96, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda97, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda98, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda99, 8)== ord('n'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdaa0)
        condition = Operators.AND(condition, cpu.RIP == 0x436e49)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdae0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_5_symbolic(self):
        ''' Instruction RET_5 
            Groups: ret, mode64 
            0x48fe78:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0048f000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5d)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6b)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xee)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x9)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaaa)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaab)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaac)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaad)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaae)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaaf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd0)
        mem[addr] = value
        mem[0x48fe78] = '\xc3'
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdaa8)
        cpu.RIP = 0x48fe78
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdab0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa0, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa1, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa2, 8)== ord('k'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa4, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa8, 8)== ord('\xee'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa9, 8)== ord('\t'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaaa, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaab, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaac, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaad, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaae, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaaf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab0, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.read_int(0x48fe78, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdab0)
        condition = Operators.AND(condition, cpu.RIP == 0x4009ee)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdab0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_6_symbolic(self):
        ''' Instruction RET_6 
            Groups: ret, mode64 
            0x41357b:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda60)
        value = cs.new_bitvec(8)
        cs.add(value == 0x90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda61)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda62)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda63)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda64)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda65)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda66)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda67)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda68)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6d)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda69)
        value = cs.new_bitvec(8)
        cs.add(value == 0xf8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda6f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda70)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem[0x41357b] = '\xc3'
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda68)
        cpu.RIP = 0x41357b
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda90)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda60, 8)== ord('\x90'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda61, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda62, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda63, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda64, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda65, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda66, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda67, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda68, 8)== ord('m'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda69, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6a, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda6f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda70, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(0x41357b, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffda70)
        condition = Operators.AND(condition, cpu.RIP == 0x45f86d)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_7_symbolic(self):
        ''' Instruction RET_7 
            Groups: ret, mode64 
            0x406e57:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        mem[0x406e57] = '\xc3'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda90)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda91)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda92)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda93)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda94)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda95)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda96)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda97)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda98)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe5)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda99)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda9f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda98)
        cpu.RIP = 0x406e57
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdae0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa0, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda97, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda90, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda91, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda92, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda93, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda94, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda95, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda96, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x406e57, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda98, 8)== ord('\xe5'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda99, 8)== ord('o'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9b, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9e, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda9f, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdaa0)
        condition = Operators.AND(condition, cpu.RIP == 0x436fe5)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdae0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_8_symbolic(self):
        ''' Instruction RET_8 
            Groups: ret, mode64 
            0x4579bc:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xdc)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x57)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdac9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x55)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaca)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdacb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdacc)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdacd)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdace)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdacf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdad0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        mem[0x4579bc] = '\xc3'
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdac8)
        cpu.RIP = 0x4579bc
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdae0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac0, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac1, 8)== ord('\xdc'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac2, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac3, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac4, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac5, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac8, 8)== ord('W'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdac9, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaca, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdacb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdacc, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdacd, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdace, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdacf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdad0, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(0x4579bc, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdad0)
        condition = Operators.AND(condition, cpu.RIP == 0x435557)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdae0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_RET_9_symbolic(self):
        ''' Instruction RET_9 
            Groups: ret, mode64 
            0x400951:	ret	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xb0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xda)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xff)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7f)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaa9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x9)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaaa)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaab)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaac)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaad)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaae)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdaaf)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdab0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xd0)
        mem[addr] = value
        mem[0x400951] = '\xc3'
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdaa8)
        cpu.RIP = 0x400951
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffdab0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa0, 8)== ord('\xb0'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa1, 8)== ord('\xda'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa2, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa3, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa4, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa5, 8)== ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa6, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa7, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa8, 8)== ord('\xd8'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaa9, 8)== ord('\t'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaaa, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaab, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaac, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaad, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaae, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdaaf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdab0, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.read_int(0x400951, 8)== ord('\xc3'))
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffdab0)
        condition = Operators.AND(condition, cpu.RIP == 0x4009d8)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffdab0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ROL_1_symbolic(self):
        ''' Instruction ROL_1 
            Groups:  
            0x4072ca:	rol	rdi, 0x11
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00407000, 0x1000, 'rwx')
        mem[0x4072ca] = 'H'
        mem[0x4072cb] = '\xc1'
        mem[0x4072cc] = '\xc7'
        mem[0x4072cd] = '\x11'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0xa53abb12c2478cae)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4072ca

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4072ca, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4072cb, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x4072cc, 8)== ord('\xc7'))
        condition = Operators.AND(condition, cpu.read_int(0x4072cd, 8)== ord('\x11'))
        condition = Operators.AND(condition, cpu.RDI == 0x7625848f195d4a75)
        condition = Operators.AND(condition, cpu.RIP == 0x4072ce)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ROL_2_symbolic(self):
        ''' Instruction ROL_2 
            Groups:  
            0x44263a:	rol	rax, 0x11
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00442000, 0x1000, 'rwx')
        mem[0x44263a] = 'H'
        mem[0x44263b] = '\xc1'
        mem[0x44263c] = '\xc0'
        mem[0x44263d] = '\x11'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x44263a
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0xa53abb12c247920b)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x44263a, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x44263b, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x44263c, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.read_int(0x44263d, 8)== ord('\x11'))
        condition = Operators.AND(condition, cpu.RAX == 0x7625848f24174a75)
        condition = Operators.AND(condition, cpu.RIP == 0x44263e)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ROL_3_symbolic(self):
        ''' Instruction ROL_3 
            Groups:  
            0x442625:	rol	rdx, 0x11
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00442000, 0x1000, 'rwx')
        mem[0x442628] = '\x11'
        mem[0x442625] = 'H'
        mem[0x442626] = '\xc1'
        mem[0x442627] = '\xc2'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x442625
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0xa53ac4ed3df844be)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x442628, 8)== ord('\x11'))
        condition = Operators.AND(condition, cpu.read_int(0x442625, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x442626, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x442627, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.RDX == 0x89da7bf0897d4a75)
        condition = Operators.AND(condition, cpu.RIP == 0x442629)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ROL_4_symbolic(self):
        ''' Instruction ROL_4 
            Groups:  
            0x4425ff:	rol	rax, 0x11
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00442000, 0x1000, 'rwx')
        mem[0x442600] = '\xc1'
        mem[0x442601] = '\xc0'
        mem[0x442602] = '\x11'
        mem[0x4425ff] = 'H'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4425ff
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0xa53ac4ed3df8447e)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x442600, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x442601, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.read_int(0x442602, 8)== ord('\x11'))
        condition = Operators.AND(condition, cpu.read_int(0x4425ff, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.RAX == 0x89da7bf088fd4a75)
        condition = Operators.AND(condition, cpu.RIP == 0x442603)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_ROR_1_symbolic(self):
        ''' Instruction ROR_1 
            Groups:  
            0x406fc3:	ror	rax, 0x11
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406fc3] = 'H'
        mem[0x406fc4] = '\xc1'
        mem[0x406fc5] = '\xc8'
        mem[0x406fc6] = '\x11'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x406fc3
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x7625848f195d4a75)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406fc3, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x406fc4, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x406fc5, 8)== ord('\xc8'))
        condition = Operators.AND(condition, cpu.read_int(0x406fc6, 8)== ord('\x11'))
        condition = Operators.AND(condition, cpu.RAX == 0xa53abb12c2478cae)
        condition = Operators.AND(condition, cpu.RIP == 0x406fc7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SAR_1_symbolic(self):
        ''' Instruction SAR_1 
            Groups:  
            0x432218:	sar	r8d, 0x1f
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432218] = 'A'
        mem[0x432219] = '\xc1'
        mem[0x43221a] = '\xf8'
        mem[0x43221b] = '\x1f'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432218
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 0x9)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432218, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x432219, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x43221a, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.read_int(0x43221b, 8)== ord('\x1f'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x43221c)
        condition = Operators.AND(condition, cpu.R8D == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SAR_10_symbolic(self):
        ''' Instruction SAR_10 
            Groups:  
            0x40135b:	sar	rbx, 3
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x40135b] = 'H'
        mem[0x40135c] = '\xc1'
        mem[0x40135d] = '\xfb'
        mem[0x40135e] = '\x03'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x10)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40135b
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40135b, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x40135c, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x40135d, 8)== ord('\xfb'))
        condition = Operators.AND(condition, cpu.read_int(0x40135e, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.RBX == 0x2)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40135f)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SAR_11_symbolic(self):
        ''' Instruction SAR_11 
            Groups:  
            0x418422:	sar	rdx, cl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x418422] = 'H'
        mem[0x418423] = '\xd3'
        mem[0x418424] = '\xfa'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xe)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x418422
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x2000800080000000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x418422, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x418423, 8)== ord('\xd3'))
        condition = Operators.AND(condition, cpu.read_int(0x418424, 8)== ord('\xfa'))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.CL == 0xe)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x418425)
        condition = Operators.AND(condition, cpu.RDX == 0x800200020000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SAR_12_symbolic(self):
        ''' Instruction SAR_12 
            Groups:  
            0x400983:	sar	rsi, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400983] = 'H'
        mem[0x400984] = '\xd1'
        mem[0x400985] = '\xfe'
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x0)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400983
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400983, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x400984, 8)== ord('\xd1'))
        condition = Operators.AND(condition, cpu.read_int(0x400985, 8)== ord('\xfe'))
        condition = Operators.AND(condition, cpu.RSI == 0x0)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400986)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SAR_13_symbolic(self):
        ''' Instruction SAR_13 
            Groups:  
            0x4012ec:	sar	r14, 3
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x4012ec] = 'I'
        mem[0x4012ed] = '\xc1'
        mem[0x4012ee] = '\xfe'
        mem[0x4012ef] = '\x03'
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x10)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4012ec
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4012ec, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x4012ed, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x4012ee, 8)== ord('\xfe'))
        condition = Operators.AND(condition, cpu.read_int(0x4012ef, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.R14 == 0x2)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4012f0)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SAR_14_symbolic(self):
        ''' Instruction SAR_14 
            Groups:  
            0x400724:	sar	rax, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400724] = 'H'
        mem[0x400725] = '\xd1'
        mem[0x400726] = '\xf8'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400724
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0xc0000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400724, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x400725, 8)== ord('\xd1'))
        condition = Operators.AND(condition, cpu.read_int(0x400726, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400727)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x60000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SAR_15_symbolic(self):
        ''' Instruction SAR_15 
            Groups:  
            0x432218:	sar	r8d, 0x1f
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432218] = 'A'
        mem[0x432219] = '\xc1'
        mem[0x43221a] = '\xf8'
        mem[0x43221b] = '\x1f'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432218
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 0x9)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432218, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x432219, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x43221a, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.read_int(0x43221b, 8)== ord('\x1f'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x43221c)
        condition = Operators.AND(condition, cpu.R8D == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SAR_16_symbolic(self):
        ''' Instruction SAR_16 
            Groups:  
            0x4006ef:	sar	rax, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006f0] = '\xd1'
        mem[0x4006f1] = '\xf8'
        mem[0x4006ef] = 'H'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006ef
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x8000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006f0, 8)== ord('\xd1'))
        condition = Operators.AND(condition, cpu.read_int(0x4006f1, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ef, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006f2)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x4000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SAR_2_symbolic(self):
        ''' Instruction SAR_2 
            Groups:  
            0x43714b:	sar	ecx, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x43714b] = '\xd1'
        mem[0x43714c] = '\xf9'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x43714b
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xdffffdea)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43714b, 8)== ord('\xd1'))
        condition = Operators.AND(condition, cpu.read_int(0x43714c, 8)== ord('\xf9'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x43714d)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xeffffef5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SAR_3_symbolic(self):
        ''' Instruction SAR_3 
            Groups:  
            0x400703:	sar	rax, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400703] = 'H'
        mem[0x400704] = '\xd1'
        mem[0x400705] = '\xf8'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400703
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x8000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400703, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x400704, 8)== ord('\xd1'))
        condition = Operators.AND(condition, cpu.read_int(0x400705, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400706)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x4000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SAR_4_symbolic(self):
        ''' Instruction SAR_4 
            Groups:  
            0x400738:	sar	rax, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400738] = 'H'
        mem[0x400739] = '\xd1'
        mem[0x40073a] = '\xf8'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400738
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0xc0000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400738, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x400739, 8)== ord('\xd1'))
        condition = Operators.AND(condition, cpu.read_int(0x40073a, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40073b)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x60000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SAR_5_symbolic(self):
        ''' Instruction SAR_5 
            Groups:  
            0x432218:	sar	r8d, 0x1f
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432218] = 'A'
        mem[0x432219] = '\xc1'
        mem[0x43221a] = '\xf8'
        mem[0x43221b] = '\x1f'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432218
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 0x3)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432218, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x432219, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x43221a, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.read_int(0x43221b, 8)== ord('\x1f'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x43221c)
        condition = Operators.AND(condition, cpu.R8D == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SAR_6_symbolic(self):
        ''' Instruction SAR_6 
            Groups:  
            0x400975:	sar	rsi, 3
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400978] = '\x03'
        mem[0x400975] = 'H'
        mem[0x400976] = '\xc1'
        mem[0x400977] = '\xfe'
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x0)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400975
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400978, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(0x400975, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x400976, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x400977, 8)== ord('\xfe'))
        condition = Operators.AND(condition, cpu.RSI == 0x0)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400979)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SAR_7_symbolic(self):
        ''' Instruction SAR_7 
            Groups:  
            0x432218:	sar	r8d, 0x1f
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432218] = 'A'
        mem[0x432219] = '\xc1'
        mem[0x43221a] = '\xf8'
        mem[0x43221b] = '\x1f'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432218
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 0x3)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432218, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x432219, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x43221a, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.read_int(0x43221b, 8)== ord('\x1f'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x43221c)
        condition = Operators.AND(condition, cpu.R8D == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SAR_8_symbolic(self):
        ''' Instruction SAR_8 
            Groups:  
            0x4012a9:	sar	r14, 3
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x4012a9] = 'I'
        mem[0x4012aa] = '\xc1'
        mem[0x4012ab] = '\xfe'
        mem[0x4012ac] = '\x03'
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x0)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4012a9
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4012a9, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x4012aa, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x4012ab, 8)== ord('\xfe'))
        condition = Operators.AND(condition, cpu.read_int(0x4012ac, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.R14 == 0x0)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4012ad)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SAR_9_symbolic(self):
        ''' Instruction SAR_9 
            Groups:  
            0x418422:	sar	rdx, cl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x418422] = 'H'
        mem[0x418423] = '\xd3'
        mem[0x418424] = '\xfa'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xe)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x418422
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0xfe0040000000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x418422, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x418423, 8)== ord('\xd3'))
        condition = Operators.AND(condition, cpu.read_int(0x418424, 8)== ord('\xfa'))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.CL == 0xe)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x418425)
        condition = Operators.AND(condition, cpu.RDX == 0x3f8010000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETB_1_symbolic(self):
        ''' Instruction SETB_1 
            Groups:  
            0x4341fa:	setb	al
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x4341fa] = '\x0f'
        mem[0x4341fb] = '\x92'
        mem[0x4341fc] = '\xc0'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4341fa
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0xc0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4341fa, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4341fb, 8)== ord('\x92'))
        condition = Operators.AND(condition, cpu.read_int(0x4341fc, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.AL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4341fd)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETB_2_symbolic(self):
        ''' Instruction SETB_2 
            Groups:  
            0x4341fa:	setb	al
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x4341fa] = '\x0f'
        mem[0x4341fb] = '\x92'
        mem[0x4341fc] = '\xc0'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4341fa
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4341fa, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4341fb, 8)== ord('\x92'))
        condition = Operators.AND(condition, cpu.read_int(0x4341fc, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.AL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4341fd)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETB_3_symbolic(self):
        ''' Instruction SETB_3 
            Groups:  
            0x4341fa:	setb	al
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x4341fa] = '\x0f'
        mem[0x4341fb] = '\x92'
        mem[0x4341fc] = '\xc0'
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4341fa
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0xc0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4341fa, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4341fb, 8)== ord('\x92'))
        condition = Operators.AND(condition, cpu.read_int(0x4341fc, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.AL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4341fd)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_1_symbolic(self):
        ''' Instruction SETE_1 
            Groups:  
            0x400866:	sete	dl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400868] = '\xc2'
        mem[0x400866] = '\x0f'
        mem[0x400867] = '\x94'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x2)
        cpu.RIP = 0x400866

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400868, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.read_int(0x400866, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400867, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.DL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x400869)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_10_symbolic(self):
        ''' Instruction SETE_10 
            Groups:  
            0x4323de:	sete	r13b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4323e0] = '\x94'
        mem[0x4323e1] = '\xc5'
        mem[0x4323de] = 'A'
        mem[0x4323df] = '\x0f'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R13B = cs.new_bitvec(8)
        cs.add(cpu.R13B == 0x0)
        cpu.RIP = 0x4323de

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4323e0, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(0x4323e1, 8)== ord('\xc5'))
        condition = Operators.AND(condition, cpu.read_int(0x4323de, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4323df, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.R13B == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4323e2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_11_symbolic(self):
        ''' Instruction SETE_11 
            Groups:  
            0x4323de:	sete	r13b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4323e0] = '\x94'
        mem[0x4323e1] = '\xc5'
        mem[0x4323de] = 'A'
        mem[0x4323df] = '\x0f'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R13B = cs.new_bitvec(8)
        cs.add(cpu.R13B == 0x1)
        cpu.RIP = 0x4323de

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4323e0, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(0x4323e1, 8)== ord('\xc5'))
        condition = Operators.AND(condition, cpu.read_int(0x4323de, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4323df, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.R13B == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4323e2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_12_symbolic(self):
        ''' Instruction SETE_12 
            Groups:  
            0x432356:	sete	dl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432358] = '\xc2'
        mem[0x432356] = '\x0f'
        mem[0x432357] = '\x94'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x0)
        cpu.RIP = 0x432356

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432358, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.read_int(0x432356, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x432357, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.DL == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x432359)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_13_symbolic(self):
        ''' Instruction SETE_13 
            Groups:  
            0x432356:	sete	dl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432358] = '\xc2'
        mem[0x432356] = '\x0f'
        mem[0x432357] = '\x94'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x0)
        cpu.RIP = 0x432356

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432358, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.read_int(0x432356, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x432357, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.DL == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x432359)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_14_symbolic(self):
        ''' Instruction SETE_14 
            Groups:  
            0x437899:	sete	dil
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x437899] = '@'
        mem[0x43789a] = '\x0f'
        mem[0x43789b] = '\x94'
        mem[0x43789c] = '\xc7'
        cpu.DIL = cs.new_bitvec(8)
        cs.add(cpu.DIL == 0xe8)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x437899

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x437899, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x43789a, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x43789b, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(0x43789c, 8)== ord('\xc7'))
        condition = Operators.AND(condition, cpu.DIL == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x43789d)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_15_symbolic(self):
        ''' Instruction SETE_15 
            Groups:  
            0x4323e5:	sete	r14b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4323e8] = '\xc6'
        mem[0x4323e5] = 'A'
        mem[0x4323e6] = '\x0f'
        mem[0x4323e7] = '\x94'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R14B = cs.new_bitvec(8)
        cs.add(cpu.R14B == 0x5e)
        cpu.RIP = 0x4323e5

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4323e8, 8)== ord('\xc6'))
        condition = Operators.AND(condition, cpu.read_int(0x4323e5, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4323e6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4323e7, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.R14B == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4323e9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_16_symbolic(self):
        ''' Instruction SETE_16 
            Groups:  
            0x4323e5:	sete	r14b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4323e8] = '\xc6'
        mem[0x4323e5] = 'A'
        mem[0x4323e6] = '\x0f'
        mem[0x4323e7] = '\x94'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R14B = cs.new_bitvec(8)
        cs.add(cpu.R14B == 0x0)
        cpu.RIP = 0x4323e5

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4323e8, 8)== ord('\xc6'))
        condition = Operators.AND(condition, cpu.read_int(0x4323e5, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4323e6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4323e7, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.R14B == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4323e9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_17_symbolic(self):
        ''' Instruction SETE_17 
            Groups:  
            0x4323f6:	sete	dl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4323f8] = '\xc2'
        mem[0x4323f6] = '\x0f'
        mem[0x4323f7] = '\x94'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x2)
        cpu.RIP = 0x4323f6

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4323f8, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.read_int(0x4323f6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4323f7, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.DL == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x4323f9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_18_symbolic(self):
        ''' Instruction SETE_18 
            Groups:  
            0x436f34:	sete	dl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436f34] = '\x0f'
        mem[0x436f35] = '\x94'
        mem[0x436f36] = '\xc2'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x0)
        cpu.RIP = 0x436f34

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436f34, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x436f35, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(0x436f36, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.DL == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x436f37)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_19_symbolic(self):
        ''' Instruction SETE_19 
            Groups:  
            0x43235d:	sete	r10b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432360] = '\xc2'
        mem[0x43235d] = 'A'
        mem[0x43235e] = '\x0f'
        mem[0x43235f] = '\x94'
        cpu.R10B = cs.new_bitvec(8)
        cs.add(cpu.R10B == 0xff)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x43235d

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432360, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.read_int(0x43235d, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x43235e, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x43235f, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.R10B == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x432361)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_2_symbolic(self):
        ''' Instruction SETE_2 
            Groups:  
            0x400872:	sete	al
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400872] = '\x0f'
        mem[0x400873] = '\x94'
        mem[0x400874] = '\xc0'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x6)
        cpu.RIP = 0x400872

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400872, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400873, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(0x400874, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.AL == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x400875)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_20_symbolic(self):
        ''' Instruction SETE_20 
            Groups:  
            0x43235d:	sete	r10b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432360] = '\xc2'
        mem[0x43235d] = 'A'
        mem[0x43235e] = '\x0f'
        mem[0x43235f] = '\x94'
        cpu.R10B = cs.new_bitvec(8)
        cs.add(cpu.R10B == 0xff)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x43235d

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432360, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.read_int(0x43235d, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x43235e, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x43235f, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.R10B == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x432361)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_21_symbolic(self):
        ''' Instruction SETE_21 
            Groups:  
            0x4323e5:	sete	r14b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4323e8] = '\xc6'
        mem[0x4323e5] = 'A'
        mem[0x4323e6] = '\x0f'
        mem[0x4323e7] = '\x94'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R14B = cs.new_bitvec(8)
        cs.add(cpu.R14B == 0x0)
        cpu.RIP = 0x4323e5

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4323e8, 8)== ord('\xc6'))
        condition = Operators.AND(condition, cpu.read_int(0x4323e5, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4323e6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4323e7, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.R14B == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4323e9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_3_symbolic(self):
        ''' Instruction SETE_3 
            Groups:  
            0x43237f:	sete	sil
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432380] = '\x0f'
        mem[0x432381] = '\x94'
        mem[0x432382] = '\xc6'
        mem[0x43237f] = '@'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x43237f
        cpu.SIL = cs.new_bitvec(8)
        cs.add(cpu.SIL == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432380, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x432381, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(0x432382, 8)== ord('\xc6'))
        condition = Operators.AND(condition, cpu.read_int(0x43237f, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.RIP == 0x432383)
        condition = Operators.AND(condition, cpu.SIL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_4_symbolic(self):
        ''' Instruction SETE_4 
            Groups:  
            0x432364:	sete	r8b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432364] = 'A'
        mem[0x432365] = '\x0f'
        mem[0x432366] = '\x94'
        mem[0x432367] = '\xc0'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.R8B = cs.new_bitvec(8)
        cs.add(cpu.R8B == 0x0)
        cpu.RIP = 0x432364

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432364, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x432365, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x432366, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(0x432367, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.R8B == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x432368)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_5_symbolic(self):
        ''' Instruction SETE_5 
            Groups:  
            0x432364:	sete	r8b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432364] = 'A'
        mem[0x432365] = '\x0f'
        mem[0x432366] = '\x94'
        mem[0x432367] = '\xc0'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.R8B = cs.new_bitvec(8)
        cs.add(cpu.R8B == 0x0)
        cpu.RIP = 0x432364

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432364, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x432365, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x432366, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(0x432367, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.R8B == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x432368)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_6_symbolic(self):
        ''' Instruction SETE_6 
            Groups:  
            0x432396:	sete	r12b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432398] = '\x94'
        mem[0x432399] = '\xc4'
        mem[0x432396] = 'A'
        mem[0x432397] = '\x0f'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R12B = cs.new_bitvec(8)
        cs.add(cpu.R12B == 0xc2)
        cpu.RIP = 0x432396

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432398, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(0x432399, 8)== ord('\xc4'))
        condition = Operators.AND(condition, cpu.read_int(0x432396, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x432397, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.R12B == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x43239a)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_7_symbolic(self):
        ''' Instruction SETE_7 
            Groups:  
            0x436eec:	sete	dl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436eec] = '\x0f'
        mem[0x436eed] = '\x94'
        mem[0x436eee] = '\xc2'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x0)
        cpu.RIP = 0x436eec

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436eec, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x436eed, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(0x436eee, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.DL == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x436eef)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_8_symbolic(self):
        ''' Instruction SETE_8 
            Groups:  
            0x4323f6:	sete	dl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4323f8] = '\xc2'
        mem[0x4323f6] = '\x0f'
        mem[0x4323f7] = '\x94'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x3)
        cpu.RIP = 0x4323f6

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4323f8, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.read_int(0x4323f6, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4323f7, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.DL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4323f9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETE_9_symbolic(self):
        ''' Instruction SETE_9 
            Groups:  
            0x4323de:	sete	r13b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4323e0] = '\x94'
        mem[0x4323e1] = '\xc5'
        mem[0x4323de] = 'A'
        mem[0x4323df] = '\x0f'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.R13B = cs.new_bitvec(8)
        cs.add(cpu.R13B == 0x5f)
        cpu.RIP = 0x4323de

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4323e0, 8)== ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(0x4323e1, 8)== ord('\xc5'))
        condition = Operators.AND(condition, cpu.read_int(0x4323de, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x4323df, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.R13B == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x4323e2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETNE_1_symbolic(self):
        ''' Instruction SETNE_1 
            Groups:  
            0x412009:	setne	cl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x412009] = '\x0f'
        mem[0x41200a] = '\x95'
        mem[0x41200b] = '\xc1'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x412009
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x412009, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x41200a, 8)== ord('\x95'))
        condition = Operators.AND(condition, cpu.read_int(0x41200b, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.RIP == 0x41200c)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETNE_10_symbolic(self):
        ''' Instruction SETNE_10 
            Groups:  
            0x412009:	setne	cl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x412009] = '\x0f'
        mem[0x41200a] = '\x95'
        mem[0x41200b] = '\xc1'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x412009
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x412009, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x41200a, 8)== ord('\x95'))
        condition = Operators.AND(condition, cpu.read_int(0x41200b, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.RIP == 0x41200c)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETNE_2_symbolic(self):
        ''' Instruction SETNE_2 
            Groups:  
            0x436a20:	setne	dl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436a20] = '\x0f'
        mem[0x436a21] = '\x95'
        mem[0x436a22] = '\xc2'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x0)
        cpu.RIP = 0x436a20

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436a20, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x436a21, 8)== ord('\x95'))
        condition = Operators.AND(condition, cpu.read_int(0x436a22, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.DL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x436a23)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETNE_3_symbolic(self):
        ''' Instruction SETNE_3 
            Groups:  
            0x412009:	setne	cl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x412009] = '\x0f'
        mem[0x41200a] = '\x95'
        mem[0x41200b] = '\xc1'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x412009
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x412009, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x41200a, 8)== ord('\x95'))
        condition = Operators.AND(condition, cpu.read_int(0x41200b, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.RIP == 0x41200c)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETNE_4_symbolic(self):
        ''' Instruction SETNE_4 
            Groups:  
            0x410df5:	setne	cl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, 'rwx')
        mem[0x410df5] = '\x0f'
        mem[0x410df6] = '\x95'
        mem[0x410df7] = '\xc1'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x410df5
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x5)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x410df5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x410df6, 8)== ord('\x95'))
        condition = Operators.AND(condition, cpu.read_int(0x410df7, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.RIP == 0x410df8)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETNE_5_symbolic(self):
        ''' Instruction SETNE_5 
            Groups:  
            0x412009:	setne	cl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x412009] = '\x0f'
        mem[0x41200a] = '\x95'
        mem[0x41200b] = '\xc1'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x412009
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x412009, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x41200a, 8)== ord('\x95'))
        condition = Operators.AND(condition, cpu.read_int(0x41200b, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.RIP == 0x41200c)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETNE_6_symbolic(self):
        ''' Instruction SETNE_6 
            Groups:  
            0x410eeb:	setne	cl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, 'rwx')
        mem[0x410eeb] = '\x0f'
        mem[0x410eec] = '\x95'
        mem[0x410eed] = '\xc1'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x410eeb
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x410eeb, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x410eec, 8)== ord('\x95'))
        condition = Operators.AND(condition, cpu.read_int(0x410eed, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.RIP == 0x410eee)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETNE_7_symbolic(self):
        ''' Instruction SETNE_7 
            Groups:  
            0x436f10:	setne	dl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436f10] = '\x0f'
        mem[0x436f11] = '\x95'
        mem[0x436f12] = '\xc2'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x0)
        cpu.RIP = 0x436f10

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436f10, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x436f11, 8)== ord('\x95'))
        condition = Operators.AND(condition, cpu.read_int(0x436f12, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.DL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x436f13)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETNE_8_symbolic(self):
        ''' Instruction SETNE_8 
            Groups:  
            0x412009:	setne	cl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x412009] = '\x0f'
        mem[0x41200a] = '\x95'
        mem[0x41200b] = '\xc1'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x412009
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x412009, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x41200a, 8)== ord('\x95'))
        condition = Operators.AND(condition, cpu.read_int(0x41200b, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.RIP == 0x41200c)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SETNE_9_symbolic(self):
        ''' Instruction SETNE_9 
            Groups:  
            0x463ed2:	setne	byte ptr [rbp - 0x48]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00463000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffda18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x30)
        mem[addr] = value
        mem[0x463ed2] = '\x0f'
        mem[0x463ed3] = '\x95'
        mem[0x463ed4] = 'E'
        mem[0x463ed5] = '\xb8'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x463ed2
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffda60)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffda18, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x463ed2, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x463ed3, 8)== ord('\x95'))
        condition = Operators.AND(condition, cpu.read_int(0x463ed4, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x463ed5, 8)== ord('\xb8'))
        condition = Operators.AND(condition, cpu.RIP == 0x463ed6)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffda60)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_1_symbolic(self):
        ''' Instruction SHL_1 
            Groups:  
            0x4376f7:	shl	eax, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x4376f8] = '\xe0'
        mem[0x4376f9] = '\x08'
        mem[0x4376f7] = '\xc1'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4376f7
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x404)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4376f8, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x4376f9, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(0x4376f7, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4376fa)
        condition = Operators.AND(condition, cpu.EAX == 0x40400)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_10_symbolic(self):
        ''' Instruction SHL_10 
            Groups:  
            0x418406:	shl	rdx, 0x10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x418408] = '\xe2'
        mem[0x418409] = '\x10'
        mem[0x418406] = 'H'
        mem[0x418407] = '\xc1'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x8000)
        cpu.RIP = 0x418406
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x418408, 8)== ord('\xe2'))
        condition = Operators.AND(condition, cpu.read_int(0x418409, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x418406, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x418407, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41840a)
        condition = Operators.AND(condition, cpu.RDX == 0x80000000)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_11_symbolic(self):
        ''' Instruction SHL_11 
            Groups:  
            0x462426:	shl	rax, 3
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, 'rwx')
        mem[0x462428] = '\xe0'
        mem[0x462429] = '\x03'
        mem[0x462426] = 'H'
        mem[0x462427] = '\xc1'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x462426
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x462428, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x462429, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(0x462426, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x462427, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x46242a)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_12_symbolic(self):
        ''' Instruction SHL_12 
            Groups:  
            0x418406:	shl	rdx, 0x10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x418408] = '\xe2'
        mem[0x418409] = '\x10'
        mem[0x418406] = 'H'
        mem[0x418407] = '\xc1'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x4000)
        cpu.RIP = 0x418406
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x418408, 8)== ord('\xe2'))
        condition = Operators.AND(condition, cpu.read_int(0x418409, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x418406, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x418407, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41840a)
        condition = Operators.AND(condition, cpu.RDX == 0x40000000)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_13_symbolic(self):
        ''' Instruction SHL_13 
            Groups:  
            0x41840a:	shl	rcx, 0x10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x41840a] = 'H'
        mem[0x41840b] = '\xc1'
        mem[0x41840c] = '\xe1'
        mem[0x41840d] = '\x10'
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x2000)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x41840a
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41840a, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x41840b, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x41840c, 8)== ord('\xe1'))
        condition = Operators.AND(condition, cpu.read_int(0x41840d, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.RCX == 0x20000000)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41840e)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_14_symbolic(self):
        ''' Instruction SHL_14 
            Groups:  
            0x41201b:	shl	rcx, 2
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x41201b] = 'H'
        mem[0x41201c] = '\xc1'
        mem[0x41201d] = '\xe1'
        mem[0x41201e] = '\x02'
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x41201b
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41201b, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x41201c, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x41201d, 8)== ord('\xe1'))
        condition = Operators.AND(condition, cpu.read_int(0x41201e, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.RCX == 0x0)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41201f)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_15_symbolic(self):
        ''' Instruction SHL_15 
            Groups:  
            0x411b78:	shl	eax, cl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411b78] = '\xd3'
        mem[0x411b79] = '\xe0'
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x5)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411b78
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411b78, 8)== ord('\xd3'))
        condition = Operators.AND(condition, cpu.read_int(0x411b79, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.CL == 0x5)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x411b7a)
        condition = Operators.AND(condition, cpu.EAX == 0x20)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_16_symbolic(self):
        ''' Instruction SHL_16 
            Groups:  
            0x45795f:	shl	rdx, 0x10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x457960] = '\xc1'
        mem[0x457961] = '\xe2'
        mem[0x457962] = '\x10'
        mem[0x45795f] = 'H'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RIP = 0x45795f
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457960, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x457961, 8)== ord('\xe2'))
        condition = Operators.AND(condition, cpu.read_int(0x457962, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x45795f, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x457963)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_17_symbolic(self):
        ''' Instruction SHL_17 
            Groups:  
            0x41201b:	shl	rcx, 2
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, 'rwx')
        mem[0x41201b] = 'H'
        mem[0x41201c] = '\xc1'
        mem[0x41201d] = '\xe1'
        mem[0x41201e] = '\x02'
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x41201b
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41201b, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x41201c, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x41201d, 8)== ord('\xe1'))
        condition = Operators.AND(condition, cpu.read_int(0x41201e, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.RCX == 0x0)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41201f)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_18_symbolic(self):
        ''' Instruction SHL_18 
            Groups:  
            0x411b78:	shl	eax, cl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411b78] = '\xd3'
        mem[0x411b79] = '\xe0'
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x3)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411b78
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411b78, 8)== ord('\xd3'))
        condition = Operators.AND(condition, cpu.read_int(0x411b79, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.CL == 0x3)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x411b7a)
        condition = Operators.AND(condition, cpu.EAX == 0x8)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_19_symbolic(self):
        ''' Instruction SHL_19 
            Groups:  
            0x418411:	shl	rcx, 0x20
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, 'rwx')
        mem[0x418411] = 'H'
        mem[0x418412] = '\xc1'
        mem[0x418413] = '\xe1'
        mem[0x418414] = ' '
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x20008000)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x418411
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x418411, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x418412, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x418413, 8)== ord('\xe1'))
        condition = Operators.AND(condition, cpu.read_int(0x418414, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.RCX == 0x2000800000000000)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x418415)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_2_symbolic(self):
        ''' Instruction SHL_2 
            Groups:  
            0x45798a:	shl	rsi, 0x10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x45798a] = 'H'
        mem[0x45798b] = '\xc1'
        mem[0x45798c] = '\xe6'
        mem[0x45798d] = '\x10'
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x8020)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x45798a
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x45798a, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x45798b, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x45798c, 8)== ord('\xe6'))
        condition = Operators.AND(condition, cpu.read_int(0x45798d, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.RSI == 0x80200000)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x45798e)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_20_symbolic(self):
        ''' Instruction SHL_20 
            Groups:  
            0x457970:	shl	r8, 0x20
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, 'rwx')
        mem[0x457970] = 'I'
        mem[0x457971] = '\xc1'
        mem[0x457972] = '\xe0'
        mem[0x457973] = ' '
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x420)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x457970
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457970, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x457971, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x457972, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x457973, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.R8 == 0x42000000000)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x457974)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_21_symbolic(self):
        ''' Instruction SHL_21 
            Groups:  
            0x436d28:	shl	rax, 4
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436d28] = 'H'
        mem[0x436d29] = '\xc1'
        mem[0x436d2a] = '\xe0'
        mem[0x436d2b] = '\x04'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x436d28
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436d28, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436d29, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x436d2a, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x436d2b, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x436d2c)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_3_symbolic(self):
        ''' Instruction SHL_3 
            Groups:  
            0x436c09:	shl	rdx, 4
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436c09] = 'H'
        mem[0x436c0a] = '\xc1'
        mem[0x436c0b] = '\xe2'
        mem[0x436c0c] = '\x04'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x1)
        cpu.RIP = 0x436c09
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436c09, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436c0a, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x436c0b, 8)== ord('\xe2'))
        condition = Operators.AND(condition, cpu.read_int(0x436c0c, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x436c0d)
        condition = Operators.AND(condition, cpu.RDX == 0x10)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_4_symbolic(self):
        ''' Instruction SHL_4 
            Groups:  
            0x406f07:	shl	rdx, 5
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406f08] = '\xc1'
        mem[0x406f09] = '\xe2'
        mem[0x406f0a] = '\x05'
        mem[0x406f07] = 'H'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RIP = 0x406f07
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406f08, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x406f09, 8)== ord('\xe2'))
        condition = Operators.AND(condition, cpu.read_int(0x406f0a, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.read_int(0x406f07, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406f0b)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_5_symbolic(self):
        ''' Instruction SHL_5 
            Groups:  
            0x411b78:	shl	eax, cl
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411b78] = '\xd3'
        mem[0x411b79] = '\xe0'
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x43)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411b78
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411b78, 8)== ord('\xd3'))
        condition = Operators.AND(condition, cpu.read_int(0x411b79, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.CL == 0x43)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x411b7a)
        condition = Operators.AND(condition, cpu.EAX == 0x8)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_6_symbolic(self):
        ''' Instruction SHL_6 
            Groups:  
            0x400aa3:	shl	eax, 3
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400aa3] = '\xc1'
        mem[0x400aa4] = '\xe0'
        mem[0x400aa5] = '\x03'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400aa3
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xf)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400aa3, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x400aa4, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x400aa5, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400aa6)
        condition = Operators.AND(condition, cpu.EAX == 0x78)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_7_symbolic(self):
        ''' Instruction SHL_7 
            Groups:  
            0x400aa3:	shl	eax, 3
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400aa3] = '\xc1'
        mem[0x400aa4] = '\xe0'
        mem[0x400aa5] = '\x03'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400aa3
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x53)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400aa3, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x400aa4, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x400aa5, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400aa6)
        condition = Operators.AND(condition, cpu.EAX == 0x298)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_8_symbolic(self):
        ''' Instruction SHL_8 
            Groups:  
            0x400aa3:	shl	eax, 3
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400aa3] = '\xc1'
        mem[0x400aa4] = '\xe0'
        mem[0x400aa5] = '\x03'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400aa3
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xc8)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400aa3, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x400aa4, 8)== ord('\xe0'))
        condition = Operators.AND(condition, cpu.read_int(0x400aa5, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400aa6)
        condition = Operators.AND(condition, cpu.EAX == 0x640)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHL_9_symbolic(self):
        ''' Instruction SHL_9 
            Groups:  
            0x410ef6:	shl	rcx, 2
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, 'rwx')
        mem[0x410ef8] = '\xe1'
        mem[0x410ef9] = '\x02'
        mem[0x410ef6] = 'H'
        mem[0x410ef7] = '\xc1'
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x410ef6
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x410ef8, 8)== ord('\xe1'))
        condition = Operators.AND(condition, cpu.read_int(0x410ef9, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(0x410ef6, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x410ef7, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.RCX == 0x0)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x410efa)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_1_symbolic(self):
        ''' Instruction SHR_1 
            Groups:  
            0x4117d4:	shr	eax, 4
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x4117d4] = '\xc1'
        mem[0x4117d5] = '\xe8'
        mem[0x4117d6] = '\x04'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4117d4
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x30)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4117d4, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x4117d5, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x4117d6, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4117d7)
        condition = Operators.AND(condition, cpu.EAX == 0x3)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_10_symbolic(self):
        ''' Instruction SHR_10 
            Groups:  
            0x4117ef:	shr	rsi, 0xf
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x4117f0] = '\xc1'
        mem[0x4117f1] = '\xee'
        mem[0x4117f2] = '\x0f'
        mem[0x4117ef] = 'H'
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x40)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4117ef
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4117f0, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x4117f1, 8)== ord('\xee'))
        condition = Operators.AND(condition, cpu.read_int(0x4117f2, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4117ef, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.RSI == 0x0)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4117f3)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_11_symbolic(self):
        ''' Instruction SHR_11 
            Groups:  
            0x432294:	shr	rax, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432294] = 'H'
        mem[0x432295] = '\xd1'
        mem[0x432296] = '\xe8'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432294
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x44)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432294, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x432295, 8)== ord('\xd1'))
        condition = Operators.AND(condition, cpu.read_int(0x432296, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x432297)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x22)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_12_symbolic(self):
        ''' Instruction SHR_12 
            Groups:  
            0x4322ad:	shr	rax, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322ad] = 'H'
        mem[0x4322ae] = '\xd1'
        mem[0x4322af] = '\xe8'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322ad
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x2)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322ad, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4322ae, 8)== ord('\xd1'))
        condition = Operators.AND(condition, cpu.read_int(0x4322af, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4322b0)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_13_symbolic(self):
        ''' Instruction SHR_13 
            Groups:  
            0x4322ad:	shr	rax, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322ad] = 'H'
        mem[0x4322ae] = '\xd1'
        mem[0x4322af] = '\xe8'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322ad
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x47)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322ad, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4322ae, 8)== ord('\xd1'))
        condition = Operators.AND(condition, cpu.read_int(0x4322af, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4322b0)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x23)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_14_symbolic(self):
        ''' Instruction SHR_14 
            Groups:  
            0x45f858:	shr	rdx, 5
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045f000, 0x1000, 'rwx')
        mem[0x45f858] = 'H'
        mem[0x45f859] = '\xc1'
        mem[0x45f85a] = '\xea'
        mem[0x45f85b] = '\x05'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x45)
        cpu.RIP = 0x45f858
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x45f858, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x45f859, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x45f85a, 8)== ord('\xea'))
        condition = Operators.AND(condition, cpu.read_int(0x45f85b, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x45f85c)
        condition = Operators.AND(condition, cpu.RDX == 0x2)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_15_symbolic(self):
        ''' Instruction SHR_15 
            Groups:  
            0x4117eb:	shr	rcx, 0xc
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x4117eb] = 'H'
        mem[0x4117ec] = '\xc1'
        mem[0x4117ed] = '\xe9'
        mem[0x4117ee] = '\x0c'
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x30)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4117eb
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4117eb, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4117ec, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x4117ed, 8)== ord('\xe9'))
        condition = Operators.AND(condition, cpu.read_int(0x4117ee, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.RCX == 0x0)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4117ef)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_16_symbolic(self):
        ''' Instruction SHR_16 
            Groups:  
            0x432448:	shr	ebx, 0xc
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432448] = '\xc1'
        mem[0x432449] = '\xeb'
        mem[0x43244a] = '\x0c'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432448
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0x1c0003f)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432448, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x432449, 8)== ord('\xeb'))
        condition = Operators.AND(condition, cpu.read_int(0x43244a, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x43244b)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EBX == 0x1c00)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_17_symbolic(self):
        ''' Instruction SHR_17 
            Groups:  
            0x432294:	shr	rax, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432294] = 'H'
        mem[0x432295] = '\xd1'
        mem[0x432296] = '\xe8'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x432294
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x67)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432294, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x432295, 8)== ord('\xd1'))
        condition = Operators.AND(condition, cpu.read_int(0x432296, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x432297)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x33)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_18_symbolic(self):
        ''' Instruction SHR_18 
            Groups:  
            0x4322ad:	shr	rax, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322ad] = 'H'
        mem[0x4322ae] = '\xd1'
        mem[0x4322af] = '\xe8'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322ad
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x2)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322ad, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4322ae, 8)== ord('\xd1'))
        condition = Operators.AND(condition, cpu.read_int(0x4322af, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4322b0)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_19_symbolic(self):
        ''' Instruction SHR_19 
            Groups:  
            0x4322ad:	shr	rax, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322ad] = 'H'
        mem[0x4322ae] = '\xd1'
        mem[0x4322af] = '\xe8'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322ad
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322ad, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4322ae, 8)== ord('\xd1'))
        condition = Operators.AND(condition, cpu.read_int(0x4322af, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4322b0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_2_symbolic(self):
        ''' Instruction SHR_2 
            Groups:  
            0x4006a0:	shr	eax, 5
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006a0] = '\xc1'
        mem[0x4006a1] = '\xe8'
        mem[0x4006a2] = '\x05'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006a0
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1c03c163)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006a0, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a1, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a2, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006a3)
        condition = Operators.AND(condition, cpu.EAX == 0xe01e0b)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_20_symbolic(self):
        ''' Instruction SHR_20 
            Groups:  
            0x4322ad:	shr	rax, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4322ad] = 'H'
        mem[0x4322ae] = '\xd1'
        mem[0x4322af] = '\xe8'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322ad
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x56)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322ad, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4322ae, 8)== ord('\xd1'))
        condition = Operators.AND(condition, cpu.read_int(0x4322af, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4322b0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x2b)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_21_symbolic(self):
        ''' Instruction SHR_21 
            Groups:  
            0x432294:	shr	rax, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432294] = 'H'
        mem[0x432295] = '\xd1'
        mem[0x432296] = '\xe8'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432294
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x44)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432294, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x432295, 8)== ord('\xd1'))
        condition = Operators.AND(condition, cpu.read_int(0x432296, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x432297)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x22)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_3_symbolic(self):
        ''' Instruction SHR_3 
            Groups:  
            0x4117e7:	shr	rax, 6
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x4117e8] = '\xc1'
        mem[0x4117e9] = '\xe8'
        mem[0x4117ea] = '\x06'
        mem[0x4117e7] = 'H'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4117e7
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x650)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4117e8, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x4117e9, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x4117ea, 8)== ord('\x06'))
        condition = Operators.AND(condition, cpu.read_int(0x4117e7, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4117eb)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x19)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_4_symbolic(self):
        ''' Instruction SHR_4 
            Groups:  
            0x4323d5:	shr	eax, 5
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4323d5] = '\xc1'
        mem[0x4323d6] = '\xe8'
        mem[0x4323d7] = '\x05'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4323d5
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1c03c163)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4323d5, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x4323d6, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x4323d7, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4323d8)
        condition = Operators.AND(condition, cpu.EAX == 0xe01e0b)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_5_symbolic(self):
        ''' Instruction SHR_5 
            Groups:  
            0x4117eb:	shr	rcx, 0xc
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x4117eb] = 'H'
        mem[0x4117ec] = '\xc1'
        mem[0x4117ed] = '\xe9'
        mem[0x4117ee] = '\x0c'
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x4a0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4117eb
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4117eb, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4117ec, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x4117ed, 8)== ord('\xe9'))
        condition = Operators.AND(condition, cpu.read_int(0x4117ee, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.RCX == 0x0)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4117ef)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_6_symbolic(self):
        ''' Instruction SHR_6 
            Groups:  
            0x411795:	shr	r12, 6
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411798] = '\x06'
        mem[0x411795] = 'I'
        mem[0x411796] = '\xc1'
        mem[0x411797] = '\xec'
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x4a0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411795
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411798, 8)== ord('\x06'))
        condition = Operators.AND(condition, cpu.read_int(0x411795, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x411796, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x411797, 8)== ord('\xec'))
        condition = Operators.AND(condition, cpu.R12 == 0x12)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x411799)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_7_symbolic(self):
        ''' Instruction SHR_7 
            Groups:  
            0x4117fa:	shr	rdx, 0x12
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x4117fa] = 'H'
        mem[0x4117fb] = '\xc1'
        mem[0x4117fc] = '\xea'
        mem[0x4117fd] = '\x12'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x20)
        cpu.RIP = 0x4117fa
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4117fa, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4117fb, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x4117fc, 8)== ord('\xea'))
        condition = Operators.AND(condition, cpu.read_int(0x4117fd, 8)== ord('\x12'))
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4117fe)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_8_symbolic(self):
        ''' Instruction SHR_8 
            Groups:  
            0x43234d:	shr	eax, 5
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x43234d] = '\xc1'
        mem[0x43234e] = '\xe8'
        mem[0x43234f] = '\x05'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x43234d
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1c004121)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43234d, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x43234e, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x43234f, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x432350)
        condition = Operators.AND(condition, cpu.EAX == 0xe00209)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SHR_9_symbolic(self):
        ''' Instruction SHR_9 
            Groups:  
            0x4117d4:	shr	eax, 4
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x4117d4] = '\xc1'
        mem[0x4117d5] = '\xe8'
        mem[0x4117d6] = '\x04'
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4117d4
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x20)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4117d4, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.read_int(0x4117d5, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x4117d6, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4117d7)
        condition = Operators.AND(condition, cpu.EAX == 0x2)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_1_symbolic(self):
        ''' Instruction SUB_1 
            Groups:  
            0x436b53:	sub	rcx, rax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436b53] = 'H'
        mem[0x436b54] = ')'
        mem[0x436b55] = '\xc1'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x70000021)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x6ffffffd)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x436b53
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436b53, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436b54, 8)== ord(')'))
        condition = Operators.AND(condition, cpu.read_int(0x436b55, 8)== ord('\xc1'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RCX == 0x24)
        condition = Operators.AND(condition, cpu.RAX == 0x6ffffffd)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x436b56)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_10_symbolic(self):
        ''' Instruction SUB_10 
            Groups:  
            0x4377b9:	sub	rsp, 0x1028
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x4377b9] = 'H'
        mem[0x4377ba] = '\x81'
        mem[0x4377bb] = '\xec'
        mem[0x4377bc] = '('
        mem[0x4377bd] = '\x10'
        mem[0x4377be] = '\x00'
        mem[0x4377bf] = '\x00'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdaf8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4377b9
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4377b9, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4377ba, 8)== ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(0x4377bb, 8)== ord('\xec'))
        condition = Operators.AND(condition, cpu.read_int(0x4377bc, 8)== ord('('))
        condition = Operators.AND(condition, cpu.read_int(0x4377bd, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x4377be, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4377bf, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffcad0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4377c0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_11_symbolic(self):
        ''' Instruction SUB_11 
            Groups:  
            0x432196:	sub	rdi, -0x80
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432198] = '\xef'
        mem[0x432199] = '\x80'
        mem[0x432196] = 'H'
        mem[0x432197] = '\x83'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x6bf3a0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x432196
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432198, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x432199, 8)== ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(0x432196, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x432197, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RDI == 0x6bf420)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x43219a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_12_symbolic(self):
        ''' Instruction SUB_12 
            Groups:  
            0x436808:	sub	rax, 3
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436808] = 'H'
        mem[0x436809] = '\x83'
        mem[0x43680a] = '\xe8'
        mem[0x43680b] = '\x03'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0xc)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x436808
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436808, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436809, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x43680a, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x43680b, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x9)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x43680c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_13_symbolic(self):
        ''' Instruction SUB_13 
            Groups:  
            0x4321f3:	sub	rsp, 0x1020
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4321f3] = 'H'
        mem[0x4321f4] = '\x81'
        mem[0x4321f5] = '\xec'
        mem[0x4321f6] = ' '
        mem[0x4321f7] = '\x10'
        mem[0x4321f8] = '\x00'
        mem[0x4321f9] = '\x00'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4321f3
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4321f3, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4321f4, 8)== ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(0x4321f5, 8)== ord('\xec'))
        condition = Operators.AND(condition, cpu.read_int(0x4321f6, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x4321f7, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x4321f8, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4321f9, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffc9f0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4321fa)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_14_symbolic(self):
        ''' Instruction SUB_14 
            Groups:  
            0x432409:	sub	eax, r11d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432409] = 'D'
        mem[0x43240a] = ')'
        mem[0x43240b] = '\xd8'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x3)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R11D = cs.new_bitvec(32)
        cs.add(cpu.R11D == 0x3)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432409
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432409, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x43240a, 8)== ord(')'))
        condition = Operators.AND(condition, cpu.read_int(0x43240b, 8)== ord('\xd8'))
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.R11D == 0x3)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x43240c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_15_symbolic(self):
        ''' Instruction SUB_15 
            Groups:  
            0x4012e9:	sub	r14, r15
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00401000, 0x1000, 'rwx')
        mem[0x4012e9] = 'M'
        mem[0x4012ea] = ')'
        mem[0x4012eb] = '\xfe'
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x6b5de8)
        cpu.R15 = cs.new_bitvec(64)
        cs.add(cpu.R15 == 0x6b5dd8)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4012e9
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4012e9, 8)== ord('M'))
        condition = Operators.AND(condition, cpu.read_int(0x4012ea, 8)== ord(')'))
        condition = Operators.AND(condition, cpu.read_int(0x4012eb, 8)== ord('\xfe'))
        condition = Operators.AND(condition, cpu.R14 == 0x10)
        condition = Operators.AND(condition, cpu.R15 == 0x6b5dd8)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4012ec)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_16_symbolic(self):
        ''' Instruction SUB_16 
            Groups:  
            0x40060b:	sub	rsp, 0x1020
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40060b] = 'H'
        mem[0x40060c] = '\x81'
        mem[0x40060d] = '\xec'
        mem[0x40060e] = ' '
        mem[0x40060f] = '\x10'
        mem[0x400610] = '\x00'
        mem[0x400611] = '\x00'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdaa0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40060b
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40060b, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x40060c, 8)== ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(0x40060d, 8)== ord('\xec'))
        condition = Operators.AND(condition, cpu.read_int(0x40060e, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x40060f, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x400610, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x400611, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffca80)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400612)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_17_symbolic(self):
        ''' Instruction SUB_17 
            Groups:  
            0x406ddd:	sub	rsp, 0x1038
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406de0] = '8'
        mem[0x406de1] = '\x10'
        mem[0x406de2] = '\x00'
        mem[0x406de3] = '\x00'
        mem[0x406ddd] = 'H'
        mem[0x406dde] = '\x81'
        mem[0x406ddf] = '\xec'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda68)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406ddd
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406de0, 8)== ord('8'))
        condition = Operators.AND(condition, cpu.read_int(0x406de1, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x406de2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x406de3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x406ddd, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x406dde, 8)== ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(0x406ddf, 8)== ord('\xec'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffca30)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406de4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_18_symbolic(self):
        ''' Instruction SUB_18 
            Groups:  
            0x4324dd:	sub	rsp, 0x1048
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4324e0] = 'H'
        mem[0x4324e1] = '\x10'
        mem[0x4324e2] = '\x00'
        mem[0x4324e3] = '\x00'
        mem[0x4324dd] = 'H'
        mem[0x4324de] = '\x81'
        mem[0x4324df] = '\xec'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda68)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4324dd
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4324e0, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4324e1, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x4324e2, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4324e3, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4324dd, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x4324de, 8)== ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(0x4324df, 8)== ord('\xec'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffca20)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4324e4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_19_symbolic(self):
        ''' Instruction SUB_19 
            Groups:  
            0x432172:	sub	rax, rdi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432172] = 'H'
        mem[0x432173] = ')'
        mem[0x432174] = '\xf8'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x6bf210)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x6bf220)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432172
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432172, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x432173, 8)== ord(')'))
        condition = Operators.AND(condition, cpu.read_int(0x432174, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0xfffffffffffffff0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RDI == 0x6bf220)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x432175)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_2_symbolic(self):
        ''' Instruction SUB_2 
            Groups:  
            0x40db5b:	sub	rsp, 0x1020
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem[0x40db60] = '\x00'
        mem[0x40db61] = '\x00'
        mem[0x40db5b] = 'H'
        mem[0x40db5c] = '\x81'
        mem[0x40db5d] = '\xec'
        mem[0x40db5e] = ' '
        mem[0x40db5f] = '\x10'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdab0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40db5b
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40db60, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x40db61, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x40db5b, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x40db5c, 8)== ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(0x40db5d, 8)== ord('\xec'))
        condition = Operators.AND(condition, cpu.read_int(0x40db5e, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x40db5f, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffca90)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40db62)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_20_symbolic(self):
        ''' Instruction SUB_20 
            Groups:  
            0x432196:	sub	rdi, -0x80
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432198] = '\xef'
        mem[0x432199] = '\x80'
        mem[0x432196] = 'H'
        mem[0x432197] = '\x83'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x6bf220)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x432196
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432198, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x432199, 8)== ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(0x432196, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x432197, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RDI == 0x6bf2a0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x43219a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_21_symbolic(self):
        ''' Instruction SUB_21 
            Groups:  
            0x413487:	sub	rsp, 0x1020
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, 'rwx')
        mem[0x413487] = 'H'
        mem[0x413488] = '\x81'
        mem[0x413489] = '\xec'
        mem[0x41348a] = ' '
        mem[0x41348b] = '\x10'
        mem[0x41348c] = '\x00'
        mem[0x41348d] = '\x00'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffda50)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x413487
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x413487, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x413488, 8)== ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(0x413489, 8)== ord('\xec'))
        condition = Operators.AND(condition, cpu.read_int(0x41348a, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x41348b, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x41348c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x41348d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffca30)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41348e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_3_symbolic(self):
        ''' Instruction SUB_3 
            Groups:  
            0x436808:	sub	rax, 3
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436808] = 'H'
        mem[0x436809] = '\x83'
        mem[0x43680a] = '\xe8'
        mem[0x43680b] = '\x03'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x9)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x436808
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436808, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x436809, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x43680a, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x43680b, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x6)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x43680c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_4_symbolic(self):
        ''' Instruction SUB_4 
            Groups:  
            0x400f7d:	sub	rsp, 0x1048
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400f80] = 'H'
        mem[0x400f81] = '\x10'
        mem[0x400f82] = '\x00'
        mem[0x400f83] = '\x00'
        mem[0x400f7d] = 'H'
        mem[0x400f7e] = '\x81'
        mem[0x400f7f] = '\xec'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdae8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400f7d
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400f80, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x400f81, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x400f82, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x400f83, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x400f7d, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x400f7e, 8)== ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(0x400f7f, 8)== ord('\xec'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffcaa0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400f84)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_5_symbolic(self):
        ''' Instruction SUB_5 
            Groups:  
            0x411ffc:	sub	rax, r13
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411ffc] = 'L'
        mem[0x411ffd] = ')'
        mem[0x411ffe] = '\xe8'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x4a0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x21e00)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411ffc
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411ffc, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.read_int(0x411ffd, 8)== ord(')'))
        condition = Operators.AND(condition, cpu.read_int(0x411ffe, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.R13 == 0x4a0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x21960)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x411fff)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_6_symbolic(self):
        ''' Instruction SUB_6 
            Groups:  
            0x4376d2:	sub	ecx, 0x30
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x4376d2] = '\x83'
        mem[0x4376d3] = '\xe9'
        mem[0x4376d4] = '0'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x34)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4376d2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4376d2, 8)== ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(0x4376d3, 8)== ord('\xe9'))
        condition = Operators.AND(condition, cpu.read_int(0x4376d4, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x4)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4376d5)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_7_symbolic(self):
        ''' Instruction SUB_7 
            Groups:  
            0x411657:	sub	rsp, 0x1088
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411657] = 'H'
        mem[0x411658] = '\x81'
        mem[0x411659] = '\xec'
        mem[0x41165a] = '\x88'
        mem[0x41165b] = '\x10'
        mem[0x41165c] = '\x00'
        mem[0x41165d] = '\x00'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffd9d8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x411657
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411657, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x411658, 8)== ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(0x411659, 8)== ord('\xec'))
        condition = Operators.AND(condition, cpu.read_int(0x41165a, 8)== ord('\x88'))
        condition = Operators.AND(condition, cpu.read_int(0x41165b, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x41165c, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x41165d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffc950)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41165e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_8_symbolic(self):
        ''' Instruction SUB_8 
            Groups:  
            0x43552c:	sub	rsp, 0x1020
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00435000, 0x1000, 'rwx')
        mem[0x43552c] = 'H'
        mem[0x43552d] = '\x81'
        mem[0x43552e] = '\xec'
        mem[0x43552f] = ' '
        mem[0x435530] = '\x10'
        mem[0x435531] = '\x00'
        mem[0x435532] = '\x00'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffdad0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x43552c
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43552c, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x43552d, 8)== ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(0x43552e, 8)== ord('\xec'))
        condition = Operators.AND(condition, cpu.read_int(0x43552f, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x435530, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x435531, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x435532, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffcab0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x435533)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_SUB_9_symbolic(self):
        ''' Instruction SUB_9 
            Groups:  
            0x415d84:	sub	rsp, 0x1020
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00415000, 0x1000, 'rwx')
        mem[0x415d84] = 'H'
        mem[0x415d85] = '\x81'
        mem[0x415d86] = '\xec'
        mem[0x415d87] = ' '
        mem[0x415d88] = '\x10'
        mem[0x415d89] = '\x00'
        mem[0x415d8a] = '\x00'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7fffffffc930)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x415d84
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x415d84, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x415d85, 8)== ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(0x415d86, 8)== ord('\xec'))
        condition = Operators.AND(condition, cpu.read_int(0x415d87, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x415d88, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(0x415d89, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x415d8a, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7fffffffb910)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x415d8b)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_1_symbolic(self):
        ''' Instruction TEST_1 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e88] = 'H'
        mem[0x406e89] = '\x85'
        mem[0x406e8a] = '\xdb'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffe0f8)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e88
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e88, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x406e89, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8a, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffe0f8)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e8b)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_10_symbolic(self):
        ''' Instruction TEST_10 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e88] = 'H'
        mem[0x406e89] = '\x85'
        mem[0x406e8a] = '\xdb'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffe152)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e88
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e88, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x406e89, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8a, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffe152)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e8b)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_11_symbolic(self):
        ''' Instruction TEST_11 
            Groups:  
            0x411bdb:	test	esi, esi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, 'rwx')
        mem[0x411bdb] = '\x85'
        mem[0x411bdc] = '\xf6'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411bdb
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411bdb, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x411bdc, 8)== ord('\xf6'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x411bdd)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_12_symbolic(self):
        ''' Instruction TEST_12 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e88] = 'H'
        mem[0x406e89] = '\x85'
        mem[0x406e8a] = '\xdb'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffecf7)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e88
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e88, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x406e89, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8a, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffecf7)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e8b)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_13_symbolic(self):
        ''' Instruction TEST_13 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e88] = 'H'
        mem[0x406e89] = '\x85'
        mem[0x406e8a] = '\xdb'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffec9d)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e88
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e88, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x406e89, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8a, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffec9d)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e8b)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_14_symbolic(self):
        ''' Instruction TEST_14 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e88] = 'H'
        mem[0x406e89] = '\x85'
        mem[0x406e8a] = '\xdb'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffebae)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e88
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e88, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x406e89, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8a, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffebae)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e8b)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_15_symbolic(self):
        ''' Instruction TEST_15 
            Groups:  
            0x406e05:	test	r12, r12
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e05] = 'M'
        mem[0x406e06] = '\x85'
        mem[0x406e07] = '\xe4'
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x7fffffffdc28)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e05
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e05, 8)== ord('M'))
        condition = Operators.AND(condition, cpu.read_int(0x406e06, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x406e07, 8)== ord('\xe4'))
        condition = Operators.AND(condition, cpu.R12 == 0x7fffffffdc28)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e08)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_16_symbolic(self):
        ''' Instruction TEST_16 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e88] = 'H'
        mem[0x406e89] = '\x85'
        mem[0x406e8a] = '\xdb'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffeaf6)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e88
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e88, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x406e89, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8a, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffeaf6)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e8b)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_17_symbolic(self):
        ''' Instruction TEST_17 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e88] = 'H'
        mem[0x406e89] = '\x85'
        mem[0x406e8a] = '\xdb'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffe206)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e88
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e88, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x406e89, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8a, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffe206)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e8b)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_18_symbolic(self):
        ''' Instruction TEST_18 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e88] = 'H'
        mem[0x406e89] = '\x85'
        mem[0x406e8a] = '\xdb'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffedcc)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e88
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e88, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x406e89, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8a, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffedcc)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e8b)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_19_symbolic(self):
        ''' Instruction TEST_19 
            Groups:  
            0x414710:	test	rbx, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x414710] = 'H'
        mem[0x414711] = '\x85'
        mem[0x414712] = '\xdb'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffe0f8)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x414710
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x414710, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x414711, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x414712, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffe0f8)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x414713)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_2_symbolic(self):
        ''' Instruction TEST_2 
            Groups:  
            0x414710:	test	rbx, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x414710] = 'H'
        mem[0x414711] = '\x85'
        mem[0x414712] = '\xdb'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffe152)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x414710
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x414710, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x414711, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x414712, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffe152)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x414713)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_20_symbolic(self):
        ''' Instruction TEST_20 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e88] = 'H'
        mem[0x406e89] = '\x85'
        mem[0x406e8a] = '\xdb'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffeaa4)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e88
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e88, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x406e89, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8a, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffeaa4)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e8b)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_21_symbolic(self):
        ''' Instruction TEST_21 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e88] = 'H'
        mem[0x406e89] = '\x85'
        mem[0x406e8a] = '\xdb'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffeaa4)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e88
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e88, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x406e89, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8a, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffeaa4)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e8b)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_3_symbolic(self):
        ''' Instruction TEST_3 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e88] = 'H'
        mem[0x406e89] = '\x85'
        mem[0x406e8a] = '\xdb'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffef18)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e88
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e88, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x406e89, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8a, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffef18)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e8b)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_4_symbolic(self):
        ''' Instruction TEST_4 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e88] = 'H'
        mem[0x406e89] = '\x85'
        mem[0x406e8a] = '\xdb'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffee51)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e88
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e88, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x406e89, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8a, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffee51)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e8b)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_5_symbolic(self):
        ''' Instruction TEST_5 
            Groups:  
            0x475241:	test	rdi, rdi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00475000, 0x1000, 'rwx')
        mem[0x475241] = 'H'
        mem[0x475242] = '\x85'
        mem[0x475243] = '\xff'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x475241
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x475241, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x475242, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x475243, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x475244)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RDI == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_6_symbolic(self):
        ''' Instruction TEST_6 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e88] = 'H'
        mem[0x406e89] = '\x85'
        mem[0x406e8a] = '\xdb'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffe16a)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e88
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e88, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x406e89, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8a, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffe16a)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e8b)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_7_symbolic(self):
        ''' Instruction TEST_7 
            Groups:  
            0x406e88:	test	rbx, rbx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406e88] = 'H'
        mem[0x406e89] = '\x85'
        mem[0x406e8a] = '\xdb'
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7fffffffec47)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406e88
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406e88, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x406e89, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x406e8a, 8)== ord('\xdb'))
        condition = Operators.AND(condition, cpu.RBX == 0x7fffffffec47)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406e8b)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_8_symbolic(self):
        ''' Instruction TEST_8 
            Groups:  
            0x436d8b:	test	al, 2
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436d8b] = '\xa8'
        mem[0x436d8c] = '\x02'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x436d8b
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0xa)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436d8b, 8)== ord('\xa8'))
        condition = Operators.AND(condition, cpu.read_int(0x436d8c, 8)== ord('\x02'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x436d8d)
        condition = Operators.AND(condition, cpu.AL == 0xa)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_TEST_9_symbolic(self):
        ''' Instruction TEST_9 
            Groups:  
            0x40dbaa:	test	eax, eax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem[0x40dbaa] = '\x85'
        mem[0x40dbab] = '\xc0'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40dbaa
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40dbaa, 8)== ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(0x40dbab, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40dbac)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_VMOVD_1_symbolic(self):
        ''' Instruction VMOVD_1 
            Groups: avx 
            0x432044:	vmovd	xmm1, esi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432044] = '\xc5'
        mem[0x432045] = '\xf9'
        mem[0x432046] = 'n'
        mem[0x432047] = '\xce'
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.RIP = 0x432044
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432044, 8)== ord('\xc5'))
        condition = Operators.AND(condition, cpu.read_int(0x432045, 8)== ord('\xf9'))
        condition = Operators.AND(condition, cpu.read_int(0x432046, 8)== ord('n'))
        condition = Operators.AND(condition, cpu.read_int(0x432047, 8)== ord('\xce'))
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.ESI == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x432048)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_VPSHUFB_1_symbolic(self):
        ''' Instruction VPSHUFB_1 
            Groups: avx 
            0x43204f:	vpshufb	xmm0, xmm1, xmm0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432050] = '\xe2'
        mem[0x432051] = 'q'
        mem[0x432052] = '\x00'
        mem[0x432053] = '\xc0'
        mem[0x43204f] = '\xc4'
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.RIP = 0x43204f

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432050, 8)== ord('\xe2'))
        condition = Operators.AND(condition, cpu.read_int(0x432051, 8)== ord('q'))
        condition = Operators.AND(condition, cpu.read_int(0x432052, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x432053, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.read_int(0x43204f, 8)== ord('\xc4'))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x432054)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_VPXOR_1_symbolic(self):
        ''' Instruction VPXOR_1 
            Groups: avx, novlx 
            0x432040:	vpxor	xmm0, xmm0, xmm0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432040] = '\xc5'
        mem[0x432041] = '\xf9'
        mem[0x432042] = '\xef'
        mem[0x432043] = '\xc0'
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.RIP = 0x432040

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432040, 8)== ord('\xc5'))
        condition = Operators.AND(condition, cpu.read_int(0x432041, 8)== ord('\xf9'))
        condition = Operators.AND(condition, cpu.read_int(0x432042, 8)== ord('\xef'))
        condition = Operators.AND(condition, cpu.read_int(0x432043, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x432044)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_VZEROUPPER_1_symbolic(self):
        ''' Instruction VZEROUPPER_1 
            Groups: avx 
            0x4321b9:	vzeroupper	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x4321b9] = '\xc5'
        mem[0x4321ba] = '\xf8'
        mem[0x4321bb] = 'w'
        cpu.RIP = 0x4321b9

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4321b9, 8)== ord('\xc5'))
        condition = Operators.AND(condition, cpu.read_int(0x4321ba, 8)== ord('\xf8'))
        condition = Operators.AND(condition, cpu.read_int(0x4321bb, 8)== ord('w'))
        condition = Operators.AND(condition, cpu.RIP == 0x4321bc)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XGETBV_1_symbolic(self):
        ''' Instruction XGETBV_1 
            Groups:  
            0x43790e:	xgetbv	
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, 'rwx')
        mem[0x437910] = '\xd0'
        mem[0x43790e] = '\x0f'
        mem[0x43790f] = '\x01'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.RIP = 0x43790e
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x437910, 8)== ord('\xd0'))
        condition = Operators.AND(condition, cpu.read_int(0x43790e, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x43790f, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.EAX == 0x7)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x437911)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_1_symbolic(self):
        ''' Instruction XOR_1 
            Groups:  
            0x400a6e:	xor	eax, eax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a6e] = '1'
        mem[0x400a6f] = '\xc0'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400a6e
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x46b9f700)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a6e, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x400a6f, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a70)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_10_symbolic(self):
        ''' Instruction XOR_10 
            Groups:  
            0x400ade:	xor	edx, eax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400ade] = '1'
        mem[0x400adf] = '\xc2'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xc8)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x53)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400ade
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ade, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x400adf, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.EAX == 0xc8)
        condition = Operators.AND(condition, cpu.EDX == 0x9b)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400ae0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_11_symbolic(self):
        ''' Instruction XOR_11 
            Groups:  
            0x400d82:	xor	esi, esi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400d82] = '1'
        mem[0x400d83] = '\xf6'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400d82
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400d82, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x400d83, 8)== ord('\xf6'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400d84)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_12_symbolic(self):
        ''' Instruction XOR_12 
            Groups:  
            0x406400:	xor	esi, esi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, 'rwx')
        mem[0x406400] = '1'
        mem[0x406401] = '\xf6'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406400
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406400, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x406401, 8)== ord('\xf6'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406402)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_13_symbolic(self):
        ''' Instruction XOR_13 
            Groups:  
            0x45c5b2:	xor	eax, eax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045c000, 0x1000, 'rwx')
        mem[0x45c5b2] = '1'
        mem[0x45c5b3] = '\xc0'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x45c5b2
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6be000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x45c5b2, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x45c5b3, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x45c5b4)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_14_symbolic(self):
        ''' Instruction XOR_14 
            Groups:  
            0x410ee2:	xor	ecx, ecx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, 'rwx')
        mem[0x410ee2] = '1'
        mem[0x410ee3] = '\xc9'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x410ee2
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x21e41)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x410ee2, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x410ee3, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x410ee4)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_15_symbolic(self):
        ''' Instruction XOR_15 
            Groups:  
            0x46407b:	xor	esi, esi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00464000, 0x1000, 'rwx')
        mem[0x46407b] = '1'
        mem[0x46407c] = '\xf6'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x46407b
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x46407b, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x46407c, 8)== ord('\xf6'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x46407d)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_16_symbolic(self):
        ''' Instruction XOR_16 
            Groups:  
            0x434228:	xor	edi, edi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, 'rwx')
        mem[0x434228] = '1'
        mem[0x434229] = '\xff'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x11c0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x434228
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x434228, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x434229, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.EDI == 0x0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x43422a)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_17_symbolic(self):
        ''' Instruction XOR_17 
            Groups:  
            0x400ade:	xor	edx, eax
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400ade] = '1'
        mem[0x400adf] = '\xc2'
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xfb)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x23)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400ade
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ade, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x400adf, 8)== ord('\xc2'))
        condition = Operators.AND(condition, cpu.EAX == 0xfb)
        condition = Operators.AND(condition, cpu.EDX == 0xd8)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400ae0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_18_symbolic(self):
        ''' Instruction XOR_18 
            Groups:  
            0x400d47:	xor	esi, esi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400d48] = '\xf6'
        mem[0x400d47] = '1'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400d47
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x2a)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400d48, 8)== ord('\xf6'))
        condition = Operators.AND(condition, cpu.read_int(0x400d47, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400d49)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_19_symbolic(self):
        ''' Instruction XOR_19 
            Groups:  
            0x436890:	xor	esi, dword ptr [rdi + 8]
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffd000, 0x1000, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdee8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xe8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdee9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdeea)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffdeeb)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem[0x436890] = '3'
        mem[0x436891] = 'w'
        mem[0x436892] = '\x08'
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x0)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7fffffffdee0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x436890
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdee8, 8)== ord('\xe8'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdee9, 8)== ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdeea, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffdeeb, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x436890, 8)== ord('3'))
        condition = Operators.AND(condition, cpu.read_int(0x436891, 8)== ord('w'))
        condition = Operators.AND(condition, cpu.read_int(0x436892, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.ESI == 0x3e8)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RDI == 0x7fffffffdee0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x436893)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_2_symbolic(self):
        ''' Instruction XOR_2 
            Groups:  
            0x432280:	xor	r8d, r8d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432280] = 'E'
        mem[0x432281] = '1'
        mem[0x432282] = '\xc0'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432280
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432280, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x432281, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x432282, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x432283)
        condition = Operators.AND(condition, cpu.R8D == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_20_symbolic(self):
        ''' Instruction XOR_20 
            Groups:  
            0x432280:	xor	r8d, r8d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432280] = 'E'
        mem[0x432281] = '1'
        mem[0x432282] = '\xc0'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432280
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432280, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x432281, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x432282, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x432283)
        condition = Operators.AND(condition, cpu.R8D == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_21_symbolic(self):
        ''' Instruction XOR_21 
            Groups:  
            0x41426b:	xor	esi, esi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, 'rwx')
        mem[0x41426b] = '1'
        mem[0x41426c] = '\xf6'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x41426b
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x6bf6a0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41426b, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x41426c, 8)== ord('\xf6'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41426d)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_3_symbolic(self):
        ''' Instruction XOR_3 
            Groups:  
            0x463f65:	xor	r10d, r10d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00463000, 0x1000, 'rwx')
        mem[0x463f65] = 'E'
        mem[0x463f66] = '1'
        mem[0x463f67] = '\xd2'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x463f65
        cpu.R10D = cs.new_bitvec(32)
        cs.add(cpu.R10D == 0x21)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x463f65, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x463f66, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x463f67, 8)== ord('\xd2'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x463f68)
        condition = Operators.AND(condition, cpu.R10D == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_4_symbolic(self):
        ''' Instruction XOR_4 
            Groups:  
            0x400d80:	xor	edi, edi
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400d80] = '1'
        mem[0x400d81] = '\xff'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x2)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400d80
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400d80, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x400d81, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.EDI == 0x0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400d82)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_5_symbolic(self):
        ''' Instruction XOR_5 
            Groups:  
            0x436a30:	xor	r9d, r9d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436a30] = 'E'
        mem[0x436a31] = '1'
        mem[0x436a32] = '\xc9'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x436a30
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.R9D = cs.new_bitvec(32)
        cs.add(cpu.R9D == 0x7463656a)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436a30, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x436a31, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x436a32, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x436a33)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.R9D == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_6_symbolic(self):
        ''' Instruction XOR_6 
            Groups:  
            0x40dba7:	xor	r12d, r12d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040d000, 0x1000, 'rwx')
        mem[0x40dba8] = '1'
        mem[0x40dba9] = '\xe4'
        mem[0x40dba7] = 'E'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40dba7
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.R12D = cs.new_bitvec(32)
        cs.add(cpu.R12D == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40dba8, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x40dba9, 8)== ord('\xe4'))
        condition = Operators.AND(condition, cpu.read_int(0x40dba7, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40dbaa)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.R12D == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_7_symbolic(self):
        ''' Instruction XOR_7 
            Groups:  
            0x432280:	xor	r8d, r8d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, 'rwx')
        mem[0x432280] = 'E'
        mem[0x432281] = '1'
        mem[0x432282] = '\xc0'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432280
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432280, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x432281, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x432282, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x432283)
        condition = Operators.AND(condition, cpu.R8D == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_8_symbolic(self):
        ''' Instruction XOR_8 
            Groups:  
            0x436a36:	xor	ecx, ecx
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, 'rwx')
        mem[0x436a36] = '1'
        mem[0x436a37] = '\xc9'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x436a36
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xd05)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436a36, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x436a37, 8)== ord('\xc9'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x436a38)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_XOR_9_symbolic(self):
        ''' Instruction XOR_9 
            Groups:  
            0x400cfb:	xor	al, al
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400cfb] = '0'
        mem[0x400cfc] = '\xc0'
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400cfb
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0xf)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister,e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400cfb, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.read_int(0x400cfc, 8)== ord('\xc0'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400cfd)
        condition = Operators.AND(condition, cpu.AL == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

if __name__ == '__main__':
    unittest.main()

