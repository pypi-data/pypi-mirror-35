Metadata-Version: 2.1
Name: odl
Version: 0.7.0
Summary: Operator Discretization Library
Home-page: https://github.com/odlgroup/odl
Author: ODL development group
Author-email: odl@math.kth.se
License: MPL-2.0
Keywords: research development mathematics prototyping imaging tomography
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Topic :: Software Development
Classifier: License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Operating System :: OS Independent
Provides-Extra: fftw
Provides-Extra: pywavelets
Provides-Extra: proximal
Provides-Extra: show
Provides-Extra: testing
Provides-Extra: skimage
Requires-Dist: future (>=0.14)
Requires-Dist: packaging (>=15.0)
Requires-Dist: numpy (!=1.14.0,!=1.14.1,!=1.14.2,>=1.10)
Requires-Dist: scipy (>=0.14)
Provides-Extra: fftw
Requires-Dist: pyfftw; extra == 'fftw'
Provides-Extra: proximal
Requires-Dist: proximal; extra == 'proximal'
Provides-Extra: pywavelets
Requires-Dist: Pywavelets (>=0.4); extra == 'pywavelets'
Provides-Extra: show
Requires-Dist: matplotlib; extra == 'show'
Provides-Extra: skimage
Requires-Dist: scikit-image; extra == 'skimage'
Provides-Extra: testing
Requires-Dist: pytest (<3.7,>=3.0.3); extra == 'testing'
Requires-Dist: pytest-pep8; extra == 'testing'
Requires-Dist: pytest-cov; extra == 'testing'
Requires-Dist: coverage (>=4.0); extra == 'testing'
Requires-Dist: coveralls; extra == 'testing'


Operator Discretization Library (ODL) is a Python library for fast prototyping focusing on (but not restricted to) inverse problems. ODL is being developed at `KTH Royal Institute of Technology, Stockholm <https://www.kth.se/en/sci/institutioner/math>`_, and `Centrum Wiskunde & Informatica (CWI), Amsterdam <https://www.cwi.nl>`_.

The main intent of ODL is to enable mathematicians and applied scientists to use different numerical methods on real-world problems without having to implement all necessary parts from the bottom up.
This is reached by an `Operator` structure which encapsulates all application-specific parts, and a high-level formulation of solvers which usually expect an operator, data and additional parameters.
The main advantages of this approach is that

1. Different problems can be solved with the same method (e.g. TV regularization) by simply switching operator and data.
2. The same problem can be solved with different methods by simply calling into different solvers.
3. Solvers and application-specific code need to be written only once, in one place, and can be tested individually.
4. Adding new applications or solution methods becomes a much easier task.



Features
========

- Efficient and well-tested data containers based on Numpy (default) or CUDA (optional)
- Objects to represent mathematical notions like vector spaces and operators, including properties as expected from mathematics (inner product, norm, operator composition, ...)
- Convenience functionality for operators like arithmetic, composition, operator matrices etc., which satisfy the known mathematical rules.
- Out-of-the-box support for frequently used operators like scaling, partial derivative, gradient, Fourier transform etc.
- A versatile and pluggable library of optimization routines for smooth and non-smooth problems, such as CGLS, BFGS, Chambolle-Pock and Douglas-Rachford splitting.
- Support for tomographic imaging with a unified geometry representation and bindings to external libraries for efficient computation of projections and back-projections.
- Standardized tests to validate implementations against expected behavior of the corresponding mathematical object, e.g. if a user-defined norm satisfies `norm(x + y) <= norm(x) + norm(y)` for a number of input vectors `x` and `y`.


