import os

from sequana import pacbio
from sequana import snaketools as sm

configfile: "config.yaml"

manager = sm.PipelineManager("pacbio_qc", config,  fastq=False)
#sm.message("Number of samples: %d" % len(manager.samples))

input_data = manager.getrawdata()

to_clean = []


# Convert the BAM to fasta
__bam_to_fasta__input_bam = input_data
__bam_to_fasta__output_fasta = "{sample}.fasta"
include: sm.modules["bam_to_fasta"]
to_clean = []


# Analysis the input Fasta , create pictures and summary file
__pacbio_quality__input = input_data
__pacbio_quality__output_summary = "{sample}/summary_{sample}.json"
include: sm.modules["pacbio_quality"]
to_clean.extend(expand(__bam_to_fasta__output_fasta, sample=manager.samples))


# default output for the html_reports rule
__html_report__input =  ["{sample}/summary_{sample}.json"]

# Do we need the kraken output ? if so, fill variables
extra_kraken = []
if config['kraken']['do'] is True:
    __kraken__html_output = "{sample}/kraken/kraken.html"
    extra_kraken = expand(__kraken__html_output, sample=manager.samples)
    __html_report__input +=  [__kraken__html_output]


# Final results
rule pipeline:
    input:
        expand("{sample}/summary.html", sample=manager.samples),
        extra_kraken,


# HTML reports
rule html_report:
    input:  __html_report__input
    output: "{sample}/summary.html"
    params:
        dir_kraken="{sample}/kraken",
        dir="{sample}"
    message: "create the pacbio BAM QC summary page"
    run:
        from sequana.modules_report.pacbio_input_bam import PacbioInputBAMModule as Module

        # This statements sets the directory where HTML will be saved
        from sequana.utils import config as cfg
        buffer = cfg.output_dir
        cfg.output_dir = params.dir
        m = Module(input[0])
        cfg.output_dir = buffer

        # This creates useless directories (css/images/js)
        m = Module(input[0])

        # Here, we just re-run the KrakenModule to get the HTML content
        # We do not want to save it
        if config['kraken']['do']:
            from sequana.modules_report.kraken import KrakenModule
            kr = KrakenModule(params.dir_kraken, output_filename=None)
            html = kr._get_summary_section()
            #toreplace = "./kraken/kraken.html"
            #target = params.dir_kraken + "kraken.html"
            #html = html.replace(toreplace, target)
            m.sections.append({
              "name": "Taxonomic content",
              "anchor": "kraken",
              "content": html
            })
        # In the rule kraken:, a summary.html is created, which is overwritten
        # here
        m.create_html(output[0])


# The kraken analysis
rule kraken:
    input: "{sample}.fasta"
    output: "{sample}/kraken/kraken.html"
    params:
        databases=config['kraken']
    threads: config['kraken']['thread']
    run:
        cmd = "sequana_taxonomy --file1 {input} --output-directory {wildcards.sample} --thread {threads} "
        cmd += " --databases "
        for dbname, value in params.databases.items():
            if value and dbname not in ["do", "thread"]:
                cmd += " %s " % value
        shell(cmd)



onsuccess:
    shell("multiqc . -m sequana_pacbio_qc  -f")
    print("//cleaning temporary files")
    for this in to_clean:
        try:os.remove(this)
        except:pass

    # This was create by calling Module but is not needed
    shell('rm -rf css images js')

