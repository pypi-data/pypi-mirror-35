# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_libcaer_wrap')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_libcaer_wrap')
    _libcaer_wrap = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libcaer_wrap', [dirname(__file__)])
        except ImportError:
            import _libcaer_wrap
            return _libcaer_wrap
        try:
            _mod = imp.load_module('_libcaer_wrap', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _libcaer_wrap = swig_import_helper()
    del swig_import_helper
else:
    import _libcaer_wrap
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

LIBCAER_VERSION = _libcaer_wrap.LIBCAER_VERSION
LIBCAER_NAME_STRING = _libcaer_wrap.LIBCAER_NAME_STRING
LIBCAER_VERSION_STRING = _libcaer_wrap.LIBCAER_VERSION_STRING
LIBCAER_HAVE_SERIALDEV = _libcaer_wrap.LIBCAER_HAVE_SERIALDEV
LIBCAER_HAVE_OPENCV = _libcaer_wrap.LIBCAER_HAVE_OPENCV
CAER_ERROR_MEMORY_ALLOCATION = _libcaer_wrap.CAER_ERROR_MEMORY_ALLOCATION
CAER_ERROR_RESOURCE_ALLOCATION = _libcaer_wrap.CAER_ERROR_RESOURCE_ALLOCATION
CAER_ERROR_OPEN_ACCESS = _libcaer_wrap.CAER_ERROR_OPEN_ACCESS
CAER_ERROR_COMMUNICATION = _libcaer_wrap.CAER_ERROR_COMMUNICATION
CAER_ERROR_FW_VERSION = _libcaer_wrap.CAER_ERROR_FW_VERSION
CAER_ERROR_LOGIC_VERSION = _libcaer_wrap.CAER_ERROR_LOGIC_VERSION

def caerStrEquals(s1, s2):
    """caerStrEquals(char const * s1, char const * s2) -> bool"""
    return _libcaer_wrap.caerStrEquals(s1, s2)

def caerStrEqualsUpTo(s1, s2, len):
    """caerStrEqualsUpTo(char const * s1, char const * s2, size_t len) -> bool"""
    return _libcaer_wrap.caerStrEqualsUpTo(s1, s2, len)

def caerIntegerToByteArray(integer, byteArray, byteArrayLength):
    """caerIntegerToByteArray(uint32_t const integer, uint8_t * byteArray, uint8_t const byteArrayLength)"""
    return _libcaer_wrap.caerIntegerToByteArray(integer, byteArray, byteArrayLength)

def caerByteArrayToInteger(byteArray, byteArrayLength):
    """caerByteArrayToInteger(uint8_t const * byteArray, uint8_t const byteArrayLength) -> uint32_t"""
    return _libcaer_wrap.caerByteArrayToInteger(byteArray, byteArrayLength)
AEDAT3_NETWORK_HEADER_LENGTH = _libcaer_wrap.AEDAT3_NETWORK_HEADER_LENGTH
AEDAT3_NETWORK_MAGIC_NUMBER = _libcaer_wrap.AEDAT3_NETWORK_MAGIC_NUMBER
AEDAT3_NETWORK_VERSION = _libcaer_wrap.AEDAT3_NETWORK_VERSION
AEDAT3_FILE_VERSION = _libcaer_wrap.AEDAT3_FILE_VERSION
AEDAT3_MAX_UDP_SIZE = _libcaer_wrap.AEDAT3_MAX_UDP_SIZE
class aedat3_network_header(_object):
    """Proxy of C aedat3_network_header struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aedat3_network_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aedat3_network_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["magicNumber"] = _libcaer_wrap.aedat3_network_header_magicNumber_set
    __swig_getmethods__["magicNumber"] = _libcaer_wrap.aedat3_network_header_magicNumber_get
    if _newclass:
        magicNumber = _swig_property(_libcaer_wrap.aedat3_network_header_magicNumber_get, _libcaer_wrap.aedat3_network_header_magicNumber_set)
    __swig_setmethods__["sequenceNumber"] = _libcaer_wrap.aedat3_network_header_sequenceNumber_set
    __swig_getmethods__["sequenceNumber"] = _libcaer_wrap.aedat3_network_header_sequenceNumber_get
    if _newclass:
        sequenceNumber = _swig_property(_libcaer_wrap.aedat3_network_header_sequenceNumber_get, _libcaer_wrap.aedat3_network_header_sequenceNumber_set)
    __swig_setmethods__["versionNumber"] = _libcaer_wrap.aedat3_network_header_versionNumber_set
    __swig_getmethods__["versionNumber"] = _libcaer_wrap.aedat3_network_header_versionNumber_get
    if _newclass:
        versionNumber = _swig_property(_libcaer_wrap.aedat3_network_header_versionNumber_get, _libcaer_wrap.aedat3_network_header_versionNumber_set)
    __swig_setmethods__["formatNumber"] = _libcaer_wrap.aedat3_network_header_formatNumber_set
    __swig_getmethods__["formatNumber"] = _libcaer_wrap.aedat3_network_header_formatNumber_get
    if _newclass:
        formatNumber = _swig_property(_libcaer_wrap.aedat3_network_header_formatNumber_get, _libcaer_wrap.aedat3_network_header_formatNumber_set)
    __swig_setmethods__["sourceID"] = _libcaer_wrap.aedat3_network_header_sourceID_set
    __swig_getmethods__["sourceID"] = _libcaer_wrap.aedat3_network_header_sourceID_get
    if _newclass:
        sourceID = _swig_property(_libcaer_wrap.aedat3_network_header_sourceID_get, _libcaer_wrap.aedat3_network_header_sourceID_set)

    def __init__(self):
        """__init__(aedat3_network_header self) -> aedat3_network_header"""
        this = _libcaer_wrap.new_aedat3_network_header()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_aedat3_network_header
    def __del__(self):
        return None
aedat3_network_header_swigregister = _libcaer_wrap.aedat3_network_header_swigregister
aedat3_network_header_swigregister(aedat3_network_header)


def caerParseNetworkHeader(dataBuffer):
    """caerParseNetworkHeader(uint8_t const * dataBuffer) -> aedat3_network_header"""
    return _libcaer_wrap.caerParseNetworkHeader(dataBuffer)
DEMOSAIC_STANDARD = _libcaer_wrap.DEMOSAIC_STANDARD
CONTRAST_STANDARD = _libcaer_wrap.CONTRAST_STANDARD

def caerFrameUtilsDemosaic(framePacket, demosaicType):
    """caerFrameUtilsDemosaic(caer_frame_event_packet framePacket, enum caer_frame_utils_demosaic_types demosaicType) -> caer_frame_event_packet"""
    return _libcaer_wrap.caerFrameUtilsDemosaic(framePacket, demosaicType)

def caerFrameUtilsContrast(framePacket, contrastType):
    """caerFrameUtilsContrast(caer_frame_event_packet framePacket, enum caer_frame_utils_contrast_types contrastType)"""
    return _libcaer_wrap.caerFrameUtilsContrast(framePacket, contrastType)
CAER_SUPPORTED_DEVICES_NUMBER = _libcaer_wrap.CAER_SUPPORTED_DEVICES_NUMBER
CAER_HOST_CONFIG_DATAEXCHANGE = _libcaer_wrap.CAER_HOST_CONFIG_DATAEXCHANGE
CAER_HOST_CONFIG_PACKETS = _libcaer_wrap.CAER_HOST_CONFIG_PACKETS
CAER_HOST_CONFIG_LOG = _libcaer_wrap.CAER_HOST_CONFIG_LOG
CAER_HOST_CONFIG_DATAEXCHANGE_BUFFER_SIZE = _libcaer_wrap.CAER_HOST_CONFIG_DATAEXCHANGE_BUFFER_SIZE
CAER_HOST_CONFIG_DATAEXCHANGE_BLOCKING = _libcaer_wrap.CAER_HOST_CONFIG_DATAEXCHANGE_BLOCKING
CAER_HOST_CONFIG_DATAEXCHANGE_START_PRODUCERS = _libcaer_wrap.CAER_HOST_CONFIG_DATAEXCHANGE_START_PRODUCERS
CAER_HOST_CONFIG_DATAEXCHANGE_STOP_PRODUCERS = _libcaer_wrap.CAER_HOST_CONFIG_DATAEXCHANGE_STOP_PRODUCERS
CAER_HOST_CONFIG_PACKETS_MAX_CONTAINER_PACKET_SIZE = _libcaer_wrap.CAER_HOST_CONFIG_PACKETS_MAX_CONTAINER_PACKET_SIZE
CAER_HOST_CONFIG_PACKETS_MAX_CONTAINER_INTERVAL = _libcaer_wrap.CAER_HOST_CONFIG_PACKETS_MAX_CONTAINER_INTERVAL
CAER_HOST_CONFIG_LOG_LEVEL = _libcaer_wrap.CAER_HOST_CONFIG_LOG_LEVEL

def caerDeviceSendDefaultConfig(handle):
    """caerDeviceSendDefaultConfig(caerDeviceHandle handle) -> bool"""
    return _libcaer_wrap.caerDeviceSendDefaultConfig(handle)

def caerDeviceConfigSet(handle, modAddr, paramAddr, param):
    """caerDeviceConfigSet(caerDeviceHandle handle, int8_t modAddr, uint8_t paramAddr, uint32_t param) -> bool"""
    return _libcaer_wrap.caerDeviceConfigSet(handle, modAddr, paramAddr, param)

def caerDeviceDataStart(handle, dataNotifyIncrease, dataNotifyDecrease, dataNotifyUserPtr, dataShutdownNotify, dataShutdownUserPtr):
    """caerDeviceDataStart(caerDeviceHandle handle, void (*)(void *) dataNotifyIncrease, void (*)(void *) dataNotifyDecrease, void * dataNotifyUserPtr, void (*)(void *) dataShutdownNotify, void * dataShutdownUserPtr) -> bool"""
    return _libcaer_wrap.caerDeviceDataStart(handle, dataNotifyIncrease, dataNotifyDecrease, dataNotifyUserPtr, dataShutdownNotify, dataShutdownUserPtr)

def caerDeviceDataStop(handle):
    """caerDeviceDataStop(caerDeviceHandle handle) -> bool"""
    return _libcaer_wrap.caerDeviceDataStop(handle)

def caerDeviceDataGet(handle):
    """caerDeviceDataGet(caerDeviceHandle handle) -> caer_event_packet_container"""
    return _libcaer_wrap.caerDeviceDataGet(handle)
CAER_HOST_CONFIG_USB = _libcaer_wrap.CAER_HOST_CONFIG_USB
CAER_HOST_CONFIG_USB_BUFFER_NUMBER = _libcaer_wrap.CAER_HOST_CONFIG_USB_BUFFER_NUMBER
CAER_HOST_CONFIG_USB_BUFFER_SIZE = _libcaer_wrap.CAER_HOST_CONFIG_USB_BUFFER_SIZE

def caerDeviceOpen(deviceID, deviceType, busNumberRestrict, devAddressRestrict, serialNumberRestrict):
    """caerDeviceOpen(uint16_t deviceID, uint16_t deviceType, uint8_t busNumberRestrict, uint8_t devAddressRestrict, char const * serialNumberRestrict) -> caerDeviceHandle"""
    return _libcaer_wrap.caerDeviceOpen(deviceID, deviceType, busNumberRestrict, devAddressRestrict, serialNumberRestrict)
CAER_HOST_CONFIG_SERIAL = _libcaer_wrap.CAER_HOST_CONFIG_SERIAL
CAER_HOST_CONFIG_SERIAL_READ_SIZE = _libcaer_wrap.CAER_HOST_CONFIG_SERIAL_READ_SIZE
CAER_HOST_CONFIG_SERIAL_BAUD_RATE_2M = _libcaer_wrap.CAER_HOST_CONFIG_SERIAL_BAUD_RATE_2M
CAER_HOST_CONFIG_SERIAL_BAUD_RATE_4M = _libcaer_wrap.CAER_HOST_CONFIG_SERIAL_BAUD_RATE_4M
CAER_HOST_CONFIG_SERIAL_BAUD_RATE_8M = _libcaer_wrap.CAER_HOST_CONFIG_SERIAL_BAUD_RATE_8M
CAER_HOST_CONFIG_SERIAL_BAUD_RATE_12M = _libcaer_wrap.CAER_HOST_CONFIG_SERIAL_BAUD_RATE_12M

def caerDeviceOpenSerial(deviceID, deviceType, serialPortName, serialBaudRate):
    """caerDeviceOpenSerial(uint16_t deviceID, uint16_t deviceType, char const * serialPortName, uint32_t serialBaudRate) -> caerDeviceHandle"""
    return _libcaer_wrap.caerDeviceOpenSerial(deviceID, deviceType, serialPortName, serialBaudRate)
CAER_DEVICE_DVS128 = _libcaer_wrap.CAER_DEVICE_DVS128
DVS128_CONFIG_DVS = _libcaer_wrap.DVS128_CONFIG_DVS
DVS128_CONFIG_BIAS = _libcaer_wrap.DVS128_CONFIG_BIAS
DVS128_CONFIG_DVS_RUN = _libcaer_wrap.DVS128_CONFIG_DVS_RUN
DVS128_CONFIG_DVS_TIMESTAMP_RESET = _libcaer_wrap.DVS128_CONFIG_DVS_TIMESTAMP_RESET
DVS128_CONFIG_DVS_ARRAY_RESET = _libcaer_wrap.DVS128_CONFIG_DVS_ARRAY_RESET
DVS128_CONFIG_DVS_TS_MASTER = _libcaer_wrap.DVS128_CONFIG_DVS_TS_MASTER
DVS128_CONFIG_BIAS_CAS = _libcaer_wrap.DVS128_CONFIG_BIAS_CAS
DVS128_CONFIG_BIAS_INJGND = _libcaer_wrap.DVS128_CONFIG_BIAS_INJGND
DVS128_CONFIG_BIAS_REQPD = _libcaer_wrap.DVS128_CONFIG_BIAS_REQPD
DVS128_CONFIG_BIAS_PUX = _libcaer_wrap.DVS128_CONFIG_BIAS_PUX
DVS128_CONFIG_BIAS_DIFFOFF = _libcaer_wrap.DVS128_CONFIG_BIAS_DIFFOFF
DVS128_CONFIG_BIAS_REQ = _libcaer_wrap.DVS128_CONFIG_BIAS_REQ
DVS128_CONFIG_BIAS_REFR = _libcaer_wrap.DVS128_CONFIG_BIAS_REFR
DVS128_CONFIG_BIAS_PUY = _libcaer_wrap.DVS128_CONFIG_BIAS_PUY
DVS128_CONFIG_BIAS_DIFFON = _libcaer_wrap.DVS128_CONFIG_BIAS_DIFFON
DVS128_CONFIG_BIAS_DIFF = _libcaer_wrap.DVS128_CONFIG_BIAS_DIFF
DVS128_CONFIG_BIAS_FOLL = _libcaer_wrap.DVS128_CONFIG_BIAS_FOLL
DVS128_CONFIG_BIAS_PR = _libcaer_wrap.DVS128_CONFIG_BIAS_PR
class caer_dvs128_info(_object):
    """Proxy of C caer_dvs128_info struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_dvs128_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_dvs128_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["deviceID"] = _libcaer_wrap.caer_dvs128_info_deviceID_set
    __swig_getmethods__["deviceID"] = _libcaer_wrap.caer_dvs128_info_deviceID_get
    if _newclass:
        deviceID = _swig_property(_libcaer_wrap.caer_dvs128_info_deviceID_get, _libcaer_wrap.caer_dvs128_info_deviceID_set)
    __swig_setmethods__["deviceSerialNumber"] = _libcaer_wrap.caer_dvs128_info_deviceSerialNumber_set
    __swig_getmethods__["deviceSerialNumber"] = _libcaer_wrap.caer_dvs128_info_deviceSerialNumber_get
    if _newclass:
        deviceSerialNumber = _swig_property(_libcaer_wrap.caer_dvs128_info_deviceSerialNumber_get, _libcaer_wrap.caer_dvs128_info_deviceSerialNumber_set)
    __swig_setmethods__["deviceUSBBusNumber"] = _libcaer_wrap.caer_dvs128_info_deviceUSBBusNumber_set
    __swig_getmethods__["deviceUSBBusNumber"] = _libcaer_wrap.caer_dvs128_info_deviceUSBBusNumber_get
    if _newclass:
        deviceUSBBusNumber = _swig_property(_libcaer_wrap.caer_dvs128_info_deviceUSBBusNumber_get, _libcaer_wrap.caer_dvs128_info_deviceUSBBusNumber_set)
    __swig_setmethods__["deviceUSBDeviceAddress"] = _libcaer_wrap.caer_dvs128_info_deviceUSBDeviceAddress_set
    __swig_getmethods__["deviceUSBDeviceAddress"] = _libcaer_wrap.caer_dvs128_info_deviceUSBDeviceAddress_get
    if _newclass:
        deviceUSBDeviceAddress = _swig_property(_libcaer_wrap.caer_dvs128_info_deviceUSBDeviceAddress_get, _libcaer_wrap.caer_dvs128_info_deviceUSBDeviceAddress_set)
    __swig_setmethods__["deviceString"] = _libcaer_wrap.caer_dvs128_info_deviceString_set
    __swig_getmethods__["deviceString"] = _libcaer_wrap.caer_dvs128_info_deviceString_get
    if _newclass:
        deviceString = _swig_property(_libcaer_wrap.caer_dvs128_info_deviceString_get, _libcaer_wrap.caer_dvs128_info_deviceString_set)
    __swig_setmethods__["logicVersion"] = _libcaer_wrap.caer_dvs128_info_logicVersion_set
    __swig_getmethods__["logicVersion"] = _libcaer_wrap.caer_dvs128_info_logicVersion_get
    if _newclass:
        logicVersion = _swig_property(_libcaer_wrap.caer_dvs128_info_logicVersion_get, _libcaer_wrap.caer_dvs128_info_logicVersion_set)
    __swig_setmethods__["deviceIsMaster"] = _libcaer_wrap.caer_dvs128_info_deviceIsMaster_set
    __swig_getmethods__["deviceIsMaster"] = _libcaer_wrap.caer_dvs128_info_deviceIsMaster_get
    if _newclass:
        deviceIsMaster = _swig_property(_libcaer_wrap.caer_dvs128_info_deviceIsMaster_get, _libcaer_wrap.caer_dvs128_info_deviceIsMaster_set)
    __swig_setmethods__["dvsSizeX"] = _libcaer_wrap.caer_dvs128_info_dvsSizeX_set
    __swig_getmethods__["dvsSizeX"] = _libcaer_wrap.caer_dvs128_info_dvsSizeX_get
    if _newclass:
        dvsSizeX = _swig_property(_libcaer_wrap.caer_dvs128_info_dvsSizeX_get, _libcaer_wrap.caer_dvs128_info_dvsSizeX_set)
    __swig_setmethods__["dvsSizeY"] = _libcaer_wrap.caer_dvs128_info_dvsSizeY_set
    __swig_getmethods__["dvsSizeY"] = _libcaer_wrap.caer_dvs128_info_dvsSizeY_get
    if _newclass:
        dvsSizeY = _swig_property(_libcaer_wrap.caer_dvs128_info_dvsSizeY_get, _libcaer_wrap.caer_dvs128_info_dvsSizeY_set)

    def __init__(self):
        """__init__(caer_dvs128_info self) -> caer_dvs128_info"""
        this = _libcaer_wrap.new_caer_dvs128_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_dvs128_info
    def __del__(self):
        return None
caer_dvs128_info_swigregister = _libcaer_wrap.caer_dvs128_info_swigregister
caer_dvs128_info_swigregister(caer_dvs128_info)


def caerDVS128InfoGet(handle):
    """caerDVS128InfoGet(caerDeviceHandle handle) -> caer_dvs128_info"""
    return _libcaer_wrap.caerDVS128InfoGet(handle)
CAER_DEVICE_EDVS = _libcaer_wrap.CAER_DEVICE_EDVS
EDVS_CONFIG_DVS = _libcaer_wrap.EDVS_CONFIG_DVS
EDVS_CONFIG_BIAS = _libcaer_wrap.EDVS_CONFIG_BIAS
EDVS_CONFIG_DVS_RUN = _libcaer_wrap.EDVS_CONFIG_DVS_RUN
EDVS_CONFIG_DVS_TIMESTAMP_RESET = _libcaer_wrap.EDVS_CONFIG_DVS_TIMESTAMP_RESET
EDVS_CONFIG_BIAS_CAS = _libcaer_wrap.EDVS_CONFIG_BIAS_CAS
EDVS_CONFIG_BIAS_INJGND = _libcaer_wrap.EDVS_CONFIG_BIAS_INJGND
EDVS_CONFIG_BIAS_REQPD = _libcaer_wrap.EDVS_CONFIG_BIAS_REQPD
EDVS_CONFIG_BIAS_PUX = _libcaer_wrap.EDVS_CONFIG_BIAS_PUX
EDVS_CONFIG_BIAS_DIFFOFF = _libcaer_wrap.EDVS_CONFIG_BIAS_DIFFOFF
EDVS_CONFIG_BIAS_REQ = _libcaer_wrap.EDVS_CONFIG_BIAS_REQ
EDVS_CONFIG_BIAS_REFR = _libcaer_wrap.EDVS_CONFIG_BIAS_REFR
EDVS_CONFIG_BIAS_PUY = _libcaer_wrap.EDVS_CONFIG_BIAS_PUY
EDVS_CONFIG_BIAS_DIFFON = _libcaer_wrap.EDVS_CONFIG_BIAS_DIFFON
EDVS_CONFIG_BIAS_DIFF = _libcaer_wrap.EDVS_CONFIG_BIAS_DIFF
EDVS_CONFIG_BIAS_FOLL = _libcaer_wrap.EDVS_CONFIG_BIAS_FOLL
EDVS_CONFIG_BIAS_PR = _libcaer_wrap.EDVS_CONFIG_BIAS_PR
class caer_edvs_info(_object):
    """Proxy of C caer_edvs_info struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_edvs_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_edvs_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["deviceID"] = _libcaer_wrap.caer_edvs_info_deviceID_set
    __swig_getmethods__["deviceID"] = _libcaer_wrap.caer_edvs_info_deviceID_get
    if _newclass:
        deviceID = _swig_property(_libcaer_wrap.caer_edvs_info_deviceID_get, _libcaer_wrap.caer_edvs_info_deviceID_set)
    __swig_setmethods__["deviceString"] = _libcaer_wrap.caer_edvs_info_deviceString_set
    __swig_getmethods__["deviceString"] = _libcaer_wrap.caer_edvs_info_deviceString_get
    if _newclass:
        deviceString = _swig_property(_libcaer_wrap.caer_edvs_info_deviceString_get, _libcaer_wrap.caer_edvs_info_deviceString_set)
    __swig_setmethods__["deviceIsMaster"] = _libcaer_wrap.caer_edvs_info_deviceIsMaster_set
    __swig_getmethods__["deviceIsMaster"] = _libcaer_wrap.caer_edvs_info_deviceIsMaster_get
    if _newclass:
        deviceIsMaster = _swig_property(_libcaer_wrap.caer_edvs_info_deviceIsMaster_get, _libcaer_wrap.caer_edvs_info_deviceIsMaster_set)
    __swig_setmethods__["dvsSizeX"] = _libcaer_wrap.caer_edvs_info_dvsSizeX_set
    __swig_getmethods__["dvsSizeX"] = _libcaer_wrap.caer_edvs_info_dvsSizeX_get
    if _newclass:
        dvsSizeX = _swig_property(_libcaer_wrap.caer_edvs_info_dvsSizeX_get, _libcaer_wrap.caer_edvs_info_dvsSizeX_set)
    __swig_setmethods__["dvsSizeY"] = _libcaer_wrap.caer_edvs_info_dvsSizeY_set
    __swig_getmethods__["dvsSizeY"] = _libcaer_wrap.caer_edvs_info_dvsSizeY_get
    if _newclass:
        dvsSizeY = _swig_property(_libcaer_wrap.caer_edvs_info_dvsSizeY_get, _libcaer_wrap.caer_edvs_info_dvsSizeY_set)
    __swig_setmethods__["serialPortName"] = _libcaer_wrap.caer_edvs_info_serialPortName_set
    __swig_getmethods__["serialPortName"] = _libcaer_wrap.caer_edvs_info_serialPortName_get
    if _newclass:
        serialPortName = _swig_property(_libcaer_wrap.caer_edvs_info_serialPortName_get, _libcaer_wrap.caer_edvs_info_serialPortName_set)
    __swig_setmethods__["serialBaudRate"] = _libcaer_wrap.caer_edvs_info_serialBaudRate_set
    __swig_getmethods__["serialBaudRate"] = _libcaer_wrap.caer_edvs_info_serialBaudRate_get
    if _newclass:
        serialBaudRate = _swig_property(_libcaer_wrap.caer_edvs_info_serialBaudRate_get, _libcaer_wrap.caer_edvs_info_serialBaudRate_set)

    def __init__(self):
        """__init__(caer_edvs_info self) -> caer_edvs_info"""
        this = _libcaer_wrap.new_caer_edvs_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_edvs_info
    def __del__(self):
        return None
caer_edvs_info_swigregister = _libcaer_wrap.caer_edvs_info_swigregister
caer_edvs_info_swigregister(caer_edvs_info)


def caerEDVSInfoGet(handle):
    """caerEDVSInfoGet(caerDeviceHandle handle) -> caer_edvs_info"""
    return _libcaer_wrap.caerEDVSInfoGet(handle)
CAER_DEVICE_DAVIS_FX2 = _libcaer_wrap.CAER_DEVICE_DAVIS_FX2
CAER_DEVICE_DAVIS_FX3 = _libcaer_wrap.CAER_DEVICE_DAVIS_FX3
CAER_DEVICE_DAVIS = _libcaer_wrap.CAER_DEVICE_DAVIS
CAER_DEVICE_DAVIS_RPI = _libcaer_wrap.CAER_DEVICE_DAVIS_RPI
DAVIS_CHIP_DAVIS240A = _libcaer_wrap.DAVIS_CHIP_DAVIS240A
DAVIS_CHIP_DAVIS240B = _libcaer_wrap.DAVIS_CHIP_DAVIS240B
DAVIS_CHIP_DAVIS240C = _libcaer_wrap.DAVIS_CHIP_DAVIS240C
DAVIS_CHIP_DAVIS128 = _libcaer_wrap.DAVIS_CHIP_DAVIS128
DAVIS_CHIP_DAVIS346A = _libcaer_wrap.DAVIS_CHIP_DAVIS346A
DAVIS_CHIP_DAVIS346B = _libcaer_wrap.DAVIS_CHIP_DAVIS346B
DAVIS_CHIP_DAVIS640 = _libcaer_wrap.DAVIS_CHIP_DAVIS640
DAVIS_CHIP_DAVISRGB = _libcaer_wrap.DAVIS_CHIP_DAVISRGB
DAVIS_CHIP_DAVIS208 = _libcaer_wrap.DAVIS_CHIP_DAVIS208
DAVIS_CHIP_DAVIS346C = _libcaer_wrap.DAVIS_CHIP_DAVIS346C
DAVIS_CONFIG_MUX = _libcaer_wrap.DAVIS_CONFIG_MUX
DAVIS_CONFIG_DVS = _libcaer_wrap.DAVIS_CONFIG_DVS
DAVIS_CONFIG_APS = _libcaer_wrap.DAVIS_CONFIG_APS
DAVIS_CONFIG_IMU = _libcaer_wrap.DAVIS_CONFIG_IMU
DAVIS_CONFIG_EXTINPUT = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT
DAVIS_CONFIG_BIAS = _libcaer_wrap.DAVIS_CONFIG_BIAS
DAVIS_CONFIG_CHIP = _libcaer_wrap.DAVIS_CONFIG_CHIP
DAVIS_CONFIG_SYSINFO = _libcaer_wrap.DAVIS_CONFIG_SYSINFO
DAVIS_CONFIG_USB = _libcaer_wrap.DAVIS_CONFIG_USB
DAVIS_CONFIG_DDRAER = _libcaer_wrap.DAVIS_CONFIG_DDRAER
DAVIS_CONFIG_MUX_RUN = _libcaer_wrap.DAVIS_CONFIG_MUX_RUN
DAVIS_CONFIG_MUX_TIMESTAMP_RUN = _libcaer_wrap.DAVIS_CONFIG_MUX_TIMESTAMP_RUN
DAVIS_CONFIG_MUX_TIMESTAMP_RESET = _libcaer_wrap.DAVIS_CONFIG_MUX_TIMESTAMP_RESET
DAVIS_CONFIG_MUX_FORCE_CHIP_BIAS_ENABLE = _libcaer_wrap.DAVIS_CONFIG_MUX_FORCE_CHIP_BIAS_ENABLE
DAVIS_CONFIG_MUX_DROP_DVS_ON_TRANSFER_STALL = _libcaer_wrap.DAVIS_CONFIG_MUX_DROP_DVS_ON_TRANSFER_STALL
DAVIS_CONFIG_MUX_DROP_APS_ON_TRANSFER_STALL = _libcaer_wrap.DAVIS_CONFIG_MUX_DROP_APS_ON_TRANSFER_STALL
DAVIS_CONFIG_MUX_DROP_IMU_ON_TRANSFER_STALL = _libcaer_wrap.DAVIS_CONFIG_MUX_DROP_IMU_ON_TRANSFER_STALL
DAVIS_CONFIG_MUX_DROP_EXTINPUT_ON_TRANSFER_STALL = _libcaer_wrap.DAVIS_CONFIG_MUX_DROP_EXTINPUT_ON_TRANSFER_STALL
DAVIS_CONFIG_MUX_HAS_STATISTICS = _libcaer_wrap.DAVIS_CONFIG_MUX_HAS_STATISTICS
DAVIS_CONFIG_MUX_STATISTICS_DVS_DROPPED = _libcaer_wrap.DAVIS_CONFIG_MUX_STATISTICS_DVS_DROPPED
DAVIS_CONFIG_MUX_STATISTICS_APS_DROPPED = _libcaer_wrap.DAVIS_CONFIG_MUX_STATISTICS_APS_DROPPED
DAVIS_CONFIG_MUX_STATISTICS_IMU_DROPPED = _libcaer_wrap.DAVIS_CONFIG_MUX_STATISTICS_IMU_DROPPED
DAVIS_CONFIG_MUX_STATISTICS_EXTINPUT_DROPPED = _libcaer_wrap.DAVIS_CONFIG_MUX_STATISTICS_EXTINPUT_DROPPED
DAVIS_CONFIG_DVS_SIZE_COLUMNS = _libcaer_wrap.DAVIS_CONFIG_DVS_SIZE_COLUMNS
DAVIS_CONFIG_DVS_SIZE_ROWS = _libcaer_wrap.DAVIS_CONFIG_DVS_SIZE_ROWS
DAVIS_CONFIG_DVS_ORIENTATION_INFO = _libcaer_wrap.DAVIS_CONFIG_DVS_ORIENTATION_INFO
DAVIS_CONFIG_DVS_RUN = _libcaer_wrap.DAVIS_CONFIG_DVS_RUN
DAVIS_CONFIG_DVS_ACK_DELAY_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_ACK_DELAY_ROW
DAVIS_CONFIG_DVS_ACK_DELAY_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_ACK_DELAY_COLUMN
DAVIS_CONFIG_DVS_ACK_EXTENSION_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_ACK_EXTENSION_ROW
DAVIS_CONFIG_DVS_ACK_EXTENSION_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_ACK_EXTENSION_COLUMN
DAVIS_CONFIG_DVS_WAIT_ON_TRANSFER_STALL = _libcaer_wrap.DAVIS_CONFIG_DVS_WAIT_ON_TRANSFER_STALL
DAVIS_CONFIG_DVS_FILTER_ROW_ONLY_EVENTS = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_ROW_ONLY_EVENTS
DAVIS_CONFIG_DVS_EXTERNAL_AER_CONTROL = _libcaer_wrap.DAVIS_CONFIG_DVS_EXTERNAL_AER_CONTROL
DAVIS_CONFIG_DVS_HAS_PIXEL_FILTER = _libcaer_wrap.DAVIS_CONFIG_DVS_HAS_PIXEL_FILTER
DAVIS_CONFIG_DVS_FILTER_PIXEL_0_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_0_ROW
DAVIS_CONFIG_DVS_FILTER_PIXEL_0_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_0_COLUMN
DAVIS_CONFIG_DVS_FILTER_PIXEL_1_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_1_ROW
DAVIS_CONFIG_DVS_FILTER_PIXEL_1_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_1_COLUMN
DAVIS_CONFIG_DVS_FILTER_PIXEL_2_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_2_ROW
DAVIS_CONFIG_DVS_FILTER_PIXEL_2_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_2_COLUMN
DAVIS_CONFIG_DVS_FILTER_PIXEL_3_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_3_ROW
DAVIS_CONFIG_DVS_FILTER_PIXEL_3_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_3_COLUMN
DAVIS_CONFIG_DVS_FILTER_PIXEL_4_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_4_ROW
DAVIS_CONFIG_DVS_FILTER_PIXEL_4_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_4_COLUMN
DAVIS_CONFIG_DVS_FILTER_PIXEL_5_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_5_ROW
DAVIS_CONFIG_DVS_FILTER_PIXEL_5_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_5_COLUMN
DAVIS_CONFIG_DVS_FILTER_PIXEL_6_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_6_ROW
DAVIS_CONFIG_DVS_FILTER_PIXEL_6_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_6_COLUMN
DAVIS_CONFIG_DVS_FILTER_PIXEL_7_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_7_ROW
DAVIS_CONFIG_DVS_FILTER_PIXEL_7_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_7_COLUMN
DAVIS_CONFIG_DVS_HAS_BACKGROUND_ACTIVITY_FILTER = _libcaer_wrap.DAVIS_CONFIG_DVS_HAS_BACKGROUND_ACTIVITY_FILTER
DAVIS_CONFIG_DVS_FILTER_BACKGROUND_ACTIVITY = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_BACKGROUND_ACTIVITY
DAVIS_CONFIG_DVS_FILTER_BACKGROUND_ACTIVITY_TIME = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_BACKGROUND_ACTIVITY_TIME
DAVIS_CONFIG_DVS_HAS_TEST_EVENT_GENERATOR = _libcaer_wrap.DAVIS_CONFIG_DVS_HAS_TEST_EVENT_GENERATOR
DAVIS_CONFIG_DVS_TEST_EVENT_GENERATOR_ENABLE = _libcaer_wrap.DAVIS_CONFIG_DVS_TEST_EVENT_GENERATOR_ENABLE
DAVIS_CONFIG_DVS_FILTER_REFRACTORY_PERIOD = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_REFRACTORY_PERIOD
DAVIS_CONFIG_DVS_FILTER_REFRACTORY_PERIOD_TIME = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_REFRACTORY_PERIOD_TIME
DAVIS_CONFIG_DVS_HAS_ROI_FILTER = _libcaer_wrap.DAVIS_CONFIG_DVS_HAS_ROI_FILTER
DAVIS_CONFIG_DVS_FILTER_ROI_START_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_ROI_START_COLUMN
DAVIS_CONFIG_DVS_FILTER_ROI_START_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_ROI_START_ROW
DAVIS_CONFIG_DVS_FILTER_ROI_END_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_ROI_END_COLUMN
DAVIS_CONFIG_DVS_FILTER_ROI_END_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_ROI_END_ROW
DAVIS_CONFIG_DVS_HAS_STATISTICS = _libcaer_wrap.DAVIS_CONFIG_DVS_HAS_STATISTICS
DAVIS_CONFIG_DVS_STATISTICS_EVENTS_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_STATISTICS_EVENTS_ROW
DAVIS_CONFIG_DVS_STATISTICS_EVENTS_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_STATISTICS_EVENTS_COLUMN
DAVIS_CONFIG_DVS_STATISTICS_EVENTS_DROPPED = _libcaer_wrap.DAVIS_CONFIG_DVS_STATISTICS_EVENTS_DROPPED
DAVIS_CONFIG_DVS_STATISTICS_FILTERED_PIXELS = _libcaer_wrap.DAVIS_CONFIG_DVS_STATISTICS_FILTERED_PIXELS
DAVIS_CONFIG_DVS_STATISTICS_FILTERED_BACKGROUND_ACTIVITY = _libcaer_wrap.DAVIS_CONFIG_DVS_STATISTICS_FILTERED_BACKGROUND_ACTIVITY
DAVIS_CONFIG_DVS_STATISTICS_FILTERED_REFRACTORY_PERIOD = _libcaer_wrap.DAVIS_CONFIG_DVS_STATISTICS_FILTERED_REFRACTORY_PERIOD
DAVIS_CONFIG_DVS_FILTER_PIXEL_AUTO_TRAIN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_AUTO_TRAIN
DAVIS_CONFIG_APS_SIZE_COLUMNS = _libcaer_wrap.DAVIS_CONFIG_APS_SIZE_COLUMNS
DAVIS_CONFIG_APS_SIZE_ROWS = _libcaer_wrap.DAVIS_CONFIG_APS_SIZE_ROWS
DAVIS_CONFIG_APS_ORIENTATION_INFO = _libcaer_wrap.DAVIS_CONFIG_APS_ORIENTATION_INFO
DAVIS_CONFIG_APS_COLOR_FILTER = _libcaer_wrap.DAVIS_CONFIG_APS_COLOR_FILTER
DAVIS_CONFIG_APS_RUN = _libcaer_wrap.DAVIS_CONFIG_APS_RUN
DAVIS_CONFIG_APS_RESET_READ = _libcaer_wrap.DAVIS_CONFIG_APS_RESET_READ
DAVIS_CONFIG_APS_WAIT_ON_TRANSFER_STALL = _libcaer_wrap.DAVIS_CONFIG_APS_WAIT_ON_TRANSFER_STALL
DAVIS_CONFIG_APS_HAS_GLOBAL_SHUTTER = _libcaer_wrap.DAVIS_CONFIG_APS_HAS_GLOBAL_SHUTTER
DAVIS_CONFIG_APS_GLOBAL_SHUTTER = _libcaer_wrap.DAVIS_CONFIG_APS_GLOBAL_SHUTTER
DAVIS_CONFIG_APS_START_COLUMN_0 = _libcaer_wrap.DAVIS_CONFIG_APS_START_COLUMN_0
DAVIS_CONFIG_APS_START_ROW_0 = _libcaer_wrap.DAVIS_CONFIG_APS_START_ROW_0
DAVIS_CONFIG_APS_END_COLUMN_0 = _libcaer_wrap.DAVIS_CONFIG_APS_END_COLUMN_0
DAVIS_CONFIG_APS_END_ROW_0 = _libcaer_wrap.DAVIS_CONFIG_APS_END_ROW_0
DAVIS_CONFIG_APS_EXPOSURE = _libcaer_wrap.DAVIS_CONFIG_APS_EXPOSURE
DAVIS_CONFIG_APS_FRAME_DELAY = _libcaer_wrap.DAVIS_CONFIG_APS_FRAME_DELAY
DAVIS_CONFIG_APS_RESET_SETTLE = _libcaer_wrap.DAVIS_CONFIG_APS_RESET_SETTLE
DAVIS_CONFIG_APS_COLUMN_SETTLE = _libcaer_wrap.DAVIS_CONFIG_APS_COLUMN_SETTLE
DAVIS_CONFIG_APS_ROW_SETTLE = _libcaer_wrap.DAVIS_CONFIG_APS_ROW_SETTLE
DAVIS_CONFIG_APS_NULL_SETTLE = _libcaer_wrap.DAVIS_CONFIG_APS_NULL_SETTLE
DAVIS_CONFIG_APS_HAS_QUAD_ROI = _libcaer_wrap.DAVIS_CONFIG_APS_HAS_QUAD_ROI
DAVIS_CONFIG_APS_START_COLUMN_1 = _libcaer_wrap.DAVIS_CONFIG_APS_START_COLUMN_1
DAVIS_CONFIG_APS_START_ROW_1 = _libcaer_wrap.DAVIS_CONFIG_APS_START_ROW_1
DAVIS_CONFIG_APS_END_COLUMN_1 = _libcaer_wrap.DAVIS_CONFIG_APS_END_COLUMN_1
DAVIS_CONFIG_APS_END_ROW_1 = _libcaer_wrap.DAVIS_CONFIG_APS_END_ROW_1
DAVIS_CONFIG_APS_START_COLUMN_2 = _libcaer_wrap.DAVIS_CONFIG_APS_START_COLUMN_2
DAVIS_CONFIG_APS_START_ROW_2 = _libcaer_wrap.DAVIS_CONFIG_APS_START_ROW_2
DAVIS_CONFIG_APS_END_COLUMN_2 = _libcaer_wrap.DAVIS_CONFIG_APS_END_COLUMN_2
DAVIS_CONFIG_APS_END_ROW_2 = _libcaer_wrap.DAVIS_CONFIG_APS_END_ROW_2
DAVIS_CONFIG_APS_START_COLUMN_3 = _libcaer_wrap.DAVIS_CONFIG_APS_START_COLUMN_3
DAVIS_CONFIG_APS_START_ROW_3 = _libcaer_wrap.DAVIS_CONFIG_APS_START_ROW_3
DAVIS_CONFIG_APS_END_COLUMN_3 = _libcaer_wrap.DAVIS_CONFIG_APS_END_COLUMN_3
DAVIS_CONFIG_APS_END_ROW_3 = _libcaer_wrap.DAVIS_CONFIG_APS_END_ROW_3
DAVIS_CONFIG_APS_HAS_INTERNAL_ADC = _libcaer_wrap.DAVIS_CONFIG_APS_HAS_INTERNAL_ADC
DAVIS_CONFIG_APS_SAMPLE_ENABLE = _libcaer_wrap.DAVIS_CONFIG_APS_SAMPLE_ENABLE
DAVIS_CONFIG_APS_SAMPLE_SETTLE = _libcaer_wrap.DAVIS_CONFIG_APS_SAMPLE_SETTLE
DAVIS_CONFIG_APS_RAMP_RESET = _libcaer_wrap.DAVIS_CONFIG_APS_RAMP_RESET
DAVIS_CONFIG_APS_RAMP_SHORT_RESET = _libcaer_wrap.DAVIS_CONFIG_APS_RAMP_SHORT_RESET
DAVIS_CONFIG_APS_ADC_TEST_MODE = _libcaer_wrap.DAVIS_CONFIG_APS_ADC_TEST_MODE
DAVIS_CONFIG_APS_ROI0_ENABLED = _libcaer_wrap.DAVIS_CONFIG_APS_ROI0_ENABLED
DAVIS_CONFIG_APS_ROI1_ENABLED = _libcaer_wrap.DAVIS_CONFIG_APS_ROI1_ENABLED
DAVIS_CONFIG_APS_ROI2_ENABLED = _libcaer_wrap.DAVIS_CONFIG_APS_ROI2_ENABLED
DAVIS_CONFIG_APS_ROI3_ENABLED = _libcaer_wrap.DAVIS_CONFIG_APS_ROI3_ENABLED
DAVISRGB_CONFIG_APS_TRANSFER = _libcaer_wrap.DAVISRGB_CONFIG_APS_TRANSFER
DAVISRGB_CONFIG_APS_RSFDSETTLE = _libcaer_wrap.DAVISRGB_CONFIG_APS_RSFDSETTLE
DAVISRGB_CONFIG_APS_GSPDRESET = _libcaer_wrap.DAVISRGB_CONFIG_APS_GSPDRESET
DAVISRGB_CONFIG_APS_GSRESETFALL = _libcaer_wrap.DAVISRGB_CONFIG_APS_GSRESETFALL
DAVISRGB_CONFIG_APS_GSTXFALL = _libcaer_wrap.DAVISRGB_CONFIG_APS_GSTXFALL
DAVISRGB_CONFIG_APS_GSFDRESET = _libcaer_wrap.DAVISRGB_CONFIG_APS_GSFDRESET
DAVIS_CONFIG_APS_SNAPSHOT = _libcaer_wrap.DAVIS_CONFIG_APS_SNAPSHOT
DAVIS_CONFIG_APS_AUTOEXPOSURE = _libcaer_wrap.DAVIS_CONFIG_APS_AUTOEXPOSURE
DAVIS_CONFIG_IMU_RUN = _libcaer_wrap.DAVIS_CONFIG_IMU_RUN
DAVIS_CONFIG_IMU_TEMP_STANDBY = _libcaer_wrap.DAVIS_CONFIG_IMU_TEMP_STANDBY
DAVIS_CONFIG_IMU_ACCEL_STANDBY = _libcaer_wrap.DAVIS_CONFIG_IMU_ACCEL_STANDBY
DAVIS_CONFIG_IMU_GYRO_STANDBY = _libcaer_wrap.DAVIS_CONFIG_IMU_GYRO_STANDBY
DAVIS_CONFIG_IMU_LP_CYCLE = _libcaer_wrap.DAVIS_CONFIG_IMU_LP_CYCLE
DAVIS_CONFIG_IMU_LP_WAKEUP = _libcaer_wrap.DAVIS_CONFIG_IMU_LP_WAKEUP
DAVIS_CONFIG_IMU_SAMPLE_RATE_DIVIDER = _libcaer_wrap.DAVIS_CONFIG_IMU_SAMPLE_RATE_DIVIDER
DAVIS_CONFIG_IMU_GYRO_DLPF = _libcaer_wrap.DAVIS_CONFIG_IMU_GYRO_DLPF
DAVIS_CONFIG_IMU_DIGITAL_LOW_PASS_FILTER = _libcaer_wrap.DAVIS_CONFIG_IMU_DIGITAL_LOW_PASS_FILTER
DAVIS_CONFIG_IMU_ACCEL_FULL_SCALE = _libcaer_wrap.DAVIS_CONFIG_IMU_ACCEL_FULL_SCALE
DAVIS_CONFIG_IMU_GYRO_FULL_SCALE = _libcaer_wrap.DAVIS_CONFIG_IMU_GYRO_FULL_SCALE
DAVIS_CONFIG_IMU_ORIENTATION_INFO = _libcaer_wrap.DAVIS_CONFIG_IMU_ORIENTATION_INFO
DAVIS_CONFIG_IMU_ACCEL_DLPF = _libcaer_wrap.DAVIS_CONFIG_IMU_ACCEL_DLPF
DAVIS_CONFIG_EXTINPUT_RUN_DETECTOR = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_RUN_DETECTOR
DAVIS_CONFIG_EXTINPUT_DETECT_RISING_EDGES = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_RISING_EDGES
DAVIS_CONFIG_EXTINPUT_DETECT_FALLING_EDGES = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_FALLING_EDGES
DAVIS_CONFIG_EXTINPUT_DETECT_PULSES = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_PULSES
DAVIS_CONFIG_EXTINPUT_DETECT_PULSE_POLARITY = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_PULSE_POLARITY
DAVIS_CONFIG_EXTINPUT_DETECT_PULSE_LENGTH = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_PULSE_LENGTH
DAVIS_CONFIG_EXTINPUT_HAS_GENERATOR = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_HAS_GENERATOR
DAVIS_CONFIG_EXTINPUT_RUN_GENERATOR = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_RUN_GENERATOR
DAVIS_CONFIG_EXTINPUT_GENERATE_USE_CUSTOM_SIGNAL = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_GENERATE_USE_CUSTOM_SIGNAL
DAVIS_CONFIG_EXTINPUT_GENERATE_PULSE_POLARITY = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_GENERATE_PULSE_POLARITY
DAVIS_CONFIG_EXTINPUT_GENERATE_PULSE_INTERVAL = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_GENERATE_PULSE_INTERVAL
DAVIS_CONFIG_EXTINPUT_GENERATE_PULSE_LENGTH = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_GENERATE_PULSE_LENGTH
DAVIS_CONFIG_EXTINPUT_GENERATE_INJECT_ON_RISING_EDGE = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_GENERATE_INJECT_ON_RISING_EDGE
DAVIS_CONFIG_EXTINPUT_GENERATE_INJECT_ON_FALLING_EDGE = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_GENERATE_INJECT_ON_FALLING_EDGE
DAVIS_CONFIG_EXTINPUT_HAS_EXTRA_DETECTORS = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_HAS_EXTRA_DETECTORS
DAVIS_CONFIG_EXTINPUT_RUN_DETECTOR1 = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_RUN_DETECTOR1
DAVIS_CONFIG_EXTINPUT_DETECT_RISING_EDGES1 = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_RISING_EDGES1
DAVIS_CONFIG_EXTINPUT_DETECT_FALLING_EDGES1 = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_FALLING_EDGES1
DAVIS_CONFIG_EXTINPUT_DETECT_PULSES1 = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_PULSES1
DAVIS_CONFIG_EXTINPUT_DETECT_PULSE_POLARITY1 = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_PULSE_POLARITY1
DAVIS_CONFIG_EXTINPUT_DETECT_PULSE_LENGTH1 = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_PULSE_LENGTH1
DAVIS_CONFIG_EXTINPUT_RUN_DETECTOR2 = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_RUN_DETECTOR2
DAVIS_CONFIG_EXTINPUT_DETECT_RISING_EDGES2 = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_RISING_EDGES2
DAVIS_CONFIG_EXTINPUT_DETECT_FALLING_EDGES2 = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_FALLING_EDGES2
DAVIS_CONFIG_EXTINPUT_DETECT_PULSES2 = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_PULSES2
DAVIS_CONFIG_EXTINPUT_DETECT_PULSE_POLARITY2 = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_PULSE_POLARITY2
DAVIS_CONFIG_EXTINPUT_DETECT_PULSE_LENGTH2 = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_PULSE_LENGTH2
DAVIS_CONFIG_SYSINFO_LOGIC_VERSION = _libcaer_wrap.DAVIS_CONFIG_SYSINFO_LOGIC_VERSION
DAVIS_CONFIG_SYSINFO_CHIP_IDENTIFIER = _libcaer_wrap.DAVIS_CONFIG_SYSINFO_CHIP_IDENTIFIER
DAVIS_CONFIG_SYSINFO_DEVICE_IS_MASTER = _libcaer_wrap.DAVIS_CONFIG_SYSINFO_DEVICE_IS_MASTER
DAVIS_CONFIG_SYSINFO_LOGIC_CLOCK = _libcaer_wrap.DAVIS_CONFIG_SYSINFO_LOGIC_CLOCK
DAVIS_CONFIG_SYSINFO_ADC_CLOCK = _libcaer_wrap.DAVIS_CONFIG_SYSINFO_ADC_CLOCK
DAVIS_CONFIG_USB_RUN = _libcaer_wrap.DAVIS_CONFIG_USB_RUN
DAVIS_CONFIG_USB_EARLY_PACKET_DELAY = _libcaer_wrap.DAVIS_CONFIG_USB_EARLY_PACKET_DELAY
DAVIS_CONFIG_DDRAER_RUN = _libcaer_wrap.DAVIS_CONFIG_DDRAER_RUN
DAVIS_CONFIG_DDRAER_REQ_DELAY = _libcaer_wrap.DAVIS_CONFIG_DDRAER_REQ_DELAY
DAVIS_CONFIG_DDRAER_ACK_DELAY = _libcaer_wrap.DAVIS_CONFIG_DDRAER_ACK_DELAY
DAVIS128_CONFIG_BIAS_APSOVERFLOWLEVEL = _libcaer_wrap.DAVIS128_CONFIG_BIAS_APSOVERFLOWLEVEL
DAVIS128_CONFIG_BIAS_APSCAS = _libcaer_wrap.DAVIS128_CONFIG_BIAS_APSCAS
DAVIS128_CONFIG_BIAS_ADCREFHIGH = _libcaer_wrap.DAVIS128_CONFIG_BIAS_ADCREFHIGH
DAVIS128_CONFIG_BIAS_ADCREFLOW = _libcaer_wrap.DAVIS128_CONFIG_BIAS_ADCREFLOW
DAVIS128_CONFIG_BIAS_LOCALBUFBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_LOCALBUFBN
DAVIS128_CONFIG_BIAS_PADFOLLBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_PADFOLLBN
DAVIS128_CONFIG_BIAS_DIFFBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_DIFFBN
DAVIS128_CONFIG_BIAS_ONBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_ONBN
DAVIS128_CONFIG_BIAS_OFFBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_OFFBN
DAVIS128_CONFIG_BIAS_PIXINVBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_PIXINVBN
DAVIS128_CONFIG_BIAS_PRBP = _libcaer_wrap.DAVIS128_CONFIG_BIAS_PRBP
DAVIS128_CONFIG_BIAS_PRSFBP = _libcaer_wrap.DAVIS128_CONFIG_BIAS_PRSFBP
DAVIS128_CONFIG_BIAS_REFRBP = _libcaer_wrap.DAVIS128_CONFIG_BIAS_REFRBP
DAVIS128_CONFIG_BIAS_READOUTBUFBP = _libcaer_wrap.DAVIS128_CONFIG_BIAS_READOUTBUFBP
DAVIS128_CONFIG_BIAS_APSROSFBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_APSROSFBN
DAVIS128_CONFIG_BIAS_ADCCOMPBP = _libcaer_wrap.DAVIS128_CONFIG_BIAS_ADCCOMPBP
DAVIS128_CONFIG_BIAS_COLSELLOWBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_COLSELLOWBN
DAVIS128_CONFIG_BIAS_DACBUFBP = _libcaer_wrap.DAVIS128_CONFIG_BIAS_DACBUFBP
DAVIS128_CONFIG_BIAS_LCOLTIMEOUTBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_LCOLTIMEOUTBN
DAVIS128_CONFIG_BIAS_AEPDBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_AEPDBN
DAVIS128_CONFIG_BIAS_AEPUXBP = _libcaer_wrap.DAVIS128_CONFIG_BIAS_AEPUXBP
DAVIS128_CONFIG_BIAS_AEPUYBP = _libcaer_wrap.DAVIS128_CONFIG_BIAS_AEPUYBP
DAVIS128_CONFIG_BIAS_IFREFRBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_IFREFRBN
DAVIS128_CONFIG_BIAS_IFTHRBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_IFTHRBN
DAVIS128_CONFIG_BIAS_BIASBUFFER = _libcaer_wrap.DAVIS128_CONFIG_BIAS_BIASBUFFER
DAVIS128_CONFIG_BIAS_SSP = _libcaer_wrap.DAVIS128_CONFIG_BIAS_SSP
DAVIS128_CONFIG_BIAS_SSN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_SSN
DAVIS128_CONFIG_CHIP_DIGITALMUX0 = _libcaer_wrap.DAVIS128_CONFIG_CHIP_DIGITALMUX0
DAVIS128_CONFIG_CHIP_DIGITALMUX1 = _libcaer_wrap.DAVIS128_CONFIG_CHIP_DIGITALMUX1
DAVIS128_CONFIG_CHIP_DIGITALMUX2 = _libcaer_wrap.DAVIS128_CONFIG_CHIP_DIGITALMUX2
DAVIS128_CONFIG_CHIP_DIGITALMUX3 = _libcaer_wrap.DAVIS128_CONFIG_CHIP_DIGITALMUX3
DAVIS128_CONFIG_CHIP_ANALOGMUX0 = _libcaer_wrap.DAVIS128_CONFIG_CHIP_ANALOGMUX0
DAVIS128_CONFIG_CHIP_ANALOGMUX1 = _libcaer_wrap.DAVIS128_CONFIG_CHIP_ANALOGMUX1
DAVIS128_CONFIG_CHIP_ANALOGMUX2 = _libcaer_wrap.DAVIS128_CONFIG_CHIP_ANALOGMUX2
DAVIS128_CONFIG_CHIP_BIASMUX0 = _libcaer_wrap.DAVIS128_CONFIG_CHIP_BIASMUX0
DAVIS128_CONFIG_CHIP_RESETCALIBNEURON = _libcaer_wrap.DAVIS128_CONFIG_CHIP_RESETCALIBNEURON
DAVIS128_CONFIG_CHIP_TYPENCALIBNEURON = _libcaer_wrap.DAVIS128_CONFIG_CHIP_TYPENCALIBNEURON
DAVIS128_CONFIG_CHIP_RESETTESTPIXEL = _libcaer_wrap.DAVIS128_CONFIG_CHIP_RESETTESTPIXEL
DAVIS128_CONFIG_CHIP_AERNAROW = _libcaer_wrap.DAVIS128_CONFIG_CHIP_AERNAROW
DAVIS128_CONFIG_CHIP_USEAOUT = _libcaer_wrap.DAVIS128_CONFIG_CHIP_USEAOUT
DAVIS128_CONFIG_CHIP_GLOBAL_SHUTTER = _libcaer_wrap.DAVIS128_CONFIG_CHIP_GLOBAL_SHUTTER
DAVIS128_CONFIG_CHIP_SELECTGRAYCOUNTER = _libcaer_wrap.DAVIS128_CONFIG_CHIP_SELECTGRAYCOUNTER
DAVIS208_CONFIG_BIAS_APSOVERFLOWLEVEL = _libcaer_wrap.DAVIS208_CONFIG_BIAS_APSOVERFLOWLEVEL
DAVIS208_CONFIG_BIAS_APSCAS = _libcaer_wrap.DAVIS208_CONFIG_BIAS_APSCAS
DAVIS208_CONFIG_BIAS_ADCREFHIGH = _libcaer_wrap.DAVIS208_CONFIG_BIAS_ADCREFHIGH
DAVIS208_CONFIG_BIAS_ADCREFLOW = _libcaer_wrap.DAVIS208_CONFIG_BIAS_ADCREFLOW
DAVIS208_CONFIG_BIAS_RESETHIGHPASS = _libcaer_wrap.DAVIS208_CONFIG_BIAS_RESETHIGHPASS
DAVIS208_CONFIG_BIAS_REFSS = _libcaer_wrap.DAVIS208_CONFIG_BIAS_REFSS
DAVIS208_CONFIG_BIAS_LOCALBUFBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_LOCALBUFBN
DAVIS208_CONFIG_BIAS_PADFOLLBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_PADFOLLBN
DAVIS208_CONFIG_BIAS_DIFFBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_DIFFBN
DAVIS208_CONFIG_BIAS_ONBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_ONBN
DAVIS208_CONFIG_BIAS_OFFBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_OFFBN
DAVIS208_CONFIG_BIAS_PIXINVBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_PIXINVBN
DAVIS208_CONFIG_BIAS_PRBP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_PRBP
DAVIS208_CONFIG_BIAS_PRSFBP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_PRSFBP
DAVIS208_CONFIG_BIAS_REFRBP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_REFRBP
DAVIS208_CONFIG_BIAS_READOUTBUFBP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_READOUTBUFBP
DAVIS208_CONFIG_BIAS_APSROSFBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_APSROSFBN
DAVIS208_CONFIG_BIAS_ADCCOMPBP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_ADCCOMPBP
DAVIS208_CONFIG_BIAS_COLSELLOWBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_COLSELLOWBN
DAVIS208_CONFIG_BIAS_DACBUFBP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_DACBUFBP
DAVIS208_CONFIG_BIAS_LCOLTIMEOUTBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_LCOLTIMEOUTBN
DAVIS208_CONFIG_BIAS_AEPDBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_AEPDBN
DAVIS208_CONFIG_BIAS_AEPUXBP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_AEPUXBP
DAVIS208_CONFIG_BIAS_AEPUYBP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_AEPUYBP
DAVIS208_CONFIG_BIAS_IFREFRBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_IFREFRBN
DAVIS208_CONFIG_BIAS_IFTHRBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_IFTHRBN
DAVIS208_CONFIG_BIAS_REGBIASBP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_REGBIASBP
DAVIS208_CONFIG_BIAS_REFSSBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_REFSSBN
DAVIS208_CONFIG_BIAS_BIASBUFFER = _libcaer_wrap.DAVIS208_CONFIG_BIAS_BIASBUFFER
DAVIS208_CONFIG_BIAS_SSP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_SSP
DAVIS208_CONFIG_BIAS_SSN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_SSN
DAVIS208_CONFIG_CHIP_DIGITALMUX0 = _libcaer_wrap.DAVIS208_CONFIG_CHIP_DIGITALMUX0
DAVIS208_CONFIG_CHIP_DIGITALMUX1 = _libcaer_wrap.DAVIS208_CONFIG_CHIP_DIGITALMUX1
DAVIS208_CONFIG_CHIP_DIGITALMUX2 = _libcaer_wrap.DAVIS208_CONFIG_CHIP_DIGITALMUX2
DAVIS208_CONFIG_CHIP_DIGITALMUX3 = _libcaer_wrap.DAVIS208_CONFIG_CHIP_DIGITALMUX3
DAVIS208_CONFIG_CHIP_ANALOGMUX0 = _libcaer_wrap.DAVIS208_CONFIG_CHIP_ANALOGMUX0
DAVIS208_CONFIG_CHIP_ANALOGMUX1 = _libcaer_wrap.DAVIS208_CONFIG_CHIP_ANALOGMUX1
DAVIS208_CONFIG_CHIP_ANALOGMUX2 = _libcaer_wrap.DAVIS208_CONFIG_CHIP_ANALOGMUX2
DAVIS208_CONFIG_CHIP_BIASMUX0 = _libcaer_wrap.DAVIS208_CONFIG_CHIP_BIASMUX0
DAVIS208_CONFIG_CHIP_RESETCALIBNEURON = _libcaer_wrap.DAVIS208_CONFIG_CHIP_RESETCALIBNEURON
DAVIS208_CONFIG_CHIP_TYPENCALIBNEURON = _libcaer_wrap.DAVIS208_CONFIG_CHIP_TYPENCALIBNEURON
DAVIS208_CONFIG_CHIP_RESETTESTPIXEL = _libcaer_wrap.DAVIS208_CONFIG_CHIP_RESETTESTPIXEL
DAVIS208_CONFIG_CHIP_AERNAROW = _libcaer_wrap.DAVIS208_CONFIG_CHIP_AERNAROW
DAVIS208_CONFIG_CHIP_USEAOUT = _libcaer_wrap.DAVIS208_CONFIG_CHIP_USEAOUT
DAVIS208_CONFIG_CHIP_GLOBAL_SHUTTER = _libcaer_wrap.DAVIS208_CONFIG_CHIP_GLOBAL_SHUTTER
DAVIS208_CONFIG_CHIP_SELECTGRAYCOUNTER = _libcaer_wrap.DAVIS208_CONFIG_CHIP_SELECTGRAYCOUNTER
DAVIS208_CONFIG_CHIP_SELECTPREAMPAVG = _libcaer_wrap.DAVIS208_CONFIG_CHIP_SELECTPREAMPAVG
DAVIS208_CONFIG_CHIP_SELECTBIASREFSS = _libcaer_wrap.DAVIS208_CONFIG_CHIP_SELECTBIASREFSS
DAVIS208_CONFIG_CHIP_SELECTSENSE = _libcaer_wrap.DAVIS208_CONFIG_CHIP_SELECTSENSE
DAVIS208_CONFIG_CHIP_SELECTPOSFB = _libcaer_wrap.DAVIS208_CONFIG_CHIP_SELECTPOSFB
DAVIS208_CONFIG_CHIP_SELECTHIGHPASS = _libcaer_wrap.DAVIS208_CONFIG_CHIP_SELECTHIGHPASS
DAVIS240_CONFIG_BIAS_DIFFBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_DIFFBN
DAVIS240_CONFIG_BIAS_ONBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_ONBN
DAVIS240_CONFIG_BIAS_OFFBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_OFFBN
DAVIS240_CONFIG_BIAS_APSCASEPC = _libcaer_wrap.DAVIS240_CONFIG_BIAS_APSCASEPC
DAVIS240_CONFIG_BIAS_DIFFCASBNC = _libcaer_wrap.DAVIS240_CONFIG_BIAS_DIFFCASBNC
DAVIS240_CONFIG_BIAS_APSROSFBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_APSROSFBN
DAVIS240_CONFIG_BIAS_LOCALBUFBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_LOCALBUFBN
DAVIS240_CONFIG_BIAS_PIXINVBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_PIXINVBN
DAVIS240_CONFIG_BIAS_PRBP = _libcaer_wrap.DAVIS240_CONFIG_BIAS_PRBP
DAVIS240_CONFIG_BIAS_PRSFBP = _libcaer_wrap.DAVIS240_CONFIG_BIAS_PRSFBP
DAVIS240_CONFIG_BIAS_REFRBP = _libcaer_wrap.DAVIS240_CONFIG_BIAS_REFRBP
DAVIS240_CONFIG_BIAS_AEPDBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_AEPDBN
DAVIS240_CONFIG_BIAS_LCOLTIMEOUTBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_LCOLTIMEOUTBN
DAVIS240_CONFIG_BIAS_AEPUXBP = _libcaer_wrap.DAVIS240_CONFIG_BIAS_AEPUXBP
DAVIS240_CONFIG_BIAS_AEPUYBP = _libcaer_wrap.DAVIS240_CONFIG_BIAS_AEPUYBP
DAVIS240_CONFIG_BIAS_IFTHRBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_IFTHRBN
DAVIS240_CONFIG_BIAS_IFREFRBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_IFREFRBN
DAVIS240_CONFIG_BIAS_PADFOLLBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_PADFOLLBN
DAVIS240_CONFIG_BIAS_APSOVERFLOWLEVELBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_APSOVERFLOWLEVELBN
DAVIS240_CONFIG_BIAS_BIASBUFFER = _libcaer_wrap.DAVIS240_CONFIG_BIAS_BIASBUFFER
DAVIS240_CONFIG_BIAS_SSP = _libcaer_wrap.DAVIS240_CONFIG_BIAS_SSP
DAVIS240_CONFIG_BIAS_SSN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_SSN
DAVIS240_CONFIG_CHIP_DIGITALMUX0 = _libcaer_wrap.DAVIS240_CONFIG_CHIP_DIGITALMUX0
DAVIS240_CONFIG_CHIP_DIGITALMUX1 = _libcaer_wrap.DAVIS240_CONFIG_CHIP_DIGITALMUX1
DAVIS240_CONFIG_CHIP_DIGITALMUX2 = _libcaer_wrap.DAVIS240_CONFIG_CHIP_DIGITALMUX2
DAVIS240_CONFIG_CHIP_DIGITALMUX3 = _libcaer_wrap.DAVIS240_CONFIG_CHIP_DIGITALMUX3
DAVIS240_CONFIG_CHIP_ANALOGMUX0 = _libcaer_wrap.DAVIS240_CONFIG_CHIP_ANALOGMUX0
DAVIS240_CONFIG_CHIP_ANALOGMUX1 = _libcaer_wrap.DAVIS240_CONFIG_CHIP_ANALOGMUX1
DAVIS240_CONFIG_CHIP_ANALOGMUX2 = _libcaer_wrap.DAVIS240_CONFIG_CHIP_ANALOGMUX2
DAVIS240_CONFIG_CHIP_BIASMUX0 = _libcaer_wrap.DAVIS240_CONFIG_CHIP_BIASMUX0
DAVIS240_CONFIG_CHIP_RESETCALIBNEURON = _libcaer_wrap.DAVIS240_CONFIG_CHIP_RESETCALIBNEURON
DAVIS240_CONFIG_CHIP_TYPENCALIBNEURON = _libcaer_wrap.DAVIS240_CONFIG_CHIP_TYPENCALIBNEURON
DAVIS240_CONFIG_CHIP_RESETTESTPIXEL = _libcaer_wrap.DAVIS240_CONFIG_CHIP_RESETTESTPIXEL
DAVIS240_CONFIG_CHIP_SPECIALPIXELCONTROL = _libcaer_wrap.DAVIS240_CONFIG_CHIP_SPECIALPIXELCONTROL
DAVIS240_CONFIG_CHIP_AERNAROW = _libcaer_wrap.DAVIS240_CONFIG_CHIP_AERNAROW
DAVIS240_CONFIG_CHIP_USEAOUT = _libcaer_wrap.DAVIS240_CONFIG_CHIP_USEAOUT
DAVIS240_CONFIG_CHIP_GLOBAL_SHUTTER = _libcaer_wrap.DAVIS240_CONFIG_CHIP_GLOBAL_SHUTTER
DAVIS346_CONFIG_BIAS_APSOVERFLOWLEVEL = _libcaer_wrap.DAVIS346_CONFIG_BIAS_APSOVERFLOWLEVEL
DAVIS346_CONFIG_BIAS_APSCAS = _libcaer_wrap.DAVIS346_CONFIG_BIAS_APSCAS
DAVIS346_CONFIG_BIAS_ADCREFHIGH = _libcaer_wrap.DAVIS346_CONFIG_BIAS_ADCREFHIGH
DAVIS346_CONFIG_BIAS_ADCREFLOW = _libcaer_wrap.DAVIS346_CONFIG_BIAS_ADCREFLOW
DAVIS346_CONFIG_BIAS_ADCTESTVOLTAGE = _libcaer_wrap.DAVIS346_CONFIG_BIAS_ADCTESTVOLTAGE
DAVIS346_CONFIG_BIAS_LOCALBUFBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_LOCALBUFBN
DAVIS346_CONFIG_BIAS_PADFOLLBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_PADFOLLBN
DAVIS346_CONFIG_BIAS_DIFFBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_DIFFBN
DAVIS346_CONFIG_BIAS_ONBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_ONBN
DAVIS346_CONFIG_BIAS_OFFBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_OFFBN
DAVIS346_CONFIG_BIAS_PIXINVBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_PIXINVBN
DAVIS346_CONFIG_BIAS_PRBP = _libcaer_wrap.DAVIS346_CONFIG_BIAS_PRBP
DAVIS346_CONFIG_BIAS_PRSFBP = _libcaer_wrap.DAVIS346_CONFIG_BIAS_PRSFBP
DAVIS346_CONFIG_BIAS_REFRBP = _libcaer_wrap.DAVIS346_CONFIG_BIAS_REFRBP
DAVIS346_CONFIG_BIAS_READOUTBUFBP = _libcaer_wrap.DAVIS346_CONFIG_BIAS_READOUTBUFBP
DAVIS346_CONFIG_BIAS_APSROSFBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_APSROSFBN
DAVIS346_CONFIG_BIAS_ADCCOMPBP = _libcaer_wrap.DAVIS346_CONFIG_BIAS_ADCCOMPBP
DAVIS346_CONFIG_BIAS_COLSELLOWBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_COLSELLOWBN
DAVIS346_CONFIG_BIAS_DACBUFBP = _libcaer_wrap.DAVIS346_CONFIG_BIAS_DACBUFBP
DAVIS346_CONFIG_BIAS_LCOLTIMEOUTBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_LCOLTIMEOUTBN
DAVIS346_CONFIG_BIAS_AEPDBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_AEPDBN
DAVIS346_CONFIG_BIAS_AEPUXBP = _libcaer_wrap.DAVIS346_CONFIG_BIAS_AEPUXBP
DAVIS346_CONFIG_BIAS_AEPUYBP = _libcaer_wrap.DAVIS346_CONFIG_BIAS_AEPUYBP
DAVIS346_CONFIG_BIAS_IFREFRBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_IFREFRBN
DAVIS346_CONFIG_BIAS_IFTHRBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_IFTHRBN
DAVIS346_CONFIG_BIAS_BIASBUFFER = _libcaer_wrap.DAVIS346_CONFIG_BIAS_BIASBUFFER
DAVIS346_CONFIG_BIAS_SSP = _libcaer_wrap.DAVIS346_CONFIG_BIAS_SSP
DAVIS346_CONFIG_BIAS_SSN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_SSN
DAVIS346_CONFIG_CHIP_DIGITALMUX0 = _libcaer_wrap.DAVIS346_CONFIG_CHIP_DIGITALMUX0
DAVIS346_CONFIG_CHIP_DIGITALMUX1 = _libcaer_wrap.DAVIS346_CONFIG_CHIP_DIGITALMUX1
DAVIS346_CONFIG_CHIP_DIGITALMUX2 = _libcaer_wrap.DAVIS346_CONFIG_CHIP_DIGITALMUX2
DAVIS346_CONFIG_CHIP_DIGITALMUX3 = _libcaer_wrap.DAVIS346_CONFIG_CHIP_DIGITALMUX3
DAVIS346_CONFIG_CHIP_ANALOGMUX0 = _libcaer_wrap.DAVIS346_CONFIG_CHIP_ANALOGMUX0
DAVIS346_CONFIG_CHIP_ANALOGMUX1 = _libcaer_wrap.DAVIS346_CONFIG_CHIP_ANALOGMUX1
DAVIS346_CONFIG_CHIP_ANALOGMUX2 = _libcaer_wrap.DAVIS346_CONFIG_CHIP_ANALOGMUX2
DAVIS346_CONFIG_CHIP_BIASMUX0 = _libcaer_wrap.DAVIS346_CONFIG_CHIP_BIASMUX0
DAVIS346_CONFIG_CHIP_RESETCALIBNEURON = _libcaer_wrap.DAVIS346_CONFIG_CHIP_RESETCALIBNEURON
DAVIS346_CONFIG_CHIP_TYPENCALIBNEURON = _libcaer_wrap.DAVIS346_CONFIG_CHIP_TYPENCALIBNEURON
DAVIS346_CONFIG_CHIP_RESETTESTPIXEL = _libcaer_wrap.DAVIS346_CONFIG_CHIP_RESETTESTPIXEL
DAVIS346_CONFIG_CHIP_AERNAROW = _libcaer_wrap.DAVIS346_CONFIG_CHIP_AERNAROW
DAVIS346_CONFIG_CHIP_USEAOUT = _libcaer_wrap.DAVIS346_CONFIG_CHIP_USEAOUT
DAVIS346_CONFIG_CHIP_GLOBAL_SHUTTER = _libcaer_wrap.DAVIS346_CONFIG_CHIP_GLOBAL_SHUTTER
DAVIS346_CONFIG_CHIP_SELECTGRAYCOUNTER = _libcaer_wrap.DAVIS346_CONFIG_CHIP_SELECTGRAYCOUNTER
DAVIS346_CONFIG_CHIP_TESTADC = _libcaer_wrap.DAVIS346_CONFIG_CHIP_TESTADC
DAVIS640_CONFIG_BIAS_APSOVERFLOWLEVEL = _libcaer_wrap.DAVIS640_CONFIG_BIAS_APSOVERFLOWLEVEL
DAVIS640_CONFIG_BIAS_APSCAS = _libcaer_wrap.DAVIS640_CONFIG_BIAS_APSCAS
DAVIS640_CONFIG_BIAS_ADCREFHIGH = _libcaer_wrap.DAVIS640_CONFIG_BIAS_ADCREFHIGH
DAVIS640_CONFIG_BIAS_ADCREFLOW = _libcaer_wrap.DAVIS640_CONFIG_BIAS_ADCREFLOW
DAVIS640_CONFIG_BIAS_ADCTESTVOLTAGE = _libcaer_wrap.DAVIS640_CONFIG_BIAS_ADCTESTVOLTAGE
DAVIS640_CONFIG_BIAS_LOCALBUFBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_LOCALBUFBN
DAVIS640_CONFIG_BIAS_PADFOLLBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_PADFOLLBN
DAVIS640_CONFIG_BIAS_DIFFBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_DIFFBN
DAVIS640_CONFIG_BIAS_ONBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_ONBN
DAVIS640_CONFIG_BIAS_OFFBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_OFFBN
DAVIS640_CONFIG_BIAS_PIXINVBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_PIXINVBN
DAVIS640_CONFIG_BIAS_PRBP = _libcaer_wrap.DAVIS640_CONFIG_BIAS_PRBP
DAVIS640_CONFIG_BIAS_PRSFBP = _libcaer_wrap.DAVIS640_CONFIG_BIAS_PRSFBP
DAVIS640_CONFIG_BIAS_REFRBP = _libcaer_wrap.DAVIS640_CONFIG_BIAS_REFRBP
DAVIS640_CONFIG_BIAS_READOUTBUFBP = _libcaer_wrap.DAVIS640_CONFIG_BIAS_READOUTBUFBP
DAVIS640_CONFIG_BIAS_APSROSFBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_APSROSFBN
DAVIS640_CONFIG_BIAS_ADCCOMPBP = _libcaer_wrap.DAVIS640_CONFIG_BIAS_ADCCOMPBP
DAVIS640_CONFIG_BIAS_COLSELLOWBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_COLSELLOWBN
DAVIS640_CONFIG_BIAS_DACBUFBP = _libcaer_wrap.DAVIS640_CONFIG_BIAS_DACBUFBP
DAVIS640_CONFIG_BIAS_LCOLTIMEOUTBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_LCOLTIMEOUTBN
DAVIS640_CONFIG_BIAS_AEPDBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_AEPDBN
DAVIS640_CONFIG_BIAS_AEPUXBP = _libcaer_wrap.DAVIS640_CONFIG_BIAS_AEPUXBP
DAVIS640_CONFIG_BIAS_AEPUYBP = _libcaer_wrap.DAVIS640_CONFIG_BIAS_AEPUYBP
DAVIS640_CONFIG_BIAS_IFREFRBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_IFREFRBN
DAVIS640_CONFIG_BIAS_IFTHRBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_IFTHRBN
DAVIS640_CONFIG_BIAS_BIASBUFFER = _libcaer_wrap.DAVIS640_CONFIG_BIAS_BIASBUFFER
DAVIS640_CONFIG_BIAS_SSP = _libcaer_wrap.DAVIS640_CONFIG_BIAS_SSP
DAVIS640_CONFIG_BIAS_SSN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_SSN
DAVIS640_CONFIG_CHIP_DIGITALMUX0 = _libcaer_wrap.DAVIS640_CONFIG_CHIP_DIGITALMUX0
DAVIS640_CONFIG_CHIP_DIGITALMUX1 = _libcaer_wrap.DAVIS640_CONFIG_CHIP_DIGITALMUX1
DAVIS640_CONFIG_CHIP_DIGITALMUX2 = _libcaer_wrap.DAVIS640_CONFIG_CHIP_DIGITALMUX2
DAVIS640_CONFIG_CHIP_DIGITALMUX3 = _libcaer_wrap.DAVIS640_CONFIG_CHIP_DIGITALMUX3
DAVIS640_CONFIG_CHIP_ANALOGMUX0 = _libcaer_wrap.DAVIS640_CONFIG_CHIP_ANALOGMUX0
DAVIS640_CONFIG_CHIP_ANALOGMUX1 = _libcaer_wrap.DAVIS640_CONFIG_CHIP_ANALOGMUX1
DAVIS640_CONFIG_CHIP_ANALOGMUX2 = _libcaer_wrap.DAVIS640_CONFIG_CHIP_ANALOGMUX2
DAVIS640_CONFIG_CHIP_BIASMUX0 = _libcaer_wrap.DAVIS640_CONFIG_CHIP_BIASMUX0
DAVIS640_CONFIG_CHIP_RESETCALIBNEURON = _libcaer_wrap.DAVIS640_CONFIG_CHIP_RESETCALIBNEURON
DAVIS640_CONFIG_CHIP_TYPENCALIBNEURON = _libcaer_wrap.DAVIS640_CONFIG_CHIP_TYPENCALIBNEURON
DAVIS640_CONFIG_CHIP_RESETTESTPIXEL = _libcaer_wrap.DAVIS640_CONFIG_CHIP_RESETTESTPIXEL
DAVIS640_CONFIG_CHIP_AERNAROW = _libcaer_wrap.DAVIS640_CONFIG_CHIP_AERNAROW
DAVIS640_CONFIG_CHIP_USEAOUT = _libcaer_wrap.DAVIS640_CONFIG_CHIP_USEAOUT
DAVIS640_CONFIG_CHIP_GLOBAL_SHUTTER = _libcaer_wrap.DAVIS640_CONFIG_CHIP_GLOBAL_SHUTTER
DAVIS640_CONFIG_CHIP_SELECTGRAYCOUNTER = _libcaer_wrap.DAVIS640_CONFIG_CHIP_SELECTGRAYCOUNTER
DAVIS640_CONFIG_CHIP_TESTADC = _libcaer_wrap.DAVIS640_CONFIG_CHIP_TESTADC
DAVISRGB_CONFIG_BIAS_APSCAS = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_APSCAS
DAVISRGB_CONFIG_BIAS_OVG1LO = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_OVG1LO
DAVISRGB_CONFIG_BIAS_OVG2LO = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_OVG2LO
DAVISRGB_CONFIG_BIAS_TX2OVG2HI = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_TX2OVG2HI
DAVISRGB_CONFIG_BIAS_GND07 = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_GND07
DAVISRGB_CONFIG_BIAS_ADCTESTVOLTAGE = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_ADCTESTVOLTAGE
DAVISRGB_CONFIG_BIAS_ADCREFHIGH = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_ADCREFHIGH
DAVISRGB_CONFIG_BIAS_ADCREFLOW = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_ADCREFLOW
DAVISRGB_CONFIG_BIAS_IFREFRBN = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_IFREFRBN
DAVISRGB_CONFIG_BIAS_IFTHRBN = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_IFTHRBN
DAVISRGB_CONFIG_BIAS_LOCALBUFBN = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_LOCALBUFBN
DAVISRGB_CONFIG_BIAS_PADFOLLBN = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_PADFOLLBN
DAVISRGB_CONFIG_BIAS_PIXINVBN = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_PIXINVBN
DAVISRGB_CONFIG_BIAS_DIFFBN = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_DIFFBN
DAVISRGB_CONFIG_BIAS_ONBN = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_ONBN
DAVISRGB_CONFIG_BIAS_OFFBN = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_OFFBN
DAVISRGB_CONFIG_BIAS_PRBP = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_PRBP
DAVISRGB_CONFIG_BIAS_PRSFBP = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_PRSFBP
DAVISRGB_CONFIG_BIAS_REFRBP = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_REFRBP
DAVISRGB_CONFIG_BIAS_ARRAYBIASBUFFERBN = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_ARRAYBIASBUFFERBN
DAVISRGB_CONFIG_BIAS_ARRAYLOGICBUFFERBN = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_ARRAYLOGICBUFFERBN
DAVISRGB_CONFIG_BIAS_FALLTIMEBN = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_FALLTIMEBN
DAVISRGB_CONFIG_BIAS_RISETIMEBP = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_RISETIMEBP
DAVISRGB_CONFIG_BIAS_READOUTBUFBP = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_READOUTBUFBP
DAVISRGB_CONFIG_BIAS_APSROSFBN = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_APSROSFBN
DAVISRGB_CONFIG_BIAS_ADCCOMPBP = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_ADCCOMPBP
DAVISRGB_CONFIG_BIAS_DACBUFBP = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_DACBUFBP
DAVISRGB_CONFIG_BIAS_LCOLTIMEOUTBN = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_LCOLTIMEOUTBN
DAVISRGB_CONFIG_BIAS_AEPDBN = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_AEPDBN
DAVISRGB_CONFIG_BIAS_AEPUXBP = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_AEPUXBP
DAVISRGB_CONFIG_BIAS_AEPUYBP = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_AEPUYBP
DAVISRGB_CONFIG_BIAS_BIASBUFFER = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_BIASBUFFER
DAVISRGB_CONFIG_BIAS_SSP = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_SSP
DAVISRGB_CONFIG_BIAS_SSN = _libcaer_wrap.DAVISRGB_CONFIG_BIAS_SSN
DAVISRGB_CONFIG_CHIP_DIGITALMUX0 = _libcaer_wrap.DAVISRGB_CONFIG_CHIP_DIGITALMUX0
DAVISRGB_CONFIG_CHIP_DIGITALMUX1 = _libcaer_wrap.DAVISRGB_CONFIG_CHIP_DIGITALMUX1
DAVISRGB_CONFIG_CHIP_DIGITALMUX2 = _libcaer_wrap.DAVISRGB_CONFIG_CHIP_DIGITALMUX2
DAVISRGB_CONFIG_CHIP_DIGITALMUX3 = _libcaer_wrap.DAVISRGB_CONFIG_CHIP_DIGITALMUX3
DAVISRGB_CONFIG_CHIP_ANALOGMUX0 = _libcaer_wrap.DAVISRGB_CONFIG_CHIP_ANALOGMUX0
DAVISRGB_CONFIG_CHIP_ANALOGMUX1 = _libcaer_wrap.DAVISRGB_CONFIG_CHIP_ANALOGMUX1
DAVISRGB_CONFIG_CHIP_ANALOGMUX2 = _libcaer_wrap.DAVISRGB_CONFIG_CHIP_ANALOGMUX2
DAVISRGB_CONFIG_CHIP_BIASMUX0 = _libcaer_wrap.DAVISRGB_CONFIG_CHIP_BIASMUX0
DAVISRGB_CONFIG_CHIP_RESETCALIBNEURON = _libcaer_wrap.DAVISRGB_CONFIG_CHIP_RESETCALIBNEURON
DAVISRGB_CONFIG_CHIP_TYPENCALIBNEURON = _libcaer_wrap.DAVISRGB_CONFIG_CHIP_TYPENCALIBNEURON
DAVISRGB_CONFIG_CHIP_RESETTESTPIXEL = _libcaer_wrap.DAVISRGB_CONFIG_CHIP_RESETTESTPIXEL
DAVISRGB_CONFIG_CHIP_AERNAROW = _libcaer_wrap.DAVISRGB_CONFIG_CHIP_AERNAROW
DAVISRGB_CONFIG_CHIP_USEAOUT = _libcaer_wrap.DAVISRGB_CONFIG_CHIP_USEAOUT
DAVISRGB_CONFIG_CHIP_SELECTGRAYCOUNTER = _libcaer_wrap.DAVISRGB_CONFIG_CHIP_SELECTGRAYCOUNTER
DAVISRGB_CONFIG_CHIP_TESTADC = _libcaer_wrap.DAVISRGB_CONFIG_CHIP_TESTADC
DAVISRGB_CONFIG_CHIP_ADJUSTOVG1LO = _libcaer_wrap.DAVISRGB_CONFIG_CHIP_ADJUSTOVG1LO
DAVISRGB_CONFIG_CHIP_ADJUSTOVG2LO = _libcaer_wrap.DAVISRGB_CONFIG_CHIP_ADJUSTOVG2LO
DAVISRGB_CONFIG_CHIP_ADJUSTTX2OVG2HI = _libcaer_wrap.DAVISRGB_CONFIG_CHIP_ADJUSTTX2OVG2HI
DAVIS_APS_ROI_REGIONS_MAX = _libcaer_wrap.DAVIS_APS_ROI_REGIONS_MAX
class caer_davis_info(_object):
    """Proxy of C caer_davis_info struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_davis_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_davis_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["deviceID"] = _libcaer_wrap.caer_davis_info_deviceID_set
    __swig_getmethods__["deviceID"] = _libcaer_wrap.caer_davis_info_deviceID_get
    if _newclass:
        deviceID = _swig_property(_libcaer_wrap.caer_davis_info_deviceID_get, _libcaer_wrap.caer_davis_info_deviceID_set)
    __swig_setmethods__["deviceSerialNumber"] = _libcaer_wrap.caer_davis_info_deviceSerialNumber_set
    __swig_getmethods__["deviceSerialNumber"] = _libcaer_wrap.caer_davis_info_deviceSerialNumber_get
    if _newclass:
        deviceSerialNumber = _swig_property(_libcaer_wrap.caer_davis_info_deviceSerialNumber_get, _libcaer_wrap.caer_davis_info_deviceSerialNumber_set)
    __swig_setmethods__["deviceUSBBusNumber"] = _libcaer_wrap.caer_davis_info_deviceUSBBusNumber_set
    __swig_getmethods__["deviceUSBBusNumber"] = _libcaer_wrap.caer_davis_info_deviceUSBBusNumber_get
    if _newclass:
        deviceUSBBusNumber = _swig_property(_libcaer_wrap.caer_davis_info_deviceUSBBusNumber_get, _libcaer_wrap.caer_davis_info_deviceUSBBusNumber_set)
    __swig_setmethods__["deviceUSBDeviceAddress"] = _libcaer_wrap.caer_davis_info_deviceUSBDeviceAddress_set
    __swig_getmethods__["deviceUSBDeviceAddress"] = _libcaer_wrap.caer_davis_info_deviceUSBDeviceAddress_get
    if _newclass:
        deviceUSBDeviceAddress = _swig_property(_libcaer_wrap.caer_davis_info_deviceUSBDeviceAddress_get, _libcaer_wrap.caer_davis_info_deviceUSBDeviceAddress_set)
    __swig_setmethods__["deviceString"] = _libcaer_wrap.caer_davis_info_deviceString_set
    __swig_getmethods__["deviceString"] = _libcaer_wrap.caer_davis_info_deviceString_get
    if _newclass:
        deviceString = _swig_property(_libcaer_wrap.caer_davis_info_deviceString_get, _libcaer_wrap.caer_davis_info_deviceString_set)
    __swig_setmethods__["logicVersion"] = _libcaer_wrap.caer_davis_info_logicVersion_set
    __swig_getmethods__["logicVersion"] = _libcaer_wrap.caer_davis_info_logicVersion_get
    if _newclass:
        logicVersion = _swig_property(_libcaer_wrap.caer_davis_info_logicVersion_get, _libcaer_wrap.caer_davis_info_logicVersion_set)
    __swig_setmethods__["deviceIsMaster"] = _libcaer_wrap.caer_davis_info_deviceIsMaster_set
    __swig_getmethods__["deviceIsMaster"] = _libcaer_wrap.caer_davis_info_deviceIsMaster_get
    if _newclass:
        deviceIsMaster = _swig_property(_libcaer_wrap.caer_davis_info_deviceIsMaster_get, _libcaer_wrap.caer_davis_info_deviceIsMaster_set)
    __swig_setmethods__["logicClock"] = _libcaer_wrap.caer_davis_info_logicClock_set
    __swig_getmethods__["logicClock"] = _libcaer_wrap.caer_davis_info_logicClock_get
    if _newclass:
        logicClock = _swig_property(_libcaer_wrap.caer_davis_info_logicClock_get, _libcaer_wrap.caer_davis_info_logicClock_set)
    __swig_setmethods__["adcClock"] = _libcaer_wrap.caer_davis_info_adcClock_set
    __swig_getmethods__["adcClock"] = _libcaer_wrap.caer_davis_info_adcClock_get
    if _newclass:
        adcClock = _swig_property(_libcaer_wrap.caer_davis_info_adcClock_get, _libcaer_wrap.caer_davis_info_adcClock_set)
    __swig_setmethods__["chipID"] = _libcaer_wrap.caer_davis_info_chipID_set
    __swig_getmethods__["chipID"] = _libcaer_wrap.caer_davis_info_chipID_get
    if _newclass:
        chipID = _swig_property(_libcaer_wrap.caer_davis_info_chipID_get, _libcaer_wrap.caer_davis_info_chipID_set)
    __swig_setmethods__["dvsSizeX"] = _libcaer_wrap.caer_davis_info_dvsSizeX_set
    __swig_getmethods__["dvsSizeX"] = _libcaer_wrap.caer_davis_info_dvsSizeX_get
    if _newclass:
        dvsSizeX = _swig_property(_libcaer_wrap.caer_davis_info_dvsSizeX_get, _libcaer_wrap.caer_davis_info_dvsSizeX_set)
    __swig_setmethods__["dvsSizeY"] = _libcaer_wrap.caer_davis_info_dvsSizeY_set
    __swig_getmethods__["dvsSizeY"] = _libcaer_wrap.caer_davis_info_dvsSizeY_get
    if _newclass:
        dvsSizeY = _swig_property(_libcaer_wrap.caer_davis_info_dvsSizeY_get, _libcaer_wrap.caer_davis_info_dvsSizeY_set)
    __swig_setmethods__["dvsHasPixelFilter"] = _libcaer_wrap.caer_davis_info_dvsHasPixelFilter_set
    __swig_getmethods__["dvsHasPixelFilter"] = _libcaer_wrap.caer_davis_info_dvsHasPixelFilter_get
    if _newclass:
        dvsHasPixelFilter = _swig_property(_libcaer_wrap.caer_davis_info_dvsHasPixelFilter_get, _libcaer_wrap.caer_davis_info_dvsHasPixelFilter_set)
    __swig_setmethods__["dvsHasBackgroundActivityFilter"] = _libcaer_wrap.caer_davis_info_dvsHasBackgroundActivityFilter_set
    __swig_getmethods__["dvsHasBackgroundActivityFilter"] = _libcaer_wrap.caer_davis_info_dvsHasBackgroundActivityFilter_get
    if _newclass:
        dvsHasBackgroundActivityFilter = _swig_property(_libcaer_wrap.caer_davis_info_dvsHasBackgroundActivityFilter_get, _libcaer_wrap.caer_davis_info_dvsHasBackgroundActivityFilter_set)
    __swig_setmethods__["dvsHasTestEventGenerator"] = _libcaer_wrap.caer_davis_info_dvsHasTestEventGenerator_set
    __swig_getmethods__["dvsHasTestEventGenerator"] = _libcaer_wrap.caer_davis_info_dvsHasTestEventGenerator_get
    if _newclass:
        dvsHasTestEventGenerator = _swig_property(_libcaer_wrap.caer_davis_info_dvsHasTestEventGenerator_get, _libcaer_wrap.caer_davis_info_dvsHasTestEventGenerator_set)
    __swig_setmethods__["apsSizeX"] = _libcaer_wrap.caer_davis_info_apsSizeX_set
    __swig_getmethods__["apsSizeX"] = _libcaer_wrap.caer_davis_info_apsSizeX_get
    if _newclass:
        apsSizeX = _swig_property(_libcaer_wrap.caer_davis_info_apsSizeX_get, _libcaer_wrap.caer_davis_info_apsSizeX_set)
    __swig_setmethods__["apsSizeY"] = _libcaer_wrap.caer_davis_info_apsSizeY_set
    __swig_getmethods__["apsSizeY"] = _libcaer_wrap.caer_davis_info_apsSizeY_get
    if _newclass:
        apsSizeY = _swig_property(_libcaer_wrap.caer_davis_info_apsSizeY_get, _libcaer_wrap.caer_davis_info_apsSizeY_set)
    __swig_setmethods__["apsColorFilter"] = _libcaer_wrap.caer_davis_info_apsColorFilter_set
    __swig_getmethods__["apsColorFilter"] = _libcaer_wrap.caer_davis_info_apsColorFilter_get
    if _newclass:
        apsColorFilter = _swig_property(_libcaer_wrap.caer_davis_info_apsColorFilter_get, _libcaer_wrap.caer_davis_info_apsColorFilter_set)
    __swig_setmethods__["apsHasGlobalShutter"] = _libcaer_wrap.caer_davis_info_apsHasGlobalShutter_set
    __swig_getmethods__["apsHasGlobalShutter"] = _libcaer_wrap.caer_davis_info_apsHasGlobalShutter_get
    if _newclass:
        apsHasGlobalShutter = _swig_property(_libcaer_wrap.caer_davis_info_apsHasGlobalShutter_get, _libcaer_wrap.caer_davis_info_apsHasGlobalShutter_set)
    __swig_setmethods__["apsHasQuadROI"] = _libcaer_wrap.caer_davis_info_apsHasQuadROI_set
    __swig_getmethods__["apsHasQuadROI"] = _libcaer_wrap.caer_davis_info_apsHasQuadROI_get
    if _newclass:
        apsHasQuadROI = _swig_property(_libcaer_wrap.caer_davis_info_apsHasQuadROI_get, _libcaer_wrap.caer_davis_info_apsHasQuadROI_set)
    __swig_setmethods__["apsHasExternalADC"] = _libcaer_wrap.caer_davis_info_apsHasExternalADC_set
    __swig_getmethods__["apsHasExternalADC"] = _libcaer_wrap.caer_davis_info_apsHasExternalADC_get
    if _newclass:
        apsHasExternalADC = _swig_property(_libcaer_wrap.caer_davis_info_apsHasExternalADC_get, _libcaer_wrap.caer_davis_info_apsHasExternalADC_set)
    __swig_setmethods__["apsHasInternalADC"] = _libcaer_wrap.caer_davis_info_apsHasInternalADC_set
    __swig_getmethods__["apsHasInternalADC"] = _libcaer_wrap.caer_davis_info_apsHasInternalADC_get
    if _newclass:
        apsHasInternalADC = _swig_property(_libcaer_wrap.caer_davis_info_apsHasInternalADC_get, _libcaer_wrap.caer_davis_info_apsHasInternalADC_set)
    __swig_setmethods__["extInputHasGenerator"] = _libcaer_wrap.caer_davis_info_extInputHasGenerator_set
    __swig_getmethods__["extInputHasGenerator"] = _libcaer_wrap.caer_davis_info_extInputHasGenerator_get
    if _newclass:
        extInputHasGenerator = _swig_property(_libcaer_wrap.caer_davis_info_extInputHasGenerator_get, _libcaer_wrap.caer_davis_info_extInputHasGenerator_set)
    __swig_setmethods__["extInputHasExtraDetectors"] = _libcaer_wrap.caer_davis_info_extInputHasExtraDetectors_set
    __swig_getmethods__["extInputHasExtraDetectors"] = _libcaer_wrap.caer_davis_info_extInputHasExtraDetectors_get
    if _newclass:
        extInputHasExtraDetectors = _swig_property(_libcaer_wrap.caer_davis_info_extInputHasExtraDetectors_get, _libcaer_wrap.caer_davis_info_extInputHasExtraDetectors_set)
    __swig_setmethods__["dvsHasROIFilter"] = _libcaer_wrap.caer_davis_info_dvsHasROIFilter_set
    __swig_getmethods__["dvsHasROIFilter"] = _libcaer_wrap.caer_davis_info_dvsHasROIFilter_get
    if _newclass:
        dvsHasROIFilter = _swig_property(_libcaer_wrap.caer_davis_info_dvsHasROIFilter_get, _libcaer_wrap.caer_davis_info_dvsHasROIFilter_set)
    __swig_setmethods__["dvsHasStatistics"] = _libcaer_wrap.caer_davis_info_dvsHasStatistics_set
    __swig_getmethods__["dvsHasStatistics"] = _libcaer_wrap.caer_davis_info_dvsHasStatistics_get
    if _newclass:
        dvsHasStatistics = _swig_property(_libcaer_wrap.caer_davis_info_dvsHasStatistics_get, _libcaer_wrap.caer_davis_info_dvsHasStatistics_set)
    __swig_setmethods__["muxHasStatistics"] = _libcaer_wrap.caer_davis_info_muxHasStatistics_set
    __swig_getmethods__["muxHasStatistics"] = _libcaer_wrap.caer_davis_info_muxHasStatistics_get
    if _newclass:
        muxHasStatistics = _swig_property(_libcaer_wrap.caer_davis_info_muxHasStatistics_get, _libcaer_wrap.caer_davis_info_muxHasStatistics_set)

    def __init__(self):
        """__init__(caer_davis_info self) -> caer_davis_info"""
        this = _libcaer_wrap.new_caer_davis_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_davis_info
    def __del__(self):
        return None
caer_davis_info_swigregister = _libcaer_wrap.caer_davis_info_swigregister
caer_davis_info_swigregister(caer_davis_info)


def caerDavisInfoGet(handle):
    """caerDavisInfoGet(caerDeviceHandle handle) -> caer_davis_info"""
    return _libcaer_wrap.caerDavisInfoGet(handle)
class caer_bias_vdac(_object):
    """Proxy of C caer_bias_vdac struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_bias_vdac, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_bias_vdac, name)
    __repr__ = _swig_repr
    __swig_setmethods__["voltageValue"] = _libcaer_wrap.caer_bias_vdac_voltageValue_set
    __swig_getmethods__["voltageValue"] = _libcaer_wrap.caer_bias_vdac_voltageValue_get
    if _newclass:
        voltageValue = _swig_property(_libcaer_wrap.caer_bias_vdac_voltageValue_get, _libcaer_wrap.caer_bias_vdac_voltageValue_set)
    __swig_setmethods__["currentValue"] = _libcaer_wrap.caer_bias_vdac_currentValue_set
    __swig_getmethods__["currentValue"] = _libcaer_wrap.caer_bias_vdac_currentValue_get
    if _newclass:
        currentValue = _swig_property(_libcaer_wrap.caer_bias_vdac_currentValue_get, _libcaer_wrap.caer_bias_vdac_currentValue_set)

    def __init__(self):
        """__init__(caer_bias_vdac self) -> caer_bias_vdac"""
        this = _libcaer_wrap.new_caer_bias_vdac()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_bias_vdac
    def __del__(self):
        return None
caer_bias_vdac_swigregister = _libcaer_wrap.caer_bias_vdac_swigregister
caer_bias_vdac_swigregister(caer_bias_vdac)


def caerBiasVDACGenerate(vdacBias):
    """caerBiasVDACGenerate(caer_bias_vdac vdacBias) -> uint16_t"""
    return _libcaer_wrap.caerBiasVDACGenerate(vdacBias)

def caerBiasVDACParse(vdacBias):
    """caerBiasVDACParse(uint16_t const vdacBias) -> caer_bias_vdac"""
    return _libcaer_wrap.caerBiasVDACParse(vdacBias)
class caer_bias_coarsefine(_object):
    """Proxy of C caer_bias_coarsefine struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_bias_coarsefine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_bias_coarsefine, name)
    __repr__ = _swig_repr
    __swig_setmethods__["coarseValue"] = _libcaer_wrap.caer_bias_coarsefine_coarseValue_set
    __swig_getmethods__["coarseValue"] = _libcaer_wrap.caer_bias_coarsefine_coarseValue_get
    if _newclass:
        coarseValue = _swig_property(_libcaer_wrap.caer_bias_coarsefine_coarseValue_get, _libcaer_wrap.caer_bias_coarsefine_coarseValue_set)
    __swig_setmethods__["fineValue"] = _libcaer_wrap.caer_bias_coarsefine_fineValue_set
    __swig_getmethods__["fineValue"] = _libcaer_wrap.caer_bias_coarsefine_fineValue_get
    if _newclass:
        fineValue = _swig_property(_libcaer_wrap.caer_bias_coarsefine_fineValue_get, _libcaer_wrap.caer_bias_coarsefine_fineValue_set)
    __swig_setmethods__["enabled"] = _libcaer_wrap.caer_bias_coarsefine_enabled_set
    __swig_getmethods__["enabled"] = _libcaer_wrap.caer_bias_coarsefine_enabled_get
    if _newclass:
        enabled = _swig_property(_libcaer_wrap.caer_bias_coarsefine_enabled_get, _libcaer_wrap.caer_bias_coarsefine_enabled_set)
    __swig_setmethods__["sexN"] = _libcaer_wrap.caer_bias_coarsefine_sexN_set
    __swig_getmethods__["sexN"] = _libcaer_wrap.caer_bias_coarsefine_sexN_get
    if _newclass:
        sexN = _swig_property(_libcaer_wrap.caer_bias_coarsefine_sexN_get, _libcaer_wrap.caer_bias_coarsefine_sexN_set)
    __swig_setmethods__["typeNormal"] = _libcaer_wrap.caer_bias_coarsefine_typeNormal_set
    __swig_getmethods__["typeNormal"] = _libcaer_wrap.caer_bias_coarsefine_typeNormal_get
    if _newclass:
        typeNormal = _swig_property(_libcaer_wrap.caer_bias_coarsefine_typeNormal_get, _libcaer_wrap.caer_bias_coarsefine_typeNormal_set)
    __swig_setmethods__["currentLevelNormal"] = _libcaer_wrap.caer_bias_coarsefine_currentLevelNormal_set
    __swig_getmethods__["currentLevelNormal"] = _libcaer_wrap.caer_bias_coarsefine_currentLevelNormal_get
    if _newclass:
        currentLevelNormal = _swig_property(_libcaer_wrap.caer_bias_coarsefine_currentLevelNormal_get, _libcaer_wrap.caer_bias_coarsefine_currentLevelNormal_set)

    def __init__(self):
        """__init__(caer_bias_coarsefine self) -> caer_bias_coarsefine"""
        this = _libcaer_wrap.new_caer_bias_coarsefine()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_bias_coarsefine
    def __del__(self):
        return None
caer_bias_coarsefine_swigregister = _libcaer_wrap.caer_bias_coarsefine_swigregister
caer_bias_coarsefine_swigregister(caer_bias_coarsefine)


def caerBiasCoarseFineGenerate(coarseFineBias):
    """caerBiasCoarseFineGenerate(caer_bias_coarsefine coarseFineBias) -> uint16_t"""
    return _libcaer_wrap.caerBiasCoarseFineGenerate(coarseFineBias)

def caerBiasCoarseFineParse(coarseFineBias):
    """caerBiasCoarseFineParse(uint16_t const coarseFineBias) -> caer_bias_coarsefine"""
    return _libcaer_wrap.caerBiasCoarseFineParse(coarseFineBias)
SHIFTED_SOURCE = _libcaer_wrap.SHIFTED_SOURCE
HI_Z = _libcaer_wrap.HI_Z
TIED_TO_RAIL = _libcaer_wrap.TIED_TO_RAIL
SPLIT_GATE = _libcaer_wrap.SPLIT_GATE
SINGLE_DIODE = _libcaer_wrap.SINGLE_DIODE
DOUBLE_DIODE = _libcaer_wrap.DOUBLE_DIODE
class caer_bias_shiftedsource(_object):
    """Proxy of C caer_bias_shiftedsource struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_bias_shiftedsource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_bias_shiftedsource, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refValue"] = _libcaer_wrap.caer_bias_shiftedsource_refValue_set
    __swig_getmethods__["refValue"] = _libcaer_wrap.caer_bias_shiftedsource_refValue_get
    if _newclass:
        refValue = _swig_property(_libcaer_wrap.caer_bias_shiftedsource_refValue_get, _libcaer_wrap.caer_bias_shiftedsource_refValue_set)
    __swig_setmethods__["regValue"] = _libcaer_wrap.caer_bias_shiftedsource_regValue_set
    __swig_getmethods__["regValue"] = _libcaer_wrap.caer_bias_shiftedsource_regValue_get
    if _newclass:
        regValue = _swig_property(_libcaer_wrap.caer_bias_shiftedsource_regValue_get, _libcaer_wrap.caer_bias_shiftedsource_regValue_set)
    __swig_setmethods__["operatingMode"] = _libcaer_wrap.caer_bias_shiftedsource_operatingMode_set
    __swig_getmethods__["operatingMode"] = _libcaer_wrap.caer_bias_shiftedsource_operatingMode_get
    if _newclass:
        operatingMode = _swig_property(_libcaer_wrap.caer_bias_shiftedsource_operatingMode_get, _libcaer_wrap.caer_bias_shiftedsource_operatingMode_set)
    __swig_setmethods__["voltageLevel"] = _libcaer_wrap.caer_bias_shiftedsource_voltageLevel_set
    __swig_getmethods__["voltageLevel"] = _libcaer_wrap.caer_bias_shiftedsource_voltageLevel_get
    if _newclass:
        voltageLevel = _swig_property(_libcaer_wrap.caer_bias_shiftedsource_voltageLevel_get, _libcaer_wrap.caer_bias_shiftedsource_voltageLevel_set)

    def __init__(self):
        """__init__(caer_bias_shiftedsource self) -> caer_bias_shiftedsource"""
        this = _libcaer_wrap.new_caer_bias_shiftedsource()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_bias_shiftedsource
    def __del__(self):
        return None
caer_bias_shiftedsource_swigregister = _libcaer_wrap.caer_bias_shiftedsource_swigregister
caer_bias_shiftedsource_swigregister(caer_bias_shiftedsource)


def caerBiasShiftedSourceGenerate(shiftedSourceBias):
    """caerBiasShiftedSourceGenerate(caer_bias_shiftedsource shiftedSourceBias) -> uint16_t"""
    return _libcaer_wrap.caerBiasShiftedSourceGenerate(shiftedSourceBias)

def caerBiasShiftedSourceParse(shiftedSourceBias):
    """caerBiasShiftedSourceParse(uint16_t const shiftedSourceBias) -> caer_bias_shiftedsource"""
    return _libcaer_wrap.caerBiasShiftedSourceParse(shiftedSourceBias)

def caerDavisROIConfigure(handle, roiRegion, enable, startX, startY, endX, endY):
    """caerDavisROIConfigure(caerDeviceHandle handle, uint8_t roiRegion, bool enable, uint16_t startX, uint16_t startY, uint16_t endX, uint16_t endY) -> bool"""
    return _libcaer_wrap.caerDavisROIConfigure(handle, roiRegion, enable, startX, startY, endX, endY)
CAER_DEVICE_DYNAPSE = _libcaer_wrap.CAER_DEVICE_DYNAPSE
DYNAPSE_CHIP_DYNAPSE = _libcaer_wrap.DYNAPSE_CHIP_DYNAPSE
DYNAPSE_CONFIG_MUX = _libcaer_wrap.DYNAPSE_CONFIG_MUX
DYNAPSE_CONFIG_AER = _libcaer_wrap.DYNAPSE_CONFIG_AER
DYNAPSE_CONFIG_CHIP = _libcaer_wrap.DYNAPSE_CONFIG_CHIP
DYNAPSE_CONFIG_SYSINFO = _libcaer_wrap.DYNAPSE_CONFIG_SYSINFO
DYNAPSE_CONFIG_USB = _libcaer_wrap.DYNAPSE_CONFIG_USB
DYNAPSE_CONFIG_CLEAR_CAM = _libcaer_wrap.DYNAPSE_CONFIG_CLEAR_CAM
DYNAPSE_CONFIG_DEFAULT_SRAM = _libcaer_wrap.DYNAPSE_CONFIG_DEFAULT_SRAM
DYNAPSE_CONFIG_MONITOR_NEU = _libcaer_wrap.DYNAPSE_CONFIG_MONITOR_NEU
DYNAPSE_CONFIG_DEFAULT_SRAM_EMPTY = _libcaer_wrap.DYNAPSE_CONFIG_DEFAULT_SRAM_EMPTY
DYNAPSE_CONFIG_SRAM = _libcaer_wrap.DYNAPSE_CONFIG_SRAM
DYNAPSE_CONFIG_SYNAPSERECONFIG = _libcaer_wrap.DYNAPSE_CONFIG_SYNAPSERECONFIG
DYNAPSE_CONFIG_SPIKEGEN = _libcaer_wrap.DYNAPSE_CONFIG_SPIKEGEN
DYNAPSE_CONFIG_TAU2_SET = _libcaer_wrap.DYNAPSE_CONFIG_TAU2_SET
DYNAPSE_CONFIG_POISSONSPIKEGEN = _libcaer_wrap.DYNAPSE_CONFIG_POISSONSPIKEGEN
DYNAPSE_CONFIG_TAU1_RESET = _libcaer_wrap.DYNAPSE_CONFIG_TAU1_RESET
DYNAPSE_CONFIG_TAU2_RESET = _libcaer_wrap.DYNAPSE_CONFIG_TAU2_RESET
DYNAPSE_CONFIG_POISSONSPIKEGEN_RUN = _libcaer_wrap.DYNAPSE_CONFIG_POISSONSPIKEGEN_RUN
DYNAPSE_CONFIG_POISSONSPIKEGEN_WRITEADDRESS = _libcaer_wrap.DYNAPSE_CONFIG_POISSONSPIKEGEN_WRITEADDRESS
DYNAPSE_CONFIG_POISSONSPIKEGEN_WRITEDATA = _libcaer_wrap.DYNAPSE_CONFIG_POISSONSPIKEGEN_WRITEDATA
DYNAPSE_CONFIG_POISSONSPIKEGEN_CHIPID = _libcaer_wrap.DYNAPSE_CONFIG_POISSONSPIKEGEN_CHIPID
DYNAPSE_CONFIG_SPIKEGEN_RUN = _libcaer_wrap.DYNAPSE_CONFIG_SPIKEGEN_RUN
DYNAPSE_CONFIG_SPIKEGEN_VARMODE = _libcaer_wrap.DYNAPSE_CONFIG_SPIKEGEN_VARMODE
DYNAPSE_CONFIG_SPIKEGEN_BASEADDR = _libcaer_wrap.DYNAPSE_CONFIG_SPIKEGEN_BASEADDR
DYNAPSE_CONFIG_SPIKEGEN_STIMCOUNT = _libcaer_wrap.DYNAPSE_CONFIG_SPIKEGEN_STIMCOUNT
DYNAPSE_CONFIG_SPIKEGEN_ISI = _libcaer_wrap.DYNAPSE_CONFIG_SPIKEGEN_ISI
DYNAPSE_CONFIG_SPIKEGEN_ISIBASE = _libcaer_wrap.DYNAPSE_CONFIG_SPIKEGEN_ISIBASE
DYNAPSE_CONFIG_SPIKEGEN_REPEAT = _libcaer_wrap.DYNAPSE_CONFIG_SPIKEGEN_REPEAT
DYNAPSE_CONFIG_SYNAPSERECONFIG_RUN = _libcaer_wrap.DYNAPSE_CONFIG_SYNAPSERECONFIG_RUN
DYNAPSE_CONFIG_SYNAPSERECONFIG_GLOBALKERNEL = _libcaer_wrap.DYNAPSE_CONFIG_SYNAPSERECONFIG_GLOBALKERNEL
DYNAPSE_CONFIG_SYNAPSERECONFIG_USESRAMKERNELS = _libcaer_wrap.DYNAPSE_CONFIG_SYNAPSERECONFIG_USESRAMKERNELS
DYNAPSE_CONFIG_SYNAPSERECONFIG_CHIPSELECT = _libcaer_wrap.DYNAPSE_CONFIG_SYNAPSERECONFIG_CHIPSELECT
DYNAPSE_CONFIG_SYNAPSERECONFIG_SRAMBASEADDR = _libcaer_wrap.DYNAPSE_CONFIG_SYNAPSERECONFIG_SRAMBASEADDR
DYNAPSE_CONFIG_SRAM_ADDRESS = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_ADDRESS
DYNAPSE_CONFIG_SRAM_READDATA = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_READDATA
DYNAPSE_CONFIG_SRAM_WRITEDATA = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_WRITEDATA
DYNAPSE_CONFIG_SRAM_RWCOMMAND = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_RWCOMMAND
DYNAPSE_CONFIG_SRAM_READ = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_READ
DYNAPSE_CONFIG_SRAM_WRITE = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_WRITE
DYNAPSE_CONFIG_SRAM_BURSTMODE = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_BURSTMODE
DYNAPSE_CONFIG_MUX_RUN = _libcaer_wrap.DYNAPSE_CONFIG_MUX_RUN
DYNAPSE_CONFIG_MUX_TIMESTAMP_RUN = _libcaer_wrap.DYNAPSE_CONFIG_MUX_TIMESTAMP_RUN
DYNAPSE_CONFIG_MUX_TIMESTAMP_RESET = _libcaer_wrap.DYNAPSE_CONFIG_MUX_TIMESTAMP_RESET
DYNAPSE_CONFIG_MUX_FORCE_CHIP_BIAS_ENABLE = _libcaer_wrap.DYNAPSE_CONFIG_MUX_FORCE_CHIP_BIAS_ENABLE
DYNAPSE_CONFIG_MUX_DROP_AER_ON_TRANSFER_STALL = _libcaer_wrap.DYNAPSE_CONFIG_MUX_DROP_AER_ON_TRANSFER_STALL
DYNAPSE_CONFIG_MUX_HAS_STATISTICS = _libcaer_wrap.DYNAPSE_CONFIG_MUX_HAS_STATISTICS
DYNAPSE_CONFIG_MUX_STATISTICS_AER_DROPPED = _libcaer_wrap.DYNAPSE_CONFIG_MUX_STATISTICS_AER_DROPPED
DYNAPSE_CONFIG_AER_RUN = _libcaer_wrap.DYNAPSE_CONFIG_AER_RUN
DYNAPSE_CONFIG_AER_ACK_DELAY = _libcaer_wrap.DYNAPSE_CONFIG_AER_ACK_DELAY
DYNAPSE_CONFIG_AER_ACK_EXTENSION = _libcaer_wrap.DYNAPSE_CONFIG_AER_ACK_EXTENSION
DYNAPSE_CONFIG_AER_WAIT_ON_TRANSFER_STALL = _libcaer_wrap.DYNAPSE_CONFIG_AER_WAIT_ON_TRANSFER_STALL
DYNAPSE_CONFIG_AER_EXTERNAL_AER_CONTROL = _libcaer_wrap.DYNAPSE_CONFIG_AER_EXTERNAL_AER_CONTROL
DYNAPSE_CONFIG_AER_HAS_STATISTICS = _libcaer_wrap.DYNAPSE_CONFIG_AER_HAS_STATISTICS
DYNAPSE_CONFIG_AER_STATISTICS_EVENTS = _libcaer_wrap.DYNAPSE_CONFIG_AER_STATISTICS_EVENTS
DYNAPSE_CONFIG_AER_STATISTICS_EVENTS_DROPPED = _libcaer_wrap.DYNAPSE_CONFIG_AER_STATISTICS_EVENTS_DROPPED
DYNAPSE_CONFIG_CHIP_RUN = _libcaer_wrap.DYNAPSE_CONFIG_CHIP_RUN
DYNAPSE_CONFIG_CHIP_ID = _libcaer_wrap.DYNAPSE_CONFIG_CHIP_ID
DYNAPSE_CONFIG_CHIP_CONTENT = _libcaer_wrap.DYNAPSE_CONFIG_CHIP_CONTENT
DYNAPSE_CONFIG_CHIP_REQ_DELAY = _libcaer_wrap.DYNAPSE_CONFIG_CHIP_REQ_DELAY
DYNAPSE_CONFIG_CHIP_REQ_EXTENSION = _libcaer_wrap.DYNAPSE_CONFIG_CHIP_REQ_EXTENSION
DYNAPSE_CONFIG_SYSINFO_LOGIC_VERSION = _libcaer_wrap.DYNAPSE_CONFIG_SYSINFO_LOGIC_VERSION
DYNAPSE_CONFIG_SYSINFO_CHIP_IDENTIFIER = _libcaer_wrap.DYNAPSE_CONFIG_SYSINFO_CHIP_IDENTIFIER
DYNAPSE_CONFIG_SYSINFO_DEVICE_IS_MASTER = _libcaer_wrap.DYNAPSE_CONFIG_SYSINFO_DEVICE_IS_MASTER
DYNAPSE_CONFIG_SYSINFO_LOGIC_CLOCK = _libcaer_wrap.DYNAPSE_CONFIG_SYSINFO_LOGIC_CLOCK
DYNAPSE_CONFIG_USB_RUN = _libcaer_wrap.DYNAPSE_CONFIG_USB_RUN
DYNAPSE_CONFIG_USB_EARLY_PACKET_DELAY = _libcaer_wrap.DYNAPSE_CONFIG_USB_EARLY_PACKET_DELAY
DYNAPSE_CONFIG_SRAM_DIRECTION_POS = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_DIRECTION_POS
DYNAPSE_CONFIG_SRAM_DIRECTION_NEG = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_DIRECTION_NEG
DYNAPSE_CONFIG_SRAM_DIRECTION_Y_NORTH = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_DIRECTION_Y_NORTH
DYNAPSE_CONFIG_SRAM_DIRECTION_Y_SOUTH = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_DIRECTION_Y_SOUTH
DYNAPSE_CONFIG_SRAM_DIRECTION_X_EAST = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_DIRECTION_X_EAST
DYNAPSE_CONFIG_SRAM_DIRECTION_X_WEST = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_DIRECTION_X_WEST
DYNAPSE_X4BOARD_NUMCHIPS = _libcaer_wrap.DYNAPSE_X4BOARD_NUMCHIPS
DYNAPSE_X4BOARD_NEUX = _libcaer_wrap.DYNAPSE_X4BOARD_NEUX
DYNAPSE_X4BOARD_NEUY = _libcaer_wrap.DYNAPSE_X4BOARD_NEUY
DYNAPSE_X4BOARD_COREX = _libcaer_wrap.DYNAPSE_X4BOARD_COREX
DYNAPSE_X4BOARD_COREY = _libcaer_wrap.DYNAPSE_X4BOARD_COREY
DYNAPSE_CONFIG_DYNAPSE_U0 = _libcaer_wrap.DYNAPSE_CONFIG_DYNAPSE_U0
DYNAPSE_CONFIG_DYNAPSE_U1 = _libcaer_wrap.DYNAPSE_CONFIG_DYNAPSE_U1
DYNAPSE_CONFIG_DYNAPSE_U2 = _libcaer_wrap.DYNAPSE_CONFIG_DYNAPSE_U2
DYNAPSE_CONFIG_DYNAPSE_U3 = _libcaer_wrap.DYNAPSE_CONFIG_DYNAPSE_U3
DYNAPSE_CONFIG_NUMCORES = _libcaer_wrap.DYNAPSE_CONFIG_NUMCORES
DYNAPSE_CONFIG_NUMNEURONS = _libcaer_wrap.DYNAPSE_CONFIG_NUMNEURONS
DYNAPSE_CONFIG_NUMNEURONS_CORE = _libcaer_wrap.DYNAPSE_CONFIG_NUMNEURONS_CORE
DYNAPSE_CONFIG_XCHIPSIZE = _libcaer_wrap.DYNAPSE_CONFIG_XCHIPSIZE
DYNAPSE_CONFIG_YCHIPSIZE = _libcaer_wrap.DYNAPSE_CONFIG_YCHIPSIZE
DYNAPSE_CONFIG_NEUCOL = _libcaer_wrap.DYNAPSE_CONFIG_NEUCOL
DYNAPSE_CONFIG_NEUROW = _libcaer_wrap.DYNAPSE_CONFIG_NEUROW
DYNAPSE_CONFIG_CAMCOL = _libcaer_wrap.DYNAPSE_CONFIG_CAMCOL
DYNAPSE_CONFIG_NUMCAM_NEU = _libcaer_wrap.DYNAPSE_CONFIG_NUMCAM_NEU
DYNAPSE_CONFIG_NUMSRAM_NEU = _libcaer_wrap.DYNAPSE_CONFIG_NUMSRAM_NEU
DYNAPSE_CONFIG_CAMTYPE_F_EXC = _libcaer_wrap.DYNAPSE_CONFIG_CAMTYPE_F_EXC
DYNAPSE_CONFIG_CAMTYPE_S_EXC = _libcaer_wrap.DYNAPSE_CONFIG_CAMTYPE_S_EXC
DYNAPSE_CONFIG_CAMTYPE_F_INH = _libcaer_wrap.DYNAPSE_CONFIG_CAMTYPE_F_INH
DYNAPSE_CONFIG_CAMTYPE_S_INH = _libcaer_wrap.DYNAPSE_CONFIG_CAMTYPE_S_INH
DYNAPSE_CONFIG_BIAS_C0_PULSE_PWLK_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_PULSE_PWLK_P
DYNAPSE_CONFIG_BIAS_C0_PS_WEIGHT_INH_S_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_PS_WEIGHT_INH_S_N
DYNAPSE_CONFIG_BIAS_C0_PS_WEIGHT_INH_F_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_PS_WEIGHT_INH_F_N
DYNAPSE_CONFIG_BIAS_C0_PS_WEIGHT_EXC_S_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_PS_WEIGHT_EXC_S_N
DYNAPSE_CONFIG_BIAS_C0_PS_WEIGHT_EXC_F_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_PS_WEIGHT_EXC_F_N
DYNAPSE_CONFIG_BIAS_C0_IF_RFR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_RFR_N
DYNAPSE_CONFIG_BIAS_C0_IF_TAU1_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_TAU1_N
DYNAPSE_CONFIG_BIAS_C0_IF_AHTAU_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_AHTAU_N
DYNAPSE_CONFIG_BIAS_C0_IF_CASC_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_CASC_N
DYNAPSE_CONFIG_BIAS_C0_IF_TAU2_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_TAU2_N
DYNAPSE_CONFIG_BIAS_C0_IF_BUF_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_BUF_P
DYNAPSE_CONFIG_BIAS_C0_IF_AHTHR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_AHTHR_N
DYNAPSE_CONFIG_BIAS_C0_IF_THR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_THR_N
DYNAPSE_CONFIG_BIAS_C0_NPDPIE_THR_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_NPDPIE_THR_S_P
DYNAPSE_CONFIG_BIAS_C0_NPDPIE_THR_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_NPDPIE_THR_F_P
DYNAPSE_CONFIG_BIAS_C0_NPDPII_THR_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_NPDPII_THR_F_P
DYNAPSE_CONFIG_BIAS_C0_NPDPII_THR_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_NPDPII_THR_S_P
DYNAPSE_CONFIG_BIAS_C0_IF_NMDA_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_NMDA_N
DYNAPSE_CONFIG_BIAS_C0_IF_DC_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_DC_P
DYNAPSE_CONFIG_BIAS_C0_IF_AHW_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_AHW_P
DYNAPSE_CONFIG_BIAS_C0_NPDPII_TAU_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_NPDPII_TAU_S_P
DYNAPSE_CONFIG_BIAS_C0_NPDPII_TAU_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_NPDPII_TAU_F_P
DYNAPSE_CONFIG_BIAS_C0_NPDPIE_TAU_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_NPDPIE_TAU_F_P
DYNAPSE_CONFIG_BIAS_C0_NPDPIE_TAU_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_NPDPIE_TAU_S_P
DYNAPSE_CONFIG_BIAS_C0_R2R_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_R2R_P
DYNAPSE_CONFIG_BIAS_C1_PULSE_PWLK_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_PULSE_PWLK_P
DYNAPSE_CONFIG_BIAS_C1_PS_WEIGHT_INH_S_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_PS_WEIGHT_INH_S_N
DYNAPSE_CONFIG_BIAS_C1_PS_WEIGHT_INH_F_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_PS_WEIGHT_INH_F_N
DYNAPSE_CONFIG_BIAS_C1_PS_WEIGHT_EXC_S_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_PS_WEIGHT_EXC_S_N
DYNAPSE_CONFIG_BIAS_C1_PS_WEIGHT_EXC_F_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_PS_WEIGHT_EXC_F_N
DYNAPSE_CONFIG_BIAS_C1_IF_RFR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_RFR_N
DYNAPSE_CONFIG_BIAS_C1_IF_TAU1_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_TAU1_N
DYNAPSE_CONFIG_BIAS_C1_IF_AHTAU_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_AHTAU_N
DYNAPSE_CONFIG_BIAS_C1_IF_CASC_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_CASC_N
DYNAPSE_CONFIG_BIAS_C1_IF_TAU2_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_TAU2_N
DYNAPSE_CONFIG_BIAS_C1_IF_BUF_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_BUF_P
DYNAPSE_CONFIG_BIAS_C1_IF_AHTHR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_AHTHR_N
DYNAPSE_CONFIG_BIAS_C1_IF_THR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_THR_N
DYNAPSE_CONFIG_BIAS_C1_NPDPIE_THR_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_NPDPIE_THR_S_P
DYNAPSE_CONFIG_BIAS_C1_NPDPIE_THR_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_NPDPIE_THR_F_P
DYNAPSE_CONFIG_BIAS_C1_NPDPII_THR_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_NPDPII_THR_F_P
DYNAPSE_CONFIG_BIAS_C1_NPDPII_THR_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_NPDPII_THR_S_P
DYNAPSE_CONFIG_BIAS_C1_IF_NMDA_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_NMDA_N
DYNAPSE_CONFIG_BIAS_C1_IF_DC_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_DC_P
DYNAPSE_CONFIG_BIAS_C1_IF_AHW_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_AHW_P
DYNAPSE_CONFIG_BIAS_C1_NPDPII_TAU_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_NPDPII_TAU_S_P
DYNAPSE_CONFIG_BIAS_C1_NPDPII_TAU_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_NPDPII_TAU_F_P
DYNAPSE_CONFIG_BIAS_C1_NPDPIE_TAU_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_NPDPIE_TAU_F_P
DYNAPSE_CONFIG_BIAS_C1_NPDPIE_TAU_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_NPDPIE_TAU_S_P
DYNAPSE_CONFIG_BIAS_C1_R2R_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_R2R_P
DYNAPSE_CONFIG_BIAS_U_BUFFER = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_U_BUFFER
DYNAPSE_CONFIG_BIAS_U_SSP = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_U_SSP
DYNAPSE_CONFIG_BIAS_U_SSN = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_U_SSN
DYNAPSE_CONFIG_BIAS_C2_PULSE_PWLK_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_PULSE_PWLK_P
DYNAPSE_CONFIG_BIAS_C2_PS_WEIGHT_INH_S_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_PS_WEIGHT_INH_S_N
DYNAPSE_CONFIG_BIAS_C2_PS_WEIGHT_INH_F_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_PS_WEIGHT_INH_F_N
DYNAPSE_CONFIG_BIAS_C2_PS_WEIGHT_EXC_S_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_PS_WEIGHT_EXC_S_N
DYNAPSE_CONFIG_BIAS_C2_PS_WEIGHT_EXC_F_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_PS_WEIGHT_EXC_F_N
DYNAPSE_CONFIG_BIAS_C2_IF_RFR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_RFR_N
DYNAPSE_CONFIG_BIAS_C2_IF_TAU1_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_TAU1_N
DYNAPSE_CONFIG_BIAS_C2_IF_AHTAU_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_AHTAU_N
DYNAPSE_CONFIG_BIAS_C2_IF_CASC_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_CASC_N
DYNAPSE_CONFIG_BIAS_C2_IF_TAU2_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_TAU2_N
DYNAPSE_CONFIG_BIAS_C2_IF_BUF_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_BUF_P
DYNAPSE_CONFIG_BIAS_C2_IF_AHTHR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_AHTHR_N
DYNAPSE_CONFIG_BIAS_C2_IF_THR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_THR_N
DYNAPSE_CONFIG_BIAS_C2_NPDPIE_THR_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_NPDPIE_THR_S_P
DYNAPSE_CONFIG_BIAS_C2_NPDPIE_THR_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_NPDPIE_THR_F_P
DYNAPSE_CONFIG_BIAS_C2_NPDPII_THR_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_NPDPII_THR_F_P
DYNAPSE_CONFIG_BIAS_C2_NPDPII_THR_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_NPDPII_THR_S_P
DYNAPSE_CONFIG_BIAS_C2_IF_NMDA_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_NMDA_N
DYNAPSE_CONFIG_BIAS_C2_IF_DC_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_DC_P
DYNAPSE_CONFIG_BIAS_C2_IF_AHW_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_AHW_P
DYNAPSE_CONFIG_BIAS_C2_NPDPII_TAU_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_NPDPII_TAU_S_P
DYNAPSE_CONFIG_BIAS_C2_NPDPII_TAU_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_NPDPII_TAU_F_P
DYNAPSE_CONFIG_BIAS_C2_NPDPIE_TAU_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_NPDPIE_TAU_F_P
DYNAPSE_CONFIG_BIAS_C2_NPDPIE_TAU_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_NPDPIE_TAU_S_P
DYNAPSE_CONFIG_BIAS_C2_R2R_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_R2R_P
DYNAPSE_CONFIG_BIAS_C3_PULSE_PWLK_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_PULSE_PWLK_P
DYNAPSE_CONFIG_BIAS_C3_PS_WEIGHT_INH_S_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_PS_WEIGHT_INH_S_N
DYNAPSE_CONFIG_BIAS_C3_PS_WEIGHT_INH_F_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_PS_WEIGHT_INH_F_N
DYNAPSE_CONFIG_BIAS_C3_PS_WEIGHT_EXC_S_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_PS_WEIGHT_EXC_S_N
DYNAPSE_CONFIG_BIAS_C3_PS_WEIGHT_EXC_F_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_PS_WEIGHT_EXC_F_N
DYNAPSE_CONFIG_BIAS_C3_IF_RFR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_RFR_N
DYNAPSE_CONFIG_BIAS_C3_IF_TAU1_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_TAU1_N
DYNAPSE_CONFIG_BIAS_C3_IF_AHTAU_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_AHTAU_N
DYNAPSE_CONFIG_BIAS_C3_IF_CASC_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_CASC_N
DYNAPSE_CONFIG_BIAS_C3_IF_TAU2_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_TAU2_N
DYNAPSE_CONFIG_BIAS_C3_IF_BUF_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_BUF_P
DYNAPSE_CONFIG_BIAS_C3_IF_AHTHR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_AHTHR_N
DYNAPSE_CONFIG_BIAS_C3_IF_THR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_THR_N
DYNAPSE_CONFIG_BIAS_C3_NPDPIE_THR_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_NPDPIE_THR_S_P
DYNAPSE_CONFIG_BIAS_C3_NPDPIE_THR_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_NPDPIE_THR_F_P
DYNAPSE_CONFIG_BIAS_C3_NPDPII_THR_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_NPDPII_THR_F_P
DYNAPSE_CONFIG_BIAS_C3_NPDPII_THR_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_NPDPII_THR_S_P
DYNAPSE_CONFIG_BIAS_C3_IF_NMDA_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_NMDA_N
DYNAPSE_CONFIG_BIAS_C3_IF_DC_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_DC_P
DYNAPSE_CONFIG_BIAS_C3_IF_AHW_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_AHW_P
DYNAPSE_CONFIG_BIAS_C3_NPDPII_TAU_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_NPDPII_TAU_S_P
DYNAPSE_CONFIG_BIAS_C3_NPDPII_TAU_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_NPDPII_TAU_F_P
DYNAPSE_CONFIG_BIAS_C3_NPDPIE_TAU_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_NPDPIE_TAU_F_P
DYNAPSE_CONFIG_BIAS_C3_NPDPIE_TAU_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_NPDPIE_TAU_S_P
DYNAPSE_CONFIG_BIAS_C3_R2R_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_R2R_P
DYNAPSE_CONFIG_BIAS_D_BUFFER = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_D_BUFFER
DYNAPSE_CONFIG_BIAS_D_SSP = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_D_SSP
DYNAPSE_CONFIG_BIAS_D_SSN = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_D_SSN
class caer_dynapse_info(_object):
    """Proxy of C caer_dynapse_info struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_dynapse_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_dynapse_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["deviceID"] = _libcaer_wrap.caer_dynapse_info_deviceID_set
    __swig_getmethods__["deviceID"] = _libcaer_wrap.caer_dynapse_info_deviceID_get
    if _newclass:
        deviceID = _swig_property(_libcaer_wrap.caer_dynapse_info_deviceID_get, _libcaer_wrap.caer_dynapse_info_deviceID_set)
    __swig_setmethods__["deviceSerialNumber"] = _libcaer_wrap.caer_dynapse_info_deviceSerialNumber_set
    __swig_getmethods__["deviceSerialNumber"] = _libcaer_wrap.caer_dynapse_info_deviceSerialNumber_get
    if _newclass:
        deviceSerialNumber = _swig_property(_libcaer_wrap.caer_dynapse_info_deviceSerialNumber_get, _libcaer_wrap.caer_dynapse_info_deviceSerialNumber_set)
    __swig_setmethods__["deviceUSBBusNumber"] = _libcaer_wrap.caer_dynapse_info_deviceUSBBusNumber_set
    __swig_getmethods__["deviceUSBBusNumber"] = _libcaer_wrap.caer_dynapse_info_deviceUSBBusNumber_get
    if _newclass:
        deviceUSBBusNumber = _swig_property(_libcaer_wrap.caer_dynapse_info_deviceUSBBusNumber_get, _libcaer_wrap.caer_dynapse_info_deviceUSBBusNumber_set)
    __swig_setmethods__["deviceUSBDeviceAddress"] = _libcaer_wrap.caer_dynapse_info_deviceUSBDeviceAddress_set
    __swig_getmethods__["deviceUSBDeviceAddress"] = _libcaer_wrap.caer_dynapse_info_deviceUSBDeviceAddress_get
    if _newclass:
        deviceUSBDeviceAddress = _swig_property(_libcaer_wrap.caer_dynapse_info_deviceUSBDeviceAddress_get, _libcaer_wrap.caer_dynapse_info_deviceUSBDeviceAddress_set)
    __swig_setmethods__["deviceString"] = _libcaer_wrap.caer_dynapse_info_deviceString_set
    __swig_getmethods__["deviceString"] = _libcaer_wrap.caer_dynapse_info_deviceString_get
    if _newclass:
        deviceString = _swig_property(_libcaer_wrap.caer_dynapse_info_deviceString_get, _libcaer_wrap.caer_dynapse_info_deviceString_set)
    __swig_setmethods__["logicVersion"] = _libcaer_wrap.caer_dynapse_info_logicVersion_set
    __swig_getmethods__["logicVersion"] = _libcaer_wrap.caer_dynapse_info_logicVersion_get
    if _newclass:
        logicVersion = _swig_property(_libcaer_wrap.caer_dynapse_info_logicVersion_get, _libcaer_wrap.caer_dynapse_info_logicVersion_set)
    __swig_setmethods__["deviceIsMaster"] = _libcaer_wrap.caer_dynapse_info_deviceIsMaster_set
    __swig_getmethods__["deviceIsMaster"] = _libcaer_wrap.caer_dynapse_info_deviceIsMaster_get
    if _newclass:
        deviceIsMaster = _swig_property(_libcaer_wrap.caer_dynapse_info_deviceIsMaster_get, _libcaer_wrap.caer_dynapse_info_deviceIsMaster_set)
    __swig_setmethods__["logicClock"] = _libcaer_wrap.caer_dynapse_info_logicClock_set
    __swig_getmethods__["logicClock"] = _libcaer_wrap.caer_dynapse_info_logicClock_get
    if _newclass:
        logicClock = _swig_property(_libcaer_wrap.caer_dynapse_info_logicClock_get, _libcaer_wrap.caer_dynapse_info_logicClock_set)
    __swig_setmethods__["chipID"] = _libcaer_wrap.caer_dynapse_info_chipID_set
    __swig_getmethods__["chipID"] = _libcaer_wrap.caer_dynapse_info_chipID_get
    if _newclass:
        chipID = _swig_property(_libcaer_wrap.caer_dynapse_info_chipID_get, _libcaer_wrap.caer_dynapse_info_chipID_set)
    __swig_setmethods__["aerHasStatistics"] = _libcaer_wrap.caer_dynapse_info_aerHasStatistics_set
    __swig_getmethods__["aerHasStatistics"] = _libcaer_wrap.caer_dynapse_info_aerHasStatistics_get
    if _newclass:
        aerHasStatistics = _swig_property(_libcaer_wrap.caer_dynapse_info_aerHasStatistics_get, _libcaer_wrap.caer_dynapse_info_aerHasStatistics_set)
    __swig_setmethods__["muxHasStatistics"] = _libcaer_wrap.caer_dynapse_info_muxHasStatistics_set
    __swig_getmethods__["muxHasStatistics"] = _libcaer_wrap.caer_dynapse_info_muxHasStatistics_get
    if _newclass:
        muxHasStatistics = _swig_property(_libcaer_wrap.caer_dynapse_info_muxHasStatistics_get, _libcaer_wrap.caer_dynapse_info_muxHasStatistics_set)

    def __init__(self):
        """__init__(caer_dynapse_info self) -> caer_dynapse_info"""
        this = _libcaer_wrap.new_caer_dynapse_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_dynapse_info
    def __del__(self):
        return None
caer_dynapse_info_swigregister = _libcaer_wrap.caer_dynapse_info_swigregister
caer_dynapse_info_swigregister(caer_dynapse_info)


def caerDynapseInfoGet(handle):
    """caerDynapseInfoGet(caerDeviceHandle handle) -> caer_dynapse_info"""
    return _libcaer_wrap.caerDynapseInfoGet(handle)
class caer_bias_dynapse(_object):
    """Proxy of C caer_bias_dynapse struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_bias_dynapse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_bias_dynapse, name)
    __repr__ = _swig_repr
    __swig_setmethods__["biasAddress"] = _libcaer_wrap.caer_bias_dynapse_biasAddress_set
    __swig_getmethods__["biasAddress"] = _libcaer_wrap.caer_bias_dynapse_biasAddress_get
    if _newclass:
        biasAddress = _swig_property(_libcaer_wrap.caer_bias_dynapse_biasAddress_get, _libcaer_wrap.caer_bias_dynapse_biasAddress_set)
    __swig_setmethods__["coarseValue"] = _libcaer_wrap.caer_bias_dynapse_coarseValue_set
    __swig_getmethods__["coarseValue"] = _libcaer_wrap.caer_bias_dynapse_coarseValue_get
    if _newclass:
        coarseValue = _swig_property(_libcaer_wrap.caer_bias_dynapse_coarseValue_get, _libcaer_wrap.caer_bias_dynapse_coarseValue_set)
    __swig_setmethods__["fineValue"] = _libcaer_wrap.caer_bias_dynapse_fineValue_set
    __swig_getmethods__["fineValue"] = _libcaer_wrap.caer_bias_dynapse_fineValue_get
    if _newclass:
        fineValue = _swig_property(_libcaer_wrap.caer_bias_dynapse_fineValue_get, _libcaer_wrap.caer_bias_dynapse_fineValue_set)
    __swig_setmethods__["enabled"] = _libcaer_wrap.caer_bias_dynapse_enabled_set
    __swig_getmethods__["enabled"] = _libcaer_wrap.caer_bias_dynapse_enabled_get
    if _newclass:
        enabled = _swig_property(_libcaer_wrap.caer_bias_dynapse_enabled_get, _libcaer_wrap.caer_bias_dynapse_enabled_set)
    __swig_setmethods__["sexN"] = _libcaer_wrap.caer_bias_dynapse_sexN_set
    __swig_getmethods__["sexN"] = _libcaer_wrap.caer_bias_dynapse_sexN_get
    if _newclass:
        sexN = _swig_property(_libcaer_wrap.caer_bias_dynapse_sexN_get, _libcaer_wrap.caer_bias_dynapse_sexN_set)
    __swig_setmethods__["typeNormal"] = _libcaer_wrap.caer_bias_dynapse_typeNormal_set
    __swig_getmethods__["typeNormal"] = _libcaer_wrap.caer_bias_dynapse_typeNormal_get
    if _newclass:
        typeNormal = _swig_property(_libcaer_wrap.caer_bias_dynapse_typeNormal_get, _libcaer_wrap.caer_bias_dynapse_typeNormal_set)
    __swig_setmethods__["biasHigh"] = _libcaer_wrap.caer_bias_dynapse_biasHigh_set
    __swig_getmethods__["biasHigh"] = _libcaer_wrap.caer_bias_dynapse_biasHigh_get
    if _newclass:
        biasHigh = _swig_property(_libcaer_wrap.caer_bias_dynapse_biasHigh_get, _libcaer_wrap.caer_bias_dynapse_biasHigh_set)

    def __init__(self):
        """__init__(caer_bias_dynapse self) -> caer_bias_dynapse"""
        this = _libcaer_wrap.new_caer_bias_dynapse()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_bias_dynapse
    def __del__(self):
        return None
caer_bias_dynapse_swigregister = _libcaer_wrap.caer_bias_dynapse_swigregister
caer_bias_dynapse_swigregister(caer_bias_dynapse)


def caerBiasDynapseGenerate(dynapseBias):
    """caerBiasDynapseGenerate(caer_bias_dynapse dynapseBias) -> uint32_t"""
    return _libcaer_wrap.caerBiasDynapseGenerate(dynapseBias)

def caerBiasDynapseParse(dynapseBias):
    """caerBiasDynapseParse(uint32_t const dynapseBias) -> caer_bias_dynapse"""
    return _libcaer_wrap.caerBiasDynapseParse(dynapseBias)

def caerDynapseWriteSramWords(handle, data, baseAddr, numWords):
    """caerDynapseWriteSramWords(caerDeviceHandle handle, uint16_t const * data, uint32_t baseAddr, size_t numWords) -> bool"""
    return _libcaer_wrap.caerDynapseWriteSramWords(handle, data, baseAddr, numWords)

def caerDynapseWritePoissonSpikeRate(handle, neuronAddr, rateHz):
    """caerDynapseWritePoissonSpikeRate(caerDeviceHandle handle, uint16_t neuronAddr, float rateHz) -> bool"""
    return _libcaer_wrap.caerDynapseWritePoissonSpikeRate(handle, neuronAddr, rateHz)

def caerDynapseWriteSram(handle, coreId, neuronAddrCore, virtualCoreId, sx, dx, sy, dy, sramId, destinationCore):
    """caerDynapseWriteSram(caerDeviceHandle handle, uint8_t coreId, uint8_t neuronAddrCore, uint8_t virtualCoreId, bool sx, uint8_t dx, bool sy, uint8_t dy, uint8_t sramId, uint8_t destinationCore) -> bool"""
    return _libcaer_wrap.caerDynapseWriteSram(handle, coreId, neuronAddrCore, virtualCoreId, sx, dx, sy, dy, sramId, destinationCore)

def caerDynapseWriteSramN(handle, neuronAddr, sramId, virtualCoreId, sx, dx, sy, dy, destinationCore):
    """caerDynapseWriteSramN(caerDeviceHandle handle, uint16_t neuronAddr, uint8_t sramId, uint8_t virtualCoreId, bool sx, uint8_t dx, bool sy, uint8_t dy, uint8_t destinationCore) -> bool"""
    return _libcaer_wrap.caerDynapseWriteSramN(handle, neuronAddr, sramId, virtualCoreId, sx, dx, sy, dy, destinationCore)

def caerDynapseWriteCam(handle, inputNeuronAddr, neuronAddr, camId, synapseType):
    """caerDynapseWriteCam(caerDeviceHandle handle, uint16_t inputNeuronAddr, uint16_t neuronAddr, uint8_t camId, uint8_t synapseType) -> bool"""
    return _libcaer_wrap.caerDynapseWriteCam(handle, inputNeuronAddr, neuronAddr, camId, synapseType)

def caerDynapseSendDataToUSB(handle, data, numConfig):
    """caerDynapseSendDataToUSB(caerDeviceHandle handle, uint32_t const * data, size_t numConfig) -> bool"""
    return _libcaer_wrap.caerDynapseSendDataToUSB(handle, data, numConfig)

def caerDynapseGenerateCamBits(inputNeuronAddr, neuronAddr, camId, synapseType):
    """caerDynapseGenerateCamBits(uint16_t inputNeuronAddr, uint16_t neuronAddr, uint8_t camId, uint8_t synapseType) -> uint32_t"""
    return _libcaer_wrap.caerDynapseGenerateCamBits(inputNeuronAddr, neuronAddr, camId, synapseType)

def caerDynapseGenerateSramBits(neuronAddr, sramId, virtualCoreId, sx, dx, sy, dy, destinationCore):
    """caerDynapseGenerateSramBits(uint16_t neuronAddr, uint8_t sramId, uint8_t virtualCoreId, bool sx, uint8_t dx, bool sy, uint8_t dy, uint8_t destinationCore) -> uint32_t"""
    return _libcaer_wrap.caerDynapseGenerateSramBits(neuronAddr, sramId, virtualCoreId, sx, dx, sy, dy, destinationCore)

def caerDynapseCoreXYToNeuronId(coreId, columnX, rowY):
    """caerDynapseCoreXYToNeuronId(uint8_t coreId, uint8_t columnX, uint8_t rowY) -> uint16_t"""
    return _libcaer_wrap.caerDynapseCoreXYToNeuronId(coreId, columnX, rowY)

def caerDynapseCoreAddrToNeuronId(coreId, neuronAddrCore):
    """caerDynapseCoreAddrToNeuronId(uint8_t coreId, uint8_t neuronAddrCore) -> uint16_t"""
    return _libcaer_wrap.caerDynapseCoreAddrToNeuronId(coreId, neuronAddrCore)

def caerDynapseSpikeEventGetX(event):
    """caerDynapseSpikeEventGetX(caer_spike_event event) -> uint16_t"""
    return _libcaer_wrap.caerDynapseSpikeEventGetX(event)

def caerDynapseSpikeEventGetY(event):
    """caerDynapseSpikeEventGetY(caer_spike_event event) -> uint16_t"""
    return _libcaer_wrap.caerDynapseSpikeEventGetY(event)

def caerDynapseSpikeEventFromXY(x, y):
    """caerDynapseSpikeEventFromXY(uint16_t x, uint16_t y) -> caer_spike_event"""
    return _libcaer_wrap.caerDynapseSpikeEventFromXY(x, y)
class caer_device_discovery_result(_object):
    """Proxy of C caer_device_discovery_result struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_device_discovery_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_device_discovery_result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["deviceType"] = _libcaer_wrap.caer_device_discovery_result_deviceType_set
    __swig_getmethods__["deviceType"] = _libcaer_wrap.caer_device_discovery_result_deviceType_get
    if _newclass:
        deviceType = _swig_property(_libcaer_wrap.caer_device_discovery_result_deviceType_get, _libcaer_wrap.caer_device_discovery_result_deviceType_set)
    __swig_setmethods__["deviceErrorOpen"] = _libcaer_wrap.caer_device_discovery_result_deviceErrorOpen_set
    __swig_getmethods__["deviceErrorOpen"] = _libcaer_wrap.caer_device_discovery_result_deviceErrorOpen_get
    if _newclass:
        deviceErrorOpen = _swig_property(_libcaer_wrap.caer_device_discovery_result_deviceErrorOpen_get, _libcaer_wrap.caer_device_discovery_result_deviceErrorOpen_set)
    __swig_setmethods__["deviceErrorVersion"] = _libcaer_wrap.caer_device_discovery_result_deviceErrorVersion_set
    __swig_getmethods__["deviceErrorVersion"] = _libcaer_wrap.caer_device_discovery_result_deviceErrorVersion_get
    if _newclass:
        deviceErrorVersion = _swig_property(_libcaer_wrap.caer_device_discovery_result_deviceErrorVersion_get, _libcaer_wrap.caer_device_discovery_result_deviceErrorVersion_set)
    __swig_getmethods__["deviceInfo"] = _libcaer_wrap.caer_device_discovery_result_deviceInfo_get
    if _newclass:
        deviceInfo = _swig_property(_libcaer_wrap.caer_device_discovery_result_deviceInfo_get)

    def __init__(self):
        """__init__(caer_device_discovery_result self) -> caer_device_discovery_result"""
        this = _libcaer_wrap.new_caer_device_discovery_result()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_device_discovery_result
    def __del__(self):
        return None
caer_device_discovery_result_swigregister = _libcaer_wrap.caer_device_discovery_result_swigregister
caer_device_discovery_result_swigregister(caer_device_discovery_result)

class caer_device_discovery_result_deviceInfo(_object):
    """Proxy of C caer_device_discovery_result_deviceInfo struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_device_discovery_result_deviceInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_device_discovery_result_deviceInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dvs128Info"] = _libcaer_wrap.caer_device_discovery_result_deviceInfo_dvs128Info_set
    __swig_getmethods__["dvs128Info"] = _libcaer_wrap.caer_device_discovery_result_deviceInfo_dvs128Info_get
    if _newclass:
        dvs128Info = _swig_property(_libcaer_wrap.caer_device_discovery_result_deviceInfo_dvs128Info_get, _libcaer_wrap.caer_device_discovery_result_deviceInfo_dvs128Info_set)
    __swig_setmethods__["edvsInfo"] = _libcaer_wrap.caer_device_discovery_result_deviceInfo_edvsInfo_set
    __swig_getmethods__["edvsInfo"] = _libcaer_wrap.caer_device_discovery_result_deviceInfo_edvsInfo_get
    if _newclass:
        edvsInfo = _swig_property(_libcaer_wrap.caer_device_discovery_result_deviceInfo_edvsInfo_get, _libcaer_wrap.caer_device_discovery_result_deviceInfo_edvsInfo_set)
    __swig_setmethods__["davisInfo"] = _libcaer_wrap.caer_device_discovery_result_deviceInfo_davisInfo_set
    __swig_getmethods__["davisInfo"] = _libcaer_wrap.caer_device_discovery_result_deviceInfo_davisInfo_get
    if _newclass:
        davisInfo = _swig_property(_libcaer_wrap.caer_device_discovery_result_deviceInfo_davisInfo_get, _libcaer_wrap.caer_device_discovery_result_deviceInfo_davisInfo_set)
    __swig_setmethods__["dynapseInfo"] = _libcaer_wrap.caer_device_discovery_result_deviceInfo_dynapseInfo_set
    __swig_getmethods__["dynapseInfo"] = _libcaer_wrap.caer_device_discovery_result_deviceInfo_dynapseInfo_get
    if _newclass:
        dynapseInfo = _swig_property(_libcaer_wrap.caer_device_discovery_result_deviceInfo_dynapseInfo_get, _libcaer_wrap.caer_device_discovery_result_deviceInfo_dynapseInfo_set)

    def __init__(self):
        """__init__(caer_device_discovery_result_deviceInfo self) -> caer_device_discovery_result_deviceInfo"""
        this = _libcaer_wrap.new_caer_device_discovery_result_deviceInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_device_discovery_result_deviceInfo
    def __del__(self):
        return None
caer_device_discovery_result_deviceInfo_swigregister = _libcaer_wrap.caer_device_discovery_result_deviceInfo_swigregister
caer_device_discovery_result_deviceInfo_swigregister(caer_device_discovery_result_deviceInfo)

CAER_DEVICE_DISCOVER_ALL = _libcaer_wrap.CAER_DEVICE_DISCOVER_ALL

def caerDeviceDiscover(deviceType, discoveredDevices):
    """caerDeviceDiscover(int16_t deviceType, caerDeviceDiscoveryResult * discoveredDevices) -> ssize_t"""
    return _libcaer_wrap.caerDeviceDiscover(deviceType, discoveredDevices)

def caerDeviceDiscoverOpen(deviceID, discoveredDevice):
    """caerDeviceDiscoverOpen(uint16_t deviceID, caer_device_discovery_result discoveredDevice) -> caerDeviceHandle"""
    return _libcaer_wrap.caerDeviceDiscoverOpen(deviceID, discoveredDevice)
VALID_MARK_SHIFT = _libcaer_wrap.VALID_MARK_SHIFT
VALID_MARK_MASK = _libcaer_wrap.VALID_MARK_MASK
TS_OVERFLOW_SHIFT = _libcaer_wrap.TS_OVERFLOW_SHIFT
SPECIAL_EVENT = _libcaer_wrap.SPECIAL_EVENT
POLARITY_EVENT = _libcaer_wrap.POLARITY_EVENT
FRAME_EVENT = _libcaer_wrap.FRAME_EVENT
IMU6_EVENT = _libcaer_wrap.IMU6_EVENT
IMU9_EVENT = _libcaer_wrap.IMU9_EVENT
SAMPLE_EVENT = _libcaer_wrap.SAMPLE_EVENT
EAR_EVENT = _libcaer_wrap.EAR_EVENT
CONFIG_EVENT = _libcaer_wrap.CONFIG_EVENT
POINT1D_EVENT = _libcaer_wrap.POINT1D_EVENT
POINT2D_EVENT = _libcaer_wrap.POINT2D_EVENT
POINT3D_EVENT = _libcaer_wrap.POINT3D_EVENT
POINT4D_EVENT = _libcaer_wrap.POINT4D_EVENT
SPIKE_EVENT = _libcaer_wrap.SPIKE_EVENT
MATRIX4x4_EVENT = _libcaer_wrap.MATRIX4x4_EVENT
CAER_DEFAULT_EVENT_TYPES_COUNT = _libcaer_wrap.CAER_DEFAULT_EVENT_TYPES_COUNT
CAER_EVENT_PACKET_HEADER_SIZE = _libcaer_wrap.CAER_EVENT_PACKET_HEADER_SIZE
class caer_event_packet_header(_object):
    """Proxy of C caer_event_packet_header struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_event_packet_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_event_packet_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eventType"] = _libcaer_wrap.caer_event_packet_header_eventType_set
    __swig_getmethods__["eventType"] = _libcaer_wrap.caer_event_packet_header_eventType_get
    if _newclass:
        eventType = _swig_property(_libcaer_wrap.caer_event_packet_header_eventType_get, _libcaer_wrap.caer_event_packet_header_eventType_set)
    __swig_setmethods__["eventSource"] = _libcaer_wrap.caer_event_packet_header_eventSource_set
    __swig_getmethods__["eventSource"] = _libcaer_wrap.caer_event_packet_header_eventSource_get
    if _newclass:
        eventSource = _swig_property(_libcaer_wrap.caer_event_packet_header_eventSource_get, _libcaer_wrap.caer_event_packet_header_eventSource_set)
    __swig_setmethods__["eventSize"] = _libcaer_wrap.caer_event_packet_header_eventSize_set
    __swig_getmethods__["eventSize"] = _libcaer_wrap.caer_event_packet_header_eventSize_get
    if _newclass:
        eventSize = _swig_property(_libcaer_wrap.caer_event_packet_header_eventSize_get, _libcaer_wrap.caer_event_packet_header_eventSize_set)
    __swig_setmethods__["eventTSOffset"] = _libcaer_wrap.caer_event_packet_header_eventTSOffset_set
    __swig_getmethods__["eventTSOffset"] = _libcaer_wrap.caer_event_packet_header_eventTSOffset_get
    if _newclass:
        eventTSOffset = _swig_property(_libcaer_wrap.caer_event_packet_header_eventTSOffset_get, _libcaer_wrap.caer_event_packet_header_eventTSOffset_set)
    __swig_setmethods__["eventTSOverflow"] = _libcaer_wrap.caer_event_packet_header_eventTSOverflow_set
    __swig_getmethods__["eventTSOverflow"] = _libcaer_wrap.caer_event_packet_header_eventTSOverflow_get
    if _newclass:
        eventTSOverflow = _swig_property(_libcaer_wrap.caer_event_packet_header_eventTSOverflow_get, _libcaer_wrap.caer_event_packet_header_eventTSOverflow_set)
    __swig_setmethods__["eventCapacity"] = _libcaer_wrap.caer_event_packet_header_eventCapacity_set
    __swig_getmethods__["eventCapacity"] = _libcaer_wrap.caer_event_packet_header_eventCapacity_get
    if _newclass:
        eventCapacity = _swig_property(_libcaer_wrap.caer_event_packet_header_eventCapacity_get, _libcaer_wrap.caer_event_packet_header_eventCapacity_set)
    __swig_setmethods__["eventNumber"] = _libcaer_wrap.caer_event_packet_header_eventNumber_set
    __swig_getmethods__["eventNumber"] = _libcaer_wrap.caer_event_packet_header_eventNumber_get
    if _newclass:
        eventNumber = _swig_property(_libcaer_wrap.caer_event_packet_header_eventNumber_get, _libcaer_wrap.caer_event_packet_header_eventNumber_set)
    __swig_setmethods__["eventValid"] = _libcaer_wrap.caer_event_packet_header_eventValid_set
    __swig_getmethods__["eventValid"] = _libcaer_wrap.caer_event_packet_header_eventValid_get
    if _newclass:
        eventValid = _swig_property(_libcaer_wrap.caer_event_packet_header_eventValid_get, _libcaer_wrap.caer_event_packet_header_eventValid_set)

    def __init__(self):
        """__init__(caer_event_packet_header self) -> caer_event_packet_header"""
        this = _libcaer_wrap.new_caer_event_packet_header()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_event_packet_header
    def __del__(self):
        return None
caer_event_packet_header_swigregister = _libcaer_wrap.caer_event_packet_header_swigregister
caer_event_packet_header_swigregister(caer_event_packet_header)


def caerEventPacketHeaderGetEventType(header):
    """caerEventPacketHeaderGetEventType(caer_event_packet_header header) -> int16_t"""
    return _libcaer_wrap.caerEventPacketHeaderGetEventType(header)

def caerEventPacketHeaderSetEventType(header, eventType):
    """caerEventPacketHeaderSetEventType(caer_event_packet_header header, int16_t eventType)"""
    return _libcaer_wrap.caerEventPacketHeaderSetEventType(header, eventType)

def caerEventPacketHeaderGetEventSource(header):
    """caerEventPacketHeaderGetEventSource(caer_event_packet_header header) -> int16_t"""
    return _libcaer_wrap.caerEventPacketHeaderGetEventSource(header)

def caerEventPacketHeaderSetEventSource(header, eventSource):
    """caerEventPacketHeaderSetEventSource(caer_event_packet_header header, int16_t eventSource)"""
    return _libcaer_wrap.caerEventPacketHeaderSetEventSource(header, eventSource)

def caerEventPacketHeaderGetEventSize(header):
    """caerEventPacketHeaderGetEventSize(caer_event_packet_header header) -> int32_t"""
    return _libcaer_wrap.caerEventPacketHeaderGetEventSize(header)

def caerEventPacketHeaderSetEventSize(header, eventSize):
    """caerEventPacketHeaderSetEventSize(caer_event_packet_header header, int32_t eventSize)"""
    return _libcaer_wrap.caerEventPacketHeaderSetEventSize(header, eventSize)

def caerEventPacketHeaderGetEventTSOffset(header):
    """caerEventPacketHeaderGetEventTSOffset(caer_event_packet_header header) -> int32_t"""
    return _libcaer_wrap.caerEventPacketHeaderGetEventTSOffset(header)

def caerEventPacketHeaderSetEventTSOffset(header, eventTSOffset):
    """caerEventPacketHeaderSetEventTSOffset(caer_event_packet_header header, int32_t eventTSOffset)"""
    return _libcaer_wrap.caerEventPacketHeaderSetEventTSOffset(header, eventTSOffset)

def caerEventPacketHeaderGetEventTSOverflow(header):
    """caerEventPacketHeaderGetEventTSOverflow(caer_event_packet_header header) -> int32_t"""
    return _libcaer_wrap.caerEventPacketHeaderGetEventTSOverflow(header)

def caerEventPacketHeaderSetEventTSOverflow(header, eventTSOverflow):
    """caerEventPacketHeaderSetEventTSOverflow(caer_event_packet_header header, int32_t eventTSOverflow)"""
    return _libcaer_wrap.caerEventPacketHeaderSetEventTSOverflow(header, eventTSOverflow)

def caerEventPacketHeaderGetEventCapacity(header):
    """caerEventPacketHeaderGetEventCapacity(caer_event_packet_header header) -> int32_t"""
    return _libcaer_wrap.caerEventPacketHeaderGetEventCapacity(header)

def caerEventPacketHeaderSetEventCapacity(header, eventsCapacity):
    """caerEventPacketHeaderSetEventCapacity(caer_event_packet_header header, int32_t eventsCapacity)"""
    return _libcaer_wrap.caerEventPacketHeaderSetEventCapacity(header, eventsCapacity)

def caerEventPacketHeaderGetEventNumber(header):
    """caerEventPacketHeaderGetEventNumber(caer_event_packet_header header) -> int32_t"""
    return _libcaer_wrap.caerEventPacketHeaderGetEventNumber(header)

def caerEventPacketHeaderSetEventNumber(header, eventsNumber):
    """caerEventPacketHeaderSetEventNumber(caer_event_packet_header header, int32_t eventsNumber)"""
    return _libcaer_wrap.caerEventPacketHeaderSetEventNumber(header, eventsNumber)

def caerEventPacketHeaderGetEventValid(header):
    """caerEventPacketHeaderGetEventValid(caer_event_packet_header header) -> int32_t"""
    return _libcaer_wrap.caerEventPacketHeaderGetEventValid(header)

def caerEventPacketHeaderSetEventValid(header, eventsValid):
    """caerEventPacketHeaderSetEventValid(caer_event_packet_header header, int32_t eventsValid)"""
    return _libcaer_wrap.caerEventPacketHeaderSetEventValid(header, eventsValid)

def caerGenericEventGetEvent(headerPtr, n):
    """caerGenericEventGetEvent(caer_event_packet_header headerPtr, int32_t n) -> void const *"""
    return _libcaer_wrap.caerGenericEventGetEvent(headerPtr, n)

def caerGenericEventGetTimestamp(eventPtr, headerPtr):
    """caerGenericEventGetTimestamp(void const * eventPtr, caer_event_packet_header headerPtr) -> int32_t"""
    return _libcaer_wrap.caerGenericEventGetTimestamp(eventPtr, headerPtr)

def caerGenericEventGetTimestamp64(eventPtr, headerPtr):
    """caerGenericEventGetTimestamp64(void const * eventPtr, caer_event_packet_header headerPtr) -> int64_t"""
    return _libcaer_wrap.caerGenericEventGetTimestamp64(eventPtr, headerPtr)

def caerGenericEventIsValid(eventPtr):
    """caerGenericEventIsValid(void const * eventPtr) -> bool"""
    return _libcaer_wrap.caerGenericEventIsValid(eventPtr)

def caerGenericEventCopy(eventPtrDestination, eventPtrSource, headerPtrDestination, headerPtrSource):
    """caerGenericEventCopy(void * eventPtrDestination, void const * eventPtrSource, caer_event_packet_header headerPtrDestination, caer_event_packet_header headerPtrSource) -> bool"""
    return _libcaer_wrap.caerGenericEventCopy(eventPtrDestination, eventPtrSource, headerPtrDestination, headerPtrSource)

def caerEventPacketGetDataSize(header):
    """caerEventPacketGetDataSize(caer_event_packet_header header) -> int64_t"""
    return _libcaer_wrap.caerEventPacketGetDataSize(header)

def caerEventPacketGetSize(header):
    """caerEventPacketGetSize(caer_event_packet_header header) -> int64_t"""
    return _libcaer_wrap.caerEventPacketGetSize(header)

def caerEventPacketGetDataSizeEvents(header):
    """caerEventPacketGetDataSizeEvents(caer_event_packet_header header) -> int64_t"""
    return _libcaer_wrap.caerEventPacketGetDataSizeEvents(header)

def caerEventPacketGetSizeEvents(header):
    """caerEventPacketGetSizeEvents(caer_event_packet_header header) -> int64_t"""
    return _libcaer_wrap.caerEventPacketGetSizeEvents(header)

def caerEventPacketEquals(firstPacket, secondPacket):
    """caerEventPacketEquals(caer_event_packet_header firstPacket, caer_event_packet_header secondPacket) -> bool"""
    return _libcaer_wrap.caerEventPacketEquals(firstPacket, secondPacket)

def caerEventPacketClear(packet):
    """caerEventPacketClear(caer_event_packet_header packet)"""
    return _libcaer_wrap.caerEventPacketClear(packet)

def caerEventPacketClean(packet):
    """caerEventPacketClean(caer_event_packet_header packet)"""
    return _libcaer_wrap.caerEventPacketClean(packet)

def caerEventPacketResize(packet, newEventCapacity):
    """caerEventPacketResize(caer_event_packet_header packet, int32_t newEventCapacity) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketResize(packet, newEventCapacity)

def caerEventPacketGrow(packet, newEventCapacity):
    """caerEventPacketGrow(caer_event_packet_header packet, int32_t newEventCapacity) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketGrow(packet, newEventCapacity)

def caerEventPacketAppend(packet, appendPacket):
    """caerEventPacketAppend(caer_event_packet_header packet, caer_event_packet_header appendPacket) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketAppend(packet, appendPacket)

def caerEventPacketCopy(packet):
    """caerEventPacketCopy(caer_event_packet_header packet) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketCopy(packet)

def caerEventPacketCopyOnlyEvents(packet):
    """caerEventPacketCopyOnlyEvents(caer_event_packet_header packet) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketCopyOnlyEvents(packet)

def caerEventPacketCopyOnlyValidEvents(packet):
    """caerEventPacketCopyOnlyValidEvents(caer_event_packet_header packet) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketCopyOnlyValidEvents(packet)

def caerEventPacketAllocate(eventCapacity, eventSource, tsOverflow, eventType, eventSize, eventTSOffset):
    """caerEventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow, int16_t eventType, int32_t eventSize, int32_t eventTSOffset) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketAllocate(eventCapacity, eventSource, tsOverflow, eventType, eventSize, eventTSOffset)
CONFIG_MODULE_ADDR_SHIFT = _libcaer_wrap.CONFIG_MODULE_ADDR_SHIFT
CONFIG_MODULE_ADDR_MASK = _libcaer_wrap.CONFIG_MODULE_ADDR_MASK
class caer_configuration_event(_object):
    """Proxy of C caer_configuration_event struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_configuration_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_configuration_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["moduleAddress"] = _libcaer_wrap.caer_configuration_event_moduleAddress_set
    __swig_getmethods__["moduleAddress"] = _libcaer_wrap.caer_configuration_event_moduleAddress_get
    if _newclass:
        moduleAddress = _swig_property(_libcaer_wrap.caer_configuration_event_moduleAddress_get, _libcaer_wrap.caer_configuration_event_moduleAddress_set)
    __swig_setmethods__["parameterAddress"] = _libcaer_wrap.caer_configuration_event_parameterAddress_set
    __swig_getmethods__["parameterAddress"] = _libcaer_wrap.caer_configuration_event_parameterAddress_get
    if _newclass:
        parameterAddress = _swig_property(_libcaer_wrap.caer_configuration_event_parameterAddress_get, _libcaer_wrap.caer_configuration_event_parameterAddress_set)
    __swig_setmethods__["parameter"] = _libcaer_wrap.caer_configuration_event_parameter_set
    __swig_getmethods__["parameter"] = _libcaer_wrap.caer_configuration_event_parameter_get
    if _newclass:
        parameter = _swig_property(_libcaer_wrap.caer_configuration_event_parameter_get, _libcaer_wrap.caer_configuration_event_parameter_set)
    __swig_setmethods__["timestamp"] = _libcaer_wrap.caer_configuration_event_timestamp_set
    __swig_getmethods__["timestamp"] = _libcaer_wrap.caer_configuration_event_timestamp_get
    if _newclass:
        timestamp = _swig_property(_libcaer_wrap.caer_configuration_event_timestamp_get, _libcaer_wrap.caer_configuration_event_timestamp_set)

    def __init__(self):
        """__init__(caer_configuration_event self) -> caer_configuration_event"""
        this = _libcaer_wrap.new_caer_configuration_event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_configuration_event
    def __del__(self):
        return None
caer_configuration_event_swigregister = _libcaer_wrap.caer_configuration_event_swigregister
caer_configuration_event_swigregister(caer_configuration_event)

class caer_configuration_event_packet(_object):
    """Proxy of C caer_configuration_event_packet struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_configuration_event_packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_configuration_event_packet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packetHeader"] = _libcaer_wrap.caer_configuration_event_packet_packetHeader_set
    __swig_getmethods__["packetHeader"] = _libcaer_wrap.caer_configuration_event_packet_packetHeader_get
    if _newclass:
        packetHeader = _swig_property(_libcaer_wrap.caer_configuration_event_packet_packetHeader_get, _libcaer_wrap.caer_configuration_event_packet_packetHeader_set)
    __swig_getmethods__["events"] = _libcaer_wrap.caer_configuration_event_packet_events_get
    if _newclass:
        events = _swig_property(_libcaer_wrap.caer_configuration_event_packet_events_get)

    def __init__(self):
        """__init__(caer_configuration_event_packet self) -> caer_configuration_event_packet"""
        this = _libcaer_wrap.new_caer_configuration_event_packet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_configuration_event_packet
    def __del__(self):
        return None
caer_configuration_event_packet_swigregister = _libcaer_wrap.caer_configuration_event_packet_swigregister
caer_configuration_event_packet_swigregister(caer_configuration_event_packet)


def caerConfigurationEventPacketAllocate(eventCapacity, eventSource, tsOverflow):
    """caerConfigurationEventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow) -> caer_configuration_event_packet"""
    return _libcaer_wrap.caerConfigurationEventPacketAllocate(eventCapacity, eventSource, tsOverflow)

def caerConfigurationEventPacketFromPacketHeader(header):
    """caerConfigurationEventPacketFromPacketHeader(caer_event_packet_header header) -> caer_configuration_event_packet"""
    return _libcaer_wrap.caerConfigurationEventPacketFromPacketHeader(header)

def caerConfigurationEventPacketFromPacketHeaderConst(header):
    """caerConfigurationEventPacketFromPacketHeaderConst(caer_event_packet_header header) -> caer_configuration_event_packet"""
    return _libcaer_wrap.caerConfigurationEventPacketFromPacketHeaderConst(header)

def caerConfigurationEventPacketGetEvent(packet, n):
    """caerConfigurationEventPacketGetEvent(caer_configuration_event_packet packet, int32_t n) -> caer_configuration_event"""
    return _libcaer_wrap.caerConfigurationEventPacketGetEvent(packet, n)

def caerConfigurationEventPacketGetEventConst(packet, n):
    """caerConfigurationEventPacketGetEventConst(caer_configuration_event_packet packet, int32_t n) -> caer_configuration_event"""
    return _libcaer_wrap.caerConfigurationEventPacketGetEventConst(packet, n)

def caerConfigurationEventGetTimestamp(event):
    """caerConfigurationEventGetTimestamp(caer_configuration_event event) -> int32_t"""
    return _libcaer_wrap.caerConfigurationEventGetTimestamp(event)

def caerConfigurationEventGetTimestamp64(event, packet):
    """caerConfigurationEventGetTimestamp64(caer_configuration_event event, caer_configuration_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerConfigurationEventGetTimestamp64(event, packet)

def caerConfigurationEventSetTimestamp(event, timestamp):
    """caerConfigurationEventSetTimestamp(caer_configuration_event event, int32_t timestamp)"""
    return _libcaer_wrap.caerConfigurationEventSetTimestamp(event, timestamp)

def caerConfigurationEventIsValid(event):
    """caerConfigurationEventIsValid(caer_configuration_event event) -> bool"""
    return _libcaer_wrap.caerConfigurationEventIsValid(event)

def caerConfigurationEventValidate(event, packet):
    """caerConfigurationEventValidate(caer_configuration_event event, caer_configuration_event_packet packet)"""
    return _libcaer_wrap.caerConfigurationEventValidate(event, packet)

def caerConfigurationEventInvalidate(event, packet):
    """caerConfigurationEventInvalidate(caer_configuration_event event, caer_configuration_event_packet packet)"""
    return _libcaer_wrap.caerConfigurationEventInvalidate(event, packet)

def caerConfigurationEventGetModuleAddress(event):
    """caerConfigurationEventGetModuleAddress(caer_configuration_event event) -> uint8_t"""
    return _libcaer_wrap.caerConfigurationEventGetModuleAddress(event)

def caerConfigurationEventSetModuleAddress(event, moduleAddress):
    """caerConfigurationEventSetModuleAddress(caer_configuration_event event, uint8_t moduleAddress)"""
    return _libcaer_wrap.caerConfigurationEventSetModuleAddress(event, moduleAddress)

def caerConfigurationEventGetParameterAddress(event):
    """caerConfigurationEventGetParameterAddress(caer_configuration_event event) -> uint8_t"""
    return _libcaer_wrap.caerConfigurationEventGetParameterAddress(event)

def caerConfigurationEventSetParameterAddress(event, parameterAddress):
    """caerConfigurationEventSetParameterAddress(caer_configuration_event event, uint8_t parameterAddress)"""
    return _libcaer_wrap.caerConfigurationEventSetParameterAddress(event, parameterAddress)

def caerConfigurationEventGetParameter(event):
    """caerConfigurationEventGetParameter(caer_configuration_event event) -> uint32_t"""
    return _libcaer_wrap.caerConfigurationEventGetParameter(event)

def caerConfigurationEventSetParameter(event, parameter):
    """caerConfigurationEventSetParameter(caer_configuration_event event, uint32_t parameter)"""
    return _libcaer_wrap.caerConfigurationEventSetParameter(event, parameter)
EAR_SHIFT = _libcaer_wrap.EAR_SHIFT
EAR_MASK = _libcaer_wrap.EAR_MASK
EAR_CHANNEL_SHIFT = _libcaer_wrap.EAR_CHANNEL_SHIFT
EAR_CHANNEL_MASK = _libcaer_wrap.EAR_CHANNEL_MASK
EAR_NEURON_SHIFT = _libcaer_wrap.EAR_NEURON_SHIFT
EAR_NEURON_MASK = _libcaer_wrap.EAR_NEURON_MASK
EAR_FILTER_SHIFT = _libcaer_wrap.EAR_FILTER_SHIFT
EAR_FILTER_MASK = _libcaer_wrap.EAR_FILTER_MASK
class caer_ear_event(_object):
    """Proxy of C caer_ear_event struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_ear_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_ear_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _libcaer_wrap.caer_ear_event_data_set
    __swig_getmethods__["data"] = _libcaer_wrap.caer_ear_event_data_get
    if _newclass:
        data = _swig_property(_libcaer_wrap.caer_ear_event_data_get, _libcaer_wrap.caer_ear_event_data_set)
    __swig_setmethods__["timestamp"] = _libcaer_wrap.caer_ear_event_timestamp_set
    __swig_getmethods__["timestamp"] = _libcaer_wrap.caer_ear_event_timestamp_get
    if _newclass:
        timestamp = _swig_property(_libcaer_wrap.caer_ear_event_timestamp_get, _libcaer_wrap.caer_ear_event_timestamp_set)

    def __init__(self):
        """__init__(caer_ear_event self) -> caer_ear_event"""
        this = _libcaer_wrap.new_caer_ear_event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_ear_event
    def __del__(self):
        return None
caer_ear_event_swigregister = _libcaer_wrap.caer_ear_event_swigregister
caer_ear_event_swigregister(caer_ear_event)

class caer_ear_event_packet(_object):
    """Proxy of C caer_ear_event_packet struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_ear_event_packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_ear_event_packet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packetHeader"] = _libcaer_wrap.caer_ear_event_packet_packetHeader_set
    __swig_getmethods__["packetHeader"] = _libcaer_wrap.caer_ear_event_packet_packetHeader_get
    if _newclass:
        packetHeader = _swig_property(_libcaer_wrap.caer_ear_event_packet_packetHeader_get, _libcaer_wrap.caer_ear_event_packet_packetHeader_set)
    __swig_getmethods__["events"] = _libcaer_wrap.caer_ear_event_packet_events_get
    if _newclass:
        events = _swig_property(_libcaer_wrap.caer_ear_event_packet_events_get)

    def __init__(self):
        """__init__(caer_ear_event_packet self) -> caer_ear_event_packet"""
        this = _libcaer_wrap.new_caer_ear_event_packet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_ear_event_packet
    def __del__(self):
        return None
caer_ear_event_packet_swigregister = _libcaer_wrap.caer_ear_event_packet_swigregister
caer_ear_event_packet_swigregister(caer_ear_event_packet)


def caerEarEventPacketAllocate(eventCapacity, eventSource, tsOverflow):
    """caerEarEventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow) -> caer_ear_event_packet"""
    return _libcaer_wrap.caerEarEventPacketAllocate(eventCapacity, eventSource, tsOverflow)

def caerEarEventPacketFromPacketHeader(header):
    """caerEarEventPacketFromPacketHeader(caer_event_packet_header header) -> caer_ear_event_packet"""
    return _libcaer_wrap.caerEarEventPacketFromPacketHeader(header)

def caerEarEventPacketFromPacketHeaderConst(header):
    """caerEarEventPacketFromPacketHeaderConst(caer_event_packet_header header) -> caer_ear_event_packet"""
    return _libcaer_wrap.caerEarEventPacketFromPacketHeaderConst(header)

def caerEarEventPacketGetEvent(packet, n):
    """caerEarEventPacketGetEvent(caer_ear_event_packet packet, int32_t n) -> caer_ear_event"""
    return _libcaer_wrap.caerEarEventPacketGetEvent(packet, n)

def caerEarEventPacketGetEventConst(packet, n):
    """caerEarEventPacketGetEventConst(caer_ear_event_packet packet, int32_t n) -> caer_ear_event"""
    return _libcaer_wrap.caerEarEventPacketGetEventConst(packet, n)

def caerEarEventGetTimestamp(event):
    """caerEarEventGetTimestamp(caer_ear_event event) -> int32_t"""
    return _libcaer_wrap.caerEarEventGetTimestamp(event)

def caerEarEventGetTimestamp64(event, packet):
    """caerEarEventGetTimestamp64(caer_ear_event event, caer_ear_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerEarEventGetTimestamp64(event, packet)

def caerEarEventSetTimestamp(event, timestamp):
    """caerEarEventSetTimestamp(caer_ear_event event, int32_t timestamp)"""
    return _libcaer_wrap.caerEarEventSetTimestamp(event, timestamp)

def caerEarEventIsValid(event):
    """caerEarEventIsValid(caer_ear_event event) -> bool"""
    return _libcaer_wrap.caerEarEventIsValid(event)

def caerEarEventValidate(event, packet):
    """caerEarEventValidate(caer_ear_event event, caer_ear_event_packet packet)"""
    return _libcaer_wrap.caerEarEventValidate(event, packet)

def caerEarEventInvalidate(event, packet):
    """caerEarEventInvalidate(caer_ear_event event, caer_ear_event_packet packet)"""
    return _libcaer_wrap.caerEarEventInvalidate(event, packet)

def caerEarEventGetEar(event):
    """caerEarEventGetEar(caer_ear_event event) -> uint8_t"""
    return _libcaer_wrap.caerEarEventGetEar(event)

def caerEarEventSetEar(event, ear):
    """caerEarEventSetEar(caer_ear_event event, uint8_t ear)"""
    return _libcaer_wrap.caerEarEventSetEar(event, ear)

def caerEarEventGetChannel(event):
    """caerEarEventGetChannel(caer_ear_event event) -> uint16_t"""
    return _libcaer_wrap.caerEarEventGetChannel(event)

def caerEarEventSetChannel(event, channel):
    """caerEarEventSetChannel(caer_ear_event event, uint16_t channel)"""
    return _libcaer_wrap.caerEarEventSetChannel(event, channel)

def caerEarEventGetNeuron(event):
    """caerEarEventGetNeuron(caer_ear_event event) -> uint8_t"""
    return _libcaer_wrap.caerEarEventGetNeuron(event)

def caerEarEventSetNeuron(event, neuron):
    """caerEarEventSetNeuron(caer_ear_event event, uint8_t neuron)"""
    return _libcaer_wrap.caerEarEventSetNeuron(event, neuron)

def caerEarEventGetFilter(event):
    """caerEarEventGetFilter(caer_ear_event event) -> uint8_t"""
    return _libcaer_wrap.caerEarEventGetFilter(event)

def caerEarEventSetFilter(event, filter):
    """caerEarEventSetFilter(caer_ear_event event, uint8_t filter)"""
    return _libcaer_wrap.caerEarEventSetFilter(event, filter)
FRAME_COLOR_CHANNELS_SHIFT = _libcaer_wrap.FRAME_COLOR_CHANNELS_SHIFT
FRAME_COLOR_CHANNELS_MASK = _libcaer_wrap.FRAME_COLOR_CHANNELS_MASK
FRAME_COLOR_FILTER_SHIFT = _libcaer_wrap.FRAME_COLOR_FILTER_SHIFT
FRAME_COLOR_FILTER_MASK = _libcaer_wrap.FRAME_COLOR_FILTER_MASK
FRAME_ROI_IDENTIFIER_SHIFT = _libcaer_wrap.FRAME_ROI_IDENTIFIER_SHIFT
FRAME_ROI_IDENTIFIER_MASK = _libcaer_wrap.FRAME_ROI_IDENTIFIER_MASK
GRAYSCALE = _libcaer_wrap.GRAYSCALE
RGB = _libcaer_wrap.RGB
RGBA = _libcaer_wrap.RGBA
MONO = _libcaer_wrap.MONO
RGBG = _libcaer_wrap.RGBG
GRGB = _libcaer_wrap.GRGB
GBGR = _libcaer_wrap.GBGR
BGRG = _libcaer_wrap.BGRG
RGBW = _libcaer_wrap.RGBW
GRWB = _libcaer_wrap.GRWB
WBGR = _libcaer_wrap.WBGR
BWRG = _libcaer_wrap.BWRG
class caer_frame_event(_object):
    """Proxy of C caer_frame_event struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_frame_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_frame_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["info"] = _libcaer_wrap.caer_frame_event_info_set
    __swig_getmethods__["info"] = _libcaer_wrap.caer_frame_event_info_get
    if _newclass:
        info = _swig_property(_libcaer_wrap.caer_frame_event_info_get, _libcaer_wrap.caer_frame_event_info_set)
    __swig_setmethods__["ts_startframe"] = _libcaer_wrap.caer_frame_event_ts_startframe_set
    __swig_getmethods__["ts_startframe"] = _libcaer_wrap.caer_frame_event_ts_startframe_get
    if _newclass:
        ts_startframe = _swig_property(_libcaer_wrap.caer_frame_event_ts_startframe_get, _libcaer_wrap.caer_frame_event_ts_startframe_set)
    __swig_setmethods__["ts_endframe"] = _libcaer_wrap.caer_frame_event_ts_endframe_set
    __swig_getmethods__["ts_endframe"] = _libcaer_wrap.caer_frame_event_ts_endframe_get
    if _newclass:
        ts_endframe = _swig_property(_libcaer_wrap.caer_frame_event_ts_endframe_get, _libcaer_wrap.caer_frame_event_ts_endframe_set)
    __swig_setmethods__["ts_startexposure"] = _libcaer_wrap.caer_frame_event_ts_startexposure_set
    __swig_getmethods__["ts_startexposure"] = _libcaer_wrap.caer_frame_event_ts_startexposure_get
    if _newclass:
        ts_startexposure = _swig_property(_libcaer_wrap.caer_frame_event_ts_startexposure_get, _libcaer_wrap.caer_frame_event_ts_startexposure_set)
    __swig_setmethods__["ts_endexposure"] = _libcaer_wrap.caer_frame_event_ts_endexposure_set
    __swig_getmethods__["ts_endexposure"] = _libcaer_wrap.caer_frame_event_ts_endexposure_get
    if _newclass:
        ts_endexposure = _swig_property(_libcaer_wrap.caer_frame_event_ts_endexposure_get, _libcaer_wrap.caer_frame_event_ts_endexposure_set)
    __swig_setmethods__["lengthX"] = _libcaer_wrap.caer_frame_event_lengthX_set
    __swig_getmethods__["lengthX"] = _libcaer_wrap.caer_frame_event_lengthX_get
    if _newclass:
        lengthX = _swig_property(_libcaer_wrap.caer_frame_event_lengthX_get, _libcaer_wrap.caer_frame_event_lengthX_set)
    __swig_setmethods__["lengthY"] = _libcaer_wrap.caer_frame_event_lengthY_set
    __swig_getmethods__["lengthY"] = _libcaer_wrap.caer_frame_event_lengthY_get
    if _newclass:
        lengthY = _swig_property(_libcaer_wrap.caer_frame_event_lengthY_get, _libcaer_wrap.caer_frame_event_lengthY_set)
    __swig_setmethods__["positionX"] = _libcaer_wrap.caer_frame_event_positionX_set
    __swig_getmethods__["positionX"] = _libcaer_wrap.caer_frame_event_positionX_get
    if _newclass:
        positionX = _swig_property(_libcaer_wrap.caer_frame_event_positionX_get, _libcaer_wrap.caer_frame_event_positionX_set)
    __swig_setmethods__["positionY"] = _libcaer_wrap.caer_frame_event_positionY_set
    __swig_getmethods__["positionY"] = _libcaer_wrap.caer_frame_event_positionY_get
    if _newclass:
        positionY = _swig_property(_libcaer_wrap.caer_frame_event_positionY_get, _libcaer_wrap.caer_frame_event_positionY_set)
    __swig_setmethods__["pixels"] = _libcaer_wrap.caer_frame_event_pixels_set
    __swig_getmethods__["pixels"] = _libcaer_wrap.caer_frame_event_pixels_get
    if _newclass:
        pixels = _swig_property(_libcaer_wrap.caer_frame_event_pixels_get, _libcaer_wrap.caer_frame_event_pixels_set)

    def __init__(self):
        """__init__(caer_frame_event self) -> caer_frame_event"""
        this = _libcaer_wrap.new_caer_frame_event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_frame_event
    def __del__(self):
        return None
caer_frame_event_swigregister = _libcaer_wrap.caer_frame_event_swigregister
caer_frame_event_swigregister(caer_frame_event)

class caer_frame_event_packet(_object):
    """Proxy of C caer_frame_event_packet struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_frame_event_packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_frame_event_packet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packetHeader"] = _libcaer_wrap.caer_frame_event_packet_packetHeader_set
    __swig_getmethods__["packetHeader"] = _libcaer_wrap.caer_frame_event_packet_packetHeader_get
    if _newclass:
        packetHeader = _swig_property(_libcaer_wrap.caer_frame_event_packet_packetHeader_get, _libcaer_wrap.caer_frame_event_packet_packetHeader_set)

    def __init__(self):
        """__init__(caer_frame_event_packet self) -> caer_frame_event_packet"""
        this = _libcaer_wrap.new_caer_frame_event_packet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_frame_event_packet
    def __del__(self):
        return None
caer_frame_event_packet_swigregister = _libcaer_wrap.caer_frame_event_packet_swigregister
caer_frame_event_packet_swigregister(caer_frame_event_packet)


def caerFrameEventPacketAllocate(eventCapacity, eventSource, tsOverflow, maxLengthX, maxLengthY, maxChannelNumber):
    """caerFrameEventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow, int32_t maxLengthX, int32_t maxLengthY, int16_t maxChannelNumber) -> caer_frame_event_packet"""
    return _libcaer_wrap.caerFrameEventPacketAllocate(eventCapacity, eventSource, tsOverflow, maxLengthX, maxLengthY, maxChannelNumber)

def caerFrameEventPacketFromPacketHeader(header):
    """caerFrameEventPacketFromPacketHeader(caer_event_packet_header header) -> caer_frame_event_packet"""
    return _libcaer_wrap.caerFrameEventPacketFromPacketHeader(header)

def caerFrameEventPacketFromPacketHeaderConst(header):
    """caerFrameEventPacketFromPacketHeaderConst(caer_event_packet_header header) -> caer_frame_event_packet"""
    return _libcaer_wrap.caerFrameEventPacketFromPacketHeaderConst(header)

def caerFrameEventPacketGetEvent(packet, n):
    """caerFrameEventPacketGetEvent(caer_frame_event_packet packet, int32_t n) -> caer_frame_event"""
    return _libcaer_wrap.caerFrameEventPacketGetEvent(packet, n)

def caerFrameEventPacketGetEventConst(packet, n):
    """caerFrameEventPacketGetEventConst(caer_frame_event_packet packet, int32_t n) -> caer_frame_event"""
    return _libcaer_wrap.caerFrameEventPacketGetEventConst(packet, n)

def caerFrameEventGetTSStartOfFrame(event):
    """caerFrameEventGetTSStartOfFrame(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetTSStartOfFrame(event)

def caerFrameEventGetTSStartOfFrame64(event, packet):
    """caerFrameEventGetTSStartOfFrame64(caer_frame_event event, caer_frame_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerFrameEventGetTSStartOfFrame64(event, packet)

def caerFrameEventSetTSStartOfFrame(event, startFrame):
    """caerFrameEventSetTSStartOfFrame(caer_frame_event event, int32_t startFrame)"""
    return _libcaer_wrap.caerFrameEventSetTSStartOfFrame(event, startFrame)

def caerFrameEventGetTSEndOfFrame(event):
    """caerFrameEventGetTSEndOfFrame(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetTSEndOfFrame(event)

def caerFrameEventGetTSEndOfFrame64(event, packet):
    """caerFrameEventGetTSEndOfFrame64(caer_frame_event event, caer_frame_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerFrameEventGetTSEndOfFrame64(event, packet)

def caerFrameEventSetTSEndOfFrame(event, endFrame):
    """caerFrameEventSetTSEndOfFrame(caer_frame_event event, int32_t endFrame)"""
    return _libcaer_wrap.caerFrameEventSetTSEndOfFrame(event, endFrame)

def caerFrameEventGetTSStartOfExposure(event):
    """caerFrameEventGetTSStartOfExposure(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetTSStartOfExposure(event)

def caerFrameEventGetTSStartOfExposure64(event, packet):
    """caerFrameEventGetTSStartOfExposure64(caer_frame_event event, caer_frame_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerFrameEventGetTSStartOfExposure64(event, packet)

def caerFrameEventSetTSStartOfExposure(event, startExposure):
    """caerFrameEventSetTSStartOfExposure(caer_frame_event event, int32_t startExposure)"""
    return _libcaer_wrap.caerFrameEventSetTSStartOfExposure(event, startExposure)

def caerFrameEventGetTSEndOfExposure(event):
    """caerFrameEventGetTSEndOfExposure(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetTSEndOfExposure(event)

def caerFrameEventGetTSEndOfExposure64(event, packet):
    """caerFrameEventGetTSEndOfExposure64(caer_frame_event event, caer_frame_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerFrameEventGetTSEndOfExposure64(event, packet)

def caerFrameEventSetTSEndOfExposure(event, endExposure):
    """caerFrameEventSetTSEndOfExposure(caer_frame_event event, int32_t endExposure)"""
    return _libcaer_wrap.caerFrameEventSetTSEndOfExposure(event, endExposure)

def caerFrameEventGetExposureLength(event):
    """caerFrameEventGetExposureLength(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetExposureLength(event)

def caerFrameEventGetTimestamp(event):
    """caerFrameEventGetTimestamp(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetTimestamp(event)

def caerFrameEventGetTimestamp64(event, packet):
    """caerFrameEventGetTimestamp64(caer_frame_event event, caer_frame_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerFrameEventGetTimestamp64(event, packet)

def caerFrameEventIsValid(event):
    """caerFrameEventIsValid(caer_frame_event event) -> bool"""
    return _libcaer_wrap.caerFrameEventIsValid(event)

def caerFrameEventValidate(event, packet):
    """caerFrameEventValidate(caer_frame_event event, caer_frame_event_packet packet)"""
    return _libcaer_wrap.caerFrameEventValidate(event, packet)

def caerFrameEventInvalidate(event, packet):
    """caerFrameEventInvalidate(caer_frame_event event, caer_frame_event_packet packet)"""
    return _libcaer_wrap.caerFrameEventInvalidate(event, packet)

def caerFrameEventPacketGetPixelsSize(packet):
    """caerFrameEventPacketGetPixelsSize(caer_frame_event_packet packet) -> size_t"""
    return _libcaer_wrap.caerFrameEventPacketGetPixelsSize(packet)

def caerFrameEventPacketGetPixelsMaxIndex(packet):
    """caerFrameEventPacketGetPixelsMaxIndex(caer_frame_event_packet packet) -> size_t"""
    return _libcaer_wrap.caerFrameEventPacketGetPixelsMaxIndex(packet)

def caerFrameEventGetROIIdentifier(event):
    """caerFrameEventGetROIIdentifier(caer_frame_event event) -> uint8_t"""
    return _libcaer_wrap.caerFrameEventGetROIIdentifier(event)

def caerFrameEventSetROIIdentifier(event, roiIdentifier):
    """caerFrameEventSetROIIdentifier(caer_frame_event event, uint8_t roiIdentifier)"""
    return _libcaer_wrap.caerFrameEventSetROIIdentifier(event, roiIdentifier)

def caerFrameEventGetColorFilter(event):
    """caerFrameEventGetColorFilter(caer_frame_event event) -> enum caer_frame_event_color_filter"""
    return _libcaer_wrap.caerFrameEventGetColorFilter(event)

def caerFrameEventSetColorFilter(event, colorFilter):
    """caerFrameEventSetColorFilter(caer_frame_event event, enum caer_frame_event_color_filter colorFilter)"""
    return _libcaer_wrap.caerFrameEventSetColorFilter(event, colorFilter)

def caerFrameEventGetLengthX(event):
    """caerFrameEventGetLengthX(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetLengthX(event)

def caerFrameEventGetLengthY(event):
    """caerFrameEventGetLengthY(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetLengthY(event)

def caerFrameEventGetChannelNumber(event):
    """caerFrameEventGetChannelNumber(caer_frame_event event) -> enum caer_frame_event_color_channels"""
    return _libcaer_wrap.caerFrameEventGetChannelNumber(event)

def caerFrameEventSetLengthXLengthYChannelNumber(event, lengthX, lengthY, channelNumber, packet):
    """caerFrameEventSetLengthXLengthYChannelNumber(caer_frame_event event, int32_t lengthX, int32_t lengthY, enum caer_frame_event_color_channels channelNumber, caer_frame_event_packet packet)"""
    return _libcaer_wrap.caerFrameEventSetLengthXLengthYChannelNumber(event, lengthX, lengthY, channelNumber, packet)

def caerFrameEventGetPixelsMaxIndex(event):
    """caerFrameEventGetPixelsMaxIndex(caer_frame_event event) -> size_t"""
    return _libcaer_wrap.caerFrameEventGetPixelsMaxIndex(event)

def caerFrameEventGetPixelsSize(event):
    """caerFrameEventGetPixelsSize(caer_frame_event event) -> size_t"""
    return _libcaer_wrap.caerFrameEventGetPixelsSize(event)

def caerFrameEventGetPositionX(event):
    """caerFrameEventGetPositionX(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetPositionX(event)

def caerFrameEventSetPositionX(event, positionX):
    """caerFrameEventSetPositionX(caer_frame_event event, int32_t positionX)"""
    return _libcaer_wrap.caerFrameEventSetPositionX(event, positionX)

def caerFrameEventGetPositionY(event):
    """caerFrameEventGetPositionY(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetPositionY(event)

def caerFrameEventSetPositionY(event, positionY):
    """caerFrameEventSetPositionY(caer_frame_event event, int32_t positionY)"""
    return _libcaer_wrap.caerFrameEventSetPositionY(event, positionY)

def caerFrameEventGetPixel(event, xAddress, yAddress):
    """caerFrameEventGetPixel(caer_frame_event event, int32_t xAddress, int32_t yAddress) -> uint16_t"""
    return _libcaer_wrap.caerFrameEventGetPixel(event, xAddress, yAddress)

def caerFrameEventSetPixel(event, xAddress, yAddress, pixelValue):
    """caerFrameEventSetPixel(caer_frame_event event, int32_t xAddress, int32_t yAddress, uint16_t pixelValue)"""
    return _libcaer_wrap.caerFrameEventSetPixel(event, xAddress, yAddress, pixelValue)

def caerFrameEventGetPixelForChannel(event, xAddress, yAddress, channel):
    """caerFrameEventGetPixelForChannel(caer_frame_event event, int32_t xAddress, int32_t yAddress, uint8_t channel) -> uint16_t"""
    return _libcaer_wrap.caerFrameEventGetPixelForChannel(event, xAddress, yAddress, channel)

def caerFrameEventSetPixelForChannel(event, xAddress, yAddress, channel, pixelValue):
    """caerFrameEventSetPixelForChannel(caer_frame_event event, int32_t xAddress, int32_t yAddress, uint8_t channel, uint16_t pixelValue)"""
    return _libcaer_wrap.caerFrameEventSetPixelForChannel(event, xAddress, yAddress, channel, pixelValue)

def caerFrameEventGetPixelUnsafe(event, xAddress, yAddress):
    """caerFrameEventGetPixelUnsafe(caer_frame_event event, int32_t xAddress, int32_t yAddress) -> uint16_t"""
    return _libcaer_wrap.caerFrameEventGetPixelUnsafe(event, xAddress, yAddress)

def caerFrameEventSetPixelUnsafe(event, xAddress, yAddress, pixelValue):
    """caerFrameEventSetPixelUnsafe(caer_frame_event event, int32_t xAddress, int32_t yAddress, uint16_t pixelValue)"""
    return _libcaer_wrap.caerFrameEventSetPixelUnsafe(event, xAddress, yAddress, pixelValue)

def caerFrameEventGetPixelForChannelUnsafe(event, xAddress, yAddress, channel):
    """caerFrameEventGetPixelForChannelUnsafe(caer_frame_event event, int32_t xAddress, int32_t yAddress, uint8_t channel) -> uint16_t"""
    return _libcaer_wrap.caerFrameEventGetPixelForChannelUnsafe(event, xAddress, yAddress, channel)

def caerFrameEventSetPixelForChannelUnsafe(event, xAddress, yAddress, channel, pixelValue):
    """caerFrameEventSetPixelForChannelUnsafe(caer_frame_event event, int32_t xAddress, int32_t yAddress, uint8_t channel, uint16_t pixelValue)"""
    return _libcaer_wrap.caerFrameEventSetPixelForChannelUnsafe(event, xAddress, yAddress, channel, pixelValue)

def caerFrameEventGetPixelArrayUnsafe(event):
    """caerFrameEventGetPixelArrayUnsafe(caer_frame_event event) -> uint16_t *"""
    return _libcaer_wrap.caerFrameEventGetPixelArrayUnsafe(event)

def caerFrameEventGetPixelArrayUnsafeConst(event):
    """caerFrameEventGetPixelArrayUnsafeConst(caer_frame_event event) -> uint16_t const *"""
    return _libcaer_wrap.caerFrameEventGetPixelArrayUnsafeConst(event)
class caer_imu6_event(_object):
    """Proxy of C caer_imu6_event struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_imu6_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_imu6_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["info"] = _libcaer_wrap.caer_imu6_event_info_set
    __swig_getmethods__["info"] = _libcaer_wrap.caer_imu6_event_info_get
    if _newclass:
        info = _swig_property(_libcaer_wrap.caer_imu6_event_info_get, _libcaer_wrap.caer_imu6_event_info_set)
    __swig_setmethods__["timestamp"] = _libcaer_wrap.caer_imu6_event_timestamp_set
    __swig_getmethods__["timestamp"] = _libcaer_wrap.caer_imu6_event_timestamp_get
    if _newclass:
        timestamp = _swig_property(_libcaer_wrap.caer_imu6_event_timestamp_get, _libcaer_wrap.caer_imu6_event_timestamp_set)
    __swig_setmethods__["accel_x"] = _libcaer_wrap.caer_imu6_event_accel_x_set
    __swig_getmethods__["accel_x"] = _libcaer_wrap.caer_imu6_event_accel_x_get
    if _newclass:
        accel_x = _swig_property(_libcaer_wrap.caer_imu6_event_accel_x_get, _libcaer_wrap.caer_imu6_event_accel_x_set)
    __swig_setmethods__["accel_y"] = _libcaer_wrap.caer_imu6_event_accel_y_set
    __swig_getmethods__["accel_y"] = _libcaer_wrap.caer_imu6_event_accel_y_get
    if _newclass:
        accel_y = _swig_property(_libcaer_wrap.caer_imu6_event_accel_y_get, _libcaer_wrap.caer_imu6_event_accel_y_set)
    __swig_setmethods__["accel_z"] = _libcaer_wrap.caer_imu6_event_accel_z_set
    __swig_getmethods__["accel_z"] = _libcaer_wrap.caer_imu6_event_accel_z_get
    if _newclass:
        accel_z = _swig_property(_libcaer_wrap.caer_imu6_event_accel_z_get, _libcaer_wrap.caer_imu6_event_accel_z_set)
    __swig_setmethods__["gyro_x"] = _libcaer_wrap.caer_imu6_event_gyro_x_set
    __swig_getmethods__["gyro_x"] = _libcaer_wrap.caer_imu6_event_gyro_x_get
    if _newclass:
        gyro_x = _swig_property(_libcaer_wrap.caer_imu6_event_gyro_x_get, _libcaer_wrap.caer_imu6_event_gyro_x_set)
    __swig_setmethods__["gyro_y"] = _libcaer_wrap.caer_imu6_event_gyro_y_set
    __swig_getmethods__["gyro_y"] = _libcaer_wrap.caer_imu6_event_gyro_y_get
    if _newclass:
        gyro_y = _swig_property(_libcaer_wrap.caer_imu6_event_gyro_y_get, _libcaer_wrap.caer_imu6_event_gyro_y_set)
    __swig_setmethods__["gyro_z"] = _libcaer_wrap.caer_imu6_event_gyro_z_set
    __swig_getmethods__["gyro_z"] = _libcaer_wrap.caer_imu6_event_gyro_z_get
    if _newclass:
        gyro_z = _swig_property(_libcaer_wrap.caer_imu6_event_gyro_z_get, _libcaer_wrap.caer_imu6_event_gyro_z_set)
    __swig_setmethods__["temp"] = _libcaer_wrap.caer_imu6_event_temp_set
    __swig_getmethods__["temp"] = _libcaer_wrap.caer_imu6_event_temp_get
    if _newclass:
        temp = _swig_property(_libcaer_wrap.caer_imu6_event_temp_get, _libcaer_wrap.caer_imu6_event_temp_set)

    def __init__(self):
        """__init__(caer_imu6_event self) -> caer_imu6_event"""
        this = _libcaer_wrap.new_caer_imu6_event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_imu6_event
    def __del__(self):
        return None
caer_imu6_event_swigregister = _libcaer_wrap.caer_imu6_event_swigregister
caer_imu6_event_swigregister(caer_imu6_event)

class caer_imu6_event_packet(_object):
    """Proxy of C caer_imu6_event_packet struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_imu6_event_packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_imu6_event_packet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packetHeader"] = _libcaer_wrap.caer_imu6_event_packet_packetHeader_set
    __swig_getmethods__["packetHeader"] = _libcaer_wrap.caer_imu6_event_packet_packetHeader_get
    if _newclass:
        packetHeader = _swig_property(_libcaer_wrap.caer_imu6_event_packet_packetHeader_get, _libcaer_wrap.caer_imu6_event_packet_packetHeader_set)
    __swig_getmethods__["events"] = _libcaer_wrap.caer_imu6_event_packet_events_get
    if _newclass:
        events = _swig_property(_libcaer_wrap.caer_imu6_event_packet_events_get)

    def __init__(self):
        """__init__(caer_imu6_event_packet self) -> caer_imu6_event_packet"""
        this = _libcaer_wrap.new_caer_imu6_event_packet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_imu6_event_packet
    def __del__(self):
        return None
caer_imu6_event_packet_swigregister = _libcaer_wrap.caer_imu6_event_packet_swigregister
caer_imu6_event_packet_swigregister(caer_imu6_event_packet)


def caerIMU6EventPacketAllocate(eventCapacity, eventSource, tsOverflow):
    """caerIMU6EventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow) -> caer_imu6_event_packet"""
    return _libcaer_wrap.caerIMU6EventPacketAllocate(eventCapacity, eventSource, tsOverflow)

def caerIMU6EventPacketFromPacketHeader(header):
    """caerIMU6EventPacketFromPacketHeader(caer_event_packet_header header) -> caer_imu6_event_packet"""
    return _libcaer_wrap.caerIMU6EventPacketFromPacketHeader(header)

def caerIMU6EventPacketFromPacketHeaderConst(header):
    """caerIMU6EventPacketFromPacketHeaderConst(caer_event_packet_header header) -> caer_imu6_event_packet"""
    return _libcaer_wrap.caerIMU6EventPacketFromPacketHeaderConst(header)

def caerIMU6EventPacketGetEvent(packet, n):
    """caerIMU6EventPacketGetEvent(caer_imu6_event_packet packet, int32_t n) -> caer_imu6_event"""
    return _libcaer_wrap.caerIMU6EventPacketGetEvent(packet, n)

def caerIMU6EventPacketGetEventConst(packet, n):
    """caerIMU6EventPacketGetEventConst(caer_imu6_event_packet packet, int32_t n) -> caer_imu6_event"""
    return _libcaer_wrap.caerIMU6EventPacketGetEventConst(packet, n)

def caerIMU6EventGetTimestamp(event):
    """caerIMU6EventGetTimestamp(caer_imu6_event event) -> int32_t"""
    return _libcaer_wrap.caerIMU6EventGetTimestamp(event)

def caerIMU6EventGetTimestamp64(event, packet):
    """caerIMU6EventGetTimestamp64(caer_imu6_event event, caer_imu6_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerIMU6EventGetTimestamp64(event, packet)

def caerIMU6EventSetTimestamp(event, timestamp):
    """caerIMU6EventSetTimestamp(caer_imu6_event event, int32_t timestamp)"""
    return _libcaer_wrap.caerIMU6EventSetTimestamp(event, timestamp)

def caerIMU6EventIsValid(event):
    """caerIMU6EventIsValid(caer_imu6_event event) -> bool"""
    return _libcaer_wrap.caerIMU6EventIsValid(event)

def caerIMU6EventValidate(event, packet):
    """caerIMU6EventValidate(caer_imu6_event event, caer_imu6_event_packet packet)"""
    return _libcaer_wrap.caerIMU6EventValidate(event, packet)

def caerIMU6EventInvalidate(event, packet):
    """caerIMU6EventInvalidate(caer_imu6_event event, caer_imu6_event_packet packet)"""
    return _libcaer_wrap.caerIMU6EventInvalidate(event, packet)

def caerIMU6EventGetAccelX(event):
    """caerIMU6EventGetAccelX(caer_imu6_event event) -> float"""
    return _libcaer_wrap.caerIMU6EventGetAccelX(event)

def caerIMU6EventSetAccelX(event, accelX):
    """caerIMU6EventSetAccelX(caer_imu6_event event, float accelX)"""
    return _libcaer_wrap.caerIMU6EventSetAccelX(event, accelX)

def caerIMU6EventGetAccelY(event):
    """caerIMU6EventGetAccelY(caer_imu6_event event) -> float"""
    return _libcaer_wrap.caerIMU6EventGetAccelY(event)

def caerIMU6EventSetAccelY(event, accelY):
    """caerIMU6EventSetAccelY(caer_imu6_event event, float accelY)"""
    return _libcaer_wrap.caerIMU6EventSetAccelY(event, accelY)

def caerIMU6EventGetAccelZ(event):
    """caerIMU6EventGetAccelZ(caer_imu6_event event) -> float"""
    return _libcaer_wrap.caerIMU6EventGetAccelZ(event)

def caerIMU6EventSetAccelZ(event, accelZ):
    """caerIMU6EventSetAccelZ(caer_imu6_event event, float accelZ)"""
    return _libcaer_wrap.caerIMU6EventSetAccelZ(event, accelZ)

def caerIMU6EventGetGyroX(event):
    """caerIMU6EventGetGyroX(caer_imu6_event event) -> float"""
    return _libcaer_wrap.caerIMU6EventGetGyroX(event)

def caerIMU6EventSetGyroX(event, gyroX):
    """caerIMU6EventSetGyroX(caer_imu6_event event, float gyroX)"""
    return _libcaer_wrap.caerIMU6EventSetGyroX(event, gyroX)

def caerIMU6EventGetGyroY(event):
    """caerIMU6EventGetGyroY(caer_imu6_event event) -> float"""
    return _libcaer_wrap.caerIMU6EventGetGyroY(event)

def caerIMU6EventSetGyroY(event, gyroY):
    """caerIMU6EventSetGyroY(caer_imu6_event event, float gyroY)"""
    return _libcaer_wrap.caerIMU6EventSetGyroY(event, gyroY)

def caerIMU6EventGetGyroZ(event):
    """caerIMU6EventGetGyroZ(caer_imu6_event event) -> float"""
    return _libcaer_wrap.caerIMU6EventGetGyroZ(event)

def caerIMU6EventSetGyroZ(event, gyroZ):
    """caerIMU6EventSetGyroZ(caer_imu6_event event, float gyroZ)"""
    return _libcaer_wrap.caerIMU6EventSetGyroZ(event, gyroZ)

def caerIMU6EventGetTemp(event):
    """caerIMU6EventGetTemp(caer_imu6_event event) -> float"""
    return _libcaer_wrap.caerIMU6EventGetTemp(event)

def caerIMU6EventSetTemp(event, temp):
    """caerIMU6EventSetTemp(caer_imu6_event event, float temp)"""
    return _libcaer_wrap.caerIMU6EventSetTemp(event, temp)
class caer_imu9_event(_object):
    """Proxy of C caer_imu9_event struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_imu9_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_imu9_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["info"] = _libcaer_wrap.caer_imu9_event_info_set
    __swig_getmethods__["info"] = _libcaer_wrap.caer_imu9_event_info_get
    if _newclass:
        info = _swig_property(_libcaer_wrap.caer_imu9_event_info_get, _libcaer_wrap.caer_imu9_event_info_set)
    __swig_setmethods__["timestamp"] = _libcaer_wrap.caer_imu9_event_timestamp_set
    __swig_getmethods__["timestamp"] = _libcaer_wrap.caer_imu9_event_timestamp_get
    if _newclass:
        timestamp = _swig_property(_libcaer_wrap.caer_imu9_event_timestamp_get, _libcaer_wrap.caer_imu9_event_timestamp_set)
    __swig_setmethods__["accel_x"] = _libcaer_wrap.caer_imu9_event_accel_x_set
    __swig_getmethods__["accel_x"] = _libcaer_wrap.caer_imu9_event_accel_x_get
    if _newclass:
        accel_x = _swig_property(_libcaer_wrap.caer_imu9_event_accel_x_get, _libcaer_wrap.caer_imu9_event_accel_x_set)
    __swig_setmethods__["accel_y"] = _libcaer_wrap.caer_imu9_event_accel_y_set
    __swig_getmethods__["accel_y"] = _libcaer_wrap.caer_imu9_event_accel_y_get
    if _newclass:
        accel_y = _swig_property(_libcaer_wrap.caer_imu9_event_accel_y_get, _libcaer_wrap.caer_imu9_event_accel_y_set)
    __swig_setmethods__["accel_z"] = _libcaer_wrap.caer_imu9_event_accel_z_set
    __swig_getmethods__["accel_z"] = _libcaer_wrap.caer_imu9_event_accel_z_get
    if _newclass:
        accel_z = _swig_property(_libcaer_wrap.caer_imu9_event_accel_z_get, _libcaer_wrap.caer_imu9_event_accel_z_set)
    __swig_setmethods__["gyro_x"] = _libcaer_wrap.caer_imu9_event_gyro_x_set
    __swig_getmethods__["gyro_x"] = _libcaer_wrap.caer_imu9_event_gyro_x_get
    if _newclass:
        gyro_x = _swig_property(_libcaer_wrap.caer_imu9_event_gyro_x_get, _libcaer_wrap.caer_imu9_event_gyro_x_set)
    __swig_setmethods__["gyro_y"] = _libcaer_wrap.caer_imu9_event_gyro_y_set
    __swig_getmethods__["gyro_y"] = _libcaer_wrap.caer_imu9_event_gyro_y_get
    if _newclass:
        gyro_y = _swig_property(_libcaer_wrap.caer_imu9_event_gyro_y_get, _libcaer_wrap.caer_imu9_event_gyro_y_set)
    __swig_setmethods__["gyro_z"] = _libcaer_wrap.caer_imu9_event_gyro_z_set
    __swig_getmethods__["gyro_z"] = _libcaer_wrap.caer_imu9_event_gyro_z_get
    if _newclass:
        gyro_z = _swig_property(_libcaer_wrap.caer_imu9_event_gyro_z_get, _libcaer_wrap.caer_imu9_event_gyro_z_set)
    __swig_setmethods__["temp"] = _libcaer_wrap.caer_imu9_event_temp_set
    __swig_getmethods__["temp"] = _libcaer_wrap.caer_imu9_event_temp_get
    if _newclass:
        temp = _swig_property(_libcaer_wrap.caer_imu9_event_temp_get, _libcaer_wrap.caer_imu9_event_temp_set)
    __swig_setmethods__["comp_x"] = _libcaer_wrap.caer_imu9_event_comp_x_set
    __swig_getmethods__["comp_x"] = _libcaer_wrap.caer_imu9_event_comp_x_get
    if _newclass:
        comp_x = _swig_property(_libcaer_wrap.caer_imu9_event_comp_x_get, _libcaer_wrap.caer_imu9_event_comp_x_set)
    __swig_setmethods__["comp_y"] = _libcaer_wrap.caer_imu9_event_comp_y_set
    __swig_getmethods__["comp_y"] = _libcaer_wrap.caer_imu9_event_comp_y_get
    if _newclass:
        comp_y = _swig_property(_libcaer_wrap.caer_imu9_event_comp_y_get, _libcaer_wrap.caer_imu9_event_comp_y_set)
    __swig_setmethods__["comp_z"] = _libcaer_wrap.caer_imu9_event_comp_z_set
    __swig_getmethods__["comp_z"] = _libcaer_wrap.caer_imu9_event_comp_z_get
    if _newclass:
        comp_z = _swig_property(_libcaer_wrap.caer_imu9_event_comp_z_get, _libcaer_wrap.caer_imu9_event_comp_z_set)

    def __init__(self):
        """__init__(caer_imu9_event self) -> caer_imu9_event"""
        this = _libcaer_wrap.new_caer_imu9_event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_imu9_event
    def __del__(self):
        return None
caer_imu9_event_swigregister = _libcaer_wrap.caer_imu9_event_swigregister
caer_imu9_event_swigregister(caer_imu9_event)

class caer_imu9_event_packet(_object):
    """Proxy of C caer_imu9_event_packet struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_imu9_event_packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_imu9_event_packet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packetHeader"] = _libcaer_wrap.caer_imu9_event_packet_packetHeader_set
    __swig_getmethods__["packetHeader"] = _libcaer_wrap.caer_imu9_event_packet_packetHeader_get
    if _newclass:
        packetHeader = _swig_property(_libcaer_wrap.caer_imu9_event_packet_packetHeader_get, _libcaer_wrap.caer_imu9_event_packet_packetHeader_set)
    __swig_getmethods__["events"] = _libcaer_wrap.caer_imu9_event_packet_events_get
    if _newclass:
        events = _swig_property(_libcaer_wrap.caer_imu9_event_packet_events_get)

    def __init__(self):
        """__init__(caer_imu9_event_packet self) -> caer_imu9_event_packet"""
        this = _libcaer_wrap.new_caer_imu9_event_packet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_imu9_event_packet
    def __del__(self):
        return None
caer_imu9_event_packet_swigregister = _libcaer_wrap.caer_imu9_event_packet_swigregister
caer_imu9_event_packet_swigregister(caer_imu9_event_packet)


def caerIMU9EventPacketAllocate(eventCapacity, eventSource, tsOverflow):
    """caerIMU9EventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow) -> caer_imu9_event_packet"""
    return _libcaer_wrap.caerIMU9EventPacketAllocate(eventCapacity, eventSource, tsOverflow)

def caerIMU9EventPacketFromPacketHeader(header):
    """caerIMU9EventPacketFromPacketHeader(caer_event_packet_header header) -> caer_imu9_event_packet"""
    return _libcaer_wrap.caerIMU9EventPacketFromPacketHeader(header)

def caerIMU9EventPacketFromPacketHeaderConst(header):
    """caerIMU9EventPacketFromPacketHeaderConst(caer_event_packet_header header) -> caer_imu9_event_packet"""
    return _libcaer_wrap.caerIMU9EventPacketFromPacketHeaderConst(header)

def caerIMU9EventPacketGetEvent(packet, n):
    """caerIMU9EventPacketGetEvent(caer_imu9_event_packet packet, int32_t n) -> caer_imu9_event"""
    return _libcaer_wrap.caerIMU9EventPacketGetEvent(packet, n)

def caerIMU9EventPacketGetEventConst(packet, n):
    """caerIMU9EventPacketGetEventConst(caer_imu9_event_packet packet, int32_t n) -> caer_imu9_event"""
    return _libcaer_wrap.caerIMU9EventPacketGetEventConst(packet, n)

def caerIMU9EventGetTimestamp(event):
    """caerIMU9EventGetTimestamp(caer_imu9_event event) -> int32_t"""
    return _libcaer_wrap.caerIMU9EventGetTimestamp(event)

def caerIMU9EventGetTimestamp64(event, packet):
    """caerIMU9EventGetTimestamp64(caer_imu9_event event, caer_imu9_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerIMU9EventGetTimestamp64(event, packet)

def caerIMU9EventSetTimestamp(event, timestamp):
    """caerIMU9EventSetTimestamp(caer_imu9_event event, int32_t timestamp)"""
    return _libcaer_wrap.caerIMU9EventSetTimestamp(event, timestamp)

def caerIMU9EventIsValid(event):
    """caerIMU9EventIsValid(caer_imu9_event event) -> bool"""
    return _libcaer_wrap.caerIMU9EventIsValid(event)

def caerIMU9EventValidate(event, packet):
    """caerIMU9EventValidate(caer_imu9_event event, caer_imu9_event_packet packet)"""
    return _libcaer_wrap.caerIMU9EventValidate(event, packet)

def caerIMU9EventInvalidate(event, packet):
    """caerIMU9EventInvalidate(caer_imu9_event event, caer_imu9_event_packet packet)"""
    return _libcaer_wrap.caerIMU9EventInvalidate(event, packet)

def caerIMU9EventGetAccelX(event):
    """caerIMU9EventGetAccelX(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetAccelX(event)

def caerIMU9EventSetAccelX(event, accelX):
    """caerIMU9EventSetAccelX(caer_imu9_event event, float accelX)"""
    return _libcaer_wrap.caerIMU9EventSetAccelX(event, accelX)

def caerIMU9EventGetAccelY(event):
    """caerIMU9EventGetAccelY(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetAccelY(event)

def caerIMU9EventSetAccelY(event, accelY):
    """caerIMU9EventSetAccelY(caer_imu9_event event, float accelY)"""
    return _libcaer_wrap.caerIMU9EventSetAccelY(event, accelY)

def caerIMU9EventGetAccelZ(event):
    """caerIMU9EventGetAccelZ(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetAccelZ(event)

def caerIMU9EventSetAccelZ(event, accelZ):
    """caerIMU9EventSetAccelZ(caer_imu9_event event, float accelZ)"""
    return _libcaer_wrap.caerIMU9EventSetAccelZ(event, accelZ)

def caerIMU9EventGetGyroX(event):
    """caerIMU9EventGetGyroX(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetGyroX(event)

def caerIMU9EventSetGyroX(event, gyroX):
    """caerIMU9EventSetGyroX(caer_imu9_event event, float gyroX)"""
    return _libcaer_wrap.caerIMU9EventSetGyroX(event, gyroX)

def caerIMU9EventGetGyroY(event):
    """caerIMU9EventGetGyroY(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetGyroY(event)

def caerIMU9EventSetGyroY(event, gyroY):
    """caerIMU9EventSetGyroY(caer_imu9_event event, float gyroY)"""
    return _libcaer_wrap.caerIMU9EventSetGyroY(event, gyroY)

def caerIMU9EventGetGyroZ(event):
    """caerIMU9EventGetGyroZ(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetGyroZ(event)

def caerIMU9EventSetGyroZ(event, gyroZ):
    """caerIMU9EventSetGyroZ(caer_imu9_event event, float gyroZ)"""
    return _libcaer_wrap.caerIMU9EventSetGyroZ(event, gyroZ)

def caerIMU9EventGetTemp(event):
    """caerIMU9EventGetTemp(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetTemp(event)

def caerIMU9EventSetTemp(event, temp):
    """caerIMU9EventSetTemp(caer_imu9_event event, float temp)"""
    return _libcaer_wrap.caerIMU9EventSetTemp(event, temp)

def caerIMU9EventGetCompX(event):
    """caerIMU9EventGetCompX(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetCompX(event)

def caerIMU9EventSetCompX(event, compX):
    """caerIMU9EventSetCompX(caer_imu9_event event, float compX)"""
    return _libcaer_wrap.caerIMU9EventSetCompX(event, compX)

def caerIMU9EventGetCompY(event):
    """caerIMU9EventGetCompY(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetCompY(event)

def caerIMU9EventSetCompY(event, compY):
    """caerIMU9EventSetCompY(caer_imu9_event event, float compY)"""
    return _libcaer_wrap.caerIMU9EventSetCompY(event, compY)

def caerIMU9EventGetCompZ(event):
    """caerIMU9EventGetCompZ(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetCompZ(event)

def caerIMU9EventSetCompZ(event, compZ):
    """caerIMU9EventSetCompZ(caer_imu9_event event, float compZ)"""
    return _libcaer_wrap.caerIMU9EventSetCompZ(event, compZ)
class caer_event_packet_container(_object):
    """Proxy of C caer_event_packet_container struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_event_packet_container, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_event_packet_container, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lowestEventTimestamp"] = _libcaer_wrap.caer_event_packet_container_lowestEventTimestamp_set
    __swig_getmethods__["lowestEventTimestamp"] = _libcaer_wrap.caer_event_packet_container_lowestEventTimestamp_get
    if _newclass:
        lowestEventTimestamp = _swig_property(_libcaer_wrap.caer_event_packet_container_lowestEventTimestamp_get, _libcaer_wrap.caer_event_packet_container_lowestEventTimestamp_set)
    __swig_setmethods__["highestEventTimestamp"] = _libcaer_wrap.caer_event_packet_container_highestEventTimestamp_set
    __swig_getmethods__["highestEventTimestamp"] = _libcaer_wrap.caer_event_packet_container_highestEventTimestamp_get
    if _newclass:
        highestEventTimestamp = _swig_property(_libcaer_wrap.caer_event_packet_container_highestEventTimestamp_get, _libcaer_wrap.caer_event_packet_container_highestEventTimestamp_set)
    __swig_setmethods__["eventsNumber"] = _libcaer_wrap.caer_event_packet_container_eventsNumber_set
    __swig_getmethods__["eventsNumber"] = _libcaer_wrap.caer_event_packet_container_eventsNumber_get
    if _newclass:
        eventsNumber = _swig_property(_libcaer_wrap.caer_event_packet_container_eventsNumber_get, _libcaer_wrap.caer_event_packet_container_eventsNumber_set)
    __swig_setmethods__["eventsValidNumber"] = _libcaer_wrap.caer_event_packet_container_eventsValidNumber_set
    __swig_getmethods__["eventsValidNumber"] = _libcaer_wrap.caer_event_packet_container_eventsValidNumber_get
    if _newclass:
        eventsValidNumber = _swig_property(_libcaer_wrap.caer_event_packet_container_eventsValidNumber_get, _libcaer_wrap.caer_event_packet_container_eventsValidNumber_set)
    __swig_setmethods__["eventPacketsNumber"] = _libcaer_wrap.caer_event_packet_container_eventPacketsNumber_set
    __swig_getmethods__["eventPacketsNumber"] = _libcaer_wrap.caer_event_packet_container_eventPacketsNumber_get
    if _newclass:
        eventPacketsNumber = _swig_property(_libcaer_wrap.caer_event_packet_container_eventPacketsNumber_get, _libcaer_wrap.caer_event_packet_container_eventPacketsNumber_set)
    __swig_getmethods__["eventPackets"] = _libcaer_wrap.caer_event_packet_container_eventPackets_get
    if _newclass:
        eventPackets = _swig_property(_libcaer_wrap.caer_event_packet_container_eventPackets_get)

    def __init__(self):
        """__init__(caer_event_packet_container self) -> caer_event_packet_container"""
        this = _libcaer_wrap.new_caer_event_packet_container()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_event_packet_container
    def __del__(self):
        return None
caer_event_packet_container_swigregister = _libcaer_wrap.caer_event_packet_container_swigregister
caer_event_packet_container_swigregister(caer_event_packet_container)


def caerEventPacketContainerAllocate(eventPacketsNumber):
    """caerEventPacketContainerAllocate(int32_t eventPacketsNumber) -> caer_event_packet_container"""
    return _libcaer_wrap.caerEventPacketContainerAllocate(eventPacketsNumber)

def caerEventPacketContainerUpdateStatistics(container):
    """caerEventPacketContainerUpdateStatistics(caer_event_packet_container container)"""
    return _libcaer_wrap.caerEventPacketContainerUpdateStatistics(container)

def caerEventPacketContainerGetEventPacketsNumber(container):
    """caerEventPacketContainerGetEventPacketsNumber(caer_event_packet_container container) -> int32_t"""
    return _libcaer_wrap.caerEventPacketContainerGetEventPacketsNumber(container)

def caerEventPacketContainerSetEventPacketsNumber(container, eventPacketsNumber):
    """caerEventPacketContainerSetEventPacketsNumber(caer_event_packet_container container, int32_t eventPacketsNumber)"""
    return _libcaer_wrap.caerEventPacketContainerSetEventPacketsNumber(container, eventPacketsNumber)

def caerEventPacketContainerGetEventPacket(container, n):
    """caerEventPacketContainerGetEventPacket(caer_event_packet_container container, int32_t n) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketContainerGetEventPacket(container, n)

def caerEventPacketContainerGetEventPacketConst(container, n):
    """caerEventPacketContainerGetEventPacketConst(caer_event_packet_container container, int32_t n) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketContainerGetEventPacketConst(container, n)

def caerEventPacketContainerSetEventPacket(container, n, packetHeader):
    """caerEventPacketContainerSetEventPacket(caer_event_packet_container container, int32_t n, caer_event_packet_header packetHeader)"""
    return _libcaer_wrap.caerEventPacketContainerSetEventPacket(container, n, packetHeader)

def caerEventPacketContainerFree(container):
    """caerEventPacketContainerFree(caer_event_packet_container container)"""
    return _libcaer_wrap.caerEventPacketContainerFree(container)

def caerEventPacketContainerGetLowestEventTimestamp(container):
    """caerEventPacketContainerGetLowestEventTimestamp(caer_event_packet_container container) -> int64_t"""
    return _libcaer_wrap.caerEventPacketContainerGetLowestEventTimestamp(container)

def caerEventPacketContainerGetHighestEventTimestamp(container):
    """caerEventPacketContainerGetHighestEventTimestamp(caer_event_packet_container container) -> int64_t"""
    return _libcaer_wrap.caerEventPacketContainerGetHighestEventTimestamp(container)

def caerEventPacketContainerGetEventsNumber(container):
    """caerEventPacketContainerGetEventsNumber(caer_event_packet_container container) -> int32_t"""
    return _libcaer_wrap.caerEventPacketContainerGetEventsNumber(container)

def caerEventPacketContainerGetEventsValidNumber(container):
    """caerEventPacketContainerGetEventsValidNumber(caer_event_packet_container container) -> int32_t"""
    return _libcaer_wrap.caerEventPacketContainerGetEventsValidNumber(container)

def caerEventPacketContainerFindEventPacketByType(container, typeID):
    """caerEventPacketContainerFindEventPacketByType(caer_event_packet_container container, int16_t typeID) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketContainerFindEventPacketByType(container, typeID)

def caerEventPacketContainerFindEventPacketByTypeConst(container, typeID):
    """caerEventPacketContainerFindEventPacketByTypeConst(caer_event_packet_container container, int16_t typeID) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketContainerFindEventPacketByTypeConst(container, typeID)

def caerEventPacketContainerCopyAllEvents(container):
    """caerEventPacketContainerCopyAllEvents(caer_event_packet_container container) -> caer_event_packet_container"""
    return _libcaer_wrap.caerEventPacketContainerCopyAllEvents(container)

def caerEventPacketContainerCopyValidEvents(container):
    """caerEventPacketContainerCopyValidEvents(caer_event_packet_container container) -> caer_event_packet_container"""
    return _libcaer_wrap.caerEventPacketContainerCopyValidEvents(container)
POINT1D_TYPE_SHIFT = _libcaer_wrap.POINT1D_TYPE_SHIFT
POINT1D_TYPE_MASK = _libcaer_wrap.POINT1D_TYPE_MASK
POINT1D_SCALE_SHIFT = _libcaer_wrap.POINT1D_SCALE_SHIFT
POINT1D_SCALE_MASK = _libcaer_wrap.POINT1D_SCALE_MASK
class caer_point1d_event(_object):
    """Proxy of C caer_point1d_event struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_point1d_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_point1d_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["info"] = _libcaer_wrap.caer_point1d_event_info_set
    __swig_getmethods__["info"] = _libcaer_wrap.caer_point1d_event_info_get
    if _newclass:
        info = _swig_property(_libcaer_wrap.caer_point1d_event_info_get, _libcaer_wrap.caer_point1d_event_info_set)
    __swig_setmethods__["x"] = _libcaer_wrap.caer_point1d_event_x_set
    __swig_getmethods__["x"] = _libcaer_wrap.caer_point1d_event_x_get
    if _newclass:
        x = _swig_property(_libcaer_wrap.caer_point1d_event_x_get, _libcaer_wrap.caer_point1d_event_x_set)
    __swig_setmethods__["timestamp"] = _libcaer_wrap.caer_point1d_event_timestamp_set
    __swig_getmethods__["timestamp"] = _libcaer_wrap.caer_point1d_event_timestamp_get
    if _newclass:
        timestamp = _swig_property(_libcaer_wrap.caer_point1d_event_timestamp_get, _libcaer_wrap.caer_point1d_event_timestamp_set)

    def __init__(self):
        """__init__(caer_point1d_event self) -> caer_point1d_event"""
        this = _libcaer_wrap.new_caer_point1d_event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_point1d_event
    def __del__(self):
        return None
caer_point1d_event_swigregister = _libcaer_wrap.caer_point1d_event_swigregister
caer_point1d_event_swigregister(caer_point1d_event)

class caer_point1d_event_packet(_object):
    """Proxy of C caer_point1d_event_packet struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_point1d_event_packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_point1d_event_packet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packetHeader"] = _libcaer_wrap.caer_point1d_event_packet_packetHeader_set
    __swig_getmethods__["packetHeader"] = _libcaer_wrap.caer_point1d_event_packet_packetHeader_get
    if _newclass:
        packetHeader = _swig_property(_libcaer_wrap.caer_point1d_event_packet_packetHeader_get, _libcaer_wrap.caer_point1d_event_packet_packetHeader_set)
    __swig_getmethods__["events"] = _libcaer_wrap.caer_point1d_event_packet_events_get
    if _newclass:
        events = _swig_property(_libcaer_wrap.caer_point1d_event_packet_events_get)

    def __init__(self):
        """__init__(caer_point1d_event_packet self) -> caer_point1d_event_packet"""
        this = _libcaer_wrap.new_caer_point1d_event_packet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_point1d_event_packet
    def __del__(self):
        return None
caer_point1d_event_packet_swigregister = _libcaer_wrap.caer_point1d_event_packet_swigregister
caer_point1d_event_packet_swigregister(caer_point1d_event_packet)


def caerPoint1DEventPacketAllocate(eventCapacity, eventSource, tsOverflow):
    """caerPoint1DEventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow) -> caer_point1d_event_packet"""
    return _libcaer_wrap.caerPoint1DEventPacketAllocate(eventCapacity, eventSource, tsOverflow)

def caerPoint1DEventPacketFromPacketHeader(header):
    """caerPoint1DEventPacketFromPacketHeader(caer_event_packet_header header) -> caer_point1d_event_packet"""
    return _libcaer_wrap.caerPoint1DEventPacketFromPacketHeader(header)

def caerPoint1DEventPacketFromPacketHeaderConst(header):
    """caerPoint1DEventPacketFromPacketHeaderConst(caer_event_packet_header header) -> caer_point1d_event_packet"""
    return _libcaer_wrap.caerPoint1DEventPacketFromPacketHeaderConst(header)

def caerPoint1DEventPacketGetEvent(packet, n):
    """caerPoint1DEventPacketGetEvent(caer_point1d_event_packet packet, int32_t n) -> caer_point1d_event"""
    return _libcaer_wrap.caerPoint1DEventPacketGetEvent(packet, n)

def caerPoint1DEventPacketGetEventConst(packet, n):
    """caerPoint1DEventPacketGetEventConst(caer_point1d_event_packet packet, int32_t n) -> caer_point1d_event"""
    return _libcaer_wrap.caerPoint1DEventPacketGetEventConst(packet, n)

def caerPoint1DEventGetTimestamp(event):
    """caerPoint1DEventGetTimestamp(caer_point1d_event event) -> int32_t"""
    return _libcaer_wrap.caerPoint1DEventGetTimestamp(event)

def caerPoint1DEventGetTimestamp64(event, packet):
    """caerPoint1DEventGetTimestamp64(caer_point1d_event event, caer_point1d_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerPoint1DEventGetTimestamp64(event, packet)

def caerPoint1DEventSetTimestamp(event, timestamp):
    """caerPoint1DEventSetTimestamp(caer_point1d_event event, int32_t timestamp)"""
    return _libcaer_wrap.caerPoint1DEventSetTimestamp(event, timestamp)

def caerPoint1DEventIsValid(event):
    """caerPoint1DEventIsValid(caer_point1d_event event) -> bool"""
    return _libcaer_wrap.caerPoint1DEventIsValid(event)

def caerPoint1DEventValidate(event, packet):
    """caerPoint1DEventValidate(caer_point1d_event event, caer_point1d_event_packet packet)"""
    return _libcaer_wrap.caerPoint1DEventValidate(event, packet)

def caerPoint1DEventInvalidate(event, packet):
    """caerPoint1DEventInvalidate(caer_point1d_event event, caer_point1d_event_packet packet)"""
    return _libcaer_wrap.caerPoint1DEventInvalidate(event, packet)

def caerPoint1DEventGetType(event):
    """caerPoint1DEventGetType(caer_point1d_event event) -> uint8_t"""
    return _libcaer_wrap.caerPoint1DEventGetType(event)

def caerPoint1DEventSetType(event, type):
    """caerPoint1DEventSetType(caer_point1d_event event, uint8_t type)"""
    return _libcaer_wrap.caerPoint1DEventSetType(event, type)

def caerPoint1DEventGetScale(event):
    """caerPoint1DEventGetScale(caer_point1d_event event) -> int8_t"""
    return _libcaer_wrap.caerPoint1DEventGetScale(event)

def caerPoint1DEventSetScale(event, scale):
    """caerPoint1DEventSetScale(caer_point1d_event event, int8_t scale)"""
    return _libcaer_wrap.caerPoint1DEventSetScale(event, scale)

def caerPoint1DEventGetX(event):
    """caerPoint1DEventGetX(caer_point1d_event event) -> float"""
    return _libcaer_wrap.caerPoint1DEventGetX(event)

def caerPoint1DEventSetX(event, x):
    """caerPoint1DEventSetX(caer_point1d_event event, float x)"""
    return _libcaer_wrap.caerPoint1DEventSetX(event, x)
POINT2D_TYPE_SHIFT = _libcaer_wrap.POINT2D_TYPE_SHIFT
POINT2D_TYPE_MASK = _libcaer_wrap.POINT2D_TYPE_MASK
POINT2D_SCALE_SHIFT = _libcaer_wrap.POINT2D_SCALE_SHIFT
POINT2D_SCALE_MASK = _libcaer_wrap.POINT2D_SCALE_MASK
class caer_point2d_event(_object):
    """Proxy of C caer_point2d_event struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_point2d_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_point2d_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["info"] = _libcaer_wrap.caer_point2d_event_info_set
    __swig_getmethods__["info"] = _libcaer_wrap.caer_point2d_event_info_get
    if _newclass:
        info = _swig_property(_libcaer_wrap.caer_point2d_event_info_get, _libcaer_wrap.caer_point2d_event_info_set)
    __swig_setmethods__["x"] = _libcaer_wrap.caer_point2d_event_x_set
    __swig_getmethods__["x"] = _libcaer_wrap.caer_point2d_event_x_get
    if _newclass:
        x = _swig_property(_libcaer_wrap.caer_point2d_event_x_get, _libcaer_wrap.caer_point2d_event_x_set)
    __swig_setmethods__["y"] = _libcaer_wrap.caer_point2d_event_y_set
    __swig_getmethods__["y"] = _libcaer_wrap.caer_point2d_event_y_get
    if _newclass:
        y = _swig_property(_libcaer_wrap.caer_point2d_event_y_get, _libcaer_wrap.caer_point2d_event_y_set)
    __swig_setmethods__["timestamp"] = _libcaer_wrap.caer_point2d_event_timestamp_set
    __swig_getmethods__["timestamp"] = _libcaer_wrap.caer_point2d_event_timestamp_get
    if _newclass:
        timestamp = _swig_property(_libcaer_wrap.caer_point2d_event_timestamp_get, _libcaer_wrap.caer_point2d_event_timestamp_set)

    def __init__(self):
        """__init__(caer_point2d_event self) -> caer_point2d_event"""
        this = _libcaer_wrap.new_caer_point2d_event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_point2d_event
    def __del__(self):
        return None
caer_point2d_event_swigregister = _libcaer_wrap.caer_point2d_event_swigregister
caer_point2d_event_swigregister(caer_point2d_event)

class caer_point2d_event_packet(_object):
    """Proxy of C caer_point2d_event_packet struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_point2d_event_packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_point2d_event_packet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packetHeader"] = _libcaer_wrap.caer_point2d_event_packet_packetHeader_set
    __swig_getmethods__["packetHeader"] = _libcaer_wrap.caer_point2d_event_packet_packetHeader_get
    if _newclass:
        packetHeader = _swig_property(_libcaer_wrap.caer_point2d_event_packet_packetHeader_get, _libcaer_wrap.caer_point2d_event_packet_packetHeader_set)
    __swig_getmethods__["events"] = _libcaer_wrap.caer_point2d_event_packet_events_get
    if _newclass:
        events = _swig_property(_libcaer_wrap.caer_point2d_event_packet_events_get)

    def __init__(self):
        """__init__(caer_point2d_event_packet self) -> caer_point2d_event_packet"""
        this = _libcaer_wrap.new_caer_point2d_event_packet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_point2d_event_packet
    def __del__(self):
        return None
caer_point2d_event_packet_swigregister = _libcaer_wrap.caer_point2d_event_packet_swigregister
caer_point2d_event_packet_swigregister(caer_point2d_event_packet)


def caerPoint2DEventPacketAllocate(eventCapacity, eventSource, tsOverflow):
    """caerPoint2DEventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow) -> caer_point2d_event_packet"""
    return _libcaer_wrap.caerPoint2DEventPacketAllocate(eventCapacity, eventSource, tsOverflow)

def caerPoint2DEventPacketFromPacketHeader(header):
    """caerPoint2DEventPacketFromPacketHeader(caer_event_packet_header header) -> caer_point2d_event_packet"""
    return _libcaer_wrap.caerPoint2DEventPacketFromPacketHeader(header)

def caerPoint2DEventPacketFromPacketHeaderConst(header):
    """caerPoint2DEventPacketFromPacketHeaderConst(caer_event_packet_header header) -> caer_point2d_event_packet"""
    return _libcaer_wrap.caerPoint2DEventPacketFromPacketHeaderConst(header)

def caerPoint2DEventPacketGetEvent(packet, n):
    """caerPoint2DEventPacketGetEvent(caer_point2d_event_packet packet, int32_t n) -> caer_point2d_event"""
    return _libcaer_wrap.caerPoint2DEventPacketGetEvent(packet, n)

def caerPoint2DEventPacketGetEventConst(packet, n):
    """caerPoint2DEventPacketGetEventConst(caer_point2d_event_packet packet, int32_t n) -> caer_point2d_event"""
    return _libcaer_wrap.caerPoint2DEventPacketGetEventConst(packet, n)

def caerPoint2DEventGetTimestamp(event):
    """caerPoint2DEventGetTimestamp(caer_point2d_event event) -> int32_t"""
    return _libcaer_wrap.caerPoint2DEventGetTimestamp(event)

def caerPoint2DEventGetTimestamp64(event, packet):
    """caerPoint2DEventGetTimestamp64(caer_point2d_event event, caer_point2d_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerPoint2DEventGetTimestamp64(event, packet)

def caerPoint2DEventSetTimestamp(event, timestamp):
    """caerPoint2DEventSetTimestamp(caer_point2d_event event, int32_t timestamp)"""
    return _libcaer_wrap.caerPoint2DEventSetTimestamp(event, timestamp)

def caerPoint2DEventIsValid(event):
    """caerPoint2DEventIsValid(caer_point2d_event event) -> bool"""
    return _libcaer_wrap.caerPoint2DEventIsValid(event)

def caerPoint2DEventValidate(event, packet):
    """caerPoint2DEventValidate(caer_point2d_event event, caer_point2d_event_packet packet)"""
    return _libcaer_wrap.caerPoint2DEventValidate(event, packet)

def caerPoint2DEventInvalidate(event, packet):
    """caerPoint2DEventInvalidate(caer_point2d_event event, caer_point2d_event_packet packet)"""
    return _libcaer_wrap.caerPoint2DEventInvalidate(event, packet)

def caerPoint2DEventGetType(event):
    """caerPoint2DEventGetType(caer_point2d_event event) -> uint8_t"""
    return _libcaer_wrap.caerPoint2DEventGetType(event)

def caerPoint2DEventSetType(event, type):
    """caerPoint2DEventSetType(caer_point2d_event event, uint8_t type)"""
    return _libcaer_wrap.caerPoint2DEventSetType(event, type)

def caerPoint2DEventGetScale(event):
    """caerPoint2DEventGetScale(caer_point2d_event event) -> int8_t"""
    return _libcaer_wrap.caerPoint2DEventGetScale(event)

def caerPoint2DEventSetScale(event, scale):
    """caerPoint2DEventSetScale(caer_point2d_event event, int8_t scale)"""
    return _libcaer_wrap.caerPoint2DEventSetScale(event, scale)

def caerPoint2DEventGetX(event):
    """caerPoint2DEventGetX(caer_point2d_event event) -> float"""
    return _libcaer_wrap.caerPoint2DEventGetX(event)

def caerPoint2DEventSetX(event, x):
    """caerPoint2DEventSetX(caer_point2d_event event, float x)"""
    return _libcaer_wrap.caerPoint2DEventSetX(event, x)

def caerPoint2DEventGetY(event):
    """caerPoint2DEventGetY(caer_point2d_event event) -> float"""
    return _libcaer_wrap.caerPoint2DEventGetY(event)

def caerPoint2DEventSetY(event, y):
    """caerPoint2DEventSetY(caer_point2d_event event, float y)"""
    return _libcaer_wrap.caerPoint2DEventSetY(event, y)
POINT3D_TYPE_SHIFT = _libcaer_wrap.POINT3D_TYPE_SHIFT
POINT3D_TYPE_MASK = _libcaer_wrap.POINT3D_TYPE_MASK
POINT3D_SCALE_SHIFT = _libcaer_wrap.POINT3D_SCALE_SHIFT
POINT3D_SCALE_MASK = _libcaer_wrap.POINT3D_SCALE_MASK
class caer_point3d_event(_object):
    """Proxy of C caer_point3d_event struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_point3d_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_point3d_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["info"] = _libcaer_wrap.caer_point3d_event_info_set
    __swig_getmethods__["info"] = _libcaer_wrap.caer_point3d_event_info_get
    if _newclass:
        info = _swig_property(_libcaer_wrap.caer_point3d_event_info_get, _libcaer_wrap.caer_point3d_event_info_set)
    __swig_setmethods__["x"] = _libcaer_wrap.caer_point3d_event_x_set
    __swig_getmethods__["x"] = _libcaer_wrap.caer_point3d_event_x_get
    if _newclass:
        x = _swig_property(_libcaer_wrap.caer_point3d_event_x_get, _libcaer_wrap.caer_point3d_event_x_set)
    __swig_setmethods__["y"] = _libcaer_wrap.caer_point3d_event_y_set
    __swig_getmethods__["y"] = _libcaer_wrap.caer_point3d_event_y_get
    if _newclass:
        y = _swig_property(_libcaer_wrap.caer_point3d_event_y_get, _libcaer_wrap.caer_point3d_event_y_set)
    __swig_setmethods__["z"] = _libcaer_wrap.caer_point3d_event_z_set
    __swig_getmethods__["z"] = _libcaer_wrap.caer_point3d_event_z_get
    if _newclass:
        z = _swig_property(_libcaer_wrap.caer_point3d_event_z_get, _libcaer_wrap.caer_point3d_event_z_set)
    __swig_setmethods__["timestamp"] = _libcaer_wrap.caer_point3d_event_timestamp_set
    __swig_getmethods__["timestamp"] = _libcaer_wrap.caer_point3d_event_timestamp_get
    if _newclass:
        timestamp = _swig_property(_libcaer_wrap.caer_point3d_event_timestamp_get, _libcaer_wrap.caer_point3d_event_timestamp_set)

    def __init__(self):
        """__init__(caer_point3d_event self) -> caer_point3d_event"""
        this = _libcaer_wrap.new_caer_point3d_event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_point3d_event
    def __del__(self):
        return None
caer_point3d_event_swigregister = _libcaer_wrap.caer_point3d_event_swigregister
caer_point3d_event_swigregister(caer_point3d_event)

class caer_point3d_event_packet(_object):
    """Proxy of C caer_point3d_event_packet struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_point3d_event_packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_point3d_event_packet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packetHeader"] = _libcaer_wrap.caer_point3d_event_packet_packetHeader_set
    __swig_getmethods__["packetHeader"] = _libcaer_wrap.caer_point3d_event_packet_packetHeader_get
    if _newclass:
        packetHeader = _swig_property(_libcaer_wrap.caer_point3d_event_packet_packetHeader_get, _libcaer_wrap.caer_point3d_event_packet_packetHeader_set)
    __swig_getmethods__["events"] = _libcaer_wrap.caer_point3d_event_packet_events_get
    if _newclass:
        events = _swig_property(_libcaer_wrap.caer_point3d_event_packet_events_get)

    def __init__(self):
        """__init__(caer_point3d_event_packet self) -> caer_point3d_event_packet"""
        this = _libcaer_wrap.new_caer_point3d_event_packet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_point3d_event_packet
    def __del__(self):
        return None
caer_point3d_event_packet_swigregister = _libcaer_wrap.caer_point3d_event_packet_swigregister
caer_point3d_event_packet_swigregister(caer_point3d_event_packet)


def caerPoint3DEventPacketAllocate(eventCapacity, eventSource, tsOverflow):
    """caerPoint3DEventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow) -> caer_point3d_event_packet"""
    return _libcaer_wrap.caerPoint3DEventPacketAllocate(eventCapacity, eventSource, tsOverflow)

def caerPoint3DEventPacketFromPacketHeader(header):
    """caerPoint3DEventPacketFromPacketHeader(caer_event_packet_header header) -> caer_point3d_event_packet"""
    return _libcaer_wrap.caerPoint3DEventPacketFromPacketHeader(header)

def caerPoint3DEventPacketFromPacketHeaderConst(header):
    """caerPoint3DEventPacketFromPacketHeaderConst(caer_event_packet_header header) -> caer_point3d_event_packet"""
    return _libcaer_wrap.caerPoint3DEventPacketFromPacketHeaderConst(header)

def caerPoint3DEventPacketGetEvent(packet, n):
    """caerPoint3DEventPacketGetEvent(caer_point3d_event_packet packet, int32_t n) -> caer_point3d_event"""
    return _libcaer_wrap.caerPoint3DEventPacketGetEvent(packet, n)

def caerPoint3DEventPacketGetEventConst(packet, n):
    """caerPoint3DEventPacketGetEventConst(caer_point3d_event_packet packet, int32_t n) -> caer_point3d_event"""
    return _libcaer_wrap.caerPoint3DEventPacketGetEventConst(packet, n)

def caerPoint3DEventGetTimestamp(event):
    """caerPoint3DEventGetTimestamp(caer_point3d_event event) -> int32_t"""
    return _libcaer_wrap.caerPoint3DEventGetTimestamp(event)

def caerPoint3DEventGetTimestamp64(event, packet):
    """caerPoint3DEventGetTimestamp64(caer_point3d_event event, caer_point3d_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerPoint3DEventGetTimestamp64(event, packet)

def caerPoint3DEventSetTimestamp(event, timestamp):
    """caerPoint3DEventSetTimestamp(caer_point3d_event event, int32_t timestamp)"""
    return _libcaer_wrap.caerPoint3DEventSetTimestamp(event, timestamp)

def caerPoint3DEventIsValid(event):
    """caerPoint3DEventIsValid(caer_point3d_event event) -> bool"""
    return _libcaer_wrap.caerPoint3DEventIsValid(event)

def caerPoint3DEventValidate(event, packet):
    """caerPoint3DEventValidate(caer_point3d_event event, caer_point3d_event_packet packet)"""
    return _libcaer_wrap.caerPoint3DEventValidate(event, packet)

def caerPoint3DEventInvalidate(event, packet):
    """caerPoint3DEventInvalidate(caer_point3d_event event, caer_point3d_event_packet packet)"""
    return _libcaer_wrap.caerPoint3DEventInvalidate(event, packet)

def caerPoint3DEventGetType(event):
    """caerPoint3DEventGetType(caer_point3d_event event) -> uint8_t"""
    return _libcaer_wrap.caerPoint3DEventGetType(event)

def caerPoint3DEventSetType(event, type):
    """caerPoint3DEventSetType(caer_point3d_event event, uint8_t type)"""
    return _libcaer_wrap.caerPoint3DEventSetType(event, type)

def caerPoint3DEventGetScale(event):
    """caerPoint3DEventGetScale(caer_point3d_event event) -> int8_t"""
    return _libcaer_wrap.caerPoint3DEventGetScale(event)

def caerPoint3DEventSetScale(event, scale):
    """caerPoint3DEventSetScale(caer_point3d_event event, int8_t scale)"""
    return _libcaer_wrap.caerPoint3DEventSetScale(event, scale)

def caerPoint3DEventGetX(event):
    """caerPoint3DEventGetX(caer_point3d_event event) -> float"""
    return _libcaer_wrap.caerPoint3DEventGetX(event)

def caerPoint3DEventSetX(event, x):
    """caerPoint3DEventSetX(caer_point3d_event event, float x)"""
    return _libcaer_wrap.caerPoint3DEventSetX(event, x)

def caerPoint3DEventGetY(event):
    """caerPoint3DEventGetY(caer_point3d_event event) -> float"""
    return _libcaer_wrap.caerPoint3DEventGetY(event)

def caerPoint3DEventSetY(event, y):
    """caerPoint3DEventSetY(caer_point3d_event event, float y)"""
    return _libcaer_wrap.caerPoint3DEventSetY(event, y)

def caerPoint3DEventGetZ(event):
    """caerPoint3DEventGetZ(caer_point3d_event event) -> float"""
    return _libcaer_wrap.caerPoint3DEventGetZ(event)

def caerPoint3DEventSetZ(event, z):
    """caerPoint3DEventSetZ(caer_point3d_event event, float z)"""
    return _libcaer_wrap.caerPoint3DEventSetZ(event, z)
POINT4D_TYPE_SHIFT = _libcaer_wrap.POINT4D_TYPE_SHIFT
POINT4D_TYPE_MASK = _libcaer_wrap.POINT4D_TYPE_MASK
POINT4D_SCALE_SHIFT = _libcaer_wrap.POINT4D_SCALE_SHIFT
POINT4D_SCALE_MASK = _libcaer_wrap.POINT4D_SCALE_MASK
class caer_point4d_event(_object):
    """Proxy of C caer_point4d_event struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_point4d_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_point4d_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["info"] = _libcaer_wrap.caer_point4d_event_info_set
    __swig_getmethods__["info"] = _libcaer_wrap.caer_point4d_event_info_get
    if _newclass:
        info = _swig_property(_libcaer_wrap.caer_point4d_event_info_get, _libcaer_wrap.caer_point4d_event_info_set)
    __swig_setmethods__["x"] = _libcaer_wrap.caer_point4d_event_x_set
    __swig_getmethods__["x"] = _libcaer_wrap.caer_point4d_event_x_get
    if _newclass:
        x = _swig_property(_libcaer_wrap.caer_point4d_event_x_get, _libcaer_wrap.caer_point4d_event_x_set)
    __swig_setmethods__["y"] = _libcaer_wrap.caer_point4d_event_y_set
    __swig_getmethods__["y"] = _libcaer_wrap.caer_point4d_event_y_get
    if _newclass:
        y = _swig_property(_libcaer_wrap.caer_point4d_event_y_get, _libcaer_wrap.caer_point4d_event_y_set)
    __swig_setmethods__["z"] = _libcaer_wrap.caer_point4d_event_z_set
    __swig_getmethods__["z"] = _libcaer_wrap.caer_point4d_event_z_get
    if _newclass:
        z = _swig_property(_libcaer_wrap.caer_point4d_event_z_get, _libcaer_wrap.caer_point4d_event_z_set)
    __swig_setmethods__["w"] = _libcaer_wrap.caer_point4d_event_w_set
    __swig_getmethods__["w"] = _libcaer_wrap.caer_point4d_event_w_get
    if _newclass:
        w = _swig_property(_libcaer_wrap.caer_point4d_event_w_get, _libcaer_wrap.caer_point4d_event_w_set)
    __swig_setmethods__["timestamp"] = _libcaer_wrap.caer_point4d_event_timestamp_set
    __swig_getmethods__["timestamp"] = _libcaer_wrap.caer_point4d_event_timestamp_get
    if _newclass:
        timestamp = _swig_property(_libcaer_wrap.caer_point4d_event_timestamp_get, _libcaer_wrap.caer_point4d_event_timestamp_set)

    def __init__(self):
        """__init__(caer_point4d_event self) -> caer_point4d_event"""
        this = _libcaer_wrap.new_caer_point4d_event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_point4d_event
    def __del__(self):
        return None
caer_point4d_event_swigregister = _libcaer_wrap.caer_point4d_event_swigregister
caer_point4d_event_swigregister(caer_point4d_event)

class caer_point4d_event_packet(_object):
    """Proxy of C caer_point4d_event_packet struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_point4d_event_packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_point4d_event_packet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packetHeader"] = _libcaer_wrap.caer_point4d_event_packet_packetHeader_set
    __swig_getmethods__["packetHeader"] = _libcaer_wrap.caer_point4d_event_packet_packetHeader_get
    if _newclass:
        packetHeader = _swig_property(_libcaer_wrap.caer_point4d_event_packet_packetHeader_get, _libcaer_wrap.caer_point4d_event_packet_packetHeader_set)
    __swig_getmethods__["events"] = _libcaer_wrap.caer_point4d_event_packet_events_get
    if _newclass:
        events = _swig_property(_libcaer_wrap.caer_point4d_event_packet_events_get)

    def __init__(self):
        """__init__(caer_point4d_event_packet self) -> caer_point4d_event_packet"""
        this = _libcaer_wrap.new_caer_point4d_event_packet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_point4d_event_packet
    def __del__(self):
        return None
caer_point4d_event_packet_swigregister = _libcaer_wrap.caer_point4d_event_packet_swigregister
caer_point4d_event_packet_swigregister(caer_point4d_event_packet)


def caerPoint4DEventPacketAllocate(eventCapacity, eventSource, tsOverflow):
    """caerPoint4DEventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow) -> caer_point4d_event_packet"""
    return _libcaer_wrap.caerPoint4DEventPacketAllocate(eventCapacity, eventSource, tsOverflow)

def caerPoint4DEventPacketFromPacketHeader(header):
    """caerPoint4DEventPacketFromPacketHeader(caer_event_packet_header header) -> caer_point4d_event_packet"""
    return _libcaer_wrap.caerPoint4DEventPacketFromPacketHeader(header)

def caerPoint4DEventPacketFromPacketHeaderConst(header):
    """caerPoint4DEventPacketFromPacketHeaderConst(caer_event_packet_header header) -> caer_point4d_event_packet"""
    return _libcaer_wrap.caerPoint4DEventPacketFromPacketHeaderConst(header)

def caerPoint4DEventPacketGetEvent(packet, n):
    """caerPoint4DEventPacketGetEvent(caer_point4d_event_packet packet, int32_t n) -> caer_point4d_event"""
    return _libcaer_wrap.caerPoint4DEventPacketGetEvent(packet, n)

def caerPoint4DEventPacketGetEventConst(packet, n):
    """caerPoint4DEventPacketGetEventConst(caer_point4d_event_packet packet, int32_t n) -> caer_point4d_event"""
    return _libcaer_wrap.caerPoint4DEventPacketGetEventConst(packet, n)

def caerPoint4DEventGetTimestamp(event):
    """caerPoint4DEventGetTimestamp(caer_point4d_event event) -> int32_t"""
    return _libcaer_wrap.caerPoint4DEventGetTimestamp(event)

def caerPoint4DEventGetTimestamp64(event, packet):
    """caerPoint4DEventGetTimestamp64(caer_point4d_event event, caer_point4d_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerPoint4DEventGetTimestamp64(event, packet)

def caerPoint4DEventSetTimestamp(event, timestamp):
    """caerPoint4DEventSetTimestamp(caer_point4d_event event, int32_t timestamp)"""
    return _libcaer_wrap.caerPoint4DEventSetTimestamp(event, timestamp)

def caerPoint4DEventIsValid(event):
    """caerPoint4DEventIsValid(caer_point4d_event event) -> bool"""
    return _libcaer_wrap.caerPoint4DEventIsValid(event)

def caerPoint4DEventValidate(event, packet):
    """caerPoint4DEventValidate(caer_point4d_event event, caer_point4d_event_packet packet)"""
    return _libcaer_wrap.caerPoint4DEventValidate(event, packet)

def caerPoint4DEventInvalidate(event, packet):
    """caerPoint4DEventInvalidate(caer_point4d_event event, caer_point4d_event_packet packet)"""
    return _libcaer_wrap.caerPoint4DEventInvalidate(event, packet)

def caerPoint4DEventGetType(event):
    """caerPoint4DEventGetType(caer_point4d_event event) -> uint8_t"""
    return _libcaer_wrap.caerPoint4DEventGetType(event)

def caerPoint4DEventSetType(event, type):
    """caerPoint4DEventSetType(caer_point4d_event event, uint8_t type)"""
    return _libcaer_wrap.caerPoint4DEventSetType(event, type)

def caerPoint4DEventGetScale(event):
    """caerPoint4DEventGetScale(caer_point4d_event event) -> int8_t"""
    return _libcaer_wrap.caerPoint4DEventGetScale(event)

def caerPoint4DEventSetScale(event, scale):
    """caerPoint4DEventSetScale(caer_point4d_event event, int8_t scale)"""
    return _libcaer_wrap.caerPoint4DEventSetScale(event, scale)

def caerPoint4DEventGetX(event):
    """caerPoint4DEventGetX(caer_point4d_event event) -> float"""
    return _libcaer_wrap.caerPoint4DEventGetX(event)

def caerPoint4DEventSetX(event, x):
    """caerPoint4DEventSetX(caer_point4d_event event, float x)"""
    return _libcaer_wrap.caerPoint4DEventSetX(event, x)

def caerPoint4DEventGetY(event):
    """caerPoint4DEventGetY(caer_point4d_event event) -> float"""
    return _libcaer_wrap.caerPoint4DEventGetY(event)

def caerPoint4DEventSetY(event, y):
    """caerPoint4DEventSetY(caer_point4d_event event, float y)"""
    return _libcaer_wrap.caerPoint4DEventSetY(event, y)

def caerPoint4DEventGetZ(event):
    """caerPoint4DEventGetZ(caer_point4d_event event) -> float"""
    return _libcaer_wrap.caerPoint4DEventGetZ(event)

def caerPoint4DEventSetZ(event, z):
    """caerPoint4DEventSetZ(caer_point4d_event event, float z)"""
    return _libcaer_wrap.caerPoint4DEventSetZ(event, z)

def caerPoint4DEventGetW(event):
    """caerPoint4DEventGetW(caer_point4d_event event) -> float"""
    return _libcaer_wrap.caerPoint4DEventGetW(event)

def caerPoint4DEventSetW(event, w):
    """caerPoint4DEventSetW(caer_point4d_event event, float w)"""
    return _libcaer_wrap.caerPoint4DEventSetW(event, w)
POLARITY_SHIFT = _libcaer_wrap.POLARITY_SHIFT
POLARITY_MASK = _libcaer_wrap.POLARITY_MASK
POLARITY_Y_ADDR_SHIFT = _libcaer_wrap.POLARITY_Y_ADDR_SHIFT
POLARITY_Y_ADDR_MASK = _libcaer_wrap.POLARITY_Y_ADDR_MASK
POLARITY_X_ADDR_SHIFT = _libcaer_wrap.POLARITY_X_ADDR_SHIFT
POLARITY_X_ADDR_MASK = _libcaer_wrap.POLARITY_X_ADDR_MASK
class caer_polarity_event(_object):
    """Proxy of C caer_polarity_event struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_polarity_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_polarity_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _libcaer_wrap.caer_polarity_event_data_set
    __swig_getmethods__["data"] = _libcaer_wrap.caer_polarity_event_data_get
    if _newclass:
        data = _swig_property(_libcaer_wrap.caer_polarity_event_data_get, _libcaer_wrap.caer_polarity_event_data_set)
    __swig_setmethods__["timestamp"] = _libcaer_wrap.caer_polarity_event_timestamp_set
    __swig_getmethods__["timestamp"] = _libcaer_wrap.caer_polarity_event_timestamp_get
    if _newclass:
        timestamp = _swig_property(_libcaer_wrap.caer_polarity_event_timestamp_get, _libcaer_wrap.caer_polarity_event_timestamp_set)

    def __init__(self):
        """__init__(caer_polarity_event self) -> caer_polarity_event"""
        this = _libcaer_wrap.new_caer_polarity_event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_polarity_event
    def __del__(self):
        return None
caer_polarity_event_swigregister = _libcaer_wrap.caer_polarity_event_swigregister
caer_polarity_event_swigregister(caer_polarity_event)

class caer_polarity_event_packet(_object):
    """Proxy of C caer_polarity_event_packet struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_polarity_event_packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_polarity_event_packet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packetHeader"] = _libcaer_wrap.caer_polarity_event_packet_packetHeader_set
    __swig_getmethods__["packetHeader"] = _libcaer_wrap.caer_polarity_event_packet_packetHeader_get
    if _newclass:
        packetHeader = _swig_property(_libcaer_wrap.caer_polarity_event_packet_packetHeader_get, _libcaer_wrap.caer_polarity_event_packet_packetHeader_set)
    __swig_getmethods__["events"] = _libcaer_wrap.caer_polarity_event_packet_events_get
    if _newclass:
        events = _swig_property(_libcaer_wrap.caer_polarity_event_packet_events_get)

    def __init__(self):
        """__init__(caer_polarity_event_packet self) -> caer_polarity_event_packet"""
        this = _libcaer_wrap.new_caer_polarity_event_packet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_polarity_event_packet
    def __del__(self):
        return None
caer_polarity_event_packet_swigregister = _libcaer_wrap.caer_polarity_event_packet_swigregister
caer_polarity_event_packet_swigregister(caer_polarity_event_packet)


def caerPolarityEventPacketAllocate(eventCapacity, eventSource, tsOverflow):
    """caerPolarityEventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow) -> caer_polarity_event_packet"""
    return _libcaer_wrap.caerPolarityEventPacketAllocate(eventCapacity, eventSource, tsOverflow)

def caerPolarityEventPacketFromPacketHeader(header):
    """caerPolarityEventPacketFromPacketHeader(caer_event_packet_header header) -> caer_polarity_event_packet"""
    return _libcaer_wrap.caerPolarityEventPacketFromPacketHeader(header)

def caerPolarityEventPacketFromPacketHeaderConst(header):
    """caerPolarityEventPacketFromPacketHeaderConst(caer_event_packet_header header) -> caer_polarity_event_packet"""
    return _libcaer_wrap.caerPolarityEventPacketFromPacketHeaderConst(header)

def caerPolarityEventPacketGetEvent(packet, n):
    """caerPolarityEventPacketGetEvent(caer_polarity_event_packet packet, int32_t n) -> caer_polarity_event"""
    return _libcaer_wrap.caerPolarityEventPacketGetEvent(packet, n)

def caerPolarityEventPacketGetEventConst(packet, n):
    """caerPolarityEventPacketGetEventConst(caer_polarity_event_packet packet, int32_t n) -> caer_polarity_event"""
    return _libcaer_wrap.caerPolarityEventPacketGetEventConst(packet, n)

def caerPolarityEventGetTimestamp(event):
    """caerPolarityEventGetTimestamp(caer_polarity_event event) -> int32_t"""
    return _libcaer_wrap.caerPolarityEventGetTimestamp(event)

def caerPolarityEventGetTimestamp64(event, packet):
    """caerPolarityEventGetTimestamp64(caer_polarity_event event, caer_polarity_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerPolarityEventGetTimestamp64(event, packet)

def caerPolarityEventSetTimestamp(event, timestamp):
    """caerPolarityEventSetTimestamp(caer_polarity_event event, int32_t timestamp)"""
    return _libcaer_wrap.caerPolarityEventSetTimestamp(event, timestamp)

def caerPolarityEventIsValid(event):
    """caerPolarityEventIsValid(caer_polarity_event event) -> bool"""
    return _libcaer_wrap.caerPolarityEventIsValid(event)

def caerPolarityEventValidate(event, packet):
    """caerPolarityEventValidate(caer_polarity_event event, caer_polarity_event_packet packet)"""
    return _libcaer_wrap.caerPolarityEventValidate(event, packet)

def caerPolarityEventInvalidate(event, packet):
    """caerPolarityEventInvalidate(caer_polarity_event event, caer_polarity_event_packet packet)"""
    return _libcaer_wrap.caerPolarityEventInvalidate(event, packet)

def caerPolarityEventGetPolarity(event):
    """caerPolarityEventGetPolarity(caer_polarity_event event) -> bool"""
    return _libcaer_wrap.caerPolarityEventGetPolarity(event)

def caerPolarityEventSetPolarity(event, polarity):
    """caerPolarityEventSetPolarity(caer_polarity_event event, bool polarity)"""
    return _libcaer_wrap.caerPolarityEventSetPolarity(event, polarity)

def caerPolarityEventGetY(event):
    """caerPolarityEventGetY(caer_polarity_event event) -> uint16_t"""
    return _libcaer_wrap.caerPolarityEventGetY(event)

def caerPolarityEventSetY(event, yAddress):
    """caerPolarityEventSetY(caer_polarity_event event, uint16_t yAddress)"""
    return _libcaer_wrap.caerPolarityEventSetY(event, yAddress)

def caerPolarityEventGetX(event):
    """caerPolarityEventGetX(caer_polarity_event event) -> uint16_t"""
    return _libcaer_wrap.caerPolarityEventGetX(event)

def caerPolarityEventSetX(event, xAddress):
    """caerPolarityEventSetX(caer_polarity_event event, uint16_t xAddress)"""
    return _libcaer_wrap.caerPolarityEventSetX(event, xAddress)
SAMPLE_TYPE_SHIFT = _libcaer_wrap.SAMPLE_TYPE_SHIFT
SAMPLE_TYPE_MASK = _libcaer_wrap.SAMPLE_TYPE_MASK
SAMPLE_SHIFT = _libcaer_wrap.SAMPLE_SHIFT
SAMPLE_MASK = _libcaer_wrap.SAMPLE_MASK
class caer_sample_event(_object):
    """Proxy of C caer_sample_event struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_sample_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_sample_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _libcaer_wrap.caer_sample_event_data_set
    __swig_getmethods__["data"] = _libcaer_wrap.caer_sample_event_data_get
    if _newclass:
        data = _swig_property(_libcaer_wrap.caer_sample_event_data_get, _libcaer_wrap.caer_sample_event_data_set)
    __swig_setmethods__["timestamp"] = _libcaer_wrap.caer_sample_event_timestamp_set
    __swig_getmethods__["timestamp"] = _libcaer_wrap.caer_sample_event_timestamp_get
    if _newclass:
        timestamp = _swig_property(_libcaer_wrap.caer_sample_event_timestamp_get, _libcaer_wrap.caer_sample_event_timestamp_set)

    def __init__(self):
        """__init__(caer_sample_event self) -> caer_sample_event"""
        this = _libcaer_wrap.new_caer_sample_event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_sample_event
    def __del__(self):
        return None
caer_sample_event_swigregister = _libcaer_wrap.caer_sample_event_swigregister
caer_sample_event_swigregister(caer_sample_event)

class caer_sample_event_packet(_object):
    """Proxy of C caer_sample_event_packet struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_sample_event_packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_sample_event_packet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packetHeader"] = _libcaer_wrap.caer_sample_event_packet_packetHeader_set
    __swig_getmethods__["packetHeader"] = _libcaer_wrap.caer_sample_event_packet_packetHeader_get
    if _newclass:
        packetHeader = _swig_property(_libcaer_wrap.caer_sample_event_packet_packetHeader_get, _libcaer_wrap.caer_sample_event_packet_packetHeader_set)
    __swig_getmethods__["events"] = _libcaer_wrap.caer_sample_event_packet_events_get
    if _newclass:
        events = _swig_property(_libcaer_wrap.caer_sample_event_packet_events_get)

    def __init__(self):
        """__init__(caer_sample_event_packet self) -> caer_sample_event_packet"""
        this = _libcaer_wrap.new_caer_sample_event_packet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_sample_event_packet
    def __del__(self):
        return None
caer_sample_event_packet_swigregister = _libcaer_wrap.caer_sample_event_packet_swigregister
caer_sample_event_packet_swigregister(caer_sample_event_packet)


def caerSampleEventPacketAllocate(eventCapacity, eventSource, tsOverflow):
    """caerSampleEventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow) -> caer_sample_event_packet"""
    return _libcaer_wrap.caerSampleEventPacketAllocate(eventCapacity, eventSource, tsOverflow)

def caerSampleEventPacketFromPacketHeader(header):
    """caerSampleEventPacketFromPacketHeader(caer_event_packet_header header) -> caer_sample_event_packet"""
    return _libcaer_wrap.caerSampleEventPacketFromPacketHeader(header)

def caerSampleEventPacketFromPacketHeaderConst(header):
    """caerSampleEventPacketFromPacketHeaderConst(caer_event_packet_header header) -> caer_sample_event_packet"""
    return _libcaer_wrap.caerSampleEventPacketFromPacketHeaderConst(header)

def caerSampleEventPacketGetEvent(packet, n):
    """caerSampleEventPacketGetEvent(caer_sample_event_packet packet, int32_t n) -> caer_sample_event"""
    return _libcaer_wrap.caerSampleEventPacketGetEvent(packet, n)

def caerSampleEventPacketGetEventConst(packet, n):
    """caerSampleEventPacketGetEventConst(caer_sample_event_packet packet, int32_t n) -> caer_sample_event"""
    return _libcaer_wrap.caerSampleEventPacketGetEventConst(packet, n)

def caerSampleEventGetTimestamp(event):
    """caerSampleEventGetTimestamp(caer_sample_event event) -> int32_t"""
    return _libcaer_wrap.caerSampleEventGetTimestamp(event)

def caerSampleEventGetTimestamp64(event, packet):
    """caerSampleEventGetTimestamp64(caer_sample_event event, caer_sample_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerSampleEventGetTimestamp64(event, packet)

def caerSampleEventSetTimestamp(event, timestamp):
    """caerSampleEventSetTimestamp(caer_sample_event event, int32_t timestamp)"""
    return _libcaer_wrap.caerSampleEventSetTimestamp(event, timestamp)

def caerSampleEventIsValid(event):
    """caerSampleEventIsValid(caer_sample_event event) -> bool"""
    return _libcaer_wrap.caerSampleEventIsValid(event)

def caerSampleEventValidate(event, packet):
    """caerSampleEventValidate(caer_sample_event event, caer_sample_event_packet packet)"""
    return _libcaer_wrap.caerSampleEventValidate(event, packet)

def caerSampleEventInvalidate(event, packet):
    """caerSampleEventInvalidate(caer_sample_event event, caer_sample_event_packet packet)"""
    return _libcaer_wrap.caerSampleEventInvalidate(event, packet)

def caerSampleEventGetType(event):
    """caerSampleEventGetType(caer_sample_event event) -> uint8_t"""
    return _libcaer_wrap.caerSampleEventGetType(event)

def caerSampleEventSetType(event, type):
    """caerSampleEventSetType(caer_sample_event event, uint8_t type)"""
    return _libcaer_wrap.caerSampleEventSetType(event, type)

def caerSampleEventGetSample(event):
    """caerSampleEventGetSample(caer_sample_event event) -> uint32_t"""
    return _libcaer_wrap.caerSampleEventGetSample(event)

def caerSampleEventSetSample(event, sample):
    """caerSampleEventSetSample(caer_sample_event event, uint32_t sample)"""
    return _libcaer_wrap.caerSampleEventSetSample(event, sample)
SPECIAL_TYPE_SHIFT = _libcaer_wrap.SPECIAL_TYPE_SHIFT
SPECIAL_TYPE_MASK = _libcaer_wrap.SPECIAL_TYPE_MASK
SPECIAL_DATA_SHIFT = _libcaer_wrap.SPECIAL_DATA_SHIFT
SPECIAL_DATA_MASK = _libcaer_wrap.SPECIAL_DATA_MASK
TIMESTAMP_WRAP = _libcaer_wrap.TIMESTAMP_WRAP
TIMESTAMP_RESET = _libcaer_wrap.TIMESTAMP_RESET
EXTERNAL_INPUT_RISING_EDGE = _libcaer_wrap.EXTERNAL_INPUT_RISING_EDGE
EXTERNAL_INPUT_FALLING_EDGE = _libcaer_wrap.EXTERNAL_INPUT_FALLING_EDGE
EXTERNAL_INPUT_PULSE = _libcaer_wrap.EXTERNAL_INPUT_PULSE
DVS_ROW_ONLY = _libcaer_wrap.DVS_ROW_ONLY
EXTERNAL_INPUT1_RISING_EDGE = _libcaer_wrap.EXTERNAL_INPUT1_RISING_EDGE
EXTERNAL_INPUT1_FALLING_EDGE = _libcaer_wrap.EXTERNAL_INPUT1_FALLING_EDGE
EXTERNAL_INPUT1_PULSE = _libcaer_wrap.EXTERNAL_INPUT1_PULSE
EXTERNAL_INPUT2_RISING_EDGE = _libcaer_wrap.EXTERNAL_INPUT2_RISING_EDGE
EXTERNAL_INPUT2_FALLING_EDGE = _libcaer_wrap.EXTERNAL_INPUT2_FALLING_EDGE
EXTERNAL_INPUT2_PULSE = _libcaer_wrap.EXTERNAL_INPUT2_PULSE
EXTERNAL_GENERATOR_RISING_EDGE = _libcaer_wrap.EXTERNAL_GENERATOR_RISING_EDGE
EXTERNAL_GENERATOR_FALLING_EDGE = _libcaer_wrap.EXTERNAL_GENERATOR_FALLING_EDGE
APS_FRAME_START = _libcaer_wrap.APS_FRAME_START
APS_FRAME_END = _libcaer_wrap.APS_FRAME_END
APS_EXPOSURE_START = _libcaer_wrap.APS_EXPOSURE_START
APS_EXPOSURE_END = _libcaer_wrap.APS_EXPOSURE_END
class caer_special_event(_object):
    """Proxy of C caer_special_event struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_special_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_special_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _libcaer_wrap.caer_special_event_data_set
    __swig_getmethods__["data"] = _libcaer_wrap.caer_special_event_data_get
    if _newclass:
        data = _swig_property(_libcaer_wrap.caer_special_event_data_get, _libcaer_wrap.caer_special_event_data_set)
    __swig_setmethods__["timestamp"] = _libcaer_wrap.caer_special_event_timestamp_set
    __swig_getmethods__["timestamp"] = _libcaer_wrap.caer_special_event_timestamp_get
    if _newclass:
        timestamp = _swig_property(_libcaer_wrap.caer_special_event_timestamp_get, _libcaer_wrap.caer_special_event_timestamp_set)

    def __init__(self):
        """__init__(caer_special_event self) -> caer_special_event"""
        this = _libcaer_wrap.new_caer_special_event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_special_event
    def __del__(self):
        return None
caer_special_event_swigregister = _libcaer_wrap.caer_special_event_swigregister
caer_special_event_swigregister(caer_special_event)

class caer_special_event_packet(_object):
    """Proxy of C caer_special_event_packet struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_special_event_packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_special_event_packet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packetHeader"] = _libcaer_wrap.caer_special_event_packet_packetHeader_set
    __swig_getmethods__["packetHeader"] = _libcaer_wrap.caer_special_event_packet_packetHeader_get
    if _newclass:
        packetHeader = _swig_property(_libcaer_wrap.caer_special_event_packet_packetHeader_get, _libcaer_wrap.caer_special_event_packet_packetHeader_set)
    __swig_getmethods__["events"] = _libcaer_wrap.caer_special_event_packet_events_get
    if _newclass:
        events = _swig_property(_libcaer_wrap.caer_special_event_packet_events_get)

    def __init__(self):
        """__init__(caer_special_event_packet self) -> caer_special_event_packet"""
        this = _libcaer_wrap.new_caer_special_event_packet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_special_event_packet
    def __del__(self):
        return None
caer_special_event_packet_swigregister = _libcaer_wrap.caer_special_event_packet_swigregister
caer_special_event_packet_swigregister(caer_special_event_packet)


def caerSpecialEventPacketAllocate(eventCapacity, eventSource, tsOverflow):
    """caerSpecialEventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow) -> caer_special_event_packet"""
    return _libcaer_wrap.caerSpecialEventPacketAllocate(eventCapacity, eventSource, tsOverflow)

def caerSpecialEventPacketFromPacketHeader(header):
    """caerSpecialEventPacketFromPacketHeader(caer_event_packet_header header) -> caer_special_event_packet"""
    return _libcaer_wrap.caerSpecialEventPacketFromPacketHeader(header)

def caerSpecialEventPacketFromPacketHeaderConst(header):
    """caerSpecialEventPacketFromPacketHeaderConst(caer_event_packet_header header) -> caer_special_event_packet"""
    return _libcaer_wrap.caerSpecialEventPacketFromPacketHeaderConst(header)

def caerSpecialEventPacketGetEvent(packet, n):
    """caerSpecialEventPacketGetEvent(caer_special_event_packet packet, int32_t n) -> caer_special_event"""
    return _libcaer_wrap.caerSpecialEventPacketGetEvent(packet, n)

def caerSpecialEventPacketGetEventConst(packet, n):
    """caerSpecialEventPacketGetEventConst(caer_special_event_packet packet, int32_t n) -> caer_special_event"""
    return _libcaer_wrap.caerSpecialEventPacketGetEventConst(packet, n)

def caerSpecialEventGetTimestamp(event):
    """caerSpecialEventGetTimestamp(caer_special_event event) -> int32_t"""
    return _libcaer_wrap.caerSpecialEventGetTimestamp(event)

def caerSpecialEventGetTimestamp64(event, packet):
    """caerSpecialEventGetTimestamp64(caer_special_event event, caer_special_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerSpecialEventGetTimestamp64(event, packet)

def caerSpecialEventSetTimestamp(event, timestamp):
    """caerSpecialEventSetTimestamp(caer_special_event event, int32_t timestamp)"""
    return _libcaer_wrap.caerSpecialEventSetTimestamp(event, timestamp)

def caerSpecialEventIsValid(event):
    """caerSpecialEventIsValid(caer_special_event event) -> bool"""
    return _libcaer_wrap.caerSpecialEventIsValid(event)

def caerSpecialEventValidate(event, packet):
    """caerSpecialEventValidate(caer_special_event event, caer_special_event_packet packet)"""
    return _libcaer_wrap.caerSpecialEventValidate(event, packet)

def caerSpecialEventInvalidate(event, packet):
    """caerSpecialEventInvalidate(caer_special_event event, caer_special_event_packet packet)"""
    return _libcaer_wrap.caerSpecialEventInvalidate(event, packet)

def caerSpecialEventGetType(event):
    """caerSpecialEventGetType(caer_special_event event) -> uint8_t"""
    return _libcaer_wrap.caerSpecialEventGetType(event)

def caerSpecialEventSetType(event, type):
    """caerSpecialEventSetType(caer_special_event event, uint8_t type)"""
    return _libcaer_wrap.caerSpecialEventSetType(event, type)

def caerSpecialEventGetData(event):
    """caerSpecialEventGetData(caer_special_event event) -> uint32_t"""
    return _libcaer_wrap.caerSpecialEventGetData(event)

def caerSpecialEventSetData(event, data):
    """caerSpecialEventSetData(caer_special_event event, uint32_t data)"""
    return _libcaer_wrap.caerSpecialEventSetData(event, data)

def caerSpecialEventPacketFindEventByType(packet, type):
    """caerSpecialEventPacketFindEventByType(caer_special_event_packet packet, uint8_t type) -> caer_special_event"""
    return _libcaer_wrap.caerSpecialEventPacketFindEventByType(packet, type)

def caerSpecialEventPacketFindEventByTypeConst(packet, type):
    """caerSpecialEventPacketFindEventByTypeConst(caer_special_event_packet packet, uint8_t type) -> caer_special_event"""
    return _libcaer_wrap.caerSpecialEventPacketFindEventByTypeConst(packet, type)

def caerSpecialEventPacketFindValidEventByType(packet, type):
    """caerSpecialEventPacketFindValidEventByType(caer_special_event_packet packet, uint8_t type) -> caer_special_event"""
    return _libcaer_wrap.caerSpecialEventPacketFindValidEventByType(packet, type)

def caerSpecialEventPacketFindValidEventByTypeConst(packet, type):
    """caerSpecialEventPacketFindValidEventByTypeConst(caer_special_event_packet packet, uint8_t type) -> caer_special_event"""
    return _libcaer_wrap.caerSpecialEventPacketFindValidEventByTypeConst(packet, type)
SPIKE_SOURCE_CORE_ID_SHIFT = _libcaer_wrap.SPIKE_SOURCE_CORE_ID_SHIFT
SPIKE_SOURCE_CORE_ID_MASK = _libcaer_wrap.SPIKE_SOURCE_CORE_ID_MASK
SPIKE_CHIP_ID_SHIFT = _libcaer_wrap.SPIKE_CHIP_ID_SHIFT
SPIKE_CHIP_ID_MASK = _libcaer_wrap.SPIKE_CHIP_ID_MASK
SPIKE_NEURON_ID_SHIFT = _libcaer_wrap.SPIKE_NEURON_ID_SHIFT
SPIKE_NEURON_ID_MASK = _libcaer_wrap.SPIKE_NEURON_ID_MASK
class caer_spike_event(_object):
    """Proxy of C caer_spike_event struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_spike_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_spike_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _libcaer_wrap.caer_spike_event_data_set
    __swig_getmethods__["data"] = _libcaer_wrap.caer_spike_event_data_get
    if _newclass:
        data = _swig_property(_libcaer_wrap.caer_spike_event_data_get, _libcaer_wrap.caer_spike_event_data_set)
    __swig_setmethods__["timestamp"] = _libcaer_wrap.caer_spike_event_timestamp_set
    __swig_getmethods__["timestamp"] = _libcaer_wrap.caer_spike_event_timestamp_get
    if _newclass:
        timestamp = _swig_property(_libcaer_wrap.caer_spike_event_timestamp_get, _libcaer_wrap.caer_spike_event_timestamp_set)

    def __init__(self):
        """__init__(caer_spike_event self) -> caer_spike_event"""
        this = _libcaer_wrap.new_caer_spike_event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_spike_event
    def __del__(self):
        return None
caer_spike_event_swigregister = _libcaer_wrap.caer_spike_event_swigregister
caer_spike_event_swigregister(caer_spike_event)

class caer_spike_event_packet(_object):
    """Proxy of C caer_spike_event_packet struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_spike_event_packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_spike_event_packet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packetHeader"] = _libcaer_wrap.caer_spike_event_packet_packetHeader_set
    __swig_getmethods__["packetHeader"] = _libcaer_wrap.caer_spike_event_packet_packetHeader_get
    if _newclass:
        packetHeader = _swig_property(_libcaer_wrap.caer_spike_event_packet_packetHeader_get, _libcaer_wrap.caer_spike_event_packet_packetHeader_set)
    __swig_getmethods__["events"] = _libcaer_wrap.caer_spike_event_packet_events_get
    if _newclass:
        events = _swig_property(_libcaer_wrap.caer_spike_event_packet_events_get)

    def __init__(self):
        """__init__(caer_spike_event_packet self) -> caer_spike_event_packet"""
        this = _libcaer_wrap.new_caer_spike_event_packet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_spike_event_packet
    def __del__(self):
        return None
caer_spike_event_packet_swigregister = _libcaer_wrap.caer_spike_event_packet_swigregister
caer_spike_event_packet_swigregister(caer_spike_event_packet)


def caerSpikeEventPacketAllocate(eventCapacity, eventSource, tsOverflow):
    """caerSpikeEventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow) -> caer_spike_event_packet"""
    return _libcaer_wrap.caerSpikeEventPacketAllocate(eventCapacity, eventSource, tsOverflow)

def caerSpikeEventPacketFromPacketHeader(header):
    """caerSpikeEventPacketFromPacketHeader(caer_event_packet_header header) -> caer_spike_event_packet"""
    return _libcaer_wrap.caerSpikeEventPacketFromPacketHeader(header)

def caerSpikeEventPacketFromPacketHeaderConst(header):
    """caerSpikeEventPacketFromPacketHeaderConst(caer_event_packet_header header) -> caer_spike_event_packet"""
    return _libcaer_wrap.caerSpikeEventPacketFromPacketHeaderConst(header)

def caerSpikeEventPacketGetEvent(packet, n):
    """caerSpikeEventPacketGetEvent(caer_spike_event_packet packet, int32_t n) -> caer_spike_event"""
    return _libcaer_wrap.caerSpikeEventPacketGetEvent(packet, n)

def caerSpikeEventPacketGetEventConst(packet, n):
    """caerSpikeEventPacketGetEventConst(caer_spike_event_packet packet, int32_t n) -> caer_spike_event"""
    return _libcaer_wrap.caerSpikeEventPacketGetEventConst(packet, n)

def caerSpikeEventGetTimestamp(event):
    """caerSpikeEventGetTimestamp(caer_spike_event event) -> int32_t"""
    return _libcaer_wrap.caerSpikeEventGetTimestamp(event)

def caerSpikeEventGetTimestamp64(event, packet):
    """caerSpikeEventGetTimestamp64(caer_spike_event event, caer_spike_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerSpikeEventGetTimestamp64(event, packet)

def caerSpikeEventSetTimestamp(event, timestamp):
    """caerSpikeEventSetTimestamp(caer_spike_event event, int32_t timestamp)"""
    return _libcaer_wrap.caerSpikeEventSetTimestamp(event, timestamp)

def caerSpikeEventIsValid(event):
    """caerSpikeEventIsValid(caer_spike_event event) -> bool"""
    return _libcaer_wrap.caerSpikeEventIsValid(event)

def caerSpikeEventValidate(event, packet):
    """caerSpikeEventValidate(caer_spike_event event, caer_spike_event_packet packet)"""
    return _libcaer_wrap.caerSpikeEventValidate(event, packet)

def caerSpikeEventInvalidate(event, packet):
    """caerSpikeEventInvalidate(caer_spike_event event, caer_spike_event_packet packet)"""
    return _libcaer_wrap.caerSpikeEventInvalidate(event, packet)

def caerSpikeEventGetSourceCoreID(event):
    """caerSpikeEventGetSourceCoreID(caer_spike_event event) -> uint8_t"""
    return _libcaer_wrap.caerSpikeEventGetSourceCoreID(event)

def caerSpikeEventSetSourceCoreID(event, sourceCoreID):
    """caerSpikeEventSetSourceCoreID(caer_spike_event event, uint8_t sourceCoreID)"""
    return _libcaer_wrap.caerSpikeEventSetSourceCoreID(event, sourceCoreID)

def caerSpikeEventGetChipID(event):
    """caerSpikeEventGetChipID(caer_spike_event event) -> uint8_t"""
    return _libcaer_wrap.caerSpikeEventGetChipID(event)

def caerSpikeEventSetChipID(event, chipID):
    """caerSpikeEventSetChipID(caer_spike_event event, uint8_t chipID)"""
    return _libcaer_wrap.caerSpikeEventSetChipID(event, chipID)

def caerSpikeEventGetNeuronID(event):
    """caerSpikeEventGetNeuronID(caer_spike_event event) -> uint32_t"""
    return _libcaer_wrap.caerSpikeEventGetNeuronID(event)

def caerSpikeEventSetNeuronID(event, neuronID):
    """caerSpikeEventSetNeuronID(caer_spike_event event, uint32_t neuronID)"""
    return _libcaer_wrap.caerSpikeEventSetNeuronID(event, neuronID)
class caer_filter_dvs_pixel(_object):
    """Proxy of C caer_filter_dvs_pixel struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caer_filter_dvs_pixel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caer_filter_dvs_pixel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _libcaer_wrap.caer_filter_dvs_pixel_x_set
    __swig_getmethods__["x"] = _libcaer_wrap.caer_filter_dvs_pixel_x_get
    if _newclass:
        x = _swig_property(_libcaer_wrap.caer_filter_dvs_pixel_x_get, _libcaer_wrap.caer_filter_dvs_pixel_x_set)
    __swig_setmethods__["y"] = _libcaer_wrap.caer_filter_dvs_pixel_y_set
    __swig_getmethods__["y"] = _libcaer_wrap.caer_filter_dvs_pixel_y_get
    if _newclass:
        y = _swig_property(_libcaer_wrap.caer_filter_dvs_pixel_y_get, _libcaer_wrap.caer_filter_dvs_pixel_y_set)

    def __init__(self):
        """__init__(caer_filter_dvs_pixel self) -> caer_filter_dvs_pixel"""
        this = _libcaer_wrap.new_caer_filter_dvs_pixel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcaer_wrap.delete_caer_filter_dvs_pixel
    def __del__(self):
        return None
caer_filter_dvs_pixel_swigregister = _libcaer_wrap.caer_filter_dvs_pixel_swigregister
caer_filter_dvs_pixel_swigregister(caer_filter_dvs_pixel)


def caerFilterDVSNoiseInitialize(sizeX, sizeY):
    """caerFilterDVSNoiseInitialize(uint16_t sizeX, uint16_t sizeY) -> caerFilterDVSNoise"""
    return _libcaer_wrap.caerFilterDVSNoiseInitialize(sizeX, sizeY)

def caerFilterDVSNoiseDestroy(noiseFilter):
    """caerFilterDVSNoiseDestroy(caerFilterDVSNoise noiseFilter)"""
    return _libcaer_wrap.caerFilterDVSNoiseDestroy(noiseFilter)

def caerFilterDVSNoiseApply(noiseFilter, polarity):
    """caerFilterDVSNoiseApply(caerFilterDVSNoise noiseFilter, caer_polarity_event_packet polarity)"""
    return _libcaer_wrap.caerFilterDVSNoiseApply(noiseFilter, polarity)

def caerFilterDVSNoiseConfigSet(noiseFilter, paramAddr, param):
    """caerFilterDVSNoiseConfigSet(caerFilterDVSNoise noiseFilter, uint8_t paramAddr, uint64_t param) -> bool"""
    return _libcaer_wrap.caerFilterDVSNoiseConfigSet(noiseFilter, paramAddr, param)

def caerFilterDVSNoiseGetHotPixels(noiseFilter, hotPixels):
    """caerFilterDVSNoiseGetHotPixels(caerFilterDVSNoise noiseFilter, caerFilterDVSPixel * hotPixels) -> ssize_t"""
    return _libcaer_wrap.caerFilterDVSNoiseGetHotPixels(noiseFilter, hotPixels)
CAER_FILTER_DVS_HOTPIXEL_LEARN = _libcaer_wrap.CAER_FILTER_DVS_HOTPIXEL_LEARN
CAER_FILTER_DVS_HOTPIXEL_TIME = _libcaer_wrap.CAER_FILTER_DVS_HOTPIXEL_TIME
CAER_FILTER_DVS_HOTPIXEL_COUNT = _libcaer_wrap.CAER_FILTER_DVS_HOTPIXEL_COUNT
CAER_FILTER_DVS_HOTPIXEL_ENABLE = _libcaer_wrap.CAER_FILTER_DVS_HOTPIXEL_ENABLE
CAER_FILTER_DVS_HOTPIXEL_STATISTICS = _libcaer_wrap.CAER_FILTER_DVS_HOTPIXEL_STATISTICS
CAER_FILTER_DVS_BACKGROUND_ACTIVITY_ENABLE = _libcaer_wrap.CAER_FILTER_DVS_BACKGROUND_ACTIVITY_ENABLE
CAER_FILTER_DVS_BACKGROUND_ACTIVITY_TIME = _libcaer_wrap.CAER_FILTER_DVS_BACKGROUND_ACTIVITY_TIME
CAER_FILTER_DVS_BACKGROUND_ACTIVITY_STATISTICS = _libcaer_wrap.CAER_FILTER_DVS_BACKGROUND_ACTIVITY_STATISTICS
CAER_FILTER_DVS_REFRACTORY_PERIOD_ENABLE = _libcaer_wrap.CAER_FILTER_DVS_REFRACTORY_PERIOD_ENABLE
CAER_FILTER_DVS_REFRACTORY_PERIOD_TIME = _libcaer_wrap.CAER_FILTER_DVS_REFRACTORY_PERIOD_TIME
CAER_FILTER_DVS_REFRACTORY_PERIOD_STATISTICS = _libcaer_wrap.CAER_FILTER_DVS_REFRACTORY_PERIOD_STATISTICS
CAER_FILTER_DVS_LOG_LEVEL = _libcaer_wrap.CAER_FILTER_DVS_LOG_LEVEL
CAER_FILTER_DVS_RESET = _libcaer_wrap.CAER_FILTER_DVS_RESET
CAER_FILTER_DVS_BACKGROUND_ACTIVITY_TWO_LEVELS = _libcaer_wrap.CAER_FILTER_DVS_BACKGROUND_ACTIVITY_TWO_LEVELS
CAER_FILTER_DVS_BACKGROUND_ACTIVITY_SUPPORT_MIN = _libcaer_wrap.CAER_FILTER_DVS_BACKGROUND_ACTIVITY_SUPPORT_MIN
CAER_FILTER_DVS_BACKGROUND_ACTIVITY_SUPPORT_MAX = _libcaer_wrap.CAER_FILTER_DVS_BACKGROUND_ACTIVITY_SUPPORT_MAX
CAER_FILTER_DVS_BACKGROUND_ACTIVITY_CHECK_POLARITY = _libcaer_wrap.CAER_FILTER_DVS_BACKGROUND_ACTIVITY_CHECK_POLARITY

def caerDeviceClose(handle):
    """caerDeviceClose(caerDeviceHandle handle) -> bool"""
    return _libcaer_wrap.caerDeviceClose(handle)

def caerDeviceConfigGet(*args):
    """
    caerDeviceConfigGet(caerDeviceHandle handle, int8_t modAddr, uint8_t paramAddr, uint32_t * param) -> bool
    caerDeviceConfigGet(caerDeviceHandle handle, int8_t modAddr, uint8_t paramAddr) -> uint32_t
    """
    return _libcaer_wrap.caerDeviceConfigGet(*args)

def caerDeviceConfigGet64(*args):
    """
    caerDeviceConfigGet64(caerDeviceHandle handle, int8_t modAddr, uint8_t paramAddr, uint64_t * param) -> bool
    caerDeviceConfigGet64(caerDeviceHandle handle, int8_t modAddr, uint8_t paramAddr) -> uint64_t
    """
    return _libcaer_wrap.caerDeviceConfigGet64(*args)

def caerFilterDVSNoiseConfigGet(*args):
    """
    caerFilterDVSNoiseConfigGet(caerFilterDVSNoise noiseFilter, uint8_t paramAddr, uint64_t * param) -> bool
    caerFilterDVSNoiseConfigGet(caerFilterDVSNoise noiseFilter, uint8_t paramAddr) -> uint64_t
    """
    return _libcaer_wrap.caerFilterDVSNoiseConfigGet(*args)

def cf_n_type_set(coarse_value, fine_value):
    """cf_n_type_set(uint8_t coarse_value, uint8_t fine_value) -> uint16_t"""
    return _libcaer_wrap.cf_n_type_set(coarse_value, fine_value)

def cf_p_type_set(coarse_value, fine_value):
    """cf_p_type_set(uint8_t coarse_value, uint8_t fine_value) -> uint16_t"""
    return _libcaer_wrap.cf_p_type_set(coarse_value, fine_value)

def cf_n_type_cas_set(coarse_value, fine_value):
    """cf_n_type_cas_set(uint8_t coarse_value, uint8_t fine_value) -> uint16_t"""
    return _libcaer_wrap.cf_n_type_cas_set(coarse_value, fine_value)

def cf_n_type_off_set(coarse_value, fine_value):
    """cf_n_type_off_set(uint8_t coarse_value, uint8_t fine_value) -> uint16_t"""
    return _libcaer_wrap.cf_n_type_off_set(coarse_value, fine_value)

def cf_p_type_off_set(coarse_value, fine_value):
    """cf_p_type_off_set(uint8_t coarse_value, uint8_t fine_value) -> uint16_t"""
    return _libcaer_wrap.cf_p_type_off_set(coarse_value, fine_value)

def shiftsource_set(ref, reg, opmode):
    """shiftsource_set(uint8_t ref, uint8_t reg, enum caer_bias_shiftedsource_operating_mode opmode) -> uint16_t"""
    return _libcaer_wrap.shiftsource_set(ref, reg, opmode)

def vdac_set(volt, curr):
    """vdac_set(uint8_t volt, uint8_t curr) -> uint16_t"""
    return _libcaer_wrap.vdac_set(volt, curr)

def set_dynapse_bias(biasAddress, coarseValue, fineValue, biasHigh, typeNormal, sexN, enabled):
    """set_dynapse_bias(uint8_t biasAddress, uint8_t coarseValue, uint8_t fineValue, bool biasHigh, bool typeNormal, bool sexN, bool enabled) -> uint32_t"""
    return _libcaer_wrap.set_dynapse_bias(biasAddress, coarseValue, fineValue, biasHigh, typeNormal, sexN, enabled)

def device_discover(deviceType, devices_vec):
    """device_discover(int16_t deviceType, uint64_t * devices_vec)"""
    return _libcaer_wrap.device_discover(deviceType, devices_vec)

def get_polarity_event(event_packet, event_vec):
    """get_polarity_event(caer_polarity_event_packet event_packet, int64_t * event_vec)"""
    return _libcaer_wrap.get_polarity_event(event_packet, event_vec)

def get_special_event(event_packet, event_vec):
    """get_special_event(caer_special_event_packet event_packet, int64_t * event_vec)"""
    return _libcaer_wrap.get_special_event(event_packet, event_vec)

def get_imu6_event(event_packet, event_vec_f):
    """get_imu6_event(caer_imu6_event_packet event_packet, float * event_vec_f)"""
    return _libcaer_wrap.get_imu6_event(event_packet, event_vec_f)

def get_spike_event(event_packet, event_vec):
    """get_spike_event(caer_spike_event_packet event_packet, int64_t * event_vec)"""
    return _libcaer_wrap.get_spike_event(event_packet, event_vec)

def get_frame_event(event, frame_event_vec):
    """get_frame_event(caer_frame_event event, uint8_t * frame_event_vec)"""
    return _libcaer_wrap.get_frame_event(event, frame_event_vec)

def apply_dvs_noise_filter(noiseFilter, polarity):
    """apply_dvs_noise_filter(caerFilterDVSNoise noiseFilter, caer_polarity_event_packet polarity) -> caer_polarity_event_packet"""
    return _libcaer_wrap.apply_dvs_noise_filter(noiseFilter, polarity)

def get_filtered_polarity_event(event_packet, event_vec):
    """get_filtered_polarity_event(caer_polarity_event_packet event_packet, int64_t * event_vec)"""
    return _libcaer_wrap.get_filtered_polarity_event(event_packet, event_vec)

def get_hot_pixels(noiseFilter, hotpix_vec, hotpix_len):
    """get_hot_pixels(caerFilterDVSNoise noiseFilter, uint16_t * hotpix_vec, int32_t hotpix_len)"""
    return _libcaer_wrap.get_hot_pixels(noiseFilter, hotpix_vec, hotpix_len)

def get_num_hot_pixels(noiseFilter):
    """get_num_hot_pixels(caerFilterDVSNoise noiseFilter) -> int64_t"""
    return _libcaer_wrap.get_num_hot_pixels(noiseFilter)
# This file is compatible with both classic and new-style classes.


