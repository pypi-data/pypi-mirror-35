# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_faspmanager2')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_faspmanager2')
    _faspmanager2 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_faspmanager2', [dirname(__file__)])
        except ImportError:
            import _faspmanager2
            return _faspmanager2
        try:
            _mod = imp.load_module('_faspmanager2', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _faspmanager2 = swig_import_helper()
    del swig_import_helper
else:
    import _faspmanager2
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x



def startTransfer(xferId, configuration, transferSpec, pyCallbackObj):
    """
    Initiates transfer.
     xferId - The transfer GUID
     configuration - JSON string with additional configuration parameters
     transferSpec - JSON string with transfer parameters
     pyCallbackObj - ITransferListener implementation
    """
    return _faspmanager2.startTransfer(xferId, configuration, transferSpec, pyCallbackObj)

def isRunning(xferId):
    """
    Checks if transfer is in progress
     xferId - The transfer GUID
     Returns status of the transfer
    """
    return _faspmanager2.isRunning(xferId)

def stopTransfer(xferId):
    """
    Stops transfer
     xferId - The transfer GUID
     Returns whether successful or not
    """
    return _faspmanager2.stopTransfer(xferId)

def modifyTransfer(xferId, option, value):
    """
    Changes the transfer rate plus adaptive polycy while transfer is running.
     xferId - The transfer GUID
     option - running transfer options:
       rate_policy = 0,
       target_rate_kbps = 1,
       min_rate_kbps = 2,
       priority = 3,  
       CTRL_PAUSE = 4,
       CTRL_RESUME = 5,
     value - value of the corresponding option
     Returns whether successful or not
    """
    return _faspmanager2.modifyTransfer(xferId, option, value)

def configureLogLocation(logPath):
    """
    Sets log location
     logPath - log path
     Returns whether successful or not
    """
    return _faspmanager2.configureLogLocation(logPath)

def configureAsperaLocation(asperaPath):
    """
    Sets package location
     asperaPath - package path
     Returns whether successful or not
    """
    return _faspmanager2.configureAsperaLocation(asperaPath)
class ITransferListener(_object):
    """Callback wrapper interface"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ITransferListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ITransferListener, name)
    __repr__ = _swig_repr

    def transferReporter(self, xferId, message):
        """
        Callback function
        xferId - The transfer GUID
        message - contains ransfer status updates
        """
        return _faspmanager2.ITransferListener_transferReporter(self, xferId, message)

    __swig_destroy__ = _faspmanager2.delete_ITransferListener
    __del__ = lambda self: None

    def __init__(self):
        """Class constructor."""
        if self.__class__ == ITransferListener:
            _self = None
        else:
            _self = self
        this = _faspmanager2.new_ITransferListener(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _faspmanager2.disown_ITransferListener(self)
        return weakref_proxy(self)
ITransferListener_swigregister = _faspmanager2.ITransferListener_swigregister
ITransferListener_swigregister(ITransferListener)

# This file is compatible with both classic and new-style classes.


