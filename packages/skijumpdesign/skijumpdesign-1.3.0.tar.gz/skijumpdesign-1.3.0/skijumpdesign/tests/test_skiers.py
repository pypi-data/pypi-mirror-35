import os
from math import isclose

import numpy as np
import matplotlib.pyplot as plt

from ..skiers import Skier
from ..surfaces import Surface, FlatSurface, TakeoffSurface
from ..utils import vel2speed


def test_skier(plot=False):

    mass = 75.0
    area = 0.5
    drag_coeff = 1.0
    friction_coeff = 0.3
    air_density = 0.85

    skier = Skier(mass, area, drag_coeff, friction_coeff)

    assert isclose(skier.mass, mass)
    assert isclose(skier.area, area)
    assert isclose(skier.drag_coeff, drag_coeff)
    assert isclose(skier.friction_coeff, friction_coeff)

    vel = -10.0

    assert isclose(skier.drag_force(vel), 1 / 2 * vel**2 * air_density *
                   drag_coeff * area)

    assert isclose(skier.friction_force(vel, slope=10.0),
                   friction_coeff * mass * 9.81 * np.cos(np.tan(10.0)))

    takeoff_pos = (4.0, 3.0)  # x, y
    takeoff_vel = (1.0, 10.0)  # vx, vy

    surf = Surface(np.linspace(0.0, 10.0, num=10), np.zeros(10))

    flight_traj = skier.fly_to(surf, takeoff_pos, takeoff_vel)

    if plot:
        ax = surf.plot()
        flight_traj.plot(ax=ax)

    landing_pos = tuple(flight_traj.pos[-1])
    landing_vel = tuple(flight_traj.vel[-1])

    takeoff_speed, takeoff_angle = vel2speed(*takeoff_vel)

    takeoff_speed2, landing_vel2 = skier.speed_to_land_at(landing_pos,
                                                          takeoff_pos,
                                                          takeoff_angle,
                                                          surf=surf)

    assert isclose(takeoff_speed, takeoff_speed2, rel_tol=1e-5)
    assert isclose(landing_vel[0], landing_vel2[0], rel_tol=1e-5)
    assert isclose(landing_vel[1], landing_vel2[1], rel_tol=1e-5)


def test_slide_on():

    x = np.linspace(0, 20)
    y = -1.0 * x + 10.0

    x = np.linspace(0, 6 * np.pi)
    y = np.sin(x)

    surf = Surface(x, y)

    mass = 75.0
    area = 0.5
    drag_coeff = 1.0
    friction_coeff = 0.3

    skier = Skier(mass, area, drag_coeff, friction_coeff)

    traj = skier.slide_on(surf, 50.0)

    expected_times = \
    np.array([0.        , 0.00280209, 0.00560419, 0.00840628, 0.01120837,
              0.01401047, 0.01681256, 0.01961465, 0.02241675, 0.02521884,
              0.02802093, 0.03082303, 0.03362512, 0.03642721, 0.0392293 ,
              0.0420314 , 0.04483349, 0.04763558, 0.05043768, 0.05323977,
              0.05604186, 0.05884396, 0.06164605, 0.06444814, 0.06725024,
              0.07005233, 0.07285442, 0.07565652, 0.07845861, 0.0812607 ,
              0.0840628 , 0.08686489, 0.08966698, 0.09246908, 0.09527117,
              0.09807326, 0.10087535, 0.10367745, 0.10647954, 0.10928163,
              0.11208373, 0.11488582, 0.11768791, 0.12049001, 0.1232921 ,
              0.12609419, 0.12889629, 0.13169838, 0.13450047, 0.13730257,
              0.14010466, 0.14290675, 0.14570885, 0.14851094, 0.15131303,
              0.15411513, 0.15691722, 0.15971931, 0.1625214 , 0.1653235 ,
              0.16812559, 0.17092768, 0.17372978, 0.17653187, 0.17933396,
              0.18213606, 0.18493815, 0.18774024, 0.19054234, 0.19334443,
              0.19614652, 0.19894862, 0.20175071, 0.2045528 , 0.2073549 ,
              0.21015699, 0.21295908, 0.21576118, 0.21856327, 0.22136536,
              0.22416745, 0.22696955, 0.22977164, 0.23257373, 0.23537583,
              0.23817792, 0.24098001, 0.24378211, 0.2465842 , 0.24938629,
              0.25218839, 0.25499048, 0.25779257, 0.26059467, 0.26339676,
              0.26619885, 0.26900095, 0.27180304, 0.27460513, 0.27740723,
              0.28020932, 0.28301141, 0.28581351, 0.2886156 , 0.29141769,
              0.29421978, 0.29702188, 0.29982397, 0.30262606, 0.30542816,
              0.30823025, 0.31103234, 0.31383444, 0.31663653, 0.31943862,
              0.32224072, 0.32504281, 0.3278449 , 0.330647  , 0.33344909,
              0.33625118, 0.33905328, 0.34185537, 0.34465746, 0.34745956,
              0.35026165, 0.35306374, 0.35586583, 0.35866793, 0.36147002,
              0.36427211, 0.36707421, 0.3698763 , 0.37267839, 0.37548049,
              0.37828258])

    expected_x = \
    np.array([ 0.        ,  0.09783236,  0.19774996,  0.2998896 ,  0.40486527,
            0.51341937,  0.62641738,  0.74484785,  0.86982241,  1.00257576,
            1.14446567,  1.29697298,  1.46163332,  1.63697143,  1.81816233,
            2.00108283,  2.18255028,  2.36032259,  2.53309824,  2.70051625,
            2.86315618,  3.02253817,  3.1811229 ,  3.34063555,  3.50158361,
            3.66613498,  3.83553835,  4.01008182,  4.18909288,  4.37093842,
            4.55302474,  4.73179751,  4.90274184,  5.06053609,  5.20572725,
            5.3409536 ,  5.4672687 ,  5.58578538,  5.69767579,  5.80417137,
            5.90656287,  6.00620034,  6.10449313,  6.20290991,  6.30258345,
            6.4026368 ,  6.50337675,  6.60545312,  6.70961338,  6.81670266,
            6.92766373,  7.04353701,  7.16546057,  7.29467012,  7.43249903,
            7.58037833,  7.73980896,  7.90975665,  8.08570847,  8.26377356,
            8.44090593,  8.61490453,  8.78441316,  8.94892053,  9.10876025,
            9.26511083,  9.41999566,  9.57500969,  9.73057789,  9.88868611,
            10.05066165, 10.21711396, 10.38793467, 10.56229753, 10.73865849,
            10.91475561, 11.08760915, 11.2535215 , 11.4080772 , 11.54701746,
            11.67557657, 11.79658976, 11.9110521 , 12.01994458, 12.12423415,
            12.2248737 , 12.32280204, 12.41894395, 12.51421013, 12.60949724,
            12.70568786, 12.80365053, 12.90347057, 13.00493194, 13.10931124,
            13.21784586, 13.33170697, 13.45199949, 13.57976214, 13.7159674 ,
            13.86152154, 14.01726457, 14.18308944, 14.35441593, 14.52758524,
            14.69985837, 14.86922114, 15.03438416, 15.19478283, 15.35057736,
            15.50265276, 15.65261883, 15.80280522, 15.95404983, 16.10722663,
            16.26408828, 16.42555895, 16.59173439, 16.76188189, 16.93444031,
            17.10702003, 17.27638831, 17.43761171, 17.58905949, 17.73108981,
            17.86415683, 17.98881061, 18.1056972 , 18.2155586 , 18.31923277,
            18.41765361, 18.51185099, 18.60295074, 18.69217462, 18.78084038,
            18.8703617 ])

    expected_v = \
    np.array([50.        , 50.18717512, 50.42054674, 50.70324789, 51.05244581,
            51.49369824, 52.06085635, 52.79606475, 53.74976145, 54.98067792,
            56.55583904, 58.55056313, 61.04865052, 63.97977393, 67.06092506,
            70.04584794, 72.74232914, 75.01219785, 76.77132582, 77.98962738,
            78.69105944, 78.9536215 , 78.90935563, 78.71515113, 78.28167531,
            77.42797799, 76.04157953, 74.07930636, 71.56729091, 68.60097168,
            65.34509317, 62.03370595, 58.9701666 , 56.51613812, 54.62331361,
            53.12051833, 51.95883433, 51.09040629, 50.46844148, 50.0472098 ,
            49.78204377, 49.62933849, 49.54655171, 49.49220376, 49.44777286,
            49.4911016 , 49.61777399, 49.81943088, 50.09930808, 50.47223635,
            50.9646414 , 51.61454386, 52.47155935, 53.59689841, 55.06336655,
            56.9553642 , 59.36507623, 62.16118322, 65.06236404, 67.86517713,
            70.4096095 , 72.57907676, 74.3004231 , 75.54392129, 76.32327269,
            76.69560727, 76.76148355, 76.65546355, 76.34578715, 75.70057933,
            74.63057733, 73.09068293, 71.07996248, 68.64164692, 65.86313173,
            62.87597696, 59.85590722, 57.02281169, 54.64074413, 52.96681523,
            51.70625232, 50.70855821, 49.9341195 , 49.34737563, 48.91681886,
            48.61499427, 48.41849978, 48.3079861 , 48.2681568 , 48.28776823,
            48.35962959, 48.4806029 , 48.65121686, 48.89520742, 49.25242108,
            49.76215688, 50.46301207, 51.39288209, 52.58896059, 54.08773945,
            55.92500871, 58.13585666, 60.70421027, 63.38102409, 65.98986504,
            68.39792068, 70.50361974, 72.23663216, 73.55786908, 74.45948284,
            74.96486696, 75.12865618, 75.03681948, 74.78279849, 74.26550229,
            73.35462067, 71.97598541, 70.11157025, 67.79949092, 65.13400512,
            62.26551252, 59.40132506, 56.83622607, 54.65382178, 52.82770812,
            51.32968681, 50.1297654 , 49.19615728, 48.49528166, 47.99176356,
            47.64843385, 47.42632921, 47.28469214, 47.18097097, 47.07081986,
            46.9080988 ])

    np.testing.assert_allclose(expected_times, traj.t, rtol=1e-5)
    np.testing.assert_allclose(expected_x, traj.pos[:, 0], rtol=1e-5)
    np.testing.assert_allclose(expected_v, traj.speed, rtol=1e-5)


def test_slide_on_regression():

    approach_ang = -np.deg2rad(20)  # radians
    approach_len = 20.0  # meters
    takeoff_ang = np.deg2rad(15)

    skier = Skier()

    approach = FlatSurface(approach_ang, approach_len)

    takeoff_entry_speed = skier.end_speed_on(approach)

    expected_speed = 10.92727081007988054750512674218044

    assert isclose(takeoff_entry_speed, expected_speed, rel_tol=1e-16)

    takeoff_entry_vel = skier.end_vel_on(approach)

    # NOTE : Not true regression here because there was a bug in end_vel_on
    # which used tan instead of arctan.
    expected_vx = 10.26827574556135758143682323861867
    expected_vy = -3.7373467286218100547046105930348

    assert isclose(takeoff_entry_vel[0], expected_vx)
    assert isclose(takeoff_entry_vel[1], expected_vy)

    takeoff = TakeoffSurface(skier, approach_ang, takeoff_ang, expected_speed,
                             init_pos=approach.end)

    takeoff_traj = skier.slide_on(takeoff, expected_speed)

    this_dir = os.path.dirname(os.path.realpath(__file__))
    expected_times = np.loadtxt(os.path.join(this_dir, 'slide-on-times.txt'),
                                delimiter=',')
    expected_traj = np.loadtxt(os.path.join(this_dir, 'slide-on-traj.txt'),
                               delimiter=',')

    np.testing.assert_allclose(takeoff_traj.t,
                               expected_times, rtol=1e-16)
    np.testing.assert_allclose(takeoff_traj.pos[:, 0],
                               expected_traj[0], rtol=1e-16)
    np.testing.assert_allclose(takeoff_traj.speed,
                               expected_traj[1], rtol=1e-16)
