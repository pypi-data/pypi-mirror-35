Description: Spotty NVIDIA Docker AMI
Parameters:
  InstanceType:
    Description: Instance type to launch EC2 Spot instance
    Type: String
  ImageName:
    Description: AMI name
    Type: String
  KeyName:
    Description: Key name to get an access o the instance
    Type: AWS::EC2::KeyPair::KeyName
  IgnoreCreateAMIFunction:
    Description: Run an instance without creating an AMI
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
Resources:
  FindBaseAMI:
    Type: Custom::AMI
    Properties:
      ServiceToken: !GetAtt FindBaseAMIFunction.Arn
      Region": !Ref 'AWS::Region'
  FindBaseAMIFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt FindBaseAMILambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          var aws=require("aws-sdk");var response=require('cfn-response');exports.handler=function(event,context){console.log("request received:\n"+JSON.stringify(event));var physicalId=event.PhysicalResourceId;function success(data){data=data||{}
          console.log('SUCCESS:\n',data);return response.send(event,context,response.SUCCESS,data,physicalId)}
          function failed(err){console.log('FAILED:\n',err);return response.send(event,context,response.FAILED,err,physicalId)}
          if(event.RequestType=='Delete'){console.log('Delete request is ignored');return success()}
          var ec2=new aws.EC2({region:event.ResourceProperties.Region});ec2.describeImages({Filters:[{Name:"name",Values:['ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64*']}],Owners:['099720109477']}).promise().then((data)=>{console.log('Number of found images: ',data.Images.length);var images=data.Images;images.sort(function(x,y){return y.Name.localeCompare(x.Name)});var amiId=!1;for(var j=0;j<images.length;j++){if(isBeta(images[j].Name))continue;amiId=images[j].ImageId;break}
          if(!amiId){throw new Error('AMI not found')}
          console.log('Found AMI ID='+amiId)
          physicalId=amiId;success()}).catch((err)=>failed(err))};function isBeta(imageName){return imageName.toLowerCase().indexOf("beta")>-1||imageName.toLowerCase().indexOf(".rc")>-1}
      Runtime: nodejs4.3
      Timeout: 30
  FindBaseAMILambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service:
            - 'lambda.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: FindBaseAMIPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: 'arn:aws:logs:*:*:*'
          - Effect: 'Allow'
            Action:
            - 'ec2:DescribeImages'
            Resource: '*'
  FindBaseAMIFunctionRetention:
    Type: Custom::LogsRetention
    DependsOn: FindBaseAMI
    Properties:
      ServiceToken: !GetAtt SetLogsRetentionFunction.Arn
      LogGroupName: !Join ['', ['/aws/lambda/', !Ref FindBaseAMIFunction]]

  SpotInstance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref SpotInstanceLaunchTemplate
        Version: !GetAtt SpotInstanceLaunchTemplate.LatestVersionNumber

  SpotInstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: !Ref FindBaseAMI
        KeyName: !Ref KeyName
        EbsOptimized: 'false'
        IamInstanceProfile:
          Arn: !GetAtt LogRoleInstanceProfile.Arn
        InstanceInitiatedShutdownBehavior: terminate
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            SpotInstanceType: one-time
            InstanceInterruptionBehavior: terminate
        BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
        UserData:
          'Fn::Base64': !Sub |
            #!/bin/bash -x

            # install CloudFormation tools
            apt-get update
            apt-get -y install python-setuptools
            mkdir aws-cfn-bootstrap-latest
            curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1
            easy_install aws-cfn-bootstrap-latest

            # install CloudWatch agent
            /usr/local/bin/cfn-init \
              --stack ${AWS::StackName} \
              --resource SpotInstanceLaunchTemplate \
              --region ${AWS::Region} \
              -c cwlogs

            # install Docker and goofys
            /usr/local/bin/cfn-init \
              --stack ${AWS::StackName} \
              --resource SpotInstanceLaunchTemplate \
              --region ${AWS::Region} \
              -c init \
              -v

            # send signal to create an AMI
            /usr/local/bin/cfn-signal \
              -e $? \
              --stack ${AWS::StackName} \
              --region ${AWS::Region} \
              --resource InstanceReadyWaitCondition
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          init:
            - init_config
          cwlogs:
            - cwlogs_config
        init_config:
          files:
            /root/init.sh:
              content: !Sub |
                # install Docker
                apt-get update
                apt-get install -y \
                    apt-transport-https \
                    ca-certificates \
                    curl \
                    software-properties-common
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
                add-apt-repository \
                   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
                   $(lsb_release -cs) \
                   stable"
                apt-get update
                apt-get install -y docker-ce

                # add the package repositories
                curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | apt-key add -
                distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
                curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | \
                  tee /etc/apt/sources.list.d/nvidia-docker.list
                apt-get update

                # install nvidia-docker2 and reload the Docker daemon configuration
                apt-get install -y nvidia-384
                apt-get install -y nvidia-docker2
                pkill -SIGHUP dockerd

                # test nvidia-docker
                docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi
                docker rmi $(docker images -q)
              mode: '000755'
              owner: root
              group: root
          commands:
            run_init:
              command: "/bin/bash -xe /root/init.sh"
        cwlogs_config:
          files:
            /tmp/cwlogs/logs.conf:
              content: !Sub |
                [general]
                state_file= /var/awslogs/agent-state

                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = ${SpotInstanceLogGroup}
                log_stream_name = {instance_id}/cloud-init-output.log
                datetime_format = %d/%b/%Y:%H:%M:%S

                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = ${SpotInstanceLogGroup}
                log_stream_name = {instance_id}/cfn-init.log
                datetime_format = %d/%b/%Y:%H:%M:%S
              mode: '000400'
              owner: root
              group: root
            /tmp/cwlogs/run.sh:
              content: !Sub |
                curl https://s3.amazonaws.com//aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O
                chmod +x ./awslogs-agent-setup.py
                ./awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/cwlogs/logs.conf
                systemctl disable awslogs
              mode: '000400'
              owner: root
              group: root
          commands:
            run_cw_agent:
              command: '/bin/bash -xe /tmp/cwlogs/run.sh'
  SpotInstanceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
  LogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: LogRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:Create*
            - logs:PutLogEvents
            - s3:GetObject
            Resource:
            - arn:aws:logs:*:*:*
            - arn:aws:s3:::*
  LogRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - Ref: LogRole

  InstanceReadyWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: SpotInstance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
  CreateAMI:
    Type: Custom::AMI
    DependsOn: InstanceReadyWaitCondition
    Properties:
      ServiceToken: !GetAtt CreateAMIFunction.Arn
      InstanceId: !Ref SpotInstance
      ImageName: !Ref ImageName
      IgnoreFunction: !Ref IgnoreCreateAMIFunction
  CreateAMIFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt CreateAMILambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          var AWS=require('aws-sdk');var response=require('cfn-response');exports.handler=function(event,context){console.log("Request received:\n",JSON.stringify(event));var physicalId=event.PhysicalResourceId;function success(data){data=data||{}
          console.log('SUCCESS:\n',data);return response.send(event,context,response.SUCCESS,data,physicalId)}
          function failed(err){console.log('FAILED:\n',err);return response.send(event,context,response.FAILED,err,physicalId)}
          if(event.ResourceProperties.IgnoreFunction=='true'){console.log('AMI not created (the function is ignored)');return success()}
          var ec2=new AWS.EC2({region:event.ResourceProperties.Region});if(event.RequestType=='Create'||event.RequestType=='Update'){var instanceId=event.ResourceProperties.InstanceId;if(!instanceId){return failed('InstanceId required')}
          var imageName=event.ResourceProperties.ImageName;if(!imageName){return failed('ImageName required')}
          ec2.createImage({InstanceId:instanceId,Name:imageName}).promise().then((data)=>{console.log('Creating image:\n',JSON.stringify(data));physicalId=data.ImageId;var tagsPromise=ec2.createTags({Resources:[data.ImageId],Tags:[{Key:'spotty:stack-id',Value:event.StackId}]}).promise()
          var imageAvailablePromise=ec2.waitFor('imageAvailable',{ImageIds:[data.ImageId]}).promise()
          return Promise.all([tagsPromise,imageAvailablePromise])}).then((data)=>{console.log('Image tagged:\n',JSON.stringify(data[0]));console.log('Image available:\n',JSON.stringify(data[1]));console.log('Terminating the instance...');return ec2.terminateInstances({InstanceIds:[instanceId]}).promise()}).then((data)=>{console.log('"terminateInstances" Response:\n',JSON.stringify(data));success()}).catch((err)=>failed(err))}else if(event.RequestType=='Delete'){if(!physicalId){console.log('AMI ID not specified')
          return success()}else if(physicalId.indexOf('ami-')!==0){console.log('Physical ID is not an AMI ID')
          return success()}
          console.log('Searching AMI with ID='+physicalId);ec2.describeImages({ImageIds:[physicalId]}).promise().then((data)=>{if(!data.Images.length){throw new Error('No images found')}
          console.log('"describeImages" response:\n',data);return ec2.deregisterImage({ImageId:physicalId}).promise()}).then((data)=>{console.log('Image deregistered:\n',data);return ec2.describeSnapshots({Filters:[{Name:'description',Values:['*'+physicalId+'*']}]}).promise()}).then((data)=>{console.log('"describeSnapshots" response:\n',data);if(!data.Snapshots.length){throw new Error('No snapshots found')}
          return ec2.deleteSnapshot({SnapshotId:data.Snapshots[0].SnapshotId}).promise()}).then((data)=>{console.log('Snapshot deleted:\n',data);success()}).catch((err)=>failed(err))}}
      Runtime: nodejs4.3
      Timeout: 300
  CreateAMILambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
      - PolicyName: EC2Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeImages'
              - 'ec2:CreateImage'
              - 'ec2:DeregisterImage'
              - 'ec2:DescribeSnapshots'
              - 'ec2:DeleteSnapshot'
              - 'ec2:TerminateInstances'
              - 'ec2:CreateTags'
              Resource: ['*']
  CreateAMIFunctionRetention:
    Type: Custom::LogsRetention
    DependsOn: CreateAMI
    Properties:
      ServiceToken: !GetAtt SetLogsRetentionFunction.Arn
      LogGroupName: !Join ['', ['/aws/lambda/', !Ref CreateAMIFunction]]

  # function to set logs retention for a log group to 1 day (for lambdas by default they never expire)
  SetLogsRetentionFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt SetLogsRetentionLambdaExecutionRole.Arn
      Runtime: nodejs4.3
      Timeout: 30
      Code:
        ZipFile: !Sub |
          var aws=require("aws-sdk");var response=require('cfn-response');exports.handler=function(event,context){console.log("request received:\n"+JSON.stringify(event));var physicalId=event.PhysicalResourceId;function success(data){data=data||{}
          console.log('SUCCESS:\n',data);return response.send(event,context,response.SUCCESS,data,physicalId)}
          function failed(err){console.log('FAILED:\n',err);return response.send(event,context,response.FAILED,err,physicalId)}
          if(event.RequestType!=='Create'){console.log('Non-create request is ignored');return success()}
          var logGroupName=event.ResourceProperties.LogGroupName;if(!logGroupName){return failed('LogGroupName required')}
          var cloudwatchlogs=new aws.CloudWatchLogs();cloudwatchlogs.putRetentionPolicy({logGroupName:logGroupName,retentionInDays:1}).promise().then((data)=>{console.log('"putRetentionPolicy" Response:\n',JSON.stringify(data));success()}).catch((err)=>failed(err))}
  SetLogsRetentionLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
      - PolicyName: CloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
              - logs:PutRetentionPolicy
              Resource:
              - arn:aws:logs:*:*:*
  SetLogsRetentionFunctionRetention:
    Type: Custom::LogsRetention
    Properties:
      ServiceToken: !GetAtt SetLogsRetentionFunction.Arn
      LogGroupName: !Join ['', ['/aws/lambda/', !Ref SetLogsRetentionFunction]]

Outputs:
  BaseAMI:
    Description: Base AMI ID
    Value: !Ref FindBaseAMI
  NewAMI:
    Description: Created AMI ID
    Value: !Ref CreateAMI
