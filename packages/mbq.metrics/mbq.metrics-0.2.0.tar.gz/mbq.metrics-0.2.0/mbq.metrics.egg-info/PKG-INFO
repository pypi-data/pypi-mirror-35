Metadata-Version: 1.2
Name: mbq.metrics
Version: 0.2.0
Summary: UNKNOWN
Home-page: https://github.com/managedbyq/mbq.metrics
Author: Managed by Q, Inc.
Author-email: open-source@managedbyq.com
Maintainer: Managed by Q, Inc.
Maintainer-email: open-source@managedbyq.com
License: Apache 2.0
Description: mbq.metrics: metrics for the masses
        ===================================
        
        .. image:: https://img.shields.io/pypi/v/mbq.metrics.svg
            :target: https://pypi.python.org/pypi/mbq.metrics
        
        .. image:: https://img.shields.io/pypi/l/mbq.metrics.svg
            :target: https://pypi.python.org/pypi/mbq.metrics
        
        .. image:: https://img.shields.io/pypi/pyversions/mbq.metrics.svg
            :target: https://pypi.python.org/pypi/mbq.metrics
        
        .. image:: https://img.shields.io/travis/managedbyq/mbq.metrics/master.svg
            :target: https://travis-ci.org/managedbyq/mbq.metrics
        
        Installation
        ------------
        
        .. code-block:: bash
        
            $ pip install mbq.metrics
            ðŸš€âœ¨
        
        Guaranteed fresh.
        
        
        Getting started
        ---------------
        
        .. code-block:: python
        
            from mbq import metrics
        
            metrics.init(namespace='my-service', constant_tags={'env': ENV_NAME})
        
            metrics.increment('metric.name', 5, tags={'something': 'awesome'})
        
            # show the rest
        
        
        Testing
        -------
        
        We now use `tox` for local testing across multiple python environments. Before this use `pyenv` to install the following python interpreters: cpython{2.7, 3.5, 3.6} and pypy3
        
        install and run tox:
        
        .. code-block:: bash
            $ pip install tox
            $ tox
            $
            $ # run a specific environment
            $ tox -e py36-django111
            $
        
        FAQs
        ----
        
        **Where do I put the DogStatsd agent configuration?**
        
        You don't! ``mbq.metrics`` is pre-baked with assumptions about how Q runs it's services. Specifically, we assume that each service runs in a Docker container and that that container is running on a VM that's running the DogStatsD agent. In that way we can automatically configure our client to reach outside of the container and easily push metrics to the agent. 
        Read more in the `datadogpy documentation <http://datadogpy.readthedocs.io/en/latest/index.html#datadog.initialize>`_ or `in the source <https://github.com/DataDog/datadogpy/blob/fd6646a6e8cde1d7a8c2f6e324d04e8d7f8a6f8c/datadog/dogstatsd/route.py#L15>`_.
        
        API Reference
        -------------
        
        
        Contributing
        ------------
        
Keywords: metrics monitoring statsd
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Topic :: Software Development :: Libraries
