[module.web-services]
name=web-services
type=web-services
python_name=alignak_module_ws

# Module log level (DEBUG, INFO, WARNING, ERROR)
;log_level=INFO

# ---------------
# Alignak Backend endpoint URL
# ---------------
# If you intend to use an Alignak backend with this module, set its URL.
# As an example: alignak_backend=http://127.0.0.1:5000
# Default is not to use a backend connection
;alignak_backend=

# Backend authentication:
# ---
# [Method 1 - most secure] Using a token:
# Get a user token from the backend:
# $ curl -H "Content-Type: application/json" -X POST -d '{"username":"admin","password":"admin"}' http://127.0.0.1:5000/login
# Copy the returned token here and uncomment this variable:
;token=

# [Method 2] Use login (username/password)
# Set your backend username and password here and uncomment those variables
;username=
;password=

# On login, force a new token generation
;allowgeneratetoken=false

# Alignak backend polling period
# Periodically check that the Alignak backend connection is available
# Use 0 to disable the Alignak backend background polling
;alignak_backend_polling_period=60


# ---------------
# Alignak Backend objects
# ---------------
# Set this variable to 1 to allow the host creation by the WS
# Default is to allow host creation
;allow_host_creation=1
# Raise an error status for an unknown host if host creation is not active
;ignore_unknown_host=0
# Set this variable to 1 to allow the service creation by the WS
# Default is to not allow service creation (services are created through hosts templates)
;allow_service_creation=0
# Do not raise an error status for an unknown service if service creation is not active
;ignore_unknown_service=1

# Realm case in templates
# Use upper, lower or capitalize to update the provided realm
# Default is to let the realm unchanged
# Provided realm name will be updated before searching the realm identifier in the backend
# This is not done if the provided realm is 'All'
;realm_case=

# ---------------
# Alignak arbiter configuration
# ---------------
# Alignak main arbiter interface
# Set alignak_host as empty to disable the Alignak arbiter polling
# The default is to poll a local Alignak arbiter to check it is alive
;alignak_host=127.0.0.1
;alignak_port=7770

# Alignak polling period
# Periodically (every 5 seconds) check that the Alignak arbiter is alive
;alignak_polling_period=5

# Alignak daemons status refresh period
# Periodically get the Alignak daemons status
;alignak_daemons_polling_period=10


# ---------------
# Set timestamp for the external commands if not set
# If no timestamp is set in the external commands, Alignak will set its own timestamp
;set_timestamp=1
# ---------------

# ---------------
# Give result
# Return some information about the commands executed in the _result property
# Default is no result to avoid verbose information
# 0: no result
# 1: send result
;give_result=0
# ---------------

# ---------------
# Give feedback when updating the livestate
# Return some information about the host/service updated
# Default is only host feedback because services feedback is verbose ;)
# 0: no feedback
# 1: feedback only for host
# 2: feedback for host and services
;give_feedback=1
# List of the host/service properties to include in the feedback
# Note that name is always present
#feedback_host
# Some interesting properties for an host and its services:
;feedback_host=alias,notes,location,active_checks_enabled,max_check_attempts,check_interval,retry_interval,passive_checks_enabled,check_freshness,freshness_state,freshness_threshold,_overall_state_id
#feedback_service=alias,notes,active_checks_enabled,max_check_attempts,check_interval,retry_interval,passive_checks_enabled,check_freshness,freshness_state,freshness_threshold,_overall_state_id
# Default is no feedback
;feedback_host=
;feedback_service=
# ---------------

# ---------------
# Direct update of the host/service livestate in the Alignak backend
# This should not be necessary anymore when the backend broker module will get updated
# You can set this option if no backend broker module is installed on your Alignak for the
# WS module to update the backend livestate
;alignak_backend_livestate_update=0

# ---------------
# Send log check result to the backend for old received metrics (defaults to yes)
# deprecated - timeshift is the delay to consider that a received livestate is in the past
# if the received livestate is older than alignak_backend_timeshift seconds, no external
# command will be sent to the scheduler and the check result will not be sent to the backend
# if alignak_backend_get_lcr is 1 then the older log check result will be fetched from the
# backend to update the posted log check result
;alignak_backend_old_lcr=1
;alignak_backend_get_lcr=0
;alignak_backend_timeshift=0

# HTTP authorization
# Setting this variable to 0 will disable the HTTP authorization check;
# it is not the recommended configuration :)
# As a default, authorization is enabled on all the WS endpoints
;authorization=1

# SSL configuration
;use_ssl=0
;ca_cert=/usr/local/etc/alignak/certs/ca.pem
;server_cert=/usr/local/etc/alignak/certs/server.crt
;server_key=/usr/local/etc/alignak/certs/server.key
;server_dh=/usr/local/etc/alignak/certs/server.pem
;hard_ssl_name_check=0

# Export module metrics to a statsd server.
# By default at localhost:8125 (UDP) with the alignak prefix
# Use the same configuration as the one defined in alignak (if any...)
# Stats will be available in statsd_prefix.module_alias
;statsd_host=localhost
;statsd_port=8125
;statsd_prefix=alignak.modules
# Default is not enabled
;statsd_enabled=0
