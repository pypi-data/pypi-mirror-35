# coding: utf-8

"""
    KOALA

    A server that runs object detection models  # noqa: E501

    OpenAPI spec version: 1.1.0+127
    Contact: deepcore-support@digitalglobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pykoala.models.job_status import JobStatus  # noqa: F401,E501


class JobRunning(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'read_progress': 'float',
        'detection_progress': 'float',
        'time_elapsed': 'float',
        'time_remaining': 'float',
        'runner': 'str'
    }

    attribute_map = {
        'read_progress': 'readProgress',
        'detection_progress': 'detectionProgress',
        'time_elapsed': 'timeElapsed',
        'time_remaining': 'timeRemaining',
        'runner': 'runner'
    }

    def __init__(self, read_progress=None, detection_progress=None, time_elapsed=None, time_remaining=None, runner=None):  # noqa: E501
        """JobRunning - a model defined in Swagger"""  # noqa: E501

        self._read_progress = None
        self._detection_progress = None
        self._time_elapsed = None
        self._time_remaining = None
        self._runner = None
        self.discriminator = None

        self.read_progress = read_progress
        self.detection_progress = detection_progress
        self.time_elapsed = time_elapsed
        if time_remaining is not None:
            self.time_remaining = time_remaining
        self.runner = runner

    @property
    def read_progress(self):
        """Gets the read_progress of this JobRunning.  # noqa: E501

        Read progress percentage  # noqa: E501

        :return: The read_progress of this JobRunning.  # noqa: E501
        :rtype: float
        """
        return self._read_progress

    @read_progress.setter
    def read_progress(self, read_progress):
        """Sets the read_progress of this JobRunning.

        Read progress percentage  # noqa: E501

        :param read_progress: The read_progress of this JobRunning.  # noqa: E501
        :type: float
        """
        if read_progress is None:
            raise ValueError("Invalid value for `read_progress`, must not be `None`")  # noqa: E501
        if read_progress is not None and read_progress > 100:  # noqa: E501
            raise ValueError("Invalid value for `read_progress`, must be a value less than or equal to `100`")  # noqa: E501
        if read_progress is not None and read_progress < 0:  # noqa: E501
            raise ValueError("Invalid value for `read_progress`, must be a value greater than or equal to `0`")  # noqa: E501

        self._read_progress = read_progress

    @property
    def detection_progress(self):
        """Gets the detection_progress of this JobRunning.  # noqa: E501

        Detection progress percentage  # noqa: E501

        :return: The detection_progress of this JobRunning.  # noqa: E501
        :rtype: float
        """
        return self._detection_progress

    @detection_progress.setter
    def detection_progress(self, detection_progress):
        """Sets the detection_progress of this JobRunning.

        Detection progress percentage  # noqa: E501

        :param detection_progress: The detection_progress of this JobRunning.  # noqa: E501
        :type: float
        """
        if detection_progress is None:
            raise ValueError("Invalid value for `detection_progress`, must not be `None`")  # noqa: E501
        if detection_progress is not None and detection_progress > 100:  # noqa: E501
            raise ValueError("Invalid value for `detection_progress`, must be a value less than or equal to `100`")  # noqa: E501
        if detection_progress is not None and detection_progress < 0:  # noqa: E501
            raise ValueError("Invalid value for `detection_progress`, must be a value greater than or equal to `0`")  # noqa: E501

        self._detection_progress = detection_progress

    @property
    def time_elapsed(self):
        """Gets the time_elapsed of this JobRunning.  # noqa: E501

        Number of seconds elapsed  # noqa: E501

        :return: The time_elapsed of this JobRunning.  # noqa: E501
        :rtype: float
        """
        return self._time_elapsed

    @time_elapsed.setter
    def time_elapsed(self, time_elapsed):
        """Sets the time_elapsed of this JobRunning.

        Number of seconds elapsed  # noqa: E501

        :param time_elapsed: The time_elapsed of this JobRunning.  # noqa: E501
        :type: float
        """
        if time_elapsed is None:
            raise ValueError("Invalid value for `time_elapsed`, must not be `None`")  # noqa: E501

        self._time_elapsed = time_elapsed

    @property
    def time_remaining(self):
        """Gets the time_remaining of this JobRunning.  # noqa: E501

        Estimated number of seconds remaining  # noqa: E501

        :return: The time_remaining of this JobRunning.  # noqa: E501
        :rtype: float
        """
        return self._time_remaining

    @time_remaining.setter
    def time_remaining(self, time_remaining):
        """Sets the time_remaining of this JobRunning.

        Estimated number of seconds remaining  # noqa: E501

        :param time_remaining: The time_remaining of this JobRunning.  # noqa: E501
        :type: float
        """

        self._time_remaining = time_remaining

    @property
    def runner(self):
        """Gets the runner of this JobRunning.  # noqa: E501

        The runnerId of the job runner being used.  # noqa: E501

        :return: The runner of this JobRunning.  # noqa: E501
        :rtype: str
        """
        return self._runner

    @runner.setter
    def runner(self, runner):
        """Sets the runner of this JobRunning.

        The runnerId of the job runner being used.  # noqa: E501

        :param runner: The runner of this JobRunning.  # noqa: E501
        :type: str
        """
        if runner is None:
            raise ValueError("Invalid value for `runner`, must not be `None`")  # noqa: E501

        self._runner = runner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobRunning):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
