# coding: utf-8

"""
    KOALA

    A server that runs object detection models  # noqa: E501

    OpenAPI spec version: 1.1.0+127
    Contact: deepcore-support@digitalglobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pykoala.models.service_version import ServiceVersion  # noqa: F401,E501


class Version(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coordinator': 'str',
        'modelmanager': 'ServiceVersion',
        'runner': 'ServiceVersion'
    }

    attribute_map = {
        'coordinator': 'coordinator',
        'modelmanager': 'modelmanager',
        'runner': 'runner'
    }

    def __init__(self, coordinator=None, modelmanager=None, runner=None):  # noqa: E501
        """Version - a model defined in Swagger"""  # noqa: E501

        self._coordinator = None
        self._modelmanager = None
        self._runner = None
        self.discriminator = None

        if coordinator is not None:
            self.coordinator = coordinator
        if modelmanager is not None:
            self.modelmanager = modelmanager
        if runner is not None:
            self.runner = runner

    @property
    def coordinator(self):
        """Gets the coordinator of this Version.  # noqa: E501

        The version of the coordinator  # noqa: E501

        :return: The coordinator of this Version.  # noqa: E501
        :rtype: str
        """
        return self._coordinator

    @coordinator.setter
    def coordinator(self, coordinator):
        """Sets the coordinator of this Version.

        The version of the coordinator  # noqa: E501

        :param coordinator: The coordinator of this Version.  # noqa: E501
        :type: str
        """

        self._coordinator = coordinator

    @property
    def modelmanager(self):
        """Gets the modelmanager of this Version.  # noqa: E501


        :return: The modelmanager of this Version.  # noqa: E501
        :rtype: ServiceVersion
        """
        return self._modelmanager

    @modelmanager.setter
    def modelmanager(self, modelmanager):
        """Sets the modelmanager of this Version.


        :param modelmanager: The modelmanager of this Version.  # noqa: E501
        :type: ServiceVersion
        """

        self._modelmanager = modelmanager

    @property
    def runner(self):
        """Gets the runner of this Version.  # noqa: E501


        :return: The runner of this Version.  # noqa: E501
        :rtype: ServiceVersion
        """
        return self._runner

    @runner.setter
    def runner(self, runner):
        """Sets the runner of this Version.


        :param runner: The runner of this Version.  # noqa: E501
        :type: ServiceVersion
        """

        self._runner = runner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Version):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
