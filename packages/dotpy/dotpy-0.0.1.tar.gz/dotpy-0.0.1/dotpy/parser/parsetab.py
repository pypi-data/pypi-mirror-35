
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARROW CLPAR COMMA CRPAR DIGRAPH EDGE EQUALS ID NODE SEMICOLON SLPAR SRPARgraph : DIGRAPH CLPAR stmt_list CRPARgraph : DIGRAPH ID CLPAR stmt_list CRPARstmt_list : stmt SEMICOLON stmt_liststmt_list : stmt stmt_liststmt_list : stmt SEMICOLON\n                     | stmtstmt : node_stmt\n                | edge_stmt\n                | attr_stmtstmt : ID EQUALS IDnode_stmt : node_id attr_listnode_stmt : node_idedge_stmt : node_id edge_rhs attr_listedge_stmt : node_id edge_rhsattr_stmt : NODE attr_list\n                     | EDGE attr_listnode_id : IDedge_rhs : ARROW node_idattr_list : SLPAR a_list SRPARa_list : ID EQUALS ID SEMICOLON a_list\n                  | ID EQUALS ID COMMA a_lista_list : ID EQUALS ID a_lista_list : ID EQUALS ID SEMICOLON\n                  | ID EQUALS ID COMMA\n                  | ID EQUALS ID'
    
_lr_action_items = {'DIGRAPH':([0,],[2,]),'$end':([1,15,33,],[0,-1,-2,]),'CLPAR':([2,4,],[3,14,]),'ID':([2,3,6,7,8,9,10,11,14,16,18,19,20,21,22,23,24,27,28,31,32,34,35,36,37,39,],[4,10,10,-7,-8,-9,-17,-12,10,10,27,-11,-14,30,32,-15,-16,-10,-13,-18,-17,-19,36,30,30,30,]),'NODE':([3,6,7,8,9,10,11,14,16,19,20,23,24,27,28,31,32,34,],[12,12,-7,-8,-9,-17,-12,12,12,-11,-14,-15,-16,-10,-13,-18,-17,-19,]),'EDGE':([3,6,7,8,9,10,11,14,16,19,20,23,24,27,28,31,32,34,],[13,13,-7,-8,-9,-17,-12,13,13,-11,-14,-15,-16,-10,-13,-18,-17,-19,]),'CRPAR':([5,6,7,8,9,10,11,16,17,19,20,23,24,25,26,27,28,31,32,34,],[15,-6,-7,-8,-9,-17,-12,-5,-4,-11,-14,-15,-16,33,-3,-10,-13,-18,-17,-19,]),'SEMICOLON':([6,7,8,9,10,11,19,20,23,24,27,28,31,32,34,36,],[16,-7,-8,-9,-17,-12,-11,-14,-15,-16,-10,-13,-18,-17,-19,37,]),'EQUALS':([10,30,],[18,35,]),'SLPAR':([10,11,12,13,20,31,32,],[-17,21,21,21,21,-18,-17,]),'ARROW':([10,11,],[-17,22,]),'SRPAR':([29,36,37,38,39,40,41,],[34,-25,-23,-22,-24,-20,-21,]),'COMMA':([36,],[39,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'graph':([0,],[1,]),'stmt_list':([3,6,14,16,],[5,17,25,26,]),'stmt':([3,6,14,16,],[6,6,6,6,]),'node_stmt':([3,6,14,16,],[7,7,7,7,]),'edge_stmt':([3,6,14,16,],[8,8,8,8,]),'attr_stmt':([3,6,14,16,],[9,9,9,9,]),'node_id':([3,6,14,16,22,],[11,11,11,11,31,]),'attr_list':([11,12,13,20,],[19,23,24,28,]),'edge_rhs':([11,],[20,]),'a_list':([21,36,37,39,],[29,38,40,41,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> graph","S'",1,None,None,None),
  ('graph -> DIGRAPH CLPAR stmt_list CRPAR','graph',4,'p_graph_1','parser.py',25),
  ('graph -> DIGRAPH ID CLPAR stmt_list CRPAR','graph',5,'p_graph_2','parser.py',29),
  ('stmt_list -> stmt SEMICOLON stmt_list','stmt_list',3,'p_stmt_list_1','parser.py',33),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list_2','parser.py',37),
  ('stmt_list -> stmt SEMICOLON','stmt_list',2,'p_stmt_list_3','parser.py',41),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list_3','parser.py',42),
  ('stmt -> node_stmt','stmt',1,'p_stmt_1','parser.py',46),
  ('stmt -> edge_stmt','stmt',1,'p_stmt_1','parser.py',47),
  ('stmt -> attr_stmt','stmt',1,'p_stmt_1','parser.py',48),
  ('stmt -> ID EQUALS ID','stmt',3,'p_stmt_2','parser.py',52),
  ('node_stmt -> node_id attr_list','node_stmt',2,'p_node_stmt_1','parser.py',56),
  ('node_stmt -> node_id','node_stmt',1,'p_node_stmt_2','parser.py',60),
  ('edge_stmt -> node_id edge_rhs attr_list','edge_stmt',3,'p_edge_stmt_1','parser.py',64),
  ('edge_stmt -> node_id edge_rhs','edge_stmt',2,'p_edge_stmt_2','parser.py',68),
  ('attr_stmt -> NODE attr_list','attr_stmt',2,'p_attr_stmt','parser.py',72),
  ('attr_stmt -> EDGE attr_list','attr_stmt',2,'p_attr_stmt','parser.py',73),
  ('node_id -> ID','node_id',1,'p_node_id','parser.py',77),
  ('edge_rhs -> ARROW node_id','edge_rhs',2,'p_edge_rhs_1','parser.py',81),
  ('attr_list -> SLPAR a_list SRPAR','attr_list',3,'p_attr_list','parser.py',85),
  ('a_list -> ID EQUALS ID SEMICOLON a_list','a_list',5,'p_a_list_1','parser.py',89),
  ('a_list -> ID EQUALS ID COMMA a_list','a_list',5,'p_a_list_1','parser.py',90),
  ('a_list -> ID EQUALS ID a_list','a_list',4,'p_a_list_2','parser.py',94),
  ('a_list -> ID EQUALS ID SEMICOLON','a_list',4,'p_a_list_3','parser.py',98),
  ('a_list -> ID EQUALS ID COMMA','a_list',4,'p_a_list_3','parser.py',99),
  ('a_list -> ID EQUALS ID','a_list',3,'p_a_list_3','parser.py',100),
]
