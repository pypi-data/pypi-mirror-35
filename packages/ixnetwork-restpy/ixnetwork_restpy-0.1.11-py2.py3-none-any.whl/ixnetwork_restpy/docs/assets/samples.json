{
    "ixnetwork_restpy.tests.integration.sanity.py": "\nimport sys\nimport os\nsys.path[0] = os.path.abspath(sys.path[0] + '\\\\..\\\\..\\\\..\\\\')\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\nfrom ixnetwork_restpy.errors import IxNetworkError\nfrom ixnetwork_restpy.files import Files\n\nsession = None\n\ntry:\n\t#test_platform = TestPlatform('10.36.79.20')\n\ttest_platform = TestPlatform('127.0.0.1', rest_port=11009)\n\ttest_platform.Trace = 'request'\n\ttest_platform.Authenticate('admin', 'admin')\n\tprint(test_platform)\n\n\t# get a list of sessions\n\tfor session in test_platform.Sessions():\n\t\tprint(session)\n\t# add a session and remove the session\n\tsession = test_platform.add_Sessions()\n\tprint(session)\n\tsession.remove()\n\ttry:\n\t\t# get an invalid session\n\t\tsession = test_platform.Sessions(Id=6)\n\texcept IxNetworkError as e:\n\t\tprint(e)\n\t# get a valid session\n\tsession = test_platform.Sessions(Id=1)\n\tprint(session)\n\n\tixnetwork = session.Ixnetwork\n\tprint(ixnetwork)\n\n\tviews = ixnetwork.Statistics.View()\n\tprint(views)\n\n\ttry:\n\t\tixnetwork.LoadConfig('c:/temp/ipv4_traffic.ixncfg')\n\t\tassert ('Type checking failed')\n\texcept TypeError as e:\n\t\tprint(e)\n\tixnetwork.LoadConfig(Files('c:/users/anbalogh/downloads/ipv4_traffic.ixncfg', local_file=True))\n\n\tprint(ixnetwork.Globals)\n\tprint(ixnetwork.AvailableHardware)\n\tprint(ixnetwork.Traffic)\n\tprint(ixnetwork.Statistics)\n\tprint(ixnetwork.ResourceManager)\n\n\tixnetwork.NewConfig()\n\t\n\tassert(len(ixnetwork.Vport()) == 0)\n\tassert(len(ixnetwork.Topology()) == 0)\n\tassert(len(ixnetwork.AvailableHardware.Chassis()) == 0)\n\tassert(len(ixnetwork.Statistics.View()) == 0)\n\tassert(len(ixnetwork.Traffic.TrafficItem()) == 0)\n\n\tvport_name = 'Abstract Port 1'\n\tvport = ixnetwork.add_Vport(Name=vport_name, Type='pos')\n\tassert (vport.Type == 'pos')\n\tassert (vport.Name == vport_name)\n\tvport.Type = 'ethernet'\n\tassert (vport.Type == 'ethernet')\n\tvport.refresh()\n\tprint(vport)\n\tixnetwork.add_Vport(Name='Abstract Port 2')\n\tixnetwork.add_Vport(Name='Abstract Port 3')\n\tprint(ixnetwork.Vport())\n\n\ttopology = ixnetwork.add_Topology(Name='Device Group 1', Ports=ixnetwork.Vport())\n\tprint(topology)\n\n\tdevice_group = topology.add_DeviceGroup(Name='Device 1', Multiplier='7')\n\tprint(device_group)\n\tdevice_group.Enabled.Alternate('False')\n\tassert (device_group.Enabled == 'Alt: False')\n\t\n\t# create and print ethernet information\n\tethernet = device_group.add_Ethernet()\n\tprint(ethernet)\n\n\t# get multivalue information\n\t# # outputs format, count, possible patterns etc\n\tprint(ethernet.Mac.Info)\n\n\t# multivalue steps\n\tsteps = ethernet.Mac.Steps()\n\tfor step in steps:\n\t\tprint(step)\n\t\tstep.Enabled = False\n\t\tstep.refresh()\n\t\tassert (step.Enabled is False)\n\t\t\n\t# update multivalue on server immediately\n\tethernet.Mac.Decrement(start_value='00:00:de:ad:be:ef', step_value='00:00:fa:ce:fa:ce')\n\tassert (ethernet.Mac == 'Dec: 00:00:de:ad:be:ef, 00:00:fa:ce:fa:ce')\n\tethernet.Mac.Increment(start_value='00:00:fa:ce:fa:ce', step_value='00:00:de:ad:be:ef')\n\tassert (ethernet.Mac == 'Inc: 00:00:fa:ce:fa:ce, 00:00:de:ad:be:ef')\n\tethernet.Mac.Random()\n\tassert (ethernet.Mac == 'Rand')\n\tethernet.Mac.RandomRange()\n\tassert (ethernet.Mac.Pattern.startswith('Randr:'))\n\tethernet.Mac.RandomMask()\n\tassert (ethernet.Mac.Pattern.startswith('Randb:'))\n\tethernet.Mac.Distributed(algorithm='autoEven', mode='perPort', values=[('00:00:fa:ce:fa:ce', 60), ('0:00:de:ad:be:ef', 40)])\n\tassert (ethernet.Mac.Pattern.startswith('Dist:'))\n\tethernet.Mac.ValueList(values=['00:00:fa:ce:fa:ce', '00:00:de:ad:be:ef'])\n\tassert (ethernet.Mac.Pattern.startswith('List:'))\n\tethernet.Mac.Custom(start_value='00:00:fa:ce:fa:ce', step_value='00:00:de:ad:be:ef', increments=[('00:00:ab:ab:ab:ab', 6, [('00:00:01:01:01:01', 2, None)])])\n\tassert (ethernet.Mac.Pattern.startswith('Custom:'))\n\tprint(ethernet.Mac.Values)\n\t\n\tipv4 = ethernet.add_Ipv4(Name='Ipv4 1')\n\tprint(ipv4)\n\tipv4.Address.Increment(start_value='1.1.1.1', step_value='0.1.1.1')\n\tassert(ipv4.Address == 'Inc: 1.1.1.1, 0.1.1.1')\n\t\n\tbgp4 = ipv4.add_BgpIpv4Peer(Name='Bgp 1')\n\tbgp4.Md5Key.String('my-md5-key-{Dec: 1,1}')\n\tprint(bgp4)\n\n\tvports = ixnetwork.Vport(Name=vport_name)\n\tassert (len(vports) == 1)\n\tassert (vports[0].Name == vport_name)\n\tixnetwork.ReleasePort(ixnetwork.Vport())\n\n\tbgp6 = topology.add_DeviceGroup(Name='Device 2').add_Ethernet().add_Ipv6().add_BgpIpv6Peer()\n\tprint(bgp6)\n\n\t# add one quick flow group per vport\n\tixnetwork.AddQuickFlowGroups(ixnetwork.Vport(), 1)\n\n\t# config = ixnetwork.ResourceManager.ExportConfig(['/descendant-or-self::*'], False, 'json')\n\t# ixnetwork.ResourceManager.ImportConfig(config, True)\n\n\t# errors = ixnetwork.Globals.AppErrors()[0].Error(Name='JSON Import Errors')\n\t# for instance in errors[0].Instance():\n\t# \tprint(instance)\n\n\t# chassis = ixnetwork.AvailableHardware.add_Chassis(Hostname='10.36.24.55')\nexcept IxNetworkError as e:\n\tprint(e)\n\nif session is not None:\n\tsession.remove()\n\n\n", 
    "ixnetwork_restpy.tests.assign_ports.py": "\"\"\"This sample demonstrates the best practice for connecting abstract ports to test ports.\n\nThe AssignPorts method on the test platform does the following:\n\t- adds chassis to /availableHardware using Arg1\n\t- creates abstract ports if the abstract port list (Arg3) cannot meet the number of Arg1 test ports\n\t- clears ownership of test ports if Arg4 is True\n\t- waits until port statistic view for all test ports are ready\n\t- returns a list of abstract test ports that have not been connected to test ports\n\"\"\"\n\nimport sys\nimport os\nsys.path[0] = os.path.abspath(sys.path[0] + '\\\\..\\\\..\\\\')\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n\n# connect to a test platform, create a session and get the root IxNetwork object\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\ntest_platform.Trace = 'request_response'\nsession = test_platform.add_Sessions()\nixnetwork = session.Ixnetwork\nixnetwork.NewConfig()\n\n# add abstract ports\nfor i in range(2):\n\tixnetwork.add_Vport()\n\n# connect the abstract ports to test ports\nchassis_ip = '10.36.24.55'\ntest_ports = [\n\tdict(Arg1=chassis_ip, Arg2=1, Arg3=1),\n\tdict(Arg1=chassis_ip, Arg2=1, Arg3=2)\n]\nunconnected_ports = ixnetwork.AssignPorts(test_ports, [], ixnetwork.Vport(), True)\nassert(len(unconnected_ports) == 0)\n", 
    "ixnetwork_restpy.tests.connect.py": "\"\"\"Demonstrates different methods of connecting to IxNetwork test platforms\n\"\"\"\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n\ntestPlatform = TestPlatform('127.0.0.1')"
}