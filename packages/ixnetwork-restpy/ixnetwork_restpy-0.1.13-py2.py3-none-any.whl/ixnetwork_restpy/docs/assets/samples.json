{
    "ixnetwork_restpy.tests.sessions.py": "import sys\nimport os\nsys.path[0] = os.path.abspath(sys.path[0] + '\\\\..\\\\..\\\\')\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\nfrom ixnetwork_restpy.errors import IxNetworkError\n\n\n# setup the connection information for a windows gui test platform that has a default session of 1\ntest_platform=TestPlatform('127.0.0.1', rest_port=11009, platform='windows')\n\n# get a list of sessions\nfor session in test_platform.Sessions():\n\tprint(session)\n\n# add a session and remove the session\nsession = test_platform.add_Sessions()\nprint(session)\nsession.remove()\n\n# get an invalid session\ntry:\n\tsession = test_platform.Sessions(Id=6)\nexcept IxNetworkError as e:\n\tprint(e)\n\n# get a valid session\nsession = test_platform.Sessions(Id=1)\nprint(session)", 
    "ixnetwork_restpy.tests.sanity.py": "\"\"\"Sanity script that exercises all major points in the IxNetwork REST API\n- sessions\n- properties returning objects\n- methods returning objects\n- tracing\n- authentication\n- file transfer\n- execs\n- multivalues\n- multivalue steps\n\"\"\"\nimport sys\nimport os\nsys.path[0] = os.path.abspath(sys.path[0] + '\\\\..\\\\..\\\\')\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\nfrom ixnetwork_restpy.errors import IxNetworkError\nfrom ixnetwork_restpy.files import Files\n\nsession = None\n\ntry:\n    # test_platform = TestPlatform('10.36.78.164', platform='linux')\n    test_platform = TestPlatform('127.0.0.1', rest_port=11009, platform='windows')\n    test_platform.Trace = 'request_response'\n    test_platform.Authenticate('admin', 'admin')\n    print(test_platform)\n\n    session = test_platform.add_Sessions()\n    print(session)\n\n    ixnetwork = session.Ixnetwork\n    print(ixnetwork)\n\n    views = ixnetwork.Statistics.View()\n    print(views)\n\n    try:\n        ixnetwork.LoadConfig('c:/temp/ipv4_traffic.ixncfg')\n        assert ('Type checking failed')\n    except TypeError as e:\n        print(e)\n    ixnetwork.LoadConfig(Files('c:/users/anbalogh/downloads/ipv4_traffic.ixncfg', local_file=True))\n\n    print(ixnetwork.Globals)\n    print(ixnetwork.AvailableHardware)\n    print(ixnetwork.Traffic)\n    print(ixnetwork.Statistics)\n    print(ixnetwork.ResourceManager)\n\n    ixnetwork.NewConfig()\n    \n    assert(len(ixnetwork.Vport()) == 0)\n    assert(len(ixnetwork.Topology()) == 0)\n    assert(len(ixnetwork.AvailableHardware.Chassis()) == 0)\n    assert(len(ixnetwork.Statistics.View()) == 0)\n    assert(len(ixnetwork.Traffic.TrafficItem()) == 0)\n\n    vport_name = 'Abstract Port 1'\n    vport = ixnetwork.add_Vport(Name=vport_name, Type='pos')\n    assert (vport.Type == 'pos')\n    assert (vport.Name == vport_name)\n    vport.Type = 'ethernet'\n    assert (vport.Type == 'ethernet')\n    vport.refresh()\n    print(vport)\n    ixnetwork.add_Vport(Name='Abstract Port 2')\n    ixnetwork.add_Vport(Name='Abstract Port 3')\n    print(ixnetwork.Vport())\n\n    topology = ixnetwork.add_Topology(Name='Device Group 1', Ports=ixnetwork.Vport())\n    print(topology)\n\n    device_group = topology.add_DeviceGroup(Name='Device 1', Multiplier='7')\n    print(device_group)\n    device_group.Enabled.Alternate('False')\n    assert (device_group.Enabled == 'Alt: False')\n    \n    # create and print ethernet information\n    ethernet = device_group.add_Ethernet()\n    print(ethernet)\n\n    # get multivalue information\n    # # outputs format, count, possible patterns etc\n    print(ethernet.Mac.Info)\n\n    # multivalue steps\n    steps = ethernet.Mac.Steps()\n    for step in steps:\n        print(step)\n        step.Enabled = False\n        step.refresh()\n        assert (step.Enabled is False)\n        \n    # update multivalue on server immediately\n    ethernet.Mac.Decrement(start_value='00:00:de:ad:be:ef', step_value='00:00:fa:ce:fa:ce')\n    assert (ethernet.Mac == 'Dec: 00:00:de:ad:be:ef, 00:00:fa:ce:fa:ce')\n    ethernet.Mac.Increment(start_value='00:00:fa:ce:fa:ce', step_value='00:00:de:ad:be:ef')\n    assert (ethernet.Mac == 'Inc: 00:00:fa:ce:fa:ce, 00:00:de:ad:be:ef')\n    ethernet.Mac.Random()\n    assert (ethernet.Mac == 'Rand')\n    ethernet.Mac.RandomRange()\n    assert (ethernet.Mac.Pattern.startswith('Randr:'))\n    ethernet.Mac.RandomMask()\n    assert (ethernet.Mac.Pattern.startswith('Randb:'))\n    ethernet.Mac.Distributed(algorithm='autoEven', mode='perPort', values=[('00:00:fa:ce:fa:ce', 60), ('0:00:de:ad:be:ef', 40)])\n    assert (ethernet.Mac.Pattern.startswith('Dist:'))\n    ethernet.Mac.ValueList(values=['00:00:fa:ce:fa:ce', '00:00:de:ad:be:ef'])\n    assert (ethernet.Mac.Pattern.startswith('List:'))\n    ethernet.Mac.Custom(start_value='00:00:fa:ce:fa:ce', step_value='00:00:de:ad:be:ef', increments=[('00:00:ab:ab:ab:ab', 6, [('00:00:01:01:01:01', 2, None)])])\n    assert (ethernet.Mac.Pattern.startswith('Custom:'))\n    print(ethernet.Mac.Values)\n    \n    ipv4 = ethernet.add_Ipv4(Name='Ipv4 1')\n    print(ipv4)\n    ipv4.Address.Increment(start_value='1.1.1.1', step_value='0.1.1.1')\n    assert(ipv4.Address == 'Inc: 1.1.1.1, 0.1.1.1')\n    \n    bgp4 = ipv4.add_BgpIpv4Peer(Name='Bgp 1')\n    bgp4.Md5Key.String('my-md5-key-{Dec: 1,1}')\n    print(bgp4)\n\n    vports = ixnetwork.Vport(Name=vport_name)\n    assert (len(vports) == 1)\n    assert (vports[0].Name == vport_name)\n    ixnetwork.ReleasePort(ixnetwork.Vport())\n\n    bgp6 = topology.add_DeviceGroup(Name='Device 2').add_Ethernet().add_Ipv6().add_BgpIpv6Peer()\n    print(bgp6)\n\n    # add one quick flow group per vport\n    ixnetwork.AddQuickFlowGroups(ixnetwork.Vport(), 1)\n\n    # config = ixnetwork.ResourceManager.ExportConfig(['/descendant-or-self::*'], False, 'json')\n    # ixnetwork.ResourceManager.ImportConfig(config, True)\n\n    # errors = ixnetwork.Globals.AppErrors()[0].Error(Name='JSON Import Errors')\n    # for instance in errors[0].Instance():\n    # \tprint(instance)\n\n    # chassis = ixnetwork.AvailableHardware.add_Chassis(Hostname='10.36.24.55')\nexcept IxNetworkError as e:\n    print(e)\n\nif session is not None:\n    session.remove()\n\n\n", 
    "ixnetwork_restpy.tests.assign_ports.py": "\"\"\"This sample demonstrates the best practice for connecting abstract ports to test ports.\n\nThe AssignPorts method on the test platform does the following:\n\t- adds chassis to /availableHardware using Arg1\n\t- creates abstract ports if the abstract port list (Arg3) cannot meet the number of Arg1 test ports\n\t- clears ownership of test ports if Arg4 is True\n\t- waits until port statistic view for all test ports are ready\n\t- returns a list of abstract test ports that have not been connected to test ports\n\"\"\"\n\nimport sys\nimport os\nsys.path[0] = os.path.abspath(sys.path[0] + '\\\\..\\\\..\\\\')\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n\n# connect to a test platform, create a session and get the root IxNetwork object\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\ntest_platform.Trace = 'request_response'\nsession = test_platform.add_Sessions()\nixnetwork = session.Ixnetwork\nixnetwork.NewConfig()\n\n# add abstract ports\nfor i in range(2):\n\tixnetwork.add_Vport()\n\n# connect the abstract ports to test ports\nchassis_ip = '10.36.24.55'\ntest_ports = [\n\tdict(Arg1=chassis_ip, Arg2=1, Arg3=1),\n\tdict(Arg1=chassis_ip, Arg2=1, Arg3=2)\n]\nunconnected_ports = ixnetwork.AssignPorts(test_ports, [], ixnetwork.Vport(), True)\nassert(len(unconnected_ports) == 0)\n", 
    "ixnetwork_restpy.tests.connect.py": "\"\"\"Demonstrates different methods of connecting to IxNetwork test platforms\n\"\"\"\nimport sys\nimport os\nsys.path[0] = os.path.abspath(sys.path[0] + '\\\\..\\\\..\\\\')\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n\n# connect to a windows platform using the default api server rest port\ntest_platform=TestPlatform('127.0.0.1', rest_port=11009, platform='windows')\n\n# connect to a windows connection manager platform using the default api server rest port\ntest_platform=TestPlatform('127.0.0.1', platform='windows')\n\n# connect to a linux api server platform using the default api server rest port\ntest_platform=TestPlatform('127.0.0.1', platform='linux')\n\n\n", 
    "ixnetwork_restpy.tests.logging.py": "\nimport sys\nimport os\nsys.path[0] = os.path.abspath(sys.path[0] + '\\\\..\\\\..\\\\')\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n# send trace messages to a log file\n# the default is 'none' which is no tracing of request and response messages\ntest_platform=TestPlatform('127.0.0.1', rest_port=11009, log_file_name='test.log')\nsession=test_platform.add_Sessions()\n\n# trace requests\n# the next add vport should show a debug message for the request\ntest_platform.Trace='request'\nsession.Ixnetwork.add_Vport()\n\n# trace requests and responses\n# the next add vport should show debug messages for the request and response\ntest_platform.Trace='request_response'\nsession.Ixnetwork.add_Vport()\n\n# turn off tracing\n# the next add vport should not show debug messages for the request and response\ntest_platform.Trace='none'\nsession.Ixnetwork.add_Vport()\n"
}