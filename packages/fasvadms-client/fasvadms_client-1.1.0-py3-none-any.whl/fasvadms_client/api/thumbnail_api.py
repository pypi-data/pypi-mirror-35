# coding: utf-8

"""
    FASva Data Management System API

    This is the API of the FASva management system.  # noqa: E501

    OpenAPI spec version: 0.2.0
    Generated by: https://openapi-generator.tech
"""


# python 2 and python 3 compatibility library
import six

from fasvadms_client import ApiClient


class ThumbnailApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_by_time_and_vehicle(self, serialnumber, time, **kwargs):  # noqa: E501
        """Get a thumbnail of &#x60;timestamp&#x60; of the vehicle with the &#x60;serialnumber&#x60;  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_by_time_and_vehicle(serialnumber, time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serialnumber: The serial number of the vehicle we should get thumbnail of. (required)
        :param int time: The time of the timestamp in second since epoch. (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_by_time_and_vehicle_with_http_info(serialnumber, time, **kwargs)  # noqa: E501
        else:
            (data) = self.get_by_time_and_vehicle_with_http_info(serialnumber, time, **kwargs)  # noqa: E501
            return data

    def get_by_time_and_vehicle_with_http_info(self, serialnumber, time, **kwargs):  # noqa: E501
        """Get a thumbnail of &#x60;timestamp&#x60; of the vehicle with the &#x60;serialnumber&#x60;  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_by_time_and_vehicle_with_http_info(serialnumber, time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serialnumber: The serial number of the vehicle we should get thumbnail of. (required)
        :param int time: The time of the timestamp in second since epoch. (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['serialnumber', 'time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_by_time_and_vehicle" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'serialnumber' is set
        if ('serialnumber' not in local_var_params or
                local_var_params['serialnumber'] is None):
            raise ValueError("Missing the required parameter `serialnumber` when calling `get_by_time_and_vehicle`")  # noqa: E501
        # verify the required parameter 'time' is set
        if ('time' not in local_var_params or
                local_var_params['time'] is None):
            raise ValueError("Missing the required parameter `time` when calling `get_by_time_and_vehicle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'serialnumber' in local_var_params:
            path_params['serialnumber'] = local_var_params['serialnumber']  # noqa: E501
        if 'time' in local_var_params:
            path_params['time'] = local_var_params['time']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/thumbnail/time/{time}/serialnumber/{serialnumber}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_interval(self, end, start, serialnumber, **kwargs):  # noqa: E501
        """Get thumbnail of the interval defined by &#x60;start&#x60; and &#x60;end&#x60; of the vehicle with the &#x60;serialnumber&#x60;  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_interval(end, start, serialnumber, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int end: The end time to get images of. (required)
        :param int start: The start time to get images of. (required)
        :param str serialnumber: The serial number of the vehicle we should get thumbnail of. (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_interval_with_http_info(end, start, serialnumber, **kwargs)  # noqa: E501
        else:
            (data) = self.get_interval_with_http_info(end, start, serialnumber, **kwargs)  # noqa: E501
            return data

    def get_interval_with_http_info(self, end, start, serialnumber, **kwargs):  # noqa: E501
        """Get thumbnail of the interval defined by &#x60;start&#x60; and &#x60;end&#x60; of the vehicle with the &#x60;serialnumber&#x60;  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_interval_with_http_info(end, start, serialnumber, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int end: The end time to get images of. (required)
        :param int start: The start time to get images of. (required)
        :param str serialnumber: The serial number of the vehicle we should get thumbnail of. (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['end', 'start', 'serialnumber']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_interval" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'end' is set
        if ('end' not in local_var_params or
                local_var_params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_interval`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in local_var_params or
                local_var_params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_interval`")  # noqa: E501
        # verify the required parameter 'serialnumber' is set
        if ('serialnumber' not in local_var_params or
                local_var_params['serialnumber'] is None):
            raise ValueError("Missing the required parameter `serialnumber` when calling `get_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'end' in local_var_params:
            path_params['end'] = local_var_params['end']  # noqa: E501
        if 'start' in local_var_params:
            path_params['start'] = local_var_params['start']  # noqa: E501
        if 'serialnumber' in local_var_params:
            path_params['serialnumber'] = local_var_params['serialnumber']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/thumbnail/start/{start}/end/{end}/serialnumber/{serialnumber}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
