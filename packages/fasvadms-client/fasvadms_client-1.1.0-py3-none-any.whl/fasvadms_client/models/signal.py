# coding: utf-8

"""
    FASva Data Management System API

    This is the API of the FASva management system.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint


import six


class Signal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'idsignal': 'int',
        'idsensor': 'int',
        'name': 'str',
        'valuetype': 'int'
    }

    attribute_map = {
        'idsignal': 'idsignal',
        'idsensor': 'idsensor',
        'name': 'name',
        'valuetype': 'valuetype'
    }

    def __init__(self, idsignal=None, idsensor=None, name=None, valuetype=None):  # noqa: E501
        """Signal - a model defined in Swagger"""  # noqa: E501

        self._idsignal = None
        self._idsensor = None
        self._name = None
        self._valuetype = None
        self.discriminator = None

        if idsignal is not None:
            self.idsignal = idsignal
        self.idsensor = idsensor
        self.name = name
        self.valuetype = valuetype

    @property
    def idsignal(self):
        """Gets the idsignal of this Signal.  # noqa: E501


        :return: The idsignal of this Signal.  # noqa: E501
        :rtype: int
        """
        return self._idsignal

    @idsignal.setter
    def idsignal(self, idsignal):
        """Sets the idsignal of this Signal.


        :param idsignal: The idsignal of this Signal.  # noqa: E501
        :type: int
        """

        self._idsignal = idsignal

    @property
    def idsensor(self):
        """Gets the idsensor of this Signal.  # noqa: E501


        :return: The idsensor of this Signal.  # noqa: E501
        :rtype: int
        """
        return self._idsensor

    @idsensor.setter
    def idsensor(self, idsensor):
        """Sets the idsensor of this Signal.


        :param idsensor: The idsensor of this Signal.  # noqa: E501
        :type: int
        """
        if idsensor is None:
            raise ValueError("Invalid value for `idsensor`, must not be `None`")  # noqa: E501

        self._idsensor = idsensor

    @property
    def name(self):
        """Gets the name of this Signal.  # noqa: E501


        :return: The name of this Signal.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Signal.


        :param name: The name of this Signal.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def valuetype(self):
        """Gets the valuetype of this Signal.  # noqa: E501


        :return: The valuetype of this Signal.  # noqa: E501
        :rtype: int
        """
        return self._valuetype

    @valuetype.setter
    def valuetype(self, valuetype):
        """Sets the valuetype of this Signal.


        :param valuetype: The valuetype of this Signal.  # noqa: E501
        :type: int
        """
        if valuetype is None:
            raise ValueError("Invalid value for `valuetype`, must not be `None`")  # noqa: E501

        self._valuetype = valuetype

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Signal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
