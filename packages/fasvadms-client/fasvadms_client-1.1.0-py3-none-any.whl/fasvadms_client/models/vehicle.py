# coding: utf-8

"""
    FASva Data Management System API

    This is the API of the FASva management system.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint


import six


class Vehicle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dimension_length': 'int',
        'serial_number': 'str',
        'description': 'str',
        'dimension_height': 'int',
        'idvehicle': 'int',
        'dimension_width': 'int'
    }

    attribute_map = {
        'dimension_length': 'dimension_length',
        'serial_number': 'serial_number',
        'description': 'description',
        'dimension_height': 'dimension_height',
        'idvehicle': 'idvehicle',
        'dimension_width': 'dimension_width'
    }

    def __init__(self, dimension_length=None, serial_number=None, description=None, dimension_height=None, idvehicle=None, dimension_width=None):  # noqa: E501
        """Vehicle - a model defined in Swagger"""  # noqa: E501

        self._dimension_length = None
        self._serial_number = None
        self._description = None
        self._dimension_height = None
        self._idvehicle = None
        self._dimension_width = None
        self.discriminator = None

        self.dimension_length = dimension_length
        self.serial_number = serial_number
        if description is not None:
            self.description = description
        self.dimension_height = dimension_height
        if idvehicle is not None:
            self.idvehicle = idvehicle
        self.dimension_width = dimension_width

    @property
    def dimension_length(self):
        """Gets the dimension_length of this Vehicle.  # noqa: E501


        :return: The dimension_length of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._dimension_length

    @dimension_length.setter
    def dimension_length(self, dimension_length):
        """Sets the dimension_length of this Vehicle.


        :param dimension_length: The dimension_length of this Vehicle.  # noqa: E501
        :type: int
        """
        if dimension_length is None:
            raise ValueError("Invalid value for `dimension_length`, must not be `None`")  # noqa: E501

        self._dimension_length = dimension_length

    @property
    def serial_number(self):
        """Gets the serial_number of this Vehicle.  # noqa: E501


        :return: The serial_number of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Vehicle.


        :param serial_number: The serial_number of this Vehicle.  # noqa: E501
        :type: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def description(self):
        """Gets the description of this Vehicle.  # noqa: E501


        :return: The description of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Vehicle.


        :param description: The description of this Vehicle.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dimension_height(self):
        """Gets the dimension_height of this Vehicle.  # noqa: E501


        :return: The dimension_height of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._dimension_height

    @dimension_height.setter
    def dimension_height(self, dimension_height):
        """Sets the dimension_height of this Vehicle.


        :param dimension_height: The dimension_height of this Vehicle.  # noqa: E501
        :type: int
        """
        if dimension_height is None:
            raise ValueError("Invalid value for `dimension_height`, must not be `None`")  # noqa: E501

        self._dimension_height = dimension_height

    @property
    def idvehicle(self):
        """Gets the idvehicle of this Vehicle.  # noqa: E501


        :return: The idvehicle of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._idvehicle

    @idvehicle.setter
    def idvehicle(self, idvehicle):
        """Sets the idvehicle of this Vehicle.


        :param idvehicle: The idvehicle of this Vehicle.  # noqa: E501
        :type: int
        """

        self._idvehicle = idvehicle

    @property
    def dimension_width(self):
        """Gets the dimension_width of this Vehicle.  # noqa: E501


        :return: The dimension_width of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._dimension_width

    @dimension_width.setter
    def dimension_width(self, dimension_width):
        """Sets the dimension_width of this Vehicle.


        :param dimension_width: The dimension_width of this Vehicle.  # noqa: E501
        :type: int
        """
        if dimension_width is None:
            raise ValueError("Invalid value for `dimension_width`, must not be `None`")  # noqa: E501

        self._dimension_width = dimension_width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vehicle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
