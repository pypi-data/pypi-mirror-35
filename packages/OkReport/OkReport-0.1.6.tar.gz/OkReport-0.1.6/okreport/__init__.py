# !/usr/bin/python -u

"""
Copyright (C) 2018 LingoChamp Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import argparse
from os import makedirs
from os.path import exists
from shutil import rmtree

from okreport import html, sender
from okreport.config import Config
from okreport.helper import handle_home_case
from okreport.report import Report

__author__ = 'JacksGong'
__version__ = '0.1.6'
__description__ = 'This tool is used for assembling report from okcheck and send to mails'


def main():
    print("-------------------------------------------------------")
    print("                  OkReport v" + __version__)
    print("")
    print(__description__)
    print("")
    print("                   Have Fun!")
    print("-------------------------------------------------------")

    parser = argparse.ArgumentParser(description=__description__)
    parser.add_argument('report_path', nargs='*',
                        help='This can be Application package name(s) or log file path(if the file from path is exist)',
                        default=['./build/reports'])
    parser.add_argument('-c', '--config_path', dest='config_path', help='config file path',
                        default='~/.okreport/.config')
    parser.add_argument('-apk-base', '--apk_base_path', dest='apk_base_path',
                        help='base apk path which just used for convenient for apk Analyzer, please provide one '
                             'different from -apk ')
    parser.add_argument('-apk', '--apk_path', dest='apk_path', help='apk path used for parse')
    parser.add_argument('-q', '--qark_report_path', dest='qark_report_path',
                        help='the report path of html-report generated by Linkedin/Qark library')
    parser.add_argument('-r', '--report_cache_path', dest='report_cache_path', help='report cache file path',
                        default='~/.okreport/')
    parser.add_argument('-d', '--dump', dest='dump', action='store_true', help='just dump no send')
    parser.add_argument('-json', '--json_path', dest='json_path', help='we will dump the json of parse result to the '
                                                                       'provide path')

    args = parser.parse_args()

    report_path = handle_home_case(args.report_path[0])
    report_cache_path = handle_home_case(args.report_cache_path)
    config_path = handle_home_case(args.config_path)
    apk_base_path = handle_home_case(args.apk_base_path)
    apk_path = handle_home_case(args.apk_path)
    qark_report_path = handle_home_case(args.qark_report_path)
    json_path = handle_home_case(args.json_path)
    if not exists(config_path):
        print "config path %s isn't exist!" % config_path
        exit(-1)

    print "==========================================="
    print "Report Files Path: %s" % report_path
    print "Config File Path: %s" % config_path
    print "Report Cache Path: %s" % report_cache_path
    print "ApkAnalyzer: base(%s) current(%s)" % (apk_base_path, apk_path)
    print "Qark Report Path: %s" % qark_report_path
    if json_path:
        print "Json Path: %s" % json_path
    print "==========================================="

    _report = Report()
    _report.from_cache(report_cache_path)
    _report.parse_and_add_report(report_path, apk_base_path, apk_path, qark_report_path)

    build_dir = "build"
    chart_dir = "%s/okreport" % build_dir
    need_remove_build_dir = not exists(build_dir)

    mail_config = Config(config_path)

    if not exists(chart_dir):
        makedirs(chart_dir)

    try:
        chart_path_list = list()
        report_html = html.BASIC_REPORT_HTML
        report_html += '<h2>OkPmd</h2>\n'
        report_html += _report.get_pmd_chart_html(chart_path_list, chart_dir)
        report_html += '<h2>OkFindbugs</h2>\n'
        report_html += _report.get_findbugs_chart_html(chart_path_list, chart_dir)
        report_html += '<h2>OkLint</h2>\n'
        report_html += _report.get_lint_chart_html(chart_path_list, chart_dir)

        coverage_html = _report.get_coverage_html(chart_path_list, chart_dir)
        if coverage_html:
            report_html += '<h2>OkCoverage</h2>\n'
            report_html += coverage_html

        if mail_config.content_url():
            if coverage_html:
                report_html += '<p>OkPmd, OkFindbugs, OkLint, OkCoverage report, please move to: <a ' \
                               'href="%s">Here</a></p>\n' % mail_config.content_url()
            else:
                report_html += '<p>OkPmd, OkFindbugs, OkLint report, please move to: <a href="%s">Here</a></p>\n' % \
                               mail_config.content_url()

        qark_html = _report.get_qark_html(chart_path_list, chart_dir)
        if qark_html:
            report_html += '<h2>OkQark</h2>\n'
            report_html += qark_html

        if mail_config.content_qark_url():
            report_html += '<p>Qark security report, please move to: <a href="%s">Here</a></p>\n' % \
                           mail_config.content_qark_url()

        apkinfo_html = _report.get_apkinfo_html(chart_path_list, chart_dir)
        if apkinfo_html:
            report_html += '<h2>OkApkAnalyzer</h2>\n'
            report_html += apkinfo_html

        report_html += html.END_HTML

        _report.save_last_report_to_cache(report_cache_path)
        _report.maintain_cache(report_cache_path)

        if json_path is not None:
            json_data = _report.to_json()
            print "-----------------"
            print 'Save Json to  %s : %s' % (json_path, json_data)
            print "-----------------"

            json_file = open(json_path, 'w')
            json_file.write(json_data)
            json_file.close()

        if not args.dump:
            sender.send_mail(report_html, chart_path_list, mail_config)
    finally:
        if need_remove_build_dir:
            print "remove build cache dir: %s" % build_dir
            rmtree(build_dir)
        else:
            print "remove chart cache dir: %s" % chart_dir
            rmtree(chart_dir)
