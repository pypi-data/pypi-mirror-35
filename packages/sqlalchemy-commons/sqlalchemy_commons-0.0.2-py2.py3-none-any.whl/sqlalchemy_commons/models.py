import enum
from sqlalchemy import (
    Column, Enum, Integer, String, BOOLEAN, ForeignKey, DateTime
)
from sqlalchemy.ext.compiler import compiles
from sqlalchemy.orm import relationship, backref
from sqlalchemy.sql import expression
from sqlalchemy.sql.ddl import CreateColumn


class UTCNow(expression.FunctionElement):
    type = DateTime()


@compiles(UTCNow, 'postgresql')
def pg_utcnow(element, compiler, **kw):
    return "TIMEZONE('utc', CURRENT_TIMESTAMP)"


@compiles(CreateColumn, 'postgresql')
def use_identity(element, compiler, **kw):
    text = compiler.visit_create_column(element, **kw)
    text = text.replace('SERIAL', 'INT GENERATED BY DEFAULT AS IDENTITY')
    return text


class UserStatus(enum.IntEnum):
    SUSPENDED = 0
    REGISTERED = 1
    PENDING = 2


class UserRole(enum.IntEnum):
    SUPER_USER = 1
    REGULAR = 100


class Model:
    id = Column(Integer, primary_key=True)
    created_at = Column(DateTime, server_default=UTCNow())
    updated_at = Column(DateTime, onupdate=UTCNow())


class Group(Model):
    __tablename__ = 'groups'

    name = Column(String(255))


class User(Model):
    __tablename__ = 'users'

    deleted_at = Column(DateTime)

    group_id = Column(Integer, ForeignKey('groups.id'), nullable=False)
    group = relationship('Group', backref=backref('users'), foreign_keys=[group_id])

    email = Column(String(255))
    status = Column(Enum(UserStatus), default=UserStatus.PENDING, nullable=False)
    is_active = Column(BOOLEAN, server_default='f', default=False, nullable=False)
    role = Column(Enum(UserRole), server_default='CLIENT', default=UserRole.REGULAR, nullable=False)


class UserProfile(Model):
    __tablename__ = 'user_profiles'

    user_id = Column(Integer, ForeignKey('users.id'), primary_key=True, nullable=False)
    user = relationship('User', backref=backref('profile', uselist=False))
    first_name = Column(String, nullable=False)
    last_name = Column(String, nullable=False)
