ORIGINAL:

lsst_solution: 293.04494071006775

Yeah... this needs jitting


pixelization shape = (19,19)

lsst_solution: 0.013086438179016113
euclid_solution: 0.03767149448394776
hst_solution: 0.14484741687774658   (FORTRAN = 2.799599999997326E-002)
hst_up_solution: 0.37793788909912107
ao_solution: 3.247291827201843

pixelization shape = (32,32)

lsst_solution: 0.016203880310058594
euclid_solution: 0.05622100830078125
hst_solution: 0.2261490821838379
hst_up_solution: 0.5624210834503174 (FORTRAN = 0.406937999999968)
ao_solution: 4.48081374168396


<3 numba but slower than Fortran


The above runs used a default SIE mass profile, below is what happens when I use the same SIE mass profile as the
Fortran code (which changes sub_to_image).

pixelization shape = (19,19)

lsst_solution: 0.022504806518554688
euclid_solution: 0.061592817306518555
hst_solution: 0.20345520973205566
hst_up_solution: 0.5406792163848877
ao_solution: 4.34648060798645

pixelization shape = (32,32)

lsst_solution: 0.03948569297790527
euclid_solution: 0.0642390251159668
hst_solution: 0.24112725257873535
hst_up_solution: 0.6168127059936523
ao_solution: 5.286415338516235


It got slower. We're compairing a rectangular grid to a adaptive ne though so lets come back to this...