# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_CRFPP')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_CRFPP')
    _CRFPP = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CRFPP', [dirname(__file__)])
        except ImportError:
            import _CRFPP
            return _CRFPP
        try:
            _mod = imp.load_module('_CRFPP', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _CRFPP = swig_import_helper()
    del swig_import_helper
else:
    import _CRFPP
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def crfpp_learn(argc):
    return _CRFPP.crfpp_learn(argc)
crfpp_learn = _CRFPP.crfpp_learn
class Model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr

    def getTemplate(self):
        return _CRFPP.Model_getTemplate(self)

    def createTagger(self):
        return _CRFPP.Model_createTagger(self)

    def what(self):
        return _CRFPP.Model_what(self)
    __swig_destroy__ = _CRFPP.delete_Model
    __del__ = lambda self: None

    def __init__(self, arg):
        this = _CRFPP.new_Model(arg)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Model_swigregister = _CRFPP.Model_swigregister
Model_swigregister(Model)

class Tagger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tagger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tagger, name)
    __repr__ = _swig_repr

    def set_model(self, model):
        return _CRFPP.Tagger_set_model(self, model)

    def set_vlevel(self, vlevel):
        return _CRFPP.Tagger_set_vlevel(self, vlevel)

    def vlevel(self):
        return _CRFPP.Tagger_vlevel(self)

    def set_cost_factor(self, cost_factor):
        return _CRFPP.Tagger_set_cost_factor(self, cost_factor)

    def cost_factor(self):
        return _CRFPP.Tagger_cost_factor(self)

    def set_nbest(self, nbest):
        return _CRFPP.Tagger_set_nbest(self, nbest)

    def nbest(self):
        return _CRFPP.Tagger_nbest(self)

    def add(self, str):
        return _CRFPP.Tagger_add(self, str)

    def size(self):
        return _CRFPP.Tagger_size(self)

    def xsize(self):
        return _CRFPP.Tagger_xsize(self)

    def dsize(self):
        return _CRFPP.Tagger_dsize(self)

    def result(self, i):
        return _CRFPP.Tagger_result(self, i)

    def answer(self, i):
        return _CRFPP.Tagger_answer(self, i)

    def y(self, i):
        return _CRFPP.Tagger_y(self, i)

    def y2(self, i):
        return _CRFPP.Tagger_y2(self, i)

    def yname(self, i):
        return _CRFPP.Tagger_yname(self, i)

    def x(self, i, j):
        return _CRFPP.Tagger_x(self, i, j)

    def ysize(self):
        return _CRFPP.Tagger_ysize(self)

    def prob(self, *args):
        return _CRFPP.Tagger_prob(self, *args)

    def set_penalty(self, i, j, penalty):
        return _CRFPP.Tagger_set_penalty(self, i, j, penalty)

    def penalty(self, i, j):
        return _CRFPP.Tagger_penalty(self, i, j)

    def alpha(self, i, j):
        return _CRFPP.Tagger_alpha(self, i, j)

    def beta(self, i, j):
        return _CRFPP.Tagger_beta(self, i, j)

    def emission_cost(self, i, j):
        return _CRFPP.Tagger_emission_cost(self, i, j)

    def next_transition_cost(self, i, j, k):
        return _CRFPP.Tagger_next_transition_cost(self, i, j, k)

    def prev_transition_cost(self, i, j, k):
        return _CRFPP.Tagger_prev_transition_cost(self, i, j, k)

    def best_cost(self, i, j):
        return _CRFPP.Tagger_best_cost(self, i, j)

    def Z(self):
        return _CRFPP.Tagger_Z(self)

    def empty(self):
        return _CRFPP.Tagger_empty(self)

    def clear(self):
        return _CRFPP.Tagger_clear(self)

    def next(self):
        return _CRFPP.Tagger_next(self)

    def parse(self, *args):
        return _CRFPP.Tagger_parse(self, *args)

    def what(self):
        return _CRFPP.Tagger_what(self)
    __swig_destroy__ = _CRFPP.delete_Tagger
    __del__ = lambda self: None

    def __init__(self, arg):
        this = _CRFPP.new_Tagger(arg)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Tagger_swigregister = _CRFPP.Tagger_swigregister
Tagger_swigregister(Tagger)

VERSION = _CRFPP.VERSION
# This file is compatible with both classic and new-style classes.


