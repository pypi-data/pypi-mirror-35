# coding: utf-8

"""
    KAMONOHASHI API

    A platform for deep learning  # noqa: E501

    OpenAPI spec version: v1
    Contact: kamonohashi-support@jp.nssol.nssmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DataApiModelsSimpleOutputModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_id': 'int',
        'id': 'int',
        'is_raw': 'bool',
        'memo': 'str',
        'name': 'str',
        'tags': 'list[str]'
    }

    attribute_map = {
        'display_id': 'displayId',
        'id': 'id',
        'is_raw': 'isRaw',
        'memo': 'memo',
        'name': 'name',
        'tags': 'tags'
    }

    def __init__(self, display_id=None, id=None, is_raw=None, memo=None, name=None, tags=None):  # noqa: E501
        """DataApiModelsSimpleOutputModel - a model defined in Swagger"""  # noqa: E501

        self._display_id = None
        self._id = None
        self._is_raw = None
        self._memo = None
        self._name = None
        self._tags = None
        self.discriminator = None

        if display_id is not None:
            self.display_id = display_id
        if id is not None:
            self.id = id
        if is_raw is not None:
            self.is_raw = is_raw
        if memo is not None:
            self.memo = memo
        if name is not None:
            self.name = name
        if tags is not None:
            self.tags = tags

    @property
    def display_id(self):
        """Gets the display_id of this DataApiModelsSimpleOutputModel.  # noqa: E501


        :return: The display_id of this DataApiModelsSimpleOutputModel.  # noqa: E501
        :rtype: int
        """
        return self._display_id

    @display_id.setter
    def display_id(self, display_id):
        """Sets the display_id of this DataApiModelsSimpleOutputModel.


        :param display_id: The display_id of this DataApiModelsSimpleOutputModel.  # noqa: E501
        :type: int
        """

        self._display_id = display_id

    @property
    def id(self):
        """Gets the id of this DataApiModelsSimpleOutputModel.  # noqa: E501


        :return: The id of this DataApiModelsSimpleOutputModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataApiModelsSimpleOutputModel.


        :param id: The id of this DataApiModelsSimpleOutputModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_raw(self):
        """Gets the is_raw of this DataApiModelsSimpleOutputModel.  # noqa: E501


        :return: The is_raw of this DataApiModelsSimpleOutputModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_raw

    @is_raw.setter
    def is_raw(self, is_raw):
        """Sets the is_raw of this DataApiModelsSimpleOutputModel.


        :param is_raw: The is_raw of this DataApiModelsSimpleOutputModel.  # noqa: E501
        :type: bool
        """

        self._is_raw = is_raw

    @property
    def memo(self):
        """Gets the memo of this DataApiModelsSimpleOutputModel.  # noqa: E501


        :return: The memo of this DataApiModelsSimpleOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this DataApiModelsSimpleOutputModel.


        :param memo: The memo of this DataApiModelsSimpleOutputModel.  # noqa: E501
        :type: str
        """

        self._memo = memo

    @property
    def name(self):
        """Gets the name of this DataApiModelsSimpleOutputModel.  # noqa: E501


        :return: The name of this DataApiModelsSimpleOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataApiModelsSimpleOutputModel.


        :param name: The name of this DataApiModelsSimpleOutputModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this DataApiModelsSimpleOutputModel.  # noqa: E501


        :return: The tags of this DataApiModelsSimpleOutputModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DataApiModelsSimpleOutputModel.


        :param tags: The tags of this DataApiModelsSimpleOutputModel.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataApiModelsSimpleOutputModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataApiModelsSimpleOutputModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
