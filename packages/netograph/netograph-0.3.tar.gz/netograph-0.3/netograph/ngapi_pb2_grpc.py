# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import netograph.ngapi_pb2 as ngapi__pb2


class NetographStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.TempCapture = channel.unary_unary(
        '/Netograph/TempCapture',
        request_serializer=ngapi__pb2.TempCaptureRequest.SerializeToString,
        response_deserializer=ngapi__pb2.TempCaptureResult.FromString,
        )
    self.Datasets = channel.unary_stream(
        '/Netograph/Datasets',
        request_serializer=ngapi__pb2.DatasetsRequest.SerializeToString,
        response_deserializer=ngapi__pb2.Dataset.FromString,
        )
    self.SubmitCapture = channel.unary_unary(
        '/Netograph/SubmitCapture',
        request_serializer=ngapi__pb2.SubmitCaptureRequest.SerializeToString,
        response_deserializer=ngapi__pb2.SubmitCaptureResult.FromString,
        )
    self.CaptureInfo = channel.unary_unary(
        '/Netograph/CaptureInfo',
        request_serializer=ngapi__pb2.CaptureInfoRequest.SerializeToString,
        response_deserializer=ngapi__pb2.CaptureInfoResult.FromString,
        )
    self.CaptureLog = channel.unary_stream(
        '/Netograph/CaptureLog',
        request_serializer=ngapi__pb2.CaptureLogRequest.SerializeToString,
        response_deserializer=ngapi__pb2.CaptureLogResult.FromString,
        )
    self.DomainHistory = channel.unary_stream(
        '/Netograph/DomainHistory',
        request_serializer=ngapi__pb2.DomainHistoryRequest.SerializeToString,
        response_deserializer=ngapi__pb2.DomainHistoryResult.FromString,
        )
    self.DomainSearch = channel.unary_stream(
        '/Netograph/DomainSearch',
        request_serializer=ngapi__pb2.DomainSearchRequest.SerializeToString,
        response_deserializer=ngapi__pb2.DomainSearchResult.FromString,
        )
    self.DomainsForIP = channel.unary_stream(
        '/Netograph/DomainsForIP',
        request_serializer=ngapi__pb2.DomainsForIPRequest.SerializeToString,
        response_deserializer=ngapi__pb2.DomainsForIPResult.FromString,
        )
    self.IPHistory = channel.unary_stream(
        '/Netograph/IPHistory',
        request_serializer=ngapi__pb2.IPHistoryRequest.SerializeToString,
        response_deserializer=ngapi__pb2.IPHistoryResult.FromString,
        )
    self.IPLogSearch = channel.unary_stream(
        '/Netograph/IPLogSearch',
        request_serializer=ngapi__pb2.IPLogSearchRequest.SerializeToString,
        response_deserializer=ngapi__pb2.IPLogSearchResult.FromString,
        )
    self.IPSearch = channel.unary_stream(
        '/Netograph/IPSearch',
        request_serializer=ngapi__pb2.IPSearchRequest.SerializeToString,
        response_deserializer=ngapi__pb2.IPSearchResult.FromString,
        )
    self.IPsForDomain = channel.unary_stream(
        '/Netograph/IPsForDomain',
        request_serializer=ngapi__pb2.IPsForDomainRequest.SerializeToString,
        response_deserializer=ngapi__pb2.IPsForDomainResult.FromString,
        )
    self.MetaForCapture = channel.unary_stream(
        '/Netograph/MetaForCapture',
        request_serializer=ngapi__pb2.MetaForCaptureRequest.SerializeToString,
        response_deserializer=ngapi__pb2.MetaForCaptureResult.FromString,
        )
    self.MetaSearch = channel.unary_stream(
        '/Netograph/MetaSearch',
        request_serializer=ngapi__pb2.MetaSearchRequest.SerializeToString,
        response_deserializer=ngapi__pb2.MetaSearchResult.FromString,
        )
    self.RedirsByDestination = channel.unary_stream(
        '/Netograph/RedirsByDestination',
        request_serializer=ngapi__pb2.RedirsByDestinationRequest.SerializeToString,
        response_deserializer=ngapi__pb2.RedirsByDestinationResponse.FromString,
        )
    self.RedirsBySource = channel.unary_stream(
        '/Netograph/RedirsBySource',
        request_serializer=ngapi__pb2.RedirsBySourceRequest.SerializeToString,
        response_deserializer=ngapi__pb2.RedirsBySourceResponse.FromString,
        )
    self.RootLogSearch = channel.unary_stream(
        '/Netograph/RootLogSearch',
        request_serializer=ngapi__pb2.RootLogSearchRequest.SerializeToString,
        response_deserializer=ngapi__pb2.RootLogSearchResult.FromString,
        )
    self.RootsForSatellite = channel.unary_stream(
        '/Netograph/RootsForSatellite',
        request_serializer=ngapi__pb2.RootsForSatelliteRequest.SerializeToString,
        response_deserializer=ngapi__pb2.RootsForSatelliteResult.FromString,
        )
    self.SatelliteLogSearch = channel.unary_stream(
        '/Netograph/SatelliteLogSearch',
        request_serializer=ngapi__pb2.SatelliteLogSearchRequest.SerializeToString,
        response_deserializer=ngapi__pb2.SatelliteLogSearchResult.FromString,
        )
    self.SatellitesForRoot = channel.unary_stream(
        '/Netograph/SatellitesForRoot',
        request_serializer=ngapi__pb2.SatellitesForRootRequest.SerializeToString,
        response_deserializer=ngapi__pb2.SatellitesForRootResult.FromString,
        )
    self.URLLogSearch = channel.unary_stream(
        '/Netograph/URLLogSearch',
        request_serializer=ngapi__pb2.URLLogSearchRequest.SerializeToString,
        response_deserializer=ngapi__pb2.URLLogSearchResult.FromString,
        )


class NetographServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def TempCapture(self, request, context):
    """Request a temporary capture. Temporary captures are not stored in a
    dataset, and the capture assets will be available for download for 24
    hours before being deleted.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Datasets(self, request, context):
    """List all datasets to which the authorizing account has access. This
    includes public datasets, which will be marked readonly.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SubmitCapture(self, request, context):
    """Submit a capture request to a dataset.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CaptureInfo(self, request, context):
    """Retrieve info for a specified capture by ID within a dataset.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CaptureLog(self, request, context):
    """Retrieve the capture log for a dataset, in reverse chronological order.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DomainHistory(self, request, context):
    """Retrieve the capture history for a specified domain in a dataset. The
    length of this history is capped at ~100.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DomainSearch(self, request, context):
    """Retrieve the capture log for a dataset, in reverse chronological order.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DomainsForIP(self, request, context):
    """Find all domains in the dataset associated with a given IP address.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def IPHistory(self, request, context):
    """Retrieve the capture history for a specified IP in a dataset. The
    length of this history is capped at ~100.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def IPLogSearch(self, request, context):
    """Search the dataset log for captures that contain a given IP.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def IPSearch(self, request, context):
    """Find all IPs in the dataset that match an address and integer netmask.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def IPsForDomain(self, request, context):
    """Find all IPs in a dataset associated with a given domain.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def MetaForCapture(self, request, context):
    """Get metadata associated with a specified capture within a dataset.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def MetaSearch(self, request, context):
    """Search the dataset log for captures matching a metadata query.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RedirsByDestination(self, request, context):
    """Find all redirections in the dataset for a given destination domain query.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RedirsBySource(self, request, context):
    """Find all redirections in the dataset for a given source domain query.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RootLogSearch(self, request, context):
    """Search the dataset log for captures where any root domain matches a given query.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RootsForSatellite(self, request, context):
    """Find all roots in a dataset that are associated with a given satellite query.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SatelliteLogSearch(self, request, context):
    """Search the dataset log for captures where any satellite domain matches a given query.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SatellitesForRoot(self, request, context):
    """Find all satellites in the dataset that are associated with a given root query.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def URLLogSearch(self, request, context):
    """Search the dataset log for captures where any root URL matches a given URL query.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_NetographServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'TempCapture': grpc.unary_unary_rpc_method_handler(
          servicer.TempCapture,
          request_deserializer=ngapi__pb2.TempCaptureRequest.FromString,
          response_serializer=ngapi__pb2.TempCaptureResult.SerializeToString,
      ),
      'Datasets': grpc.unary_stream_rpc_method_handler(
          servicer.Datasets,
          request_deserializer=ngapi__pb2.DatasetsRequest.FromString,
          response_serializer=ngapi__pb2.Dataset.SerializeToString,
      ),
      'SubmitCapture': grpc.unary_unary_rpc_method_handler(
          servicer.SubmitCapture,
          request_deserializer=ngapi__pb2.SubmitCaptureRequest.FromString,
          response_serializer=ngapi__pb2.SubmitCaptureResult.SerializeToString,
      ),
      'CaptureInfo': grpc.unary_unary_rpc_method_handler(
          servicer.CaptureInfo,
          request_deserializer=ngapi__pb2.CaptureInfoRequest.FromString,
          response_serializer=ngapi__pb2.CaptureInfoResult.SerializeToString,
      ),
      'CaptureLog': grpc.unary_stream_rpc_method_handler(
          servicer.CaptureLog,
          request_deserializer=ngapi__pb2.CaptureLogRequest.FromString,
          response_serializer=ngapi__pb2.CaptureLogResult.SerializeToString,
      ),
      'DomainHistory': grpc.unary_stream_rpc_method_handler(
          servicer.DomainHistory,
          request_deserializer=ngapi__pb2.DomainHistoryRequest.FromString,
          response_serializer=ngapi__pb2.DomainHistoryResult.SerializeToString,
      ),
      'DomainSearch': grpc.unary_stream_rpc_method_handler(
          servicer.DomainSearch,
          request_deserializer=ngapi__pb2.DomainSearchRequest.FromString,
          response_serializer=ngapi__pb2.DomainSearchResult.SerializeToString,
      ),
      'DomainsForIP': grpc.unary_stream_rpc_method_handler(
          servicer.DomainsForIP,
          request_deserializer=ngapi__pb2.DomainsForIPRequest.FromString,
          response_serializer=ngapi__pb2.DomainsForIPResult.SerializeToString,
      ),
      'IPHistory': grpc.unary_stream_rpc_method_handler(
          servicer.IPHistory,
          request_deserializer=ngapi__pb2.IPHistoryRequest.FromString,
          response_serializer=ngapi__pb2.IPHistoryResult.SerializeToString,
      ),
      'IPLogSearch': grpc.unary_stream_rpc_method_handler(
          servicer.IPLogSearch,
          request_deserializer=ngapi__pb2.IPLogSearchRequest.FromString,
          response_serializer=ngapi__pb2.IPLogSearchResult.SerializeToString,
      ),
      'IPSearch': grpc.unary_stream_rpc_method_handler(
          servicer.IPSearch,
          request_deserializer=ngapi__pb2.IPSearchRequest.FromString,
          response_serializer=ngapi__pb2.IPSearchResult.SerializeToString,
      ),
      'IPsForDomain': grpc.unary_stream_rpc_method_handler(
          servicer.IPsForDomain,
          request_deserializer=ngapi__pb2.IPsForDomainRequest.FromString,
          response_serializer=ngapi__pb2.IPsForDomainResult.SerializeToString,
      ),
      'MetaForCapture': grpc.unary_stream_rpc_method_handler(
          servicer.MetaForCapture,
          request_deserializer=ngapi__pb2.MetaForCaptureRequest.FromString,
          response_serializer=ngapi__pb2.MetaForCaptureResult.SerializeToString,
      ),
      'MetaSearch': grpc.unary_stream_rpc_method_handler(
          servicer.MetaSearch,
          request_deserializer=ngapi__pb2.MetaSearchRequest.FromString,
          response_serializer=ngapi__pb2.MetaSearchResult.SerializeToString,
      ),
      'RedirsByDestination': grpc.unary_stream_rpc_method_handler(
          servicer.RedirsByDestination,
          request_deserializer=ngapi__pb2.RedirsByDestinationRequest.FromString,
          response_serializer=ngapi__pb2.RedirsByDestinationResponse.SerializeToString,
      ),
      'RedirsBySource': grpc.unary_stream_rpc_method_handler(
          servicer.RedirsBySource,
          request_deserializer=ngapi__pb2.RedirsBySourceRequest.FromString,
          response_serializer=ngapi__pb2.RedirsBySourceResponse.SerializeToString,
      ),
      'RootLogSearch': grpc.unary_stream_rpc_method_handler(
          servicer.RootLogSearch,
          request_deserializer=ngapi__pb2.RootLogSearchRequest.FromString,
          response_serializer=ngapi__pb2.RootLogSearchResult.SerializeToString,
      ),
      'RootsForSatellite': grpc.unary_stream_rpc_method_handler(
          servicer.RootsForSatellite,
          request_deserializer=ngapi__pb2.RootsForSatelliteRequest.FromString,
          response_serializer=ngapi__pb2.RootsForSatelliteResult.SerializeToString,
      ),
      'SatelliteLogSearch': grpc.unary_stream_rpc_method_handler(
          servicer.SatelliteLogSearch,
          request_deserializer=ngapi__pb2.SatelliteLogSearchRequest.FromString,
          response_serializer=ngapi__pb2.SatelliteLogSearchResult.SerializeToString,
      ),
      'SatellitesForRoot': grpc.unary_stream_rpc_method_handler(
          servicer.SatellitesForRoot,
          request_deserializer=ngapi__pb2.SatellitesForRootRequest.FromString,
          response_serializer=ngapi__pb2.SatellitesForRootResult.SerializeToString,
      ),
      'URLLogSearch': grpc.unary_stream_rpc_method_handler(
          servicer.URLLogSearch,
          request_deserializer=ngapi__pb2.URLLogSearchRequest.FromString,
          response_serializer=ngapi__pb2.URLLogSearchResult.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Netograph', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
