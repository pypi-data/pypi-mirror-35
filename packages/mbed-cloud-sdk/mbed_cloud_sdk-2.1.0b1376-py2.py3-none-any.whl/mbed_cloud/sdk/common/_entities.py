"""
Entities module

This file is autogenerated from api specifications
"""

# Python 2 compatibility
from __future__ import unicode_literals
from builtins import str  # noqa
from builtins import super

from mbed_cloud.pagination import PaginatedResponse
from mbed_cloud.sdk.common.entity import Entity
from mbed_cloud.sdk.common import _enums as enums
from mbed_cloud.sdk.common import fields


class InstanceFactory:
    """Creates instances of Entities with a client mixed in"""

    def __init__(self, client):
        """InstanceFactory takes a client to attach to the models it creates"""
        self._client = client

    def api_key(self, **kwargs):
        """
        :rtype: ApiKey
        """
        return ApiKey(_client=self._client, **kwargs)

    def login_history(self, **kwargs):
        """
        :rtype: LoginHistory
        """
        return LoginHistory(_client=self._client, **kwargs)

    def my_account(self, **kwargs):
        """
        :rtype: MyAccount
        """
        return MyAccount(_client=self._client, **kwargs)

    def password_policy(self, **kwargs):
        """
        :rtype: PasswordPolicy
        """
        return PasswordPolicy(_client=self._client, **kwargs)

    def policy_group(self, **kwargs):
        """
        :rtype: PolicyGroup
        """
        return PolicyGroup(_client=self._client, **kwargs)

    def subtenant_account(self, **kwargs):
        """
        :rtype: SubtenantAccount
        """
        return SubtenantAccount(_client=self._client, **kwargs)

    def user(self, **kwargs):
        """
        :rtype: User
        """
        return User(_client=self._client, **kwargs)


class ApiKey(Entity):
    """Represents the `ApiKey` entity in Mbed Cloud"""

    # all fields available on this entity
    _fieldnames = [
        "created_at",
        "creation_time",
        "group_ids",
        "id",
        "key",
        "last_login_time",
        "name",
        "owner",
        "status",
        "updated_at",
    ]

    # common renames used when mapping {<API spec>: <SDK>}
    _renames = {"groups": "group_ids"}

    def __init__(
        self,
        _client=None,
        created_at=None,
        creation_time=None,
        group_ids=None,
        id=None,
        key=None,
        last_login_time=None,
        name=None,
        owner=None,
        status=None,
        updated_at=None,
    ):
        """Creates a local `ApiKey` instance

        :param created_at: Creation UTC time RFC3339.
        :type created_at: datetime
        :param creation_time: The timestamp of the API key creation in the storage, in
            milliseconds.
        :type creation_time: int
        :param group_ids: A list of group IDs this API key belongs to.
        :type group_ids: list
        :param id: The UUID of the API key.
        :type id: str
        :param key: The API key.
        :type key: str
        :param last_login_time: The timestamp of the latest API key usage, in milliseconds.
        :type last_login_time: int
        :param name: The display name for the API key.
        :type name: str
        :param owner: The owner of this API key, who is the creator by default.
        :type owner: str
        :param status: The status of the API key.
        :type status: str
        :param updated_at: Last update UTC time RFC3339.
        :type updated_at: datetime
        """

        super().__init__(_client=_client)

        # fields
        self._created_at = fields.DateTimeField(value=created_at)
        self._creation_time = fields.IntegerField(value=creation_time)
        self._group_ids = fields.ListField(value=group_ids)
        self._id = fields.StringField(value=id)
        self._key = fields.StringField(value=key)
        self._last_login_time = fields.IntegerField(value=last_login_time)
        self._name = fields.StringField(value=name)
        self._owner = fields.StringField(value=owner)
        self._status = fields.StringField(value=status, enum=enums.ApiKeyStatusEnum)
        self._updated_at = fields.DateTimeField(value=updated_at)

    @property
    def created_at(self):
        """Creation UTC time RFC3339.
        
        api example: '2018-02-13T09:35:20Z'
        
        :rtype: datetime
        """
        return self._created_at.value

    @created_at.setter
    def created_at(self, value):
        """Set value of `created_at`

        :param value: value to set
        :type value: datetime
        """
        self._created_at.set(value)

    @property
    def creation_time(self):
        """The timestamp of the API key creation in the storage, in milliseconds.
        
        api example: 1518630727683
        
        :rtype: int
        """
        return self._creation_time.value

    @creation_time.setter
    def creation_time(self, value):
        """Set value of `creation_time`

        :param value: value to set
        :type value: int
        """
        self._creation_time.set(value)

    @property
    def group_ids(self):
        """A list of group IDs this API key belongs to.
        
        :rtype: list
        """
        return self._group_ids.value

    @group_ids.setter
    def group_ids(self, value):
        """Set value of `group_ids`

        :param value: value to set
        :type value: list
        """
        self._group_ids.set(value)

    @property
    def id(self):
        """The UUID of the API key.
        
        api example: '01619571f7020242ac12000600000000'
        
        :rtype: str
        """
        return self._id.value

    @id.setter
    def id(self, value):
        """Set value of `id`

        :param value: value to set
        :type value: str
        """
        self._id.set(value)

    @property
    def key(self):
        """The API key.
        
        api example: 'ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac120006000000
            00'
        
        :rtype: str
        """
        return self._key.value

    @key.setter
    def key(self, value):
        """Set value of `key`

        :param value: value to set
        :type value: str
        """
        self._key.set(value)

    @property
    def last_login_time(self):
        """The timestamp of the latest API key usage, in milliseconds.
        
        api example: 1518630727688
        
        :rtype: int
        """
        return self._last_login_time.value

    @last_login_time.setter
    def last_login_time(self, value):
        """Set value of `last_login_time`

        :param value: value to set
        :type value: int
        """
        self._last_login_time.set(value)

    @property
    def name(self):
        """The display name for the API key.
        
        api example: 'API key gorgon'
        
        :rtype: str
        """
        return self._name.value

    @name.setter
    def name(self, value):
        """Set value of `name`

        :param value: value to set
        :type value: str
        """
        self._name.set(value)

    @property
    def owner(self):
        """The owner of this API key, who is the creator by default.
        
        api example: '01619571e2e89242ac12000600000000'
        
        :rtype: str
        """
        return self._owner.value

    @owner.setter
    def owner(self, value):
        """Set value of `owner`

        :param value: value to set
        :type value: str
        """
        self._owner.set(value)

    @property
    def status(self):
        """The status of the API key.
        
        api example: 'ACTIVE'
        
        :rtype: str
        """
        return self._status.value

    @status.setter
    def status(self, value):
        """Set value of `status`

        :param value: value to set
        :type value: str
        """
        self._status.set(value)

    @property
    def updated_at(self):
        """Last update UTC time RFC3339.
        
        api example: '2018-02-14T15:24:14Z'
        
        :rtype: datetime
        """
        return self._updated_at.value

    @updated_at.setter
    def updated_at(self, value):
        """Set value of `updated_at`

        :param value: value to set
        :type value: datetime
        """
        self._updated_at.set(value)

    def create(self):
        """Create a new API key.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/api-keys
        """

        return self._client.call_api(
            method="post",
            path="/v3/api-keys",
            body_params={
                "groups": self._group_ids.to_api(),
                "name": self._name.to_api(),
                "owner": self._owner.to_api(),
                "status": self._status.to_api(),
            },
            unpack=self,
        )

    def delete(self):
        """Delete API key.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/api-keys/{apiKey}
        """

        return self._client.call_api(
            method="delete",
            path="/v3/api-keys/{apiKey}",
            path_params={"apiKey": self._id.to_api()},
            unpack=self,
        )

    def get(self):
        """Get API key details.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/api-keys/{apiKey}
        """

        return self._client.call_api(
            method="get",
            path="/v3/api-keys/{apiKey}",
            path_params={"apiKey": self._id.to_api()},
            unpack=self,
        )

    def groups(self, after=None, include=None, limit=50, order="ASC"):
        """Get groups of the API key.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/api-keys/{apiKey}/groups
        
        :param after: The entity ID to fetch after the given one.
        :type after: str
        
        :param include: Comma separated additional data to return. Currently supported:
            total_count
        :type include: str
        
        :param limit: The number of results to return (2-1000), default is 50.
        :type limit: int
        
        :param order: The order of the records based on creation time, ASC or DESC; by
            default ASC
        :type order: str
        """

        def mapper(api_data):
            return PolicyGroup().from_api(**api_data)

        return PaginatedResponse(
            func=self._groups,
            lwrap_type=mapper,
            after=after,
            include=include,
            limit=limit,
            order=order,
        )

    def _groups(self, after=None, include=None, limit=None, order=None):
        """Internal 'next-page' behaviour for pagination"""

        return self._client.call_api(
            method="get",
            path="/v3/api-keys/{apiKey}/groups",
            path_params={"apiKey": self._id.to_api()},
            query_params={
                "after": fields.StringField(after).to_api(),
                "include": fields.StringField(include).to_api(),
                "limit": fields.IntegerField(limit).to_api(),
                "order": fields.StringField(order).to_api(),
            },
            unpack=False,
        )

    def list(self, after=None, include=None, limit=50, order="ASC"):
        """Get all API keys

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/api-keys
        
        :param after: The entity ID to fetch after the given one.
        :type after: str
        
        :param include: Comma separated additional data to return. Currently supported:
            total_count
        :type include: str
        
        :param limit: The number of results to return (2-1000), default is 50.
        :type limit: int
        
        :param order: The order of the records based on creation time, ASC or DESC; by
            default ASC
        :type order: str
        """

        def mapper(api_data):
            return ApiKey().from_api(**api_data)

        return PaginatedResponse(
            func=self._list,
            lwrap_type=mapper,
            after=after,
            include=include,
            limit=limit,
            order=order,
        )

    def _list(self, after=None, include=None, limit=None, order=None):
        """Internal 'next-page' behaviour for pagination"""

        return self._client.call_api(
            method="get",
            path="/v3/api-keys",
            query_params={
                "after": fields.StringField(after).to_api(),
                "include": fields.StringField(include).to_api(),
                "limit": fields.IntegerField(limit).to_api(),
                "order": fields.StringField(order).to_api(),
            },
            unpack=False,
        )

    def reset_secret(self, accountid):
        """Reset the secret key.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/accounts/{accountID}/api-keys/{apiKey}/reset-secret
        
        :param accountid: Account ID.
        :type accountid: str
        """

        return self._client.call_api(
            method="post",
            path="/v3/accounts/{accountID}/api-keys/{apiKey}/reset-secret",
            path_params={
                "accountID": fields.StringField(accountid).to_api(),
                "apiKey": self._id.to_api(),
            },
            unpack=self,
        )

    def update(self):
        """Update API key details.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/api-keys/{apiKey}
        """

        return self._client.call_api(
            method="put",
            path="/v3/api-keys/{apiKey}",
            body_params={
                "groups": self._group_ids.to_api(),
                "name": self._name.to_api(),
                "owner": self._owner.to_api(),
                "status": self._status.to_api(),
            },
            path_params={"apiKey": self._id.to_api()},
            unpack=self,
        )


class LoginHistory(Entity):
    """Represents the `LoginHistory` entity in Mbed Cloud"""

    # all fields available on this entity
    _fieldnames = ["date", "ip_address", "success", "user_agent"]

    # common renames used when mapping {<API spec>: <SDK>}
    _renames = {}

    def __init__(
        self, _client=None, date=None, ip_address=None, success=None, user_agent=None
    ):
        """Creates a local `LoginHistory` instance

        :param date: UTC time RFC3339 for this login attempt.
        :type date: datetime
        :param ip_address: IP address of the client.
        :type ip_address: str
        :param success: Flag indicating whether login attempt was successful or not.
        :type success: bool
        :param user_agent: User Agent header from the login request.
        :type user_agent: str
        """

        super().__init__(_client=_client)

        # fields
        self._date = fields.DateTimeField(value=date)
        self._ip_address = fields.StringField(value=ip_address)
        self._success = fields.BooleanField(value=success)
        self._user_agent = fields.StringField(value=user_agent)

    @property
    def date(self):
        """UTC time RFC3339 for this login attempt.
        
        api example: '2018-02-14T17:52:07Z'
        
        :rtype: datetime
        """
        return self._date.value

    @date.setter
    def date(self, value):
        """Set value of `date`

        :param value: value to set
        :type value: datetime
        """
        self._date.set(value)

    @property
    def ip_address(self):
        """IP address of the client.
        
        api example: '127.0.0.1'
        
        :rtype: str
        """
        return self._ip_address.value

    @ip_address.setter
    def ip_address(self, value):
        """Set value of `ip_address`

        :param value: value to set
        :type value: str
        """
        self._ip_address.set(value)

    @property
    def success(self):
        """Flag indicating whether login attempt was successful or not.
        
        api example: True
        
        :rtype: bool
        """
        return self._success.value

    @success.setter
    def success(self, value):
        """Set value of `success`

        :param value: value to set
        :type value: bool
        """
        self._success.set(value)

    @property
    def user_agent(self):
        """User Agent header from the login request.
        
        api example: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML,
            like Gecko) Chrome/41.0.2227.1 Safari/537.36'
        
        :rtype: str
        """
        return self._user_agent.value

    @user_agent.setter
    def user_agent(self, value):
        """Set value of `user_agent`

        :param value: value to set
        :type value: str
        """
        self._user_agent.set(value)


class MyAccount(Entity):
    """Represents the `MyAccount` entity in Mbed Cloud"""

    # all fields available on this entity
    _fieldnames = [
        "address_line1",
        "address_line2",
        "aliases",
        "city",
        "company",
        "contact",
        "contract_number",
        "country",
        "created_at",
        "custom_fields",
        "customer_number",
        "display_name",
        "email",
        "end_market",
        "expiration_warning_threshold",
        "id",
        "idle_timeout",
        "limits",
        "mfa_status",
        "notification_emails",
        "parent_id",
        "password_policy",
        "phone_number",
        "policies",
        "postal_code",
        "reason",
        "reference_note",
        "sales_contact",
        "state",
        "status",
        "sub_accounts",
        "template_id",
        "tier",
        "updated_at",
        "upgraded_at",
    ]

    # common renames used when mapping {<API spec>: <SDK>}
    _renames = {}

    def __init__(
        self,
        _client=None,
        address_line1=None,
        address_line2=None,
        aliases=None,
        city=None,
        company=None,
        contact=None,
        contract_number=None,
        country=None,
        created_at=None,
        custom_fields=None,
        customer_number=None,
        display_name=None,
        email=None,
        end_market=None,
        expiration_warning_threshold=None,
        id=None,
        idle_timeout=None,
        limits=None,
        mfa_status=None,
        notification_emails=None,
        parent_id=None,
        password_policy=None,
        phone_number=None,
        policies=None,
        postal_code=None,
        reason=None,
        reference_note=None,
        sales_contact=None,
        state=None,
        status=None,
        sub_accounts=None,
        template_id=None,
        tier=None,
        updated_at=None,
        upgraded_at=None,
    ):
        """Creates a local `MyAccount` instance

        :param address_line1: Postal address line 1.
        :type address_line1: str
        :param address_line2: Postal address line 2.
        :type address_line2: str
        :param aliases: An array of aliases.
        :type aliases: list
        :param city: The city part of the postal address.
        :type city: str
        :param company: The name of the company.
        :type company: str
        :param contact: The name of the contact person for this account.
        :type contact: str
        :param contract_number: Contract number of the customer.
        :type contract_number: str
        :param country: The country part of the postal address.
        :type country: str
        :param created_at: Creation UTC time RFC3339.
        :type created_at: datetime
        :param custom_fields: Account's custom properties as key-value pairs.
        :type custom_fields: dict
        :param customer_number: Customer number of the customer.
        :type customer_number: str
        :param display_name: The display name for the account.
        :type display_name: str
        :param email: The company email address for this account.
        :type email: str
        :param end_market: Account end market.
        :type end_market: str
        :param expiration_warning_threshold: Indicates how many days (1-180) before account expiration a
            notification email should be sent.
        :type expiration_warning_threshold: str
        :param id: Account ID.
        :type id: str
        :param idle_timeout: The reference token expiration time in minutes for this account.
        :type idle_timeout: str
        :param limits: List of limits as key-value pairs if requested.
        :type limits: dict
        :param mfa_status: The enforcement status of the multi-factor authentication, either
            'enforced' or 'optional'.
        :type mfa_status: str
        :param notification_emails: A list of notification email addresses.
        :type notification_emails: list
        :param parent_id: The ID of the parent account, if it has any.
        :type parent_id: str
        :param password_policy: 
        :type password_policy: dict
        :param phone_number: The phone number of a representative of the company.
        :type phone_number: str
        :param policies: List of policies if requested.
        :type policies: list
        :param postal_code: The postal code part of the postal address.
        :type postal_code: str
        :param reason: A reason note for updating the status of the account
        :type reason: str
        :param reference_note: A reference note for updating the status of the account
        :type reference_note: str
        :param sales_contact: Email address of the sales contact.
        :type sales_contact: str
        :param state: The state part of the postal address.
        :type state: str
        :param status: The status of the account.
        :type status: str
        :param sub_accounts: List of sub accounts. Not available for developer users.
        :type sub_accounts: list
        :param template_id: Account template ID.
        :type template_id: str
        :param tier: The tier level of the account; '0': free tier, '1': commercial
            account, '2': partner tier. Other values are reserved for the
            future.
        :type tier: str
        :param updated_at: Last update UTC time RFC3339.
        :type updated_at: datetime
        :param upgraded_at: Time when upgraded to commercial account in UTC format RFC3339.
        :type upgraded_at: datetime
        """

        super().__init__(_client=_client)

        # fields
        self._address_line1 = fields.StringField(value=address_line1)
        self._address_line2 = fields.StringField(value=address_line2)
        self._aliases = fields.ListField(value=aliases)
        self._city = fields.StringField(value=city)
        self._company = fields.StringField(value=company)
        self._contact = fields.StringField(value=contact)
        self._contract_number = fields.StringField(value=contract_number)
        self._country = fields.StringField(value=country)
        self._created_at = fields.DateTimeField(value=created_at)
        self._custom_fields = fields.DictField(value=custom_fields)
        self._customer_number = fields.StringField(value=customer_number)
        self._display_name = fields.StringField(value=display_name)
        self._email = fields.StringField(value=email)
        self._end_market = fields.StringField(value=end_market)
        self._expiration_warning_threshold = fields.StringField(
            value=expiration_warning_threshold
        )
        self._id = fields.StringField(value=id)
        self._idle_timeout = fields.StringField(value=idle_timeout)
        self._limits = fields.DictField(value=limits)
        self._mfa_status = fields.StringField(
            value=mfa_status, enum=enums.MyAccountMfaStatusEnum
        )
        self._notification_emails = fields.ListField(value=notification_emails)
        self._parent_id = fields.StringField(value=parent_id)
        self._password_policy = fields.DictField(
            value=password_policy, entity=PasswordPolicy
        )
        self._phone_number = fields.StringField(value=phone_number)
        self._policies = fields.ListField(value=policies)
        self._postal_code = fields.StringField(value=postal_code)
        self._reason = fields.StringField(value=reason)
        self._reference_note = fields.StringField(value=reference_note)
        self._sales_contact = fields.StringField(value=sales_contact)
        self._state = fields.StringField(value=state)
        self._status = fields.StringField(value=status, enum=enums.MyAccountStatusEnum)
        self._sub_accounts = fields.ListField(
            value=sub_accounts, entity=SubtenantAccount
        )
        self._template_id = fields.StringField(value=template_id)
        self._tier = fields.StringField(value=tier)
        self._updated_at = fields.DateTimeField(value=updated_at)
        self._upgraded_at = fields.DateTimeField(value=upgraded_at)

    @property
    def address_line1(self):
        """Postal address line 1.
        
        api example: '110 Fulbourn Rd'
        
        :rtype: str
        """
        return self._address_line1.value

    @address_line1.setter
    def address_line1(self, value):
        """Set value of `address_line1`

        :param value: value to set
        :type value: str
        """
        self._address_line1.set(value)

    @property
    def address_line2(self):
        """Postal address line 2.
        
        api example: ' '
        
        :rtype: str
        """
        return self._address_line2.value

    @address_line2.setter
    def address_line2(self, value):
        """Set value of `address_line2`

        :param value: value to set
        :type value: str
        """
        self._address_line2.set(value)

    @property
    def aliases(self):
        """An array of aliases.
        
        :rtype: list
        """
        return self._aliases.value

    @aliases.setter
    def aliases(self, value):
        """Set value of `aliases`

        :param value: value to set
        :type value: list
        """
        self._aliases.set(value)

    @property
    def city(self):
        """The city part of the postal address.
        
        api example: 'Cambridge'
        
        :rtype: str
        """
        return self._city.value

    @city.setter
    def city(self, value):
        """Set value of `city`

        :param value: value to set
        :type value: str
        """
        self._city.set(value)

    @property
    def company(self):
        """The name of the company.
        
        api example: 'ARM Holdings Plc'
        
        :rtype: str
        """
        return self._company.value

    @company.setter
    def company(self, value):
        """Set value of `company`

        :param value: value to set
        :type value: str
        """
        self._company.set(value)

    @property
    def contact(self):
        """The name of the contact person for this account.
        
        api example: 'J. Doe'
        
        :rtype: str
        """
        return self._contact.value

    @contact.setter
    def contact(self, value):
        """Set value of `contact`

        :param value: value to set
        :type value: str
        """
        self._contact.set(value)

    @property
    def contract_number(self):
        """Contract number of the customer.
        
        api example: '1NX25_0001'
        
        :rtype: str
        """
        return self._contract_number.value

    @contract_number.setter
    def contract_number(self, value):
        """Set value of `contract_number`

        :param value: value to set
        :type value: str
        """
        self._contract_number.set(value)

    @property
    def country(self):
        """The country part of the postal address.
        
        api example: 'United Kingdom'
        
        :rtype: str
        """
        return self._country.value

    @country.setter
    def country(self, value):
        """Set value of `country`

        :param value: value to set
        :type value: str
        """
        self._country.set(value)

    @property
    def created_at(self):
        """Creation UTC time RFC3339.
        
        api example: '2018-02-13T09:35:20Z'
        
        :rtype: datetime
        """
        return self._created_at.value

    @created_at.setter
    def created_at(self, value):
        """Set value of `created_at`

        :param value: value to set
        :type value: datetime
        """
        self._created_at.set(value)

    @property
    def custom_fields(self):
        """Account's custom properties as key-value pairs.
        
        :rtype: dict
        """
        return self._custom_fields.value

    @custom_fields.setter
    def custom_fields(self, value):
        """Set value of `custom_fields`

        :param value: value to set
        :type value: dict
        """
        self._custom_fields.set(value)

    @property
    def customer_number(self):
        """Customer number of the customer.
        
        api example: '1NC25_0001'
        
        :rtype: str
        """
        return self._customer_number.value

    @customer_number.setter
    def customer_number(self, value):
        """Set value of `customer_number`

        :param value: value to set
        :type value: str
        """
        self._customer_number.set(value)

    @property
    def display_name(self):
        """The display name for the account.
        
        api example: 'ARM'
        
        :rtype: str
        """
        return self._display_name.value

    @display_name.setter
    def display_name(self, value):
        """Set value of `display_name`

        :param value: value to set
        :type value: str
        """
        self._display_name.set(value)

    @property
    def email(self):
        """The company email address for this account.
        
        api example: 'info@arm.com'
        
        :rtype: str
        """
        return self._email.value

    @email.setter
    def email(self, value):
        """Set value of `email`

        :param value: value to set
        :type value: str
        """
        self._email.set(value)

    @property
    def end_market(self):
        """Account end market.
        
        api example: 'IT'
        
        :rtype: str
        """
        return self._end_market.value

    @end_market.setter
    def end_market(self, value):
        """Set value of `end_market`

        :param value: value to set
        :type value: str
        """
        self._end_market.set(value)

    @property
    def expiration_warning_threshold(self):
        """Indicates how many days (1-180) before account expiration a notification email
        should be sent.
        
        api example: '180'
        
        :rtype: str
        """
        return self._expiration_warning_threshold.value

    @expiration_warning_threshold.setter
    def expiration_warning_threshold(self, value):
        """Set value of `expiration_warning_threshold`

        :param value: value to set
        :type value: str
        """
        self._expiration_warning_threshold.set(value)

    @property
    def id(self):
        """Account ID.
        
        api example: '01619571e2e90242ac12000600000000'
        
        :rtype: str
        """
        return self._id.value

    @id.setter
    def id(self, value):
        """Set value of `id`

        :param value: value to set
        :type value: str
        """
        self._id.set(value)

    @property
    def idle_timeout(self):
        """The reference token expiration time in minutes for this account.
        
        api example: '30'
        
        :rtype: str
        """
        return self._idle_timeout.value

    @idle_timeout.setter
    def idle_timeout(self, value):
        """Set value of `idle_timeout`

        :param value: value to set
        :type value: str
        """
        self._idle_timeout.set(value)

    @property
    def limits(self):
        """List of limits as key-value pairs if requested.
        
        :rtype: dict
        """
        return self._limits.value

    @limits.setter
    def limits(self, value):
        """Set value of `limits`

        :param value: value to set
        :type value: dict
        """
        self._limits.set(value)

    @property
    def mfa_status(self):
        """The enforcement status of the multi-factor authentication, either 'enforced'
        or 'optional'.
        
        :rtype: str
        """
        return self._mfa_status.value

    @mfa_status.setter
    def mfa_status(self, value):
        """Set value of `mfa_status`

        :param value: value to set
        :type value: str
        """
        self._mfa_status.set(value)

    @property
    def notification_emails(self):
        """A list of notification email addresses.
        
        :rtype: list
        """
        return self._notification_emails.value

    @notification_emails.setter
    def notification_emails(self, value):
        """Set value of `notification_emails`

        :param value: value to set
        :type value: list
        """
        self._notification_emails.set(value)

    @property
    def parent_id(self):
        """The ID of the parent account, if it has any.
        
        api example: '01619571dad80242ac12000600000000'
        
        :rtype: str
        """
        return self._parent_id.value

    @parent_id.setter
    def parent_id(self, value):
        """Set value of `parent_id`

        :param value: value to set
        :type value: str
        """
        self._parent_id.set(value)

    @property
    def password_policy(self):
        """
        
        :rtype: dict[PasswordPolicy]
        """
        return self._password_policy.value

    @password_policy.setter
    def password_policy(self, value):
        """Set value of `password_policy`

        :param value: value to set
        :type value: dict[PasswordPolicy]
        """
        self._password_policy.set(value)

    @property
    def phone_number(self):
        """The phone number of a representative of the company.
        
        api example: '+44 (1223) 400 400'
        
        :rtype: str
        """
        return self._phone_number.value

    @phone_number.setter
    def phone_number(self, value):
        """Set value of `phone_number`

        :param value: value to set
        :type value: str
        """
        self._phone_number.set(value)

    @property
    def policies(self):
        """List of policies if requested.
        
        :rtype: list
        """
        return self._policies.value

    @policies.setter
    def policies(self, value):
        """Set value of `policies`

        :param value: value to set
        :type value: list
        """
        self._policies.set(value)

    @property
    def postal_code(self):
        """The postal code part of the postal address.
        
        api example: 'CB1 9NJ'
        
        :rtype: str
        """
        return self._postal_code.value

    @postal_code.setter
    def postal_code(self, value):
        """Set value of `postal_code`

        :param value: value to set
        :type value: str
        """
        self._postal_code.set(value)

    @property
    def reason(self):
        """A reason note for updating the status of the account
        
        api example: 'Subscription paid.'
        
        :rtype: str
        """
        return self._reason.value

    @reason.setter
    def reason(self, value):
        """Set value of `reason`

        :param value: value to set
        :type value: str
        """
        self._reason.set(value)

    @property
    def reference_note(self):
        """A reference note for updating the status of the account
        
        api example: 'ARM-INT-0001'
        
        :rtype: str
        """
        return self._reference_note.value

    @reference_note.setter
    def reference_note(self, value):
        """Set value of `reference_note`

        :param value: value to set
        :type value: str
        """
        self._reference_note.set(value)

    @property
    def sales_contact(self):
        """Email address of the sales contact.
        
        api example: 'sales@arm.com'
        
        :rtype: str
        """
        return self._sales_contact.value

    @sales_contact.setter
    def sales_contact(self, value):
        """Set value of `sales_contact`

        :param value: value to set
        :type value: str
        """
        self._sales_contact.set(value)

    @property
    def state(self):
        """The state part of the postal address.
        
        api example: ' '
        
        :rtype: str
        """
        return self._state.value

    @state.setter
    def state(self, value):
        """Set value of `state`

        :param value: value to set
        :type value: str
        """
        self._state.set(value)

    @property
    def status(self):
        """The status of the account.
        
        api example: 'ACTIVE'
        
        :rtype: str
        """
        return self._status.value

    @status.setter
    def status(self, value):
        """Set value of `status`

        :param value: value to set
        :type value: str
        """
        self._status.set(value)

    @property
    def sub_accounts(self):
        """List of sub accounts. Not available for developer users.
        
        :rtype: list[SubtenantAccount]
        """
        return self._sub_accounts.value

    @sub_accounts.setter
    def sub_accounts(self, value):
        """Set value of `sub_accounts`

        :param value: value to set
        :type value: list[SubtenantAccount]
        """
        self._sub_accounts.set(value)

    @property
    def template_id(self):
        """Account template ID.
        
        api example: '01619571e7160242ac12000600000000'
        
        :rtype: str
        """
        return self._template_id.value

    @template_id.setter
    def template_id(self, value):
        """Set value of `template_id`

        :param value: value to set
        :type value: str
        """
        self._template_id.set(value)

    @property
    def tier(self):
        """The tier level of the account; '0': free tier, '1': commercial account, '2':
        partner tier. Other values are reserved for the future.
        
        api example: '1'
        
        :rtype: str
        """
        return self._tier.value

    @tier.setter
    def tier(self, value):
        """Set value of `tier`

        :param value: value to set
        :type value: str
        """
        self._tier.set(value)

    @property
    def updated_at(self):
        """Last update UTC time RFC3339.
        
        api example: '2018-02-14T15:24:14Z'
        
        :rtype: datetime
        """
        return self._updated_at.value

    @updated_at.setter
    def updated_at(self, value):
        """Set value of `updated_at`

        :param value: value to set
        :type value: datetime
        """
        self._updated_at.set(value)

    @property
    def upgraded_at(self):
        """Time when upgraded to commercial account in UTC format RFC3339.
        
        api example: '2018-02-14T15:24:14Z'
        
        :rtype: datetime
        """
        return self._upgraded_at.value

    @upgraded_at.setter
    def upgraded_at(self, value):
        """Set value of `upgraded_at`

        :param value: value to set
        :type value: datetime
        """
        self._upgraded_at.set(value)

    def get(self, include=None, properties=None):
        """Get account info.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/accounts/me
        
        :param include: Comma separated additional data to return. Currently supported:
            limits, policies, sub_accounts.
        :type include: str
        
        :param properties: Property name to be returned from account specific properties.
        :type properties: str
        """

        return self._client.call_api(
            method="get",
            path="/v3/accounts/me",
            query_params={
                "include": fields.StringField(include).to_api(),
                "properties": fields.StringField(properties).to_api(),
            },
            unpack=self,
        )

    def update(self):
        """Updates attributes of the account.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/accounts/me
        """

        return self._client.call_api(
            method="put",
            path="/v3/accounts/me",
            body_params={
                "address_line1": self._address_line1.to_api(),
                "address_line2": self._address_line2.to_api(),
                "aliases": self._aliases.to_api(),
                "city": self._city.to_api(),
                "company": self._company.to_api(),
                "contact": self._contact.to_api(),
                "country": self._country.to_api(),
                "custom_fields": self._custom_fields.to_api(),
                "display_name": self._display_name.to_api(),
                "email": self._email.to_api(),
                "end_market": self._end_market.to_api(),
                "expiration_warning_threshold": self._expiration_warning_threshold.to_api(),
                "idle_timeout": self._idle_timeout.to_api(),
                "mfa_status": self._mfa_status.to_api(),
                "notification_emails": self._notification_emails.to_api(),
                "password_policy": self._password_policy.to_api(),
                "phone_number": self._phone_number.to_api(),
                "postal_code": self._postal_code.to_api(),
                "state": self._state.to_api(),
            },
            unpack=self,
        )


class PasswordPolicy(Entity):
    """Represents the `PasswordPolicy` entity in Mbed Cloud"""

    # all fields available on this entity
    _fieldnames = ["minimum_length"]

    # common renames used when mapping {<API spec>: <SDK>}
    _renames = {}

    def __init__(self, _client=None, minimum_length=None):
        """Creates a local `PasswordPolicy` instance

        :param minimum_length: Minimum length for the password. A number between 8 and 512.
        :type minimum_length: str
        """

        super().__init__(_client=_client)

        # fields
        self._minimum_length = fields.StringField(value=minimum_length)

    @property
    def minimum_length(self):
        """Minimum length for the password. A number between 8 and 512.
        
        api example: '8'
        
        :rtype: str
        """
        return self._minimum_length.value

    @minimum_length.setter
    def minimum_length(self, value):
        """Set value of `minimum_length`

        :param value: value to set
        :type value: str
        """
        self._minimum_length.set(value)


class PolicyGroup(Entity):
    """Represents the `PolicyGroup` entity in Mbed Cloud"""

    # all fields available on this entity
    _fieldnames = [
        "account_id",
        "apikey_count",
        "created_at",
        "id",
        "name",
        "updated_at",
        "user_count",
    ]

    # common renames used when mapping {<API spec>: <SDK>}
    _renames = {}

    def __init__(
        self,
        _client=None,
        account_id=None,
        apikey_count=None,
        created_at=None,
        id=None,
        name=None,
        updated_at=None,
        user_count=None,
    ):
        """Creates a local `PolicyGroup` instance

        :param account_id: The UUID of the account this group belongs to.
        :type account_id: str
        :param apikey_count: The number of API keys in this group.
        :type apikey_count: int
        :param created_at: Creation UTC time RFC3339.
        :type created_at: datetime
        :param id: The UUID of the group.
        :type id: str
        :param name: The name of the group.
        :type name: str
        :param updated_at: Last update UTC time RFC3339.
        :type updated_at: datetime
        :param user_count: The number of users in this group.
        :type user_count: int
        """

        super().__init__(_client=_client)

        # fields
        self._account_id = fields.StringField(value=account_id)
        self._apikey_count = fields.IntegerField(value=apikey_count)
        self._created_at = fields.DateTimeField(value=created_at)
        self._id = fields.StringField(value=id)
        self._name = fields.StringField(value=name)
        self._updated_at = fields.DateTimeField(value=updated_at)
        self._user_count = fields.IntegerField(value=user_count)

    @property
    def account_id(self):
        """The UUID of the account this group belongs to.
        
        api example: '01619571e2e90242ac12000600000000'
        
        :rtype: str
        """
        return self._account_id.value

    @account_id.setter
    def account_id(self, value):
        """Set value of `account_id`

        :param value: value to set
        :type value: str
        """
        self._account_id.set(value)

    @property
    def apikey_count(self):
        """The number of API keys in this group.
        
        :rtype: int
        """
        return self._apikey_count.value

    @apikey_count.setter
    def apikey_count(self, value):
        """Set value of `apikey_count`

        :param value: value to set
        :type value: int
        """
        self._apikey_count.set(value)

    @property
    def created_at(self):
        """Creation UTC time RFC3339.
        
        api example: '2018-02-13T09:35:20Z'
        
        :rtype: datetime
        """
        return self._created_at.value

    @created_at.setter
    def created_at(self, value):
        """Set value of `created_at`

        :param value: value to set
        :type value: datetime
        """
        self._created_at.set(value)

    @property
    def id(self):
        """The UUID of the group.
        
        api example: '01619571dec00242ac12000600000000'
        
        :rtype: str
        """
        return self._id.value

    @id.setter
    def id(self, value):
        """Set value of `id`

        :param value: value to set
        :type value: str
        """
        self._id.set(value)

    @property
    def name(self):
        """The name of the group.
        
        api example: 'Administrators'
        
        :rtype: str
        """
        return self._name.value

    @name.setter
    def name(self, value):
        """Set value of `name`

        :param value: value to set
        :type value: str
        """
        self._name.set(value)

    @property
    def updated_at(self):
        """Last update UTC time RFC3339.
        
        api example: '2018-02-14T15:24:14Z'
        
        :rtype: datetime
        """
        return self._updated_at.value

    @updated_at.setter
    def updated_at(self, value):
        """Set value of `updated_at`

        :param value: value to set
        :type value: datetime
        """
        self._updated_at.set(value)

    @property
    def user_count(self):
        """The number of users in this group.
        
        api example: 1
        
        :rtype: int
        """
        return self._user_count.value

    @user_count.setter
    def user_count(self, value):
        """Set value of `user_count`

        :param value: value to set
        :type value: int
        """
        self._user_count.set(value)

    def api_keys(self, after=None, include=None, limit=50, order="ASC"):
        """Get the API keys of a group.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/policy-groups/{groupID}/api-keys
        
        :param after: The entity ID to fetch after the given one.
        :type after: str
        
        :param include: Comma separated additional data to return. Currently supported:
            total_count
        :type include: str
        
        :param limit: The number of results to return (2-1000), default is 50.
        :type limit: int
        
        :param order: The order of the records based on creation time, ASC or DESC; by
            default ASC
        :type order: str
        """

        def mapper(api_data):
            return ApiKey().from_api(**api_data)

        return PaginatedResponse(
            func=self._api_keys,
            lwrap_type=mapper,
            after=after,
            include=include,
            limit=limit,
            order=order,
        )

    def _api_keys(self, after=None, include=None, limit=None, order=None):
        """Internal 'next-page' behaviour for pagination"""

        return self._client.call_api(
            method="get",
            path="/v3/policy-groups/{groupID}/api-keys",
            path_params={"groupID": self._id.to_api()},
            query_params={
                "after": fields.StringField(after).to_api(),
                "include": fields.StringField(include).to_api(),
                "limit": fields.IntegerField(limit).to_api(),
                "order": fields.StringField(order).to_api(),
            },
            unpack=False,
        )

    def get(self):
        """Get group information.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/policy-groups/{groupID}
        """

        return self._client.call_api(
            method="get",
            path="/v3/policy-groups/{groupID}",
            path_params={"groupID": self._id.to_api()},
            unpack=self,
        )

    def list(self, after=None, include=None, limit=50, name__eq=None, order="ASC"):
        """Get all group information.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/policy-groups
        
        :param after: The entity ID to fetch after the given one.
        :type after: str
        
        :param include: Comma separated additional data to return. Currently supported:
            total_count
        :type include: str
        
        :param limit: The number of results to return (2-1000), default is 50.
        :type limit: int
        
        :param name__eq: Filter for group name
        :type name__eq: str
        
        :param order: The order of the records based on creation time, ASC or DESC; by
            default ASC
        :type order: str
        """

        def mapper(api_data):
            return PolicyGroup().from_api(**api_data)

        return PaginatedResponse(
            func=self._list,
            lwrap_type=mapper,
            after=after,
            include=include,
            limit=limit,
            name__eq=name__eq,
            order=order,
        )

    def _list(self, after=None, include=None, limit=None, name__eq=None, order=None):
        """Internal 'next-page' behaviour for pagination"""

        return self._client.call_api(
            method="get",
            path="/v3/policy-groups",
            query_params={
                "after": fields.StringField(after).to_api(),
                "include": fields.StringField(include).to_api(),
                "limit": fields.IntegerField(limit).to_api(),
                "name__eq": fields.StringField(name__eq).to_api(),
                "order": fields.StringField(order).to_api(),
            },
            unpack=False,
        )

    def users(self, after=None, include=None, limit=50, order="ASC"):
        """Get users of a group.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/policy-groups/{groupID}/users
        
        :param after: The entity ID to fetch after the given one.
        :type after: str
        
        :param include: Comma separated additional data to return. Currently supported:
            total_count
        :type include: str
        
        :param limit: The number of results to return (2-1000), default is 50.
        :type limit: int
        
        :param order: The order of the records based on creation time, ASC or DESC; by
            default ASC
        :type order: str
        """

        def mapper(api_data):
            return User().from_api(**api_data)

        return PaginatedResponse(
            func=self._users,
            lwrap_type=mapper,
            after=after,
            include=include,
            limit=limit,
            order=order,
        )

    def _users(self, after=None, include=None, limit=None, order=None):
        """Internal 'next-page' behaviour for pagination"""

        return self._client.call_api(
            method="get",
            path="/v3/policy-groups/{groupID}/users",
            path_params={"groupID": self._id.to_api()},
            query_params={
                "after": fields.StringField(after).to_api(),
                "include": fields.StringField(include).to_api(),
                "limit": fields.IntegerField(limit).to_api(),
                "order": fields.StringField(order).to_api(),
            },
            unpack=False,
        )


class SubtenantAccount(Entity):
    """Represents the `SubtenantAccount` entity in Mbed Cloud"""

    # all fields available on this entity
    _fieldnames = [
        "address_line1",
        "address_line2",
        "admin_email",
        "admin_full_name",
        "admin_id",
        "admin_key",
        "admin_name",
        "admin_password",
        "aliases",
        "city",
        "company",
        "contact",
        "contract_number",
        "country",
        "created_at",
        "custom_fields",
        "customer_number",
        "display_name",
        "email",
        "end_market",
        "expiration_warning_threshold",
        "id",
        "idle_timeout",
        "limits",
        "mfa_status",
        "notification_emails",
        "parent_id",
        "password_policy",
        "phone_number",
        "policies",
        "postal_code",
        "reason",
        "reference_note",
        "sales_contact",
        "state",
        "status",
        "sub_accounts",
        "template_id",
        "tier",
        "updated_at",
        "upgraded_at",
    ]

    # common renames used when mapping {<API spec>: <SDK>}
    _renames = {}

    def __init__(
        self,
        _client=None,
        address_line1=None,
        address_line2=None,
        admin_email=None,
        admin_full_name=None,
        admin_id=None,
        admin_key=None,
        admin_name=None,
        admin_password=None,
        aliases=None,
        city=None,
        company=None,
        contact=None,
        contract_number=None,
        country=None,
        created_at=None,
        custom_fields=None,
        customer_number=None,
        display_name=None,
        email=None,
        end_market=None,
        expiration_warning_threshold=None,
        id=None,
        idle_timeout=None,
        limits=None,
        mfa_status=None,
        notification_emails=None,
        parent_id=None,
        password_policy=None,
        phone_number=None,
        policies=None,
        postal_code=None,
        reason=None,
        reference_note=None,
        sales_contact=None,
        state=None,
        status=None,
        sub_accounts=None,
        template_id=None,
        tier=None,
        updated_at=None,
        upgraded_at=None,
    ):
        """Creates a local `SubtenantAccount` instance

        :param address_line1: Postal address line 1.
        :type address_line1: str
        :param address_line2: Postal address line 2.
        :type address_line2: str
        :param admin_email: The email address of the account admin, not longer than 254
            characters.
        :type admin_email: str
        :param admin_full_name: The full name of the admin user to be created.
        :type admin_full_name: str
        :param admin_id: The ID of the admin user created.
        :type admin_id: str
        :param admin_key: The admin API key created for the account.
        :type admin_key: str
        :param admin_name: The username of the admin user to be created, containing
            alphanumerical letters and -,._@+= characters. It must be at least
            4 but not more than 30 character long.
        :type admin_name: str
        :param admin_password: The password when creating a new user. It will be generated when
            not present in the request.
        :type admin_password: str
        :param aliases: An array of aliases.
        :type aliases: list
        :param city: The city part of the postal address.
        :type city: str
        :param company: The name of the company.
        :type company: str
        :param contact: The name of the contact person for this account.
        :type contact: str
        :param contract_number: Contract number of the customer.
        :type contract_number: str
        :param country: The country part of the postal address.
        :type country: str
        :param created_at: Creation UTC time RFC3339.
        :type created_at: datetime
        :param custom_fields: Account's custom properties as key-value pairs.
        :type custom_fields: dict
        :param customer_number: Customer number of the customer.
        :type customer_number: str
        :param display_name: The display name for the account.
        :type display_name: str
        :param email: The company email address for this account.
        :type email: str
        :param end_market: Account end market.
        :type end_market: str
        :param expiration_warning_threshold: Indicates how many days (1-180) before account expiration a
            notification email should be sent.
        :type expiration_warning_threshold: str
        :param id: Account ID.
        :type id: str
        :param idle_timeout: The reference token expiration time in minutes for this account.
        :type idle_timeout: str
        :param limits: List of limits as key-value pairs if requested.
        :type limits: dict
        :param mfa_status: The enforcement status of the multi-factor authentication, either
            'enforced' or 'optional'.
        :type mfa_status: str
        :param notification_emails: A list of notification email addresses.
        :type notification_emails: list
        :param parent_id: The ID of the parent account, if it has any.
        :type parent_id: str
        :param password_policy: 
        :type password_policy: dict
        :param phone_number: The phone number of a representative of the company.
        :type phone_number: str
        :param policies: List of policies if requested.
        :type policies: list
        :param postal_code: The postal code part of the postal address.
        :type postal_code: str
        :param reason: A reason note for updating the status of the account
        :type reason: str
        :param reference_note: A reference note for updating the status of the account
        :type reference_note: str
        :param sales_contact: Email address of the sales contact.
        :type sales_contact: str
        :param state: The state part of the postal address.
        :type state: str
        :param status: The status of the account.
        :type status: str
        :param sub_accounts: List of sub accounts. Not available for developer users.
        :type sub_accounts: list
        :param template_id: Account template ID.
        :type template_id: str
        :param tier: The tier level of the account; '0': free tier, '1': commercial
            account, '2': partner tier. Other values are reserved for the
            future.
        :type tier: str
        :param updated_at: Last update UTC time RFC3339.
        :type updated_at: datetime
        :param upgraded_at: Time when upgraded to commercial account in UTC format RFC3339.
        :type upgraded_at: datetime
        """

        super().__init__(_client=_client)

        # fields
        self._address_line1 = fields.StringField(value=address_line1)
        self._address_line2 = fields.StringField(value=address_line2)
        self._admin_email = fields.StringField(value=admin_email)
        self._admin_full_name = fields.StringField(value=admin_full_name)
        self._admin_id = fields.StringField(value=admin_id)
        self._admin_key = fields.StringField(value=admin_key)
        self._admin_name = fields.StringField(value=admin_name)
        self._admin_password = fields.StringField(value=admin_password)
        self._aliases = fields.ListField(value=aliases)
        self._city = fields.StringField(value=city)
        self._company = fields.StringField(value=company)
        self._contact = fields.StringField(value=contact)
        self._contract_number = fields.StringField(value=contract_number)
        self._country = fields.StringField(value=country)
        self._created_at = fields.DateTimeField(value=created_at)
        self._custom_fields = fields.DictField(value=custom_fields)
        self._customer_number = fields.StringField(value=customer_number)
        self._display_name = fields.StringField(value=display_name)
        self._email = fields.StringField(value=email)
        self._end_market = fields.StringField(value=end_market)
        self._expiration_warning_threshold = fields.StringField(
            value=expiration_warning_threshold
        )
        self._id = fields.StringField(value=id)
        self._idle_timeout = fields.StringField(value=idle_timeout)
        self._limits = fields.DictField(value=limits)
        self._mfa_status = fields.StringField(
            value=mfa_status, enum=enums.SubtenantAccountMfaStatusEnum
        )
        self._notification_emails = fields.ListField(value=notification_emails)
        self._parent_id = fields.StringField(value=parent_id)
        self._password_policy = fields.DictField(
            value=password_policy, entity=PasswordPolicy
        )
        self._phone_number = fields.StringField(value=phone_number)
        self._policies = fields.ListField(value=policies)
        self._postal_code = fields.StringField(value=postal_code)
        self._reason = fields.StringField(value=reason)
        self._reference_note = fields.StringField(value=reference_note)
        self._sales_contact = fields.StringField(value=sales_contact)
        self._state = fields.StringField(value=state)
        self._status = fields.StringField(
            value=status, enum=enums.SubtenantAccountStatusEnum
        )
        self._sub_accounts = fields.ListField(
            value=sub_accounts, entity=SubtenantAccount
        )
        self._template_id = fields.StringField(value=template_id)
        self._tier = fields.StringField(value=tier)
        self._updated_at = fields.DateTimeField(value=updated_at)
        self._upgraded_at = fields.DateTimeField(value=upgraded_at)

    @property
    def address_line1(self):
        """Postal address line 1.
        
        api example: '110 Fulbourn Rd'
        
        :rtype: str
        """
        return self._address_line1.value

    @address_line1.setter
    def address_line1(self, value):
        """Set value of `address_line1`

        :param value: value to set
        :type value: str
        """
        self._address_line1.set(value)

    @property
    def address_line2(self):
        """Postal address line 2.
        
        api example: ' '
        
        :rtype: str
        """
        return self._address_line2.value

    @address_line2.setter
    def address_line2(self, value):
        """Set value of `address_line2`

        :param value: value to set
        :type value: str
        """
        self._address_line2.set(value)

    @property
    def admin_email(self):
        """The email address of the account admin, not longer than 254 characters.
        
        api example: 'admin@arm.com'
        
        :rtype: str
        """
        return self._admin_email.value

    @admin_email.setter
    def admin_email(self, value):
        """Set value of `admin_email`

        :param value: value to set
        :type value: str
        """
        self._admin_email.set(value)

    @property
    def admin_full_name(self):
        """The full name of the admin user to be created.
        
        api example: 'Admin Doe'
        
        :rtype: str
        """
        return self._admin_full_name.value

    @admin_full_name.setter
    def admin_full_name(self, value):
        """Set value of `admin_full_name`

        :param value: value to set
        :type value: str
        """
        self._admin_full_name.set(value)

    @property
    def admin_id(self):
        """The ID of the admin user created.
        
        api example: '01619571e2e89242ac12000600000000'
        
        :rtype: str
        """
        return self._admin_id.value

    @admin_id.setter
    def admin_id(self, value):
        """Set value of `admin_id`

        :param value: value to set
        :type value: str
        """
        self._admin_id.set(value)

    @property
    def admin_key(self):
        """The admin API key created for the account.
        
        api example: 'ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac120006000000
            00B40IkJADMANmAscAj0Ot0n2yeQnyt9tT'
        
        :rtype: str
        """
        return self._admin_key.value

    @admin_key.setter
    def admin_key(self, value):
        """Set value of `admin_key`

        :param value: value to set
        :type value: str
        """
        self._admin_key.set(value)

    @property
    def admin_name(self):
        """The username of the admin user to be created, containing alphanumerical
        letters and -,._@+= characters. It must be at least 4 but not more than 30
        character long.
        
        api example: 'admin'
        
        :rtype: str
        """
        return self._admin_name.value

    @admin_name.setter
    def admin_name(self, value):
        """Set value of `admin_name`

        :param value: value to set
        :type value: str
        """
        self._admin_name.set(value)

    @property
    def admin_password(self):
        """The password when creating a new user. It will be generated when not present
        in the request.
        
        api example: 'PZf9eEUH43DAPE9ULINFeuj'
        
        :rtype: str
        """
        return self._admin_password.value

    @admin_password.setter
    def admin_password(self, value):
        """Set value of `admin_password`

        :param value: value to set
        :type value: str
        """
        self._admin_password.set(value)

    @property
    def aliases(self):
        """An array of aliases.
        
        :rtype: list
        """
        return self._aliases.value

    @aliases.setter
    def aliases(self, value):
        """Set value of `aliases`

        :param value: value to set
        :type value: list
        """
        self._aliases.set(value)

    @property
    def city(self):
        """The city part of the postal address.
        
        api example: 'Cambridge'
        
        :rtype: str
        """
        return self._city.value

    @city.setter
    def city(self, value):
        """Set value of `city`

        :param value: value to set
        :type value: str
        """
        self._city.set(value)

    @property
    def company(self):
        """The name of the company.
        
        api example: 'ARM Holdings Plc'
        
        :rtype: str
        """
        return self._company.value

    @company.setter
    def company(self, value):
        """Set value of `company`

        :param value: value to set
        :type value: str
        """
        self._company.set(value)

    @property
    def contact(self):
        """The name of the contact person for this account.
        
        api example: 'J. Doe'
        
        :rtype: str
        """
        return self._contact.value

    @contact.setter
    def contact(self, value):
        """Set value of `contact`

        :param value: value to set
        :type value: str
        """
        self._contact.set(value)

    @property
    def contract_number(self):
        """Contract number of the customer.
        
        api example: '1NX25_0001'
        
        :rtype: str
        """
        return self._contract_number.value

    @contract_number.setter
    def contract_number(self, value):
        """Set value of `contract_number`

        :param value: value to set
        :type value: str
        """
        self._contract_number.set(value)

    @property
    def country(self):
        """The country part of the postal address.
        
        api example: 'United Kingdom'
        
        :rtype: str
        """
        return self._country.value

    @country.setter
    def country(self, value):
        """Set value of `country`

        :param value: value to set
        :type value: str
        """
        self._country.set(value)

    @property
    def created_at(self):
        """Creation UTC time RFC3339.
        
        api example: '2018-02-13T09:35:20Z'
        
        :rtype: datetime
        """
        return self._created_at.value

    @created_at.setter
    def created_at(self, value):
        """Set value of `created_at`

        :param value: value to set
        :type value: datetime
        """
        self._created_at.set(value)

    @property
    def custom_fields(self):
        """Account's custom properties as key-value pairs.
        
        :rtype: dict
        """
        return self._custom_fields.value

    @custom_fields.setter
    def custom_fields(self, value):
        """Set value of `custom_fields`

        :param value: value to set
        :type value: dict
        """
        self._custom_fields.set(value)

    @property
    def customer_number(self):
        """Customer number of the customer.
        
        api example: '1NC25_0001'
        
        :rtype: str
        """
        return self._customer_number.value

    @customer_number.setter
    def customer_number(self, value):
        """Set value of `customer_number`

        :param value: value to set
        :type value: str
        """
        self._customer_number.set(value)

    @property
    def display_name(self):
        """The display name for the account.
        
        api example: 'ARM'
        
        :rtype: str
        """
        return self._display_name.value

    @display_name.setter
    def display_name(self, value):
        """Set value of `display_name`

        :param value: value to set
        :type value: str
        """
        self._display_name.set(value)

    @property
    def email(self):
        """The company email address for this account.
        
        api example: 'info@arm.com'
        
        :rtype: str
        """
        return self._email.value

    @email.setter
    def email(self, value):
        """Set value of `email`

        :param value: value to set
        :type value: str
        """
        self._email.set(value)

    @property
    def end_market(self):
        """Account end market.
        
        api example: 'IT'
        
        :rtype: str
        """
        return self._end_market.value

    @end_market.setter
    def end_market(self, value):
        """Set value of `end_market`

        :param value: value to set
        :type value: str
        """
        self._end_market.set(value)

    @property
    def expiration_warning_threshold(self):
        """Indicates how many days (1-180) before account expiration a notification email
        should be sent.
        
        api example: '180'
        
        :rtype: str
        """
        return self._expiration_warning_threshold.value

    @expiration_warning_threshold.setter
    def expiration_warning_threshold(self, value):
        """Set value of `expiration_warning_threshold`

        :param value: value to set
        :type value: str
        """
        self._expiration_warning_threshold.set(value)

    @property
    def id(self):
        """Account ID.
        
        api example: '01619571e2e90242ac12000600000000'
        
        :rtype: str
        """
        return self._id.value

    @id.setter
    def id(self, value):
        """Set value of `id`

        :param value: value to set
        :type value: str
        """
        self._id.set(value)

    @property
    def idle_timeout(self):
        """The reference token expiration time in minutes for this account.
        
        api example: '30'
        
        :rtype: str
        """
        return self._idle_timeout.value

    @idle_timeout.setter
    def idle_timeout(self, value):
        """Set value of `idle_timeout`

        :param value: value to set
        :type value: str
        """
        self._idle_timeout.set(value)

    @property
    def limits(self):
        """List of limits as key-value pairs if requested.
        
        :rtype: dict
        """
        return self._limits.value

    @limits.setter
    def limits(self, value):
        """Set value of `limits`

        :param value: value to set
        :type value: dict
        """
        self._limits.set(value)

    @property
    def mfa_status(self):
        """The enforcement status of the multi-factor authentication, either 'enforced'
        or 'optional'.
        
        :rtype: str
        """
        return self._mfa_status.value

    @mfa_status.setter
    def mfa_status(self, value):
        """Set value of `mfa_status`

        :param value: value to set
        :type value: str
        """
        self._mfa_status.set(value)

    @property
    def notification_emails(self):
        """A list of notification email addresses.
        
        :rtype: list
        """
        return self._notification_emails.value

    @notification_emails.setter
    def notification_emails(self, value):
        """Set value of `notification_emails`

        :param value: value to set
        :type value: list
        """
        self._notification_emails.set(value)

    @property
    def parent_id(self):
        """The ID of the parent account, if it has any.
        
        api example: '01619571dad80242ac12000600000000'
        
        :rtype: str
        """
        return self._parent_id.value

    @parent_id.setter
    def parent_id(self, value):
        """Set value of `parent_id`

        :param value: value to set
        :type value: str
        """
        self._parent_id.set(value)

    @property
    def password_policy(self):
        """
        
        :rtype: dict[PasswordPolicy]
        """
        return self._password_policy.value

    @password_policy.setter
    def password_policy(self, value):
        """Set value of `password_policy`

        :param value: value to set
        :type value: dict[PasswordPolicy]
        """
        self._password_policy.set(value)

    @property
    def phone_number(self):
        """The phone number of a representative of the company.
        
        api example: '+44 (1223) 400 400'
        
        :rtype: str
        """
        return self._phone_number.value

    @phone_number.setter
    def phone_number(self, value):
        """Set value of `phone_number`

        :param value: value to set
        :type value: str
        """
        self._phone_number.set(value)

    @property
    def policies(self):
        """List of policies if requested.
        
        :rtype: list
        """
        return self._policies.value

    @policies.setter
    def policies(self, value):
        """Set value of `policies`

        :param value: value to set
        :type value: list
        """
        self._policies.set(value)

    @property
    def postal_code(self):
        """The postal code part of the postal address.
        
        api example: 'CB1 9NJ'
        
        :rtype: str
        """
        return self._postal_code.value

    @postal_code.setter
    def postal_code(self, value):
        """Set value of `postal_code`

        :param value: value to set
        :type value: str
        """
        self._postal_code.set(value)

    @property
    def reason(self):
        """A reason note for updating the status of the account
        
        api example: 'Subscription paid.'
        
        :rtype: str
        """
        return self._reason.value

    @reason.setter
    def reason(self, value):
        """Set value of `reason`

        :param value: value to set
        :type value: str
        """
        self._reason.set(value)

    @property
    def reference_note(self):
        """A reference note for updating the status of the account
        
        api example: 'ARM-INT-0001'
        
        :rtype: str
        """
        return self._reference_note.value

    @reference_note.setter
    def reference_note(self, value):
        """Set value of `reference_note`

        :param value: value to set
        :type value: str
        """
        self._reference_note.set(value)

    @property
    def sales_contact(self):
        """Email address of the sales contact.
        
        api example: 'sales@arm.com'
        
        :rtype: str
        """
        return self._sales_contact.value

    @sales_contact.setter
    def sales_contact(self, value):
        """Set value of `sales_contact`

        :param value: value to set
        :type value: str
        """
        self._sales_contact.set(value)

    @property
    def state(self):
        """The state part of the postal address.
        
        api example: ' '
        
        :rtype: str
        """
        return self._state.value

    @state.setter
    def state(self, value):
        """Set value of `state`

        :param value: value to set
        :type value: str
        """
        self._state.set(value)

    @property
    def status(self):
        """The status of the account.
        
        api example: 'ACTIVE'
        
        :rtype: str
        """
        return self._status.value

    @status.setter
    def status(self, value):
        """Set value of `status`

        :param value: value to set
        :type value: str
        """
        self._status.set(value)

    @property
    def sub_accounts(self):
        """List of sub accounts. Not available for developer users.
        
        :rtype: list[SubtenantAccount]
        """
        return self._sub_accounts.value

    @sub_accounts.setter
    def sub_accounts(self, value):
        """Set value of `sub_accounts`

        :param value: value to set
        :type value: list[SubtenantAccount]
        """
        self._sub_accounts.set(value)

    @property
    def template_id(self):
        """Account template ID.
        
        api example: '01619571e7160242ac12000600000000'
        
        :rtype: str
        """
        return self._template_id.value

    @template_id.setter
    def template_id(self, value):
        """Set value of `template_id`

        :param value: value to set
        :type value: str
        """
        self._template_id.set(value)

    @property
    def tier(self):
        """The tier level of the account; '0': free tier, '1': commercial account, '2':
        partner tier. Other values are reserved for the future.
        
        api example: '1'
        
        :rtype: str
        """
        return self._tier.value

    @tier.setter
    def tier(self, value):
        """Set value of `tier`

        :param value: value to set
        :type value: str
        """
        self._tier.set(value)

    @property
    def updated_at(self):
        """Last update UTC time RFC3339.
        
        api example: '2018-02-14T15:24:14Z'
        
        :rtype: datetime
        """
        return self._updated_at.value

    @updated_at.setter
    def updated_at(self, value):
        """Set value of `updated_at`

        :param value: value to set
        :type value: datetime
        """
        self._updated_at.set(value)

    @property
    def upgraded_at(self):
        """Time when upgraded to commercial account in UTC format RFC3339.
        
        api example: '2018-02-14T15:24:14Z'
        
        :rtype: datetime
        """
        return self._upgraded_at.value

    @upgraded_at.setter
    def upgraded_at(self, value):
        """Set value of `upgraded_at`

        :param value: value to set
        :type value: datetime
        """
        self._upgraded_at.set(value)

    def api_keys(self, after=None, include=None, limit=50, order="ASC"):
        """Get all API keys.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/accounts/{accountID}/api-keys
        
        :param after: The entity ID to fetch after the given one.
        :type after: str
        
        :param include: Comma separated additional data to return. Currently supported:
            total_count
        :type include: str
        
        :param limit: The number of results to return (2-1000), default is 50.
        :type limit: int
        
        :param order: The order of the records based on creation time, ASC or DESC; by
            default ASC
        :type order: str
        """

        def mapper(api_data):
            return ApiKey().from_api(**api_data)

        return PaginatedResponse(
            func=self._api_keys,
            lwrap_type=mapper,
            after=after,
            include=include,
            limit=limit,
            order=order,
        )

    def _api_keys(self, after=None, include=None, limit=None, order=None):
        """Internal 'next-page' behaviour for pagination"""

        return self._client.call_api(
            method="get",
            path="/v3/accounts/{accountID}/api-keys",
            path_params={"accountID": self._id.to_api()},
            query_params={
                "after": fields.StringField(after).to_api(),
                "include": fields.StringField(include).to_api(),
                "limit": fields.IntegerField(limit).to_api(),
                "order": fields.StringField(order).to_api(),
            },
            unpack=False,
        )

    def create(self, action="create"):
        """Create a new account.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/accounts
        
        :param action: Action, either 'create' or 'enroll'. <ul><li>'create' creates the
            account where its admin user has ACTIVE status if admin_password was
            defined in the request, or RESET status if no admin_password was
            defined. If the user already exists, its status is not modified.
            </li><li>'enroll' creates the account where its admin user has
            ENROLLING status. If the user already exists, its status is not
            modified. Email to finish the enrollment or to notify the existing
            user about the new account is sent to the admin_email defined in the
            request. </li></ul>
        :type action: str
        """

        return self._client.call_api(
            method="post",
            path="/v3/accounts",
            body_params={
                "address_line1": self._address_line1.to_api(),
                "address_line2": self._address_line2.to_api(),
                "admin_email": self._admin_email.to_api(),
                "admin_full_name": self._admin_full_name.to_api(),
                "admin_name": self._admin_name.to_api(),
                "admin_password": self._admin_password.to_api(),
                "aliases": self._aliases.to_api(),
                "city": self._city.to_api(),
                "company": self._company.to_api(),
                "contact": self._contact.to_api(),
                "contract_number": self._contract_number.to_api(),
                "country": self._country.to_api(),
                "customer_number": self._customer_number.to_api(),
                "display_name": self._display_name.to_api(),
                "email": self._email.to_api(),
                "end_market": self._end_market.to_api(),
                "phone_number": self._phone_number.to_api(),
                "postal_code": self._postal_code.to_api(),
                "state": self._state.to_api(),
            },
            query_params={"action": fields.StringField(action).to_api()},
            unpack=self,
        )

    def get(self, include=None, properties=None):
        """Get account info.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/accounts/{accountID}
        
        :param include: Comma separated additional data to return. Currently supported:
            limits, policies, sub_accounts
        :type include: str
        
        :param properties: Property name to be returned from account specific properties.
        :type properties: str
        """

        return self._client.call_api(
            method="get",
            path="/v3/accounts/{accountID}",
            path_params={"accountID": self._id.to_api()},
            query_params={
                "include": fields.StringField(include).to_api(),
                "properties": fields.StringField(properties).to_api(),
            },
            unpack=self,
        )

    def groups(self, after=None, include=None, limit=50, name__eq=None, order="ASC"):
        """Get all group information.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/accounts/{accountID}/policy-groups
        
        :param after: The entity ID to fetch after the given one.
        :type after: str
        
        :param include: Comma separated additional data to return. Currently supported:
            total_count
        :type include: str
        
        :param limit: The number of results to return (2-1000), default is 50.
        :type limit: int
        
        :param name__eq: Filter for group name
        :type name__eq: str
        
        :param order: The order of the records based on creation time, ASC or DESC; by
            default ASC
        :type order: str
        """

        def mapper(api_data):
            return PolicyGroup().from_api(**api_data)

        return PaginatedResponse(
            func=self._groups,
            lwrap_type=mapper,
            after=after,
            include=include,
            limit=limit,
            name__eq=name__eq,
            order=order,
        )

    def _groups(self, after=None, include=None, limit=None, name__eq=None, order=None):
        """Internal 'next-page' behaviour for pagination"""

        return self._client.call_api(
            method="get",
            path="/v3/accounts/{accountID}/policy-groups",
            path_params={"accountID": self._id.to_api()},
            query_params={
                "after": fields.StringField(after).to_api(),
                "include": fields.StringField(include).to_api(),
                "limit": fields.IntegerField(limit).to_api(),
                "name__eq": fields.StringField(name__eq).to_api(),
                "order": fields.StringField(order).to_api(),
            },
            unpack=False,
        )

    def list(
        self,
        after=None,
        country__like=None,
        end_market__eq=None,
        format=None,
        include=None,
        limit=1000,
        order="ASC",
        parent__eq=None,
        properties=None,
        tier__eq=None,
    ):
        """Get all accounts.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/accounts
        
        :param after: The entity ID to fetch after the given one.
        :type after: str
        
        :param country__like: An optional filter for account country. Finds all matches where the
            filter value is a case insensitive substring of the result. Example:
            country__like=LAND matches Ireland.
        :type country__like: str
        
        :param end_market__eq: An optional filter for account end market.
        :type end_market__eq: str
        
        :param format: Format information for the response to the query, supported:
            format=breakdown.
        :type format: str
        
        :param include: Comma separated additional data to return. Currently supported:
            limits, policies, sub_accounts
        :type include: str
        
        :param limit: The number of results to return (2-1000), default is 1000.
        :type limit: int
        
        :param order: The order of the records based on creation time, ASC or DESC. Default
            value is ASC
        :type order: str
        
        :param parent__eq: An optional filter for parent account ID.
        :type parent__eq: str
        
        :param properties: Property name to be returned from account specific properties.
        :type properties: str
        
        :param tier__eq: An optional filter for tier level, must be 0, 1, 2, 98, 99 or omitted.
        :type tier__eq: str
        """

        def mapper(api_data):
            return SubtenantAccount().from_api(**api_data)

        return PaginatedResponse(
            func=self._list,
            lwrap_type=mapper,
            after=after,
            country__like=country__like,
            end_market__eq=end_market__eq,
            format=format,
            include=include,
            limit=limit,
            order=order,
            parent__eq=parent__eq,
            properties=properties,
            tier__eq=tier__eq,
        )

    def _list(
        self,
        after=None,
        country__like=None,
        end_market__eq=None,
        format=None,
        include=None,
        limit=None,
        order=None,
        parent__eq=None,
        properties=None,
        tier__eq=None,
    ):
        """Internal 'next-page' behaviour for pagination"""

        return self._client.call_api(
            method="get",
            path="/v3/accounts",
            query_params={
                "after": fields.StringField(after).to_api(),
                "country__like": fields.StringField(country__like).to_api(),
                "end_market__eq": fields.StringField(end_market__eq).to_api(),
                "format": fields.StringField(format).to_api(),
                "include": fields.StringField(include).to_api(),
                "limit": fields.IntegerField(limit).to_api(),
                "order": fields.StringField(order).to_api(),
                "parent__eq": fields.StringField(parent__eq).to_api(),
                "properties": fields.StringField(properties).to_api(),
                "tier__eq": fields.StringField(tier__eq).to_api(),
            },
            unpack=False,
        )

    def update(self):
        """Update attributes of an existing account.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/accounts/{accountID}
        """

        return self._client.call_api(
            method="put",
            path="/v3/accounts/{accountID}",
            body_params={
                "address_line1": self._address_line1.to_api(),
                "address_line2": self._address_line2.to_api(),
                "aliases": self._aliases.to_api(),
                "city": self._city.to_api(),
                "company": self._company.to_api(),
                "contact": self._contact.to_api(),
                "contract_number": self._contract_number.to_api(),
                "country": self._country.to_api(),
                "custom_fields": self._custom_fields.to_api(),
                "customer_number": self._customer_number.to_api(),
                "display_name": self._display_name.to_api(),
                "email": self._email.to_api(),
                "end_market": self._end_market.to_api(),
                "expiration_warning_threshold": self._expiration_warning_threshold.to_api(),
                "idle_timeout": self._idle_timeout.to_api(),
                "mfa_status": self._mfa_status.to_api(),
                "notification_emails": self._notification_emails.to_api(),
                "password_policy": self._password_policy.to_api(),
                "phone_number": self._phone_number.to_api(),
                "postal_code": self._postal_code.to_api(),
                "sales_contact": self._sales_contact.to_api(),
                "state": self._state.to_api(),
            },
            path_params={"accountID": self._id.to_api()},
            unpack=self,
        )

    def users(self, after=None, include=None, limit=50, order="ASC"):
        """Get all user details.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/accounts/{accountID}/users
        
        :param after: The entity ID to fetch after the given one.
        :type after: str
        
        :param include: Comma separated additional data to return. Currently supported:
            total_count
        :type include: str
        
        :param limit: The number of results to return (2-1000), default is 50.
        :type limit: int
        
        :param order: The order of the records based on creation time, ASC or DESC; by
            default ASC
        :type order: str
        """

        def mapper(api_data):
            return User().from_api(**api_data)

        return PaginatedResponse(
            func=self._users,
            lwrap_type=mapper,
            after=after,
            include=include,
            limit=limit,
            order=order,
        )

    def _users(self, after=None, include=None, limit=None, order=None):
        """Internal 'next-page' behaviour for pagination"""

        return self._client.call_api(
            method="get",
            path="/v3/accounts/{accountID}/users",
            path_params={"accountID": self._id.to_api()},
            query_params={
                "after": fields.StringField(after).to_api(),
                "include": fields.StringField(include).to_api(),
                "limit": fields.IntegerField(limit).to_api(),
                "order": fields.StringField(order).to_api(),
            },
            unpack=False,
        )


class User(Entity):
    """Represents the `User` entity in Mbed Cloud"""

    # all fields available on this entity
    _fieldnames = [
        "account_id",
        "address",
        "created_at",
        "creation_time",
        "email",
        "email_verified",
        "full_name",
        "group_ids",
        "id",
        "last_login_time",
        "login_history",
        "marketing_accepted",
        "password",
        "password_changed_time",
        "phone_number",
        "status",
        "terms_accepted",
        "two_factor_authentication",
        "updated_at",
        "username",
    ]

    # common renames used when mapping {<API spec>: <SDK>}
    _renames = {
        "groups": "group_ids",
        "is_marketing_accepted": "marketing_accepted",
        "is_gtc_accepted": "terms_accepted",
        "is_totp_enabled": "two_factor_authentication",
    }

    def __init__(
        self,
        _client=None,
        account_id=None,
        address=None,
        created_at=None,
        creation_time=None,
        email=None,
        email_verified=None,
        full_name=None,
        group_ids=None,
        id=None,
        last_login_time=None,
        login_history=None,
        marketing_accepted=None,
        password=None,
        password_changed_time=None,
        phone_number=None,
        status=None,
        terms_accepted=None,
        two_factor_authentication=None,
        updated_at=None,
        username=None,
    ):
        """Creates a local `User` instance

        :param account_id: The UUID of the account.
        :type account_id: str
        :param address: Address.
        :type address: str
        :param created_at: Creation UTC time RFC3339.
        :type created_at: datetime
        :param creation_time: A timestamp of the user creation in the storage, in milliseconds.
        :type creation_time: int
        :param email: The email address.
        :type email: str
        :param email_verified: A flag indicating whether the user's email address has been
            verified or not.
        :type email_verified: bool
        :param full_name: The full name of the user.
        :type full_name: str
        :param group_ids: A list of IDs of the groups this user belongs to.
        :type group_ids: list
        :param id: The UUID of the user.
        :type id: str
        :param last_login_time: A timestamp of the latest login of the user, in milliseconds.
        :type last_login_time: int
        :param login_history: Timestamps, succeedings, IP addresses and user agent information
            of the last five logins of the user, with timestamps in RFC3339
            format.
        :type login_history: list
        :param marketing_accepted: A flag indicating that receiving marketing information has been
            accepted.
        :type marketing_accepted: bool
        :param password: The password when creating a new user. It will be generated when
            not present in the request.
        :type password: str
        :param password_changed_time: A timestamp of the latest change of the user password, in
            milliseconds.
        :type password_changed_time: int
        :param phone_number: Phone number.
        :type phone_number: str
        :param status: The status of the user. ENROLLING state indicates that the user is
            in the middle of the enrollment process. INVITED means that the
            user has not accepted the invitation request. RESET means that the
            password must be changed immediately. INACTIVE users are locked
            out and not permitted to use the system.
        :type status: str
        :param terms_accepted: A flag indicating that the General Terms and Conditions has been
            accepted.
        :type terms_accepted: bool
        :param two_factor_authentication: A flag indicating whether 2-factor authentication (TOTP) has been
            enabled.
        :type two_factor_authentication: bool
        :param updated_at: Last update UTC time RFC3339.
        :type updated_at: datetime
        :param username: A username containing alphanumerical letters and -,._@+=
            characters.
        :type username: str
        """

        super().__init__(_client=_client)

        # fields
        self._account_id = fields.StringField(value=account_id)
        self._address = fields.StringField(value=address)
        self._created_at = fields.DateTimeField(value=created_at)
        self._creation_time = fields.IntegerField(value=creation_time)
        self._email = fields.StringField(value=email)
        self._email_verified = fields.BooleanField(value=email_verified)
        self._full_name = fields.StringField(value=full_name)
        self._group_ids = fields.ListField(value=group_ids)
        self._id = fields.StringField(value=id)
        self._last_login_time = fields.IntegerField(value=last_login_time)
        self._login_history = fields.ListField(value=login_history, entity=LoginHistory)
        self._marketing_accepted = fields.BooleanField(value=marketing_accepted)
        self._password = fields.StringField(value=password)
        self._password_changed_time = fields.IntegerField(value=password_changed_time)
        self._phone_number = fields.StringField(value=phone_number)
        self._status = fields.StringField(value=status, enum=enums.UserStatusEnum)
        self._terms_accepted = fields.BooleanField(value=terms_accepted)
        self._two_factor_authentication = fields.BooleanField(
            value=two_factor_authentication
        )
        self._updated_at = fields.DateTimeField(value=updated_at)
        self._username = fields.StringField(value=username)

    @property
    def account_id(self):
        """The UUID of the account.
        
        api example: '01619571e2e90242ac12000600000000'
        
        :rtype: str
        """
        return self._account_id.value

    @account_id.setter
    def account_id(self, value):
        """Set value of `account_id`

        :param value: value to set
        :type value: str
        """
        self._account_id.set(value)

    @property
    def address(self):
        """Address.
        
        api example: '110 Fulbourn Rd, Cambridge, United Kingdom'
        
        :rtype: str
        """
        return self._address.value

    @address.setter
    def address(self, value):
        """Set value of `address`

        :param value: value to set
        :type value: str
        """
        self._address.set(value)

    @property
    def created_at(self):
        """Creation UTC time RFC3339.
        
        api example: '2018-02-13T09:35:20Z'
        
        :rtype: datetime
        """
        return self._created_at.value

    @created_at.setter
    def created_at(self, value):
        """Set value of `created_at`

        :param value: value to set
        :type value: datetime
        """
        self._created_at.set(value)

    @property
    def creation_time(self):
        """A timestamp of the user creation in the storage, in milliseconds.
        
        api example: 1518630727683
        
        :rtype: int
        """
        return self._creation_time.value

    @creation_time.setter
    def creation_time(self, value):
        """Set value of `creation_time`

        :param value: value to set
        :type value: int
        """
        self._creation_time.set(value)

    @property
    def email(self):
        """The email address.
        
        api example: 'user@arm.com'
        
        :rtype: str
        """
        return self._email.value

    @email.setter
    def email(self, value):
        """Set value of `email`

        :param value: value to set
        :type value: str
        """
        self._email.set(value)

    @property
    def email_verified(self):
        """A flag indicating whether the user's email address has been verified or not.
        
        api example: True
        
        :rtype: bool
        """
        return self._email_verified.value

    @email_verified.setter
    def email_verified(self, value):
        """Set value of `email_verified`

        :param value: value to set
        :type value: bool
        """
        self._email_verified.set(value)

    @property
    def full_name(self):
        """The full name of the user.
        
        api example: 'User Doe'
        
        :rtype: str
        """
        return self._full_name.value

    @full_name.setter
    def full_name(self, value):
        """Set value of `full_name`

        :param value: value to set
        :type value: str
        """
        self._full_name.set(value)

    @property
    def group_ids(self):
        """A list of IDs of the groups this user belongs to.
        
        :rtype: list
        """
        return self._group_ids.value

    @group_ids.setter
    def group_ids(self, value):
        """Set value of `group_ids`

        :param value: value to set
        :type value: list
        """
        self._group_ids.set(value)

    @property
    def id(self):
        """The UUID of the user.
        
        api example: '01619571e2e89242ac12000600000000'
        
        :rtype: str
        """
        return self._id.value

    @id.setter
    def id(self, value):
        """Set value of `id`

        :param value: value to set
        :type value: str
        """
        self._id.set(value)

    @property
    def last_login_time(self):
        """A timestamp of the latest login of the user, in milliseconds.
        
        api example: 1518630727688
        
        :rtype: int
        """
        return self._last_login_time.value

    @last_login_time.setter
    def last_login_time(self, value):
        """Set value of `last_login_time`

        :param value: value to set
        :type value: int
        """
        self._last_login_time.set(value)

    @property
    def login_history(self):
        """Timestamps, succeedings, IP addresses and user agent information of the last
        five logins of the user, with timestamps in RFC3339 format.
        
        :rtype: list[LoginHistory]
        """
        return self._login_history.value

    @login_history.setter
    def login_history(self, value):
        """Set value of `login_history`

        :param value: value to set
        :type value: list[LoginHistory]
        """
        self._login_history.set(value)

    @property
    def marketing_accepted(self):
        """A flag indicating that receiving marketing information has been accepted.
        
        api example: True
        
        :rtype: bool
        """
        return self._marketing_accepted.value

    @marketing_accepted.setter
    def marketing_accepted(self, value):
        """Set value of `marketing_accepted`

        :param value: value to set
        :type value: bool
        """
        self._marketing_accepted.set(value)

    @property
    def password(self):
        """The password when creating a new user. It will be generated when not present
        in the request.
        
        api example: 'PZf9eEUH43DAPE9ULINFeuj'
        
        :rtype: str
        """
        return self._password.value

    @password.setter
    def password(self, value):
        """Set value of `password`

        :param value: value to set
        :type value: str
        """
        self._password.set(value)

    @property
    def password_changed_time(self):
        """A timestamp of the latest change of the user password, in milliseconds.
        
        api example: 1518630727688
        
        :rtype: int
        """
        return self._password_changed_time.value

    @password_changed_time.setter
    def password_changed_time(self, value):
        """Set value of `password_changed_time`

        :param value: value to set
        :type value: int
        """
        self._password_changed_time.set(value)

    @property
    def phone_number(self):
        """Phone number.
        
        api example: '+44 (1223) 400 400'
        
        :rtype: str
        """
        return self._phone_number.value

    @phone_number.setter
    def phone_number(self, value):
        """Set value of `phone_number`

        :param value: value to set
        :type value: str
        """
        self._phone_number.set(value)

    @property
    def status(self):
        """The status of the user. ENROLLING state indicates that the user is in the
        middle of the enrollment process. INVITED means that the user has not accepted
        the invitation request. RESET means that the password must be changed
        immediately. INACTIVE users are locked out and not permitted to use the
        system.
        
        api example: 'ACTIVE'
        
        :rtype: str
        """
        return self._status.value

    @status.setter
    def status(self, value):
        """Set value of `status`

        :param value: value to set
        :type value: str
        """
        self._status.set(value)

    @property
    def terms_accepted(self):
        """A flag indicating that the General Terms and Conditions has been accepted.
        
        api example: True
        
        :rtype: bool
        """
        return self._terms_accepted.value

    @terms_accepted.setter
    def terms_accepted(self, value):
        """Set value of `terms_accepted`

        :param value: value to set
        :type value: bool
        """
        self._terms_accepted.set(value)

    @property
    def two_factor_authentication(self):
        """A flag indicating whether 2-factor authentication (TOTP) has been enabled.
        
        api example: True
        
        :rtype: bool
        """
        return self._two_factor_authentication.value

    @two_factor_authentication.setter
    def two_factor_authentication(self, value):
        """Set value of `two_factor_authentication`

        :param value: value to set
        :type value: bool
        """
        self._two_factor_authentication.set(value)

    @property
    def updated_at(self):
        """Last update UTC time RFC3339.
        
        api example: '2018-02-14T15:24:14Z'
        
        :rtype: datetime
        """
        return self._updated_at.value

    @updated_at.setter
    def updated_at(self, value):
        """Set value of `updated_at`

        :param value: value to set
        :type value: datetime
        """
        self._updated_at.set(value)

    @property
    def username(self):
        """A username containing alphanumerical letters and -,._@+= characters.
        
        api example: 'admin'
        
        :rtype: str
        """
        return self._username.value

    @username.setter
    def username(self, value):
        """Set value of `username`

        :param value: value to set
        :type value: str
        """
        self._username.set(value)

    def create(self, action="create"):
        """Create a new user.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/users
        
        :param action: Action, either 'create' or 'invite'.
        :type action: str
        """

        return self._client.call_api(
            method="post",
            path="/v3/users",
            body_params={
                "address": self._address.to_api(),
                "email": self._email.to_api(),
                "full_name": self._full_name.to_api(),
                "groups": self._group_ids.to_api(),
                "is_marketing_accepted": self._marketing_accepted.to_api(),
                "password": self._password.to_api(),
                "phone_number": self._phone_number.to_api(),
                "is_gtc_accepted": self._terms_accepted.to_api(),
                "username": self._username.to_api(),
            },
            query_params={"action": fields.StringField(action).to_api()},
            unpack=self,
        )

    def delete(self):
        """Delete a user.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/users/{user-id}
        """

        return self._client.call_api(
            method="delete",
            path="/v3/users/{user-id}",
            path_params={"user-id": self._id.to_api()},
            unpack=self,
        )

    def get(self):
        """Details of a user.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/users/{user-id}
        """

        return self._client.call_api(
            method="get",
            path="/v3/users/{user-id}",
            path_params={"user-id": self._id.to_api()},
            unpack=self,
        )

    def groups(self, after=None, include=None, limit=50, order="ASC"):
        """Get groups of the user.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/users/{user-id}/groups
        
        :param after: The entity ID to fetch after the given one.
        :type after: str
        
        :param include: Comma separated additional data to return. Currently supported:
            total_count
        :type include: str
        
        :param limit: The number of results to return (2-1000), default is 50.
        :type limit: int
        
        :param order: The order of the records based on creation time, ASC or DESC; by
            default ASC
        :type order: str
        """

        def mapper(api_data):
            return PolicyGroup().from_api(**api_data)

        return PaginatedResponse(
            func=self._groups,
            lwrap_type=mapper,
            after=after,
            include=include,
            limit=limit,
            order=order,
        )

    def _groups(self, after=None, include=None, limit=None, order=None):
        """Internal 'next-page' behaviour for pagination"""

        return self._client.call_api(
            method="get",
            path="/v3/users/{user-id}/groups",
            path_params={"user-id": self._id.to_api()},
            query_params={
                "after": fields.StringField(after).to_api(),
                "include": fields.StringField(include).to_api(),
                "limit": fields.IntegerField(limit).to_api(),
                "order": fields.StringField(order).to_api(),
            },
            unpack=False,
        )

    def list(self, after=None, include=None, limit=50, order="ASC"):
        """Get the details of all users.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/users
        
        :param after: The entity ID to fetch after the given one.
        :type after: str
        
        :param include: Comma separated additional data to return. Currently supported:
            total_count
        :type include: str
        
        :param limit: The number of results to return (2-1000), default is 50.
        :type limit: int
        
        :param order: The order of the records based on creation time, ASC or DESC; by
            default ASC
        :type order: str
        """

        def mapper(api_data):
            return User().from_api(**api_data)

        return PaginatedResponse(
            func=self._list,
            lwrap_type=mapper,
            after=after,
            include=include,
            limit=limit,
            order=order,
        )

    def _list(self, after=None, include=None, limit=None, order=None):
        """Internal 'next-page' behaviour for pagination"""

        return self._client.call_api(
            method="get",
            path="/v3/users",
            query_params={
                "after": fields.StringField(after).to_api(),
                "include": fields.StringField(include).to_api(),
                "limit": fields.IntegerField(limit).to_api(),
                "order": fields.StringField(order).to_api(),
            },
            unpack=False,
        )

    def update(self):
        """Update user details.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/users/{user-id}
        """

        return self._client.call_api(
            method="put",
            path="/v3/users/{user-id}",
            body_params={
                "address": self._address.to_api(),
                "full_name": self._full_name.to_api(),
                "groups": self._group_ids.to_api(),
                "is_marketing_accepted": self._marketing_accepted.to_api(),
                "phone_number": self._phone_number.to_api(),
                "is_gtc_accepted": self._terms_accepted.to_api(),
                "is_totp_enabled": self._two_factor_authentication.to_api(),
                "username": self._username.to_api(),
            },
            path_params={"user-id": self._id.to_api()},
            unpack=self,
        )

    def validate_email(self):
        """Validate the user email.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/accounts/{accountID}/users/{user-id}/validate-email
        """

        return self._client.call_api(
            method="post",
            path="/v3/accounts/{accountID}/users/{user-id}/validate-email",
            path_params={
                "accountID": self._account_id.to_api(),
                "user-id": self._id.to_api(),
            },
            unpack=self,
        )
