"""
Entity module

This file is autogenerated from api specifications
"""

# Python 2 compatibility
from __future__ import unicode_literals
from builtins import str  # noqa
from builtins import super

from mbed_cloud.sdk.common.entity import Entity
from mbed_cloud.sdk.common import fields


class MyAccount(Entity):
    """Represents the `MyAccount` entity in Mbed Cloud"""

    # all fields available on this entity
    _fieldnames = [
        "address_line1",
        "address_line2",
        "aliases",
        "city",
        "company",
        "contact",
        "contract_number",
        "country",
        "created_at",
        "custom_fields",
        "customer_number",
        "display_name",
        "email",
        "end_market",
        "expiration_warning_threshold",
        "id",
        "idle_timeout",
        "limits",
        "mfa_status",
        "notification_emails",
        "parent_id",
        "password_policy",
        "phone_number",
        "policies",
        "postal_code",
        "reason",
        "reference_note",
        "sales_contact",
        "state",
        "status",
        "sub_accounts",
        "template_id",
        "tier",
        "updated_at",
        "upgraded_at",
    ]

    # common renames used when mapping {<API spec>: <SDK>}
    _renames = {}

    def __init__(
        self,
        _client=None,
        address_line1=None,
        address_line2=None,
        aliases=None,
        city=None,
        company=None,
        contact=None,
        contract_number=None,
        country=None,
        created_at=None,
        custom_fields=None,
        customer_number=None,
        display_name=None,
        email=None,
        end_market=None,
        expiration_warning_threshold=None,
        id=None,
        idle_timeout=None,
        limits=None,
        mfa_status=None,
        notification_emails=None,
        parent_id=None,
        password_policy=None,
        phone_number=None,
        policies=None,
        postal_code=None,
        reason=None,
        reference_note=None,
        sales_contact=None,
        state=None,
        status=None,
        sub_accounts=None,
        template_id=None,
        tier=None,
        updated_at=None,
        upgraded_at=None,
    ):
        """Creates a local `MyAccount` instance

        :param address_line1: Postal address line 1.
        :type address_line1: str
        :param address_line2: Postal address line 2.
        :type address_line2: str
        :param aliases: An array of aliases.
        :type aliases: list
        :param city: The city part of the postal address.
        :type city: str
        :param company: The name of the company.
        :type company: str
        :param contact: The name of the contact person for this account.
        :type contact: str
        :param contract_number: Contract number of the customer.
        :type contract_number: str
        :param country: The country part of the postal address.
        :type country: str
        :param created_at: Creation UTC time RFC3339.
        :type created_at: datetime
        :param custom_fields: Account's custom properties as key-value pairs.
        :type custom_fields: dict
        :param customer_number: Customer number of the customer.
        :type customer_number: str
        :param display_name: The display name for the account.
        :type display_name: str
        :param email: The company email address for this account.
        :type email: str
        :param end_market: Account end market.
        :type end_market: str
        :param expiration_warning_threshold: Indicates how many days (1-180) before account expiration a
            notification email should be sent.
        :type expiration_warning_threshold: str
        :param id: Account ID.
        :type id: str
        :param idle_timeout: The reference token expiration time in minutes for this account.
        :type idle_timeout: str
        :param limits: List of limits as key-value pairs if requested.
        :type limits: dict
        :param mfa_status: The enforcement status of the multi-factor authentication, either
            'enforced' or 'optional'.
        :type mfa_status: str
        :param notification_emails: A list of notification email addresses.
        :type notification_emails: list
        :param parent_id: The ID of the parent account, if it has any.
        :type parent_id: str
        :param password_policy: 
        :type password_policy: dict
        :param phone_number: The phone number of a representative of the company.
        :type phone_number: str
        :param policies: List of policies if requested.
        :type policies: list
        :param postal_code: The postal code part of the postal address.
        :type postal_code: str
        :param reason: A reason note for updating the status of the account
        :type reason: str
        :param reference_note: A reference note for updating the status of the account
        :type reference_note: str
        :param sales_contact: Email address of the sales contact.
        :type sales_contact: str
        :param state: The state part of the postal address.
        :type state: str
        :param status: The status of the account.
        :type status: str
        :param sub_accounts: List of sub accounts. Not available for developer users.
        :type sub_accounts: list
        :param template_id: Account template ID.
        :type template_id: str
        :param tier: The tier level of the account; '0': free tier, '1': commercial
            account, '2': partner tier. Other values are reserved for the
            future.
        :type tier: str
        :param updated_at: Last update UTC time RFC3339.
        :type updated_at: datetime
        :param upgraded_at: Time when upgraded to commercial account in UTC format RFC3339.
        :type upgraded_at: datetime
        """

        super().__init__(_client=_client)

        # inline imports for avoiding circular references and bulk imports

        from mbed_cloud.sdk._modules.accounts.entities.password_policy import (
            PasswordPolicy
        )
        from mbed_cloud.sdk._modules.accounts.entities.subtenant_account import (
            SubtenantAccount
        )

        from mbed_cloud.sdk.enums import MyAccountMfaStatusEnum
        from mbed_cloud.sdk.enums import MyAccountStatusEnum

        # fields
        self._address_line1 = fields.StringField(value=address_line1)
        self._address_line2 = fields.StringField(value=address_line2)
        self._aliases = fields.ListField(value=aliases)
        self._city = fields.StringField(value=city)
        self._company = fields.StringField(value=company)
        self._contact = fields.StringField(value=contact)
        self._contract_number = fields.StringField(value=contract_number)
        self._country = fields.StringField(value=country)
        self._created_at = fields.DateTimeField(value=created_at)
        self._custom_fields = fields.DictField(value=custom_fields)
        self._customer_number = fields.StringField(value=customer_number)
        self._display_name = fields.StringField(value=display_name)
        self._email = fields.StringField(value=email)
        self._end_market = fields.StringField(value=end_market)
        self._expiration_warning_threshold = fields.StringField(
            value=expiration_warning_threshold
        )
        self._id = fields.StringField(value=id)
        self._idle_timeout = fields.StringField(value=idle_timeout)
        self._limits = fields.DictField(value=limits)
        self._mfa_status = fields.StringField(
            value=mfa_status, enum=MyAccountMfaStatusEnum
        )
        self._notification_emails = fields.ListField(value=notification_emails)
        self._parent_id = fields.StringField(value=parent_id)
        self._password_policy = fields.DictField(
            value=password_policy, entity=PasswordPolicy
        )
        self._phone_number = fields.StringField(value=phone_number)
        self._policies = fields.ListField(value=policies)
        self._postal_code = fields.StringField(value=postal_code)
        self._reason = fields.StringField(value=reason)
        self._reference_note = fields.StringField(value=reference_note)
        self._sales_contact = fields.StringField(value=sales_contact)
        self._state = fields.StringField(value=state)
        self._status = fields.StringField(value=status, enum=MyAccountStatusEnum)
        self._sub_accounts = fields.ListField(
            value=sub_accounts, entity=SubtenantAccount
        )
        self._template_id = fields.StringField(value=template_id)
        self._tier = fields.StringField(value=tier)
        self._updated_at = fields.DateTimeField(value=updated_at)
        self._upgraded_at = fields.DateTimeField(value=upgraded_at)

    @property
    def address_line1(self):
        """Postal address line 1.
        
        api example: '110 Fulbourn Rd'
        
        :rtype: str
        """
        return self._address_line1.value

    @address_line1.setter
    def address_line1(self, value):
        """Set value of `address_line1`

        :param value: value to set
        :type value: str
        """
        self._address_line1.set(value)

    @property
    def address_line2(self):
        """Postal address line 2.
        
        api example: ' '
        
        :rtype: str
        """
        return self._address_line2.value

    @address_line2.setter
    def address_line2(self, value):
        """Set value of `address_line2`

        :param value: value to set
        :type value: str
        """
        self._address_line2.set(value)

    @property
    def aliases(self):
        """An array of aliases.
        
        :rtype: list
        """
        return self._aliases.value

    @aliases.setter
    def aliases(self, value):
        """Set value of `aliases`

        :param value: value to set
        :type value: list
        """
        self._aliases.set(value)

    @property
    def city(self):
        """The city part of the postal address.
        
        api example: 'Cambridge'
        
        :rtype: str
        """
        return self._city.value

    @city.setter
    def city(self, value):
        """Set value of `city`

        :param value: value to set
        :type value: str
        """
        self._city.set(value)

    @property
    def company(self):
        """The name of the company.
        
        api example: 'ARM Holdings Plc'
        
        :rtype: str
        """
        return self._company.value

    @company.setter
    def company(self, value):
        """Set value of `company`

        :param value: value to set
        :type value: str
        """
        self._company.set(value)

    @property
    def contact(self):
        """The name of the contact person for this account.
        
        api example: 'J. Doe'
        
        :rtype: str
        """
        return self._contact.value

    @contact.setter
    def contact(self, value):
        """Set value of `contact`

        :param value: value to set
        :type value: str
        """
        self._contact.set(value)

    @property
    def contract_number(self):
        """Contract number of the customer.
        
        api example: '1NX25_0001'
        
        :rtype: str
        """
        return self._contract_number.value

    @contract_number.setter
    def contract_number(self, value):
        """Set value of `contract_number`

        :param value: value to set
        :type value: str
        """
        self._contract_number.set(value)

    @property
    def country(self):
        """The country part of the postal address.
        
        api example: 'United Kingdom'
        
        :rtype: str
        """
        return self._country.value

    @country.setter
    def country(self, value):
        """Set value of `country`

        :param value: value to set
        :type value: str
        """
        self._country.set(value)

    @property
    def created_at(self):
        """Creation UTC time RFC3339.
        
        api example: '2018-02-13T09:35:20Z'
        
        :rtype: datetime
        """
        return self._created_at.value

    @created_at.setter
    def created_at(self, value):
        """Set value of `created_at`

        :param value: value to set
        :type value: datetime
        """
        self._created_at.set(value)

    @property
    def custom_fields(self):
        """Account's custom properties as key-value pairs.
        
        :rtype: dict
        """
        return self._custom_fields.value

    @custom_fields.setter
    def custom_fields(self, value):
        """Set value of `custom_fields`

        :param value: value to set
        :type value: dict
        """
        self._custom_fields.set(value)

    @property
    def customer_number(self):
        """Customer number of the customer.
        
        api example: '1NC25_0001'
        
        :rtype: str
        """
        return self._customer_number.value

    @customer_number.setter
    def customer_number(self, value):
        """Set value of `customer_number`

        :param value: value to set
        :type value: str
        """
        self._customer_number.set(value)

    @property
    def display_name(self):
        """The display name for the account.
        
        api example: 'ARM'
        
        :rtype: str
        """
        return self._display_name.value

    @display_name.setter
    def display_name(self, value):
        """Set value of `display_name`

        :param value: value to set
        :type value: str
        """
        self._display_name.set(value)

    @property
    def email(self):
        """The company email address for this account.
        
        api example: 'info@arm.com'
        
        :rtype: str
        """
        return self._email.value

    @email.setter
    def email(self, value):
        """Set value of `email`

        :param value: value to set
        :type value: str
        """
        self._email.set(value)

    @property
    def end_market(self):
        """Account end market.
        
        api example: 'IT'
        
        :rtype: str
        """
        return self._end_market.value

    @end_market.setter
    def end_market(self, value):
        """Set value of `end_market`

        :param value: value to set
        :type value: str
        """
        self._end_market.set(value)

    @property
    def expiration_warning_threshold(self):
        """Indicates how many days (1-180) before account expiration a notification email
        should be sent.
        
        api example: '180'
        
        :rtype: str
        """
        return self._expiration_warning_threshold.value

    @expiration_warning_threshold.setter
    def expiration_warning_threshold(self, value):
        """Set value of `expiration_warning_threshold`

        :param value: value to set
        :type value: str
        """
        self._expiration_warning_threshold.set(value)

    @property
    def id(self):
        """Account ID.
        
        api example: '01619571e2e90242ac12000600000000'
        
        :rtype: str
        """
        return self._id.value

    @id.setter
    def id(self, value):
        """Set value of `id`

        :param value: value to set
        :type value: str
        """
        self._id.set(value)

    @property
    def idle_timeout(self):
        """The reference token expiration time in minutes for this account.
        
        api example: '30'
        
        :rtype: str
        """
        return self._idle_timeout.value

    @idle_timeout.setter
    def idle_timeout(self, value):
        """Set value of `idle_timeout`

        :param value: value to set
        :type value: str
        """
        self._idle_timeout.set(value)

    @property
    def limits(self):
        """List of limits as key-value pairs if requested.
        
        :rtype: dict
        """
        return self._limits.value

    @limits.setter
    def limits(self, value):
        """Set value of `limits`

        :param value: value to set
        :type value: dict
        """
        self._limits.set(value)

    @property
    def mfa_status(self):
        """The enforcement status of the multi-factor authentication, either 'enforced'
        or 'optional'.
        
        :rtype: str
        """
        return self._mfa_status.value

    @mfa_status.setter
    def mfa_status(self, value):
        """Set value of `mfa_status`

        :param value: value to set
        :type value: str
        """
        self._mfa_status.set(value)

    @property
    def notification_emails(self):
        """A list of notification email addresses.
        
        :rtype: list
        """
        return self._notification_emails.value

    @notification_emails.setter
    def notification_emails(self, value):
        """Set value of `notification_emails`

        :param value: value to set
        :type value: list
        """
        self._notification_emails.set(value)

    @property
    def parent_id(self):
        """The ID of the parent account, if it has any.
        
        api example: '01619571dad80242ac12000600000000'
        
        :rtype: str
        """
        return self._parent_id.value

    @parent_id.setter
    def parent_id(self, value):
        """Set value of `parent_id`

        :param value: value to set
        :type value: str
        """
        self._parent_id.set(value)

    @property
    def password_policy(self):
        """
        
        :rtype: dict[PasswordPolicy]
        """
        return self._password_policy.value

    @password_policy.setter
    def password_policy(self, value):
        """Set value of `password_policy`

        :param value: value to set
        :type value: dict[PasswordPolicy]
        """
        self._password_policy.set(value)

    @property
    def phone_number(self):
        """The phone number of a representative of the company.
        
        api example: '+44 (1223) 400 400'
        
        :rtype: str
        """
        return self._phone_number.value

    @phone_number.setter
    def phone_number(self, value):
        """Set value of `phone_number`

        :param value: value to set
        :type value: str
        """
        self._phone_number.set(value)

    @property
    def policies(self):
        """List of policies if requested.
        
        :rtype: list
        """
        return self._policies.value

    @policies.setter
    def policies(self, value):
        """Set value of `policies`

        :param value: value to set
        :type value: list
        """
        self._policies.set(value)

    @property
    def postal_code(self):
        """The postal code part of the postal address.
        
        api example: 'CB1 9NJ'
        
        :rtype: str
        """
        return self._postal_code.value

    @postal_code.setter
    def postal_code(self, value):
        """Set value of `postal_code`

        :param value: value to set
        :type value: str
        """
        self._postal_code.set(value)

    @property
    def reason(self):
        """A reason note for updating the status of the account
        
        api example: 'Subscription paid.'
        
        :rtype: str
        """
        return self._reason.value

    @reason.setter
    def reason(self, value):
        """Set value of `reason`

        :param value: value to set
        :type value: str
        """
        self._reason.set(value)

    @property
    def reference_note(self):
        """A reference note for updating the status of the account
        
        api example: 'ARM-INT-0001'
        
        :rtype: str
        """
        return self._reference_note.value

    @reference_note.setter
    def reference_note(self, value):
        """Set value of `reference_note`

        :param value: value to set
        :type value: str
        """
        self._reference_note.set(value)

    @property
    def sales_contact(self):
        """Email address of the sales contact.
        
        api example: 'sales@arm.com'
        
        :rtype: str
        """
        return self._sales_contact.value

    @sales_contact.setter
    def sales_contact(self, value):
        """Set value of `sales_contact`

        :param value: value to set
        :type value: str
        """
        self._sales_contact.set(value)

    @property
    def state(self):
        """The state part of the postal address.
        
        api example: ' '
        
        :rtype: str
        """
        return self._state.value

    @state.setter
    def state(self, value):
        """Set value of `state`

        :param value: value to set
        :type value: str
        """
        self._state.set(value)

    @property
    def status(self):
        """The status of the account.
        
        api example: 'ACTIVE'
        
        :rtype: str
        """
        return self._status.value

    @status.setter
    def status(self, value):
        """Set value of `status`

        :param value: value to set
        :type value: str
        """
        self._status.set(value)

    @property
    def sub_accounts(self):
        """List of sub accounts. Not available for developer users.
        
        :rtype: list[SubtenantAccount]
        """
        return self._sub_accounts.value

    @sub_accounts.setter
    def sub_accounts(self, value):
        """Set value of `sub_accounts`

        :param value: value to set
        :type value: list[SubtenantAccount]
        """
        self._sub_accounts.set(value)

    @property
    def template_id(self):
        """Account template ID.
        
        api example: '01619571e7160242ac12000600000000'
        
        :rtype: str
        """
        return self._template_id.value

    @template_id.setter
    def template_id(self, value):
        """Set value of `template_id`

        :param value: value to set
        :type value: str
        """
        self._template_id.set(value)

    @property
    def tier(self):
        """The tier level of the account; '0': free tier, '1': commercial account, '2':
        partner tier. Other values are reserved for the future.
        
        api example: '1'
        
        :rtype: str
        """
        return self._tier.value

    @tier.setter
    def tier(self, value):
        """Set value of `tier`

        :param value: value to set
        :type value: str
        """
        self._tier.set(value)

    @property
    def updated_at(self):
        """Last update UTC time RFC3339.
        
        api example: '2018-02-14T15:24:14Z'
        
        :rtype: datetime
        """
        return self._updated_at.value

    @updated_at.setter
    def updated_at(self, value):
        """Set value of `updated_at`

        :param value: value to set
        :type value: datetime
        """
        self._updated_at.set(value)

    @property
    def upgraded_at(self):
        """Time when upgraded to commercial account in UTC format RFC3339.
        
        api example: '2018-02-14T15:24:14Z'
        
        :rtype: datetime
        """
        return self._upgraded_at.value

    @upgraded_at.setter
    def upgraded_at(self, value):
        """Set value of `upgraded_at`

        :param value: value to set
        :type value: datetime
        """
        self._upgraded_at.set(value)

    def get(self, include=None, properties=None):
        """Get account info.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/accounts/me
        
        :param include: Comma separated additional data to return. Currently supported:
            limits, policies, sub_accounts.
        :type include: str
        
        :param properties: Property name to be returned from account specific properties.
        :type properties: str
        
        :rtype: MyAccount
        """

        return self._client.call_api(
            method="get",
            path="/v3/accounts/me",
            query_params={
                "include": fields.StringField(include).to_api(),
                "properties": fields.StringField(properties).to_api(),
            },
            unpack=self,
        )

    def update(self):
        """Updates attributes of the account.

        api documentation:
        https://os.mbed.com/search/?q=service+apis+/v3/accounts/me
        
        :rtype: MyAccount
        """

        return self._client.call_api(
            method="put",
            path="/v3/accounts/me",
            body_params={
                "address_line1": self._address_line1.to_api(),
                "address_line2": self._address_line2.to_api(),
                "aliases": self._aliases.to_api(),
                "city": self._city.to_api(),
                "company": self._company.to_api(),
                "contact": self._contact.to_api(),
                "country": self._country.to_api(),
                "custom_fields": self._custom_fields.to_api(),
                "display_name": self._display_name.to_api(),
                "email": self._email.to_api(),
                "end_market": self._end_market.to_api(),
                "expiration_warning_threshold": self._expiration_warning_threshold.to_api(),
                "idle_timeout": self._idle_timeout.to_api(),
                "mfa_status": self._mfa_status.to_api(),
                "notification_emails": self._notification_emails.to_api(),
                "password_policy": self._password_policy.to_api(),
                "phone_number": self._phone_number.to_api(),
                "postal_code": self._postal_code.to_api(),
                "state": self._state.to_api(),
            },
            unpack=self,
        )
