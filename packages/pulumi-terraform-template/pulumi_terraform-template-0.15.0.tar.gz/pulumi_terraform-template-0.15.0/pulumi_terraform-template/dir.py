# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class Dir(pulumi.CustomResource):
    """
    Renders a directory containing templates into a separate directory of
    corresponding rendered files.
    
    `template_dir` is similar to [`template_file`](../d/file.html) but it walks
    a given source directory and treats every file it encounters as a template,
    rendering it to a corresponding file in the destination directory.
    
    ~> **Note** When working with local files, Terraform will detect the resource
    as having been deleted each time a configuration is applied on a new machine
    where the destination dir is not present and will generate a diff to create
    it. This may cause "noise" in diffs in environments where configurations are
    routinely applied by many different users or within automation systems.
    """
    def __init__(__self__, __name__, __opts__=None, destination_dir=None, source_dir=None, vars=None):
        """Create a Dir resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not destination_dir:
            raise TypeError('Missing required property destination_dir')
        elif not isinstance(destination_dir, basestring):
            raise TypeError('Expected property destination_dir to be a basestring')
        __self__.destination_dir = destination_dir
        """
        Path to the directory where the templated files will be written.
        """
        __props__['destinationDir'] = destination_dir

        if not source_dir:
            raise TypeError('Missing required property source_dir')
        elif not isinstance(source_dir, basestring):
            raise TypeError('Expected property source_dir to be a basestring')
        __self__.source_dir = source_dir
        """
        Path to the directory where the files to template reside.
        """
        __props__['sourceDir'] = source_dir

        if vars and not isinstance(vars, dict):
            raise TypeError('Expected property vars to be a dict')
        __self__.vars = vars
        """
        Variables for interpolation within the template. Note
        that variables must all be primitives. Direct references to lists or maps
        will cause a validation error.
        """
        __props__['vars'] = vars

        super(Dir, __self__).__init__(
            'terraform-template:index/dir:Dir',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'destinationDir' in outs:
            self.destination_dir = outs['destinationDir']
        if 'sourceDir' in outs:
            self.source_dir = outs['sourceDir']
        if 'vars' in outs:
            self.vars = outs['vars']
