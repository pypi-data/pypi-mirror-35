# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class CloudInitConfig(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, base64_encode=None, gzip=None, parts=None):
        """Create a CloudInitConfig resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if base64_encode and not isinstance(base64_encode, bool):
            raise TypeError('Expected property base64_encode to be a bool')
        __self__.base64_encode = base64_encode
        __props__['base64Encode'] = base64_encode

        if gzip and not isinstance(gzip, bool):
            raise TypeError('Expected property gzip to be a bool')
        __self__.gzip = gzip
        __props__['gzip'] = gzip

        if not parts:
            raise TypeError('Missing required property parts')
        elif not isinstance(parts, list):
            raise TypeError('Expected property parts to be a list')
        __self__.parts = parts
        __props__['parts'] = parts

        __self__.rendered = pulumi.runtime.UNKNOWN
        """
        rendered cloudinit configuration
        """

        super(CloudInitConfig, __self__).__init__(
            'terraform-template:index/cloudInitConfig:CloudInitConfig',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'base64Encode' in outs:
            self.base64_encode = outs['base64Encode']
        if 'gzip' in outs:
            self.gzip = outs['gzip']
        if 'parts' in outs:
            self.parts = outs['parts']
        if 'rendered' in outs:
            self.rendered = outs['rendered']
