kind: Service
apiVersion: v1
metadata:
  name: kafka-rest
  namespace: kafka
spec:
  selector:
    app: kafka-rest
  ports:
  - protocol: TCP
    port: 19092
    targetPort: 19092
---
kind: ConfigMap
metadata:
  name: pixy-config
  namespace: kafka
apiVersion: v1
data:
  default.yaml: |-
    # TCP address that gRPC API server should listen on.
    grpc_addr: 0.0.0.0:19091

    # TCP address that RESTful API server should listen on.
    tcp_addr: 0.0.0.0:19092

    # Unix domain socket address that RESTful API server should listen on.
    # Listening on a unix domain socket is disabled by default.
    # unix_addr: "/var/run/kafka-pixy.sock"

    # A map of cluster names to respective proxy configurations. The first proxy
    # in the map is considered to be `default`. It is used in API calls that do not
    # specify cluster name explicitly.
    proxies:

      # Name of a Kafka+ZooKeeper cluster. The only requirement to the name is that
      # it should be unique in this config file. The value of this parameter is
      # a configuration of a proxy to access the cluster.
      default:

        # Unique ID that identifies a Kafka-Pixy instance in both ZooKeeper and
        # Kafka. It is automatically generated by default and it is recommended to
        # leave it like that.
        # client_id: AUTOGENERATED

        # Kafka parameters section.
        kafka:

          # List of seed Kafka peers that Kafka-Pixy should access to resolve the
          # Kafka cluster topology.
          seed_peers:
            - bootstrap.kafka:9092

          # Version of the Kafka cluster. Supported versions are 0.8.2.2 - 1.0.0
          # version: 0.8.2.2
          # version: 1.0.1

        # ZooKeeper parameters section.
        zoo_keeper:

          # List of seed ZooKeeper peers that Kafka-Pixy should access to resolve the
          # ZooKeeper cluster topology.
          seed_peers:
            - pzoo.kafka:2181

          # Path to the directory where Kafka keeps its data.
          # chroot: "/"

        # Producer parameters section.
        producer:

          # Size of all buffered channels created by the producer module.
          channel_buffer_size: 4096

          # The maximum permitted size of a message (defaults to 1000000). Should be
          # set equal to or smaller than the broker's `message.max.bytes`.
          max_message_bytes: 1000000

          # The type of compression to use on messages. Allowed values are:
          # none, gzip, snappy, and lz4.
          compression: snappy

          # The best-effort number of bytes needed to trigger a flush.
          flush_bytes: 1048576

          # The best-effort frequency of flushes.
          flush_frequency: 500ms

          # How long to wait for the cluster to settle between retries.
          retry_backoff: 10s

          # The total number of times to retry sending a message before giving up.
          retry_max: 6

          # The level of acknowledgement reliability needed from the broker.
          # Allowed values are:
          #  * no_response:    the broker doesn't send any response, the TCP ACK
          #                    is all you get.
          #  * wait_for_local: the broker responds as soon as it commits to the
          #                    local disk.
          #  * wait_for_all:   the broker waits for all in-sync replicas to commit
          #                    before responding.
          required_acks: wait_for_all

          # Period of time that Kafka-Pixy should keep trying to submit buffered
          # messages to Kafka. It is recommended to make it large enough to survive
          # a ZooKeeper leader election in your setup.
          shutdown_timeout: 30s

        # Consumer parameters section.
        consumer:

          # Period of time that Kafka-Pixy should wait for an acknowledgement
          # before retrying.
          ack_timeout: 5m

          # Size of all buffered channels created by the consumer module.
          channel_buffer_size: 64

          # The number of bytes of messages to attempt to fetch for each
          # topic-partition in each fetch request. These bytes will be read into
          # memory for each partition, so this helps control the memory used by
          # the consumer. The fetch request size must be at least as large as
          # the maximum message size the server allows or else it is possible
          # for the producer to send messages larger than the consumer can fetch.
          fetch_max_bytes: 1048576

          # The maximum amount of time the server will block before answering
          # the fetch request if there isn't data immediately available.
          fetch_max_wait: 250ms

          # Consume request will wait at most this long until for a message from a
          # topic to become available before expiring.
          long_polling_timeout: 3s

          # The maximum number of unacknowledged messages allowed for a particular
          # group-topic-partition at a time. When this number is reached subsequent
          # consume requests will return long polling timeout errors, until some of
          # the pending messages are acknowledged.
          max_pending_messages: 300

          # The maximum number of retries Kafka-Pixy will make to offer an
          # unack message. Messages that exceeded the number of retries are
          # discarded by Kafka-Pixy and acknowledged in Kafka. Zero retries
          # means that messages will be offered just once.
          #
          # If you want Kafka-Pixy to retry indefinitely, then set this
          # parameter to -1.
          max_retries: -1

          # How frequently to commit offsets to Kafka.
          offsets_commit_interval: 500ms

          # If a request to a Kafka-Pixy fails for any reason, then it should wait this
          # long before retrying.
          retry_backoff: 500ms

          # Period of time that Kafka-Pixy should keep a subscription for a
          # topic by a group in absence of requests to from the consumer group.
          subscription_timeout: 15s

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-rest
  namespace: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-rest
  template:
    metadata:
      labels:
        app: kafka-rest
    spec:
      containers:
      - name: kafka-rest
        image: mailgun/kafka-pixy
        command: ["sh", "-c", "/usr/bin/kafka-pixy -config /root/pixy/default.yaml; sleep 6000"]
        ports:
        - containerPort: 19092
        volumeMounts:
          - name: pixy-default-yaml
            mountPath: /root/pixy/
#            mountPath: /root/default.yaml
#            subPath: default.yaml
      volumes:
      - name: pixy-default-yaml
        configMap:
          name: pixy-config
          items:
          - key: default.yaml
            path: default.yaml
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: kafka-rest
  namespace: kafka
  annotations:
    ingress.kubernetes.io/rewrite-target: /
    ingress.kubernetes.io/ssl-redirect: false
    ingress.kubernetes.io/app-root: /
spec:
  rules:
  - host: rest.kafka.{{ settings.provision.domain }}
    http:
      paths:
      - backend:
          serviceName: kafka-rest
          servicePort: 19092