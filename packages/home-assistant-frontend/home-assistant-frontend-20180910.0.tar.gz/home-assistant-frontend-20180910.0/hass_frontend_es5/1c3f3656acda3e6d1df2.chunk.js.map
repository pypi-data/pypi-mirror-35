{"version":3,"sources":["webpack:///./src/common/auth/external_auth.js"],"names":["window","externalApp","webkit","Error","ExternalAuth","hassUrl","this","_this","__proto__","Object","getPrototypeOf","call","data","access_token","expires","home_assistant_js_websocket__WEBPACK_IMPORTED_MODULE_0__","_createClass","key","value","_ref","_asyncToGenerator","regeneratorRuntime","mark","_callee","responseProm","callbackPayload","tokens","wrap","_context","prev","next","Promise","resolve","externalAuthSetToken","callback","getExternalAuth","messageHandlers","postMessage","expires_in","Date","now","externalAuthRevokeToken","revokeExternalAuth"],"mappings":"8nBAQA,IAAKA,OAAOC,cAAgBD,OAAOE,OACjC,MAAM,IAAIC,MAAM,qFAGGC,cACnB,SAAAA,EAAYC,oCAASD,GAATC,0DAASC,MAAA,IAAAC,oKAAAD,MAAAF,EAAAI,WAAAC,OAAAC,eAAAN,IAAAO,KAAAL,OAAA,OAGnBC,EAAKK,MACHP,UACAQ,aAAc,GAEdC,QAAS,GAPQP,qUADmBQ,EAAA,GAAAC,EAAAZ,IAAAa,IAAA,qBAAAC,OAAAC,EAAAC,EAAAC,mBAAAC,KAAA,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAL,mBAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAahCN,EAAe,IAAIO,QAAQ,SAACC,GAAchC,OAAAiC,qBAA6BD,aAGvE,gBAEAP,GAAoBS,SAzBH,wBA2BnBlC,OAAOC,YACTD,OAAOC,YAAYkC,gBAAgBV,GAEnCzB,OAAOE,OAAOkC,gBAAgBD,gBAAgBE,YAAYZ,YAQvCD,SAAfE,SAENpB,KAAKM,KAAKC,aAAea,EAAOb,aAChCP,KAAKM,KAAKE,QAA+B,IAApBY,EAAOY,WAAqBC,KAAKC,8PAIhDhB,EAAe,IAAIO,QAAQ,SAACC,GAAchC,OAAAyC,wBAAgCT,aAG1E,gBAEAP,GAAoBS,SAjDA,2BAmDtBlC,OAAOC,YACTD,OAAOC,YAAYyC,mBAAmBjB,GAEtCzB,OAAOE,OAAOkC,gBAAgBM,mBAAmBL,YAAYZ,YAGzDD,iGAjBgDgB,MAlChBrB,EAArBf,GAmDXoB","file":"1c3f3656acda3e6d1df2.chunk.js","sourcesContent":["/**\n * Auth class that connects to a native app for authentication.\n */\nimport { Auth } from 'home-assistant-js-websocket';\n\nconst CALLBACK_SET_TOKEN = 'externalAuthSetToken';\nconst CALLBACK_REVOKE_TOKEN = 'externalAuthRevokeToken';\n\nif (!window.externalApp && !window.webkit) {\n  throw new Error('External auth requires either externalApp or webkit defined on Window object.');\n}\n\nexport default class ExternalAuth extends Auth {\n  constructor(hassUrl) {\n    super();\n\n    this.data = {\n      hassUrl,\n      access_token: '',\n      // This will trigger connection to do a refresh right away\n      expires: 0,\n    };\n  }\n\n  async refreshAccessToken() {\n    const responseProm = new Promise((resolve) => { window[CALLBACK_SET_TOKEN] = resolve; });\n\n    // Allow promise to set resolve on window object.\n    await 0;\n\n    const callbackPayload = { callback: CALLBACK_SET_TOKEN };\n\n    if (window.externalApp) {\n      window.externalApp.getExternalAuth(callbackPayload);\n    } else {\n      window.webkit.messageHandlers.getExternalAuth.postMessage(callbackPayload);\n    }\n\n    // Response we expect back:\n    // {\n    //   \"access_token\": \"qwere\",\n    //   \"expires_in\": 1800\n    // }\n    const tokens = await responseProm;\n\n    this.data.access_token = tokens.access_token;\n    this.data.expires = (tokens.expires_in * 1000) + Date.now();\n  }\n\n  async revoke() {\n    const responseProm = new Promise((resolve) => { window[CALLBACK_REVOKE_TOKEN] = resolve; });\n\n    // Allow promise to set resolve on window object.\n    await 0;\n\n    const callbackPayload = { callback: CALLBACK_REVOKE_TOKEN };\n\n    if (window.externalApp) {\n      window.externalApp.revokeExternalAuth(callbackPayload);\n    } else {\n      window.webkit.messageHandlers.revokeExternalAuth.postMessage(callbackPayload);\n    }\n\n    await responseProm;\n  }\n}\n"],"sourceRoot":""}