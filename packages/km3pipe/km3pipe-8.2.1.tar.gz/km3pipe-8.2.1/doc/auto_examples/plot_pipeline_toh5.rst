

.. _sphx_glr_auto_examples_plot_pipeline_toh5.py:


======================
ToHDF5 Pipeline example
======================




.. code-block:: python


    # Authors: Moritz Lotze <mlotze@km3net.de>
    # License: BSD-3
    # Date: 2018-07-12
    # Status: Under construction...

    from __future__ import absolute_import, print_function, division

    import tables as tb

    from km3pipe import Pipeline
    from km3pipe.io import EvtPump, HDF5Sink

    from km3modules.common import StatusBar







Preparation
-----------
Let's define the inputs / outputs first -- those would be coming from a CLI
parser in practice.



.. code-block:: python


    N_EVENTS = 200000
    IN_FNAME = 'data/numu_cc.evt'
    OUT_FNAME = 'data/numu_cc.h5'







Also, in this case we don't really want to dump the data onto disk, so we
create an in-memory-ony file, and pass it as the ``h5file`` arg to the
hdf5sink. to actually write out a file, just specify an outfile name
(commented out here).



.. code-block:: python


    OUTFILE = tb.open_file(
        # create the file in memory only
        OUT_FNAME,
        'w',
        driver="H5FD_CORE",
        driver_core_backing_store=0,
    )







Setting up the pipeline
-----------------------



.. code-block:: python


    pipe = Pipeline(timeit=True)
    pipe.attach(EvtPump, filename=IN_FNAME)
    pipe.attach(StatusBar, every=25)
    pipe.attach(
        HDF5Sink,
        # filename=OUT_FNAME,
        h5file=OUTFILE,
    )





.. rst-class:: sphx-glr-script-out

 Out::

    km3pipe.io.evt.EvtPump: Automatic tag parsing enabled.
    km3pipe.io.evt.EvtPump: Opening data/numu_cc.evt


Draining the pipeline
---------------------



.. code-block:: python


    pipe.drain(N_EVENTS)




.. rst-class:: sphx-glr-script-out

 Out::

    Pipeline and module initialisation took 0.003s (CPU 0.003s).
    --------------------------[ Blob      25 ]---------------------------
    --------------------------[ Blob      50 ]---------------------------
    --------------------------[ Blob      75 ]---------------------------
    --------------------------[ Blob     100 ]---------------------------
    ================================[ . ]================================
    km3pipe.io.hdf5.HDF5Sink: HDF5 file written to: dump.h5
    ============================================================
    109 cycles drained in 2.082129s (CPU 2.074914s). Memory peak: 197.88 MB
      wall  mean: 0.018885s  medi: 0.018533s  min: 0.016565s  max: 0.030779s  std: 0.001783s
      CPU   mean: 0.018848s  medi: 0.018498s  min: 0.016530s  max: 0.030715s  std: 0.001776s
    EvtPump - process: 1.742s (CPU 1.739s) - finish: 0.000s (CPU 0.000s)
      wall  mean: 0.015982s  medi: 0.015741s  min: 0.013783s  max: 0.026784s  std: 0.001536s
      CPU   mean: 0.015955s  medi: 0.015722s  min: 0.013766s  max: 0.026730s  std: 0.001530s
    StatusBar - process: 0.000s (CPU 0.000s) - finish: 0.000s (CPU 0.000s)
      wall  mean: 0.000073s  medi: 0.000074s  min: 0.000054s  max: 0.000091s  std: 0.000017s
      CPU   mean: 0.000077s  medi: 0.000081s  min: 0.000055s  max: 0.000091s  std: 0.000014s
    HDF5Sink - process: 0.266s (CPU 0.265s) - finish: 0.015s (CPU 0.012s)
      wall  mean: 0.002441s  medi: 0.002376s  min: 0.002021s  max: 0.005893s  std: 0.000394s
      CPU   mean: 0.002435s  medi: 0.002373s  min: 0.002024s  max: 0.005879s  std: 0.000393s


**Total running time of the script:** ( 0 minutes  2.084 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_pipeline_toh5.py <plot_pipeline_toh5.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_pipeline_toh5.ipynb <plot_pipeline_toh5.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
